
USBtoN64v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000941c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  080095ec  080095ec  000195ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009b68  08009b68  00019b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009b70  08009b70  00019b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009b74  08009b74  00019b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e0  20000000  08009b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000760  200000e0  08009c58  000200e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000840  08009c58  00020840  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020839  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000414d  00000000  00000000  00040949  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d80  00000000  00000000  00044a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bd8  00000000  00000000  00045818  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007cea  00000000  00000000  000463f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004dc0  00000000  00000000  0004e0da  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00052e9a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003d84  00000000  00000000  00052f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000009c  00000000  00000000  00056c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  00056d38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080095d4 	.word	0x080095d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000e4 	.word	0x200000e4
 800020c:	080095d4 	.word	0x080095d4

08000210 <my_wait_us_asm>:
.globl my_wait_us_asm
.type  my_wait_us_asm, %function

my_wait_us_asm:
WAIT_1_US:
    ADD     R1, R2, #0      // clock cycle 1
 8000210:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000214:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000218:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800021c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000220:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000224:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000228:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800022c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000230:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 10
 8000234:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000238:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800023c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000240:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000244:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000248:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800024c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000250:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000254:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000258:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 20
 800025c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000260:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000264:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000268:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800026c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000270:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000274:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000278:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800027c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000280:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 30
 8000284:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000288:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800028c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000290:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000294:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000298:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800029c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002a0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002a4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002a8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 40
 80002ac:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002b0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002b4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002b8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002bc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002c0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002c4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002c8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002cc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002d0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 50
 80002d4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002d8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002dc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002e0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002e4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002e8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002ec:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002f0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002f4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002f8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 60
 80002fc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000300:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000304:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000308:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800030c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000310:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000314:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000318:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800031c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000320:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 70
 8000324:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000328:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800032c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000330:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000334:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000338:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800033c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000340:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000344:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000348:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 80
 800034c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000350:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000354:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000358:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800035c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000360:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000364:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000368:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800036c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000370:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 90
 8000374:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000378:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800037c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000380:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000384:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000388:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800038c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000390:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000394:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000398:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 100
 800039c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003a0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003a4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003a8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003ac:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003b0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003b4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003b8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003bc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003c0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 110
 80003c4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003c8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003cc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003d0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003d4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003d8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003dc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003e0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003e4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003e8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 120
 80003ec:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003f0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003f4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003f8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003fc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000400:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000404:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000408:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800040c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000410:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 130
 8000414:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000418:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800041c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000420:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000424:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000428:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800042c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000430:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000434:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000438:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 140
 800043c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000440:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000444:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000448:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800044c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000450:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000454:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000458:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800045c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000460:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 150
 8000464:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000468:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800046c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000470:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000474:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000478:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800047c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000480:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000484:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000488:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 160
 800048c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000490:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000494:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000498:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800049c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80004a0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0		// 166
 80004a4:	f102 0100 	add.w	r1, r2, #0

    SUBS    R0, R0, #1      // clock cycle 167
 80004a8:	3801      	subs	r0, #1
    BGT     WAIT_1_US       // clock cycle 168
 80004aa:	f73f aeb1 	bgt.w	8000210 <my_wait_us_asm>

    BX      LR      // return
 80004ae:	4770      	bx	lr

080004b0 <memchr>:
 80004b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004b4:	2a10      	cmp	r2, #16
 80004b6:	db2b      	blt.n	8000510 <memchr+0x60>
 80004b8:	f010 0f07 	tst.w	r0, #7
 80004bc:	d008      	beq.n	80004d0 <memchr+0x20>
 80004be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004c2:	3a01      	subs	r2, #1
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d02d      	beq.n	8000524 <memchr+0x74>
 80004c8:	f010 0f07 	tst.w	r0, #7
 80004cc:	b342      	cbz	r2, 8000520 <memchr+0x70>
 80004ce:	d1f6      	bne.n	80004be <memchr+0xe>
 80004d0:	b4f0      	push	{r4, r5, r6, r7}
 80004d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80004d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80004da:	f022 0407 	bic.w	r4, r2, #7
 80004de:	f07f 0700 	mvns.w	r7, #0
 80004e2:	2300      	movs	r3, #0
 80004e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80004e8:	3c08      	subs	r4, #8
 80004ea:	ea85 0501 	eor.w	r5, r5, r1
 80004ee:	ea86 0601 	eor.w	r6, r6, r1
 80004f2:	fa85 f547 	uadd8	r5, r5, r7
 80004f6:	faa3 f587 	sel	r5, r3, r7
 80004fa:	fa86 f647 	uadd8	r6, r6, r7
 80004fe:	faa5 f687 	sel	r6, r5, r7
 8000502:	b98e      	cbnz	r6, 8000528 <memchr+0x78>
 8000504:	d1ee      	bne.n	80004e4 <memchr+0x34>
 8000506:	bcf0      	pop	{r4, r5, r6, r7}
 8000508:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800050c:	f002 0207 	and.w	r2, r2, #7
 8000510:	b132      	cbz	r2, 8000520 <memchr+0x70>
 8000512:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000516:	3a01      	subs	r2, #1
 8000518:	ea83 0301 	eor.w	r3, r3, r1
 800051c:	b113      	cbz	r3, 8000524 <memchr+0x74>
 800051e:	d1f8      	bne.n	8000512 <memchr+0x62>
 8000520:	2000      	movs	r0, #0
 8000522:	4770      	bx	lr
 8000524:	3801      	subs	r0, #1
 8000526:	4770      	bx	lr
 8000528:	2d00      	cmp	r5, #0
 800052a:	bf06      	itte	eq
 800052c:	4635      	moveq	r5, r6
 800052e:	3803      	subeq	r0, #3
 8000530:	3807      	subne	r0, #7
 8000532:	f015 0f01 	tst.w	r5, #1
 8000536:	d107      	bne.n	8000548 <memchr+0x98>
 8000538:	3001      	adds	r0, #1
 800053a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800053e:	bf02      	ittt	eq
 8000540:	3001      	addeq	r0, #1
 8000542:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000546:	3001      	addeq	r0, #1
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	3801      	subs	r0, #1
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <__aeabi_uldivmod>:
 8000550:	b953      	cbnz	r3, 8000568 <__aeabi_uldivmod+0x18>
 8000552:	b94a      	cbnz	r2, 8000568 <__aeabi_uldivmod+0x18>
 8000554:	2900      	cmp	r1, #0
 8000556:	bf08      	it	eq
 8000558:	2800      	cmpeq	r0, #0
 800055a:	bf1c      	itt	ne
 800055c:	f04f 31ff 	movne.w	r1, #4294967295
 8000560:	f04f 30ff 	movne.w	r0, #4294967295
 8000564:	f000 b97a 	b.w	800085c <__aeabi_idiv0>
 8000568:	f1ad 0c08 	sub.w	ip, sp, #8
 800056c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000570:	f000 f806 	bl	8000580 <__udivmoddi4>
 8000574:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800057c:	b004      	add	sp, #16
 800057e:	4770      	bx	lr

08000580 <__udivmoddi4>:
 8000580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000584:	468c      	mov	ip, r1
 8000586:	460d      	mov	r5, r1
 8000588:	4604      	mov	r4, r0
 800058a:	9e08      	ldr	r6, [sp, #32]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d151      	bne.n	8000634 <__udivmoddi4+0xb4>
 8000590:	428a      	cmp	r2, r1
 8000592:	4617      	mov	r7, r2
 8000594:	d96d      	bls.n	8000672 <__udivmoddi4+0xf2>
 8000596:	fab2 fe82 	clz	lr, r2
 800059a:	f1be 0f00 	cmp.w	lr, #0
 800059e:	d00b      	beq.n	80005b8 <__udivmoddi4+0x38>
 80005a0:	f1ce 0c20 	rsb	ip, lr, #32
 80005a4:	fa01 f50e 	lsl.w	r5, r1, lr
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	fa02 f70e 	lsl.w	r7, r2, lr
 80005b0:	ea4c 0c05 	orr.w	ip, ip, r5
 80005b4:	fa00 f40e 	lsl.w	r4, r0, lr
 80005b8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80005bc:	0c25      	lsrs	r5, r4, #16
 80005be:	fbbc f8fa 	udiv	r8, ip, sl
 80005c2:	fa1f f987 	uxth.w	r9, r7
 80005c6:	fb0a cc18 	mls	ip, sl, r8, ip
 80005ca:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80005ce:	fb08 f309 	mul.w	r3, r8, r9
 80005d2:	42ab      	cmp	r3, r5
 80005d4:	d90a      	bls.n	80005ec <__udivmoddi4+0x6c>
 80005d6:	19ed      	adds	r5, r5, r7
 80005d8:	f108 32ff 	add.w	r2, r8, #4294967295
 80005dc:	f080 8123 	bcs.w	8000826 <__udivmoddi4+0x2a6>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	f240 8120 	bls.w	8000826 <__udivmoddi4+0x2a6>
 80005e6:	f1a8 0802 	sub.w	r8, r8, #2
 80005ea:	443d      	add	r5, r7
 80005ec:	1aed      	subs	r5, r5, r3
 80005ee:	b2a4      	uxth	r4, r4
 80005f0:	fbb5 f0fa 	udiv	r0, r5, sl
 80005f4:	fb0a 5510 	mls	r5, sl, r0, r5
 80005f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80005fc:	fb00 f909 	mul.w	r9, r0, r9
 8000600:	45a1      	cmp	r9, r4
 8000602:	d909      	bls.n	8000618 <__udivmoddi4+0x98>
 8000604:	19e4      	adds	r4, r4, r7
 8000606:	f100 33ff 	add.w	r3, r0, #4294967295
 800060a:	f080 810a 	bcs.w	8000822 <__udivmoddi4+0x2a2>
 800060e:	45a1      	cmp	r9, r4
 8000610:	f240 8107 	bls.w	8000822 <__udivmoddi4+0x2a2>
 8000614:	3802      	subs	r0, #2
 8000616:	443c      	add	r4, r7
 8000618:	eba4 0409 	sub.w	r4, r4, r9
 800061c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000620:	2100      	movs	r1, #0
 8000622:	2e00      	cmp	r6, #0
 8000624:	d061      	beq.n	80006ea <__udivmoddi4+0x16a>
 8000626:	fa24 f40e 	lsr.w	r4, r4, lr
 800062a:	2300      	movs	r3, #0
 800062c:	6034      	str	r4, [r6, #0]
 800062e:	6073      	str	r3, [r6, #4]
 8000630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000634:	428b      	cmp	r3, r1
 8000636:	d907      	bls.n	8000648 <__udivmoddi4+0xc8>
 8000638:	2e00      	cmp	r6, #0
 800063a:	d054      	beq.n	80006e6 <__udivmoddi4+0x166>
 800063c:	2100      	movs	r1, #0
 800063e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000642:	4608      	mov	r0, r1
 8000644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000648:	fab3 f183 	clz	r1, r3
 800064c:	2900      	cmp	r1, #0
 800064e:	f040 808e 	bne.w	800076e <__udivmoddi4+0x1ee>
 8000652:	42ab      	cmp	r3, r5
 8000654:	d302      	bcc.n	800065c <__udivmoddi4+0xdc>
 8000656:	4282      	cmp	r2, r0
 8000658:	f200 80fa 	bhi.w	8000850 <__udivmoddi4+0x2d0>
 800065c:	1a84      	subs	r4, r0, r2
 800065e:	eb65 0503 	sbc.w	r5, r5, r3
 8000662:	2001      	movs	r0, #1
 8000664:	46ac      	mov	ip, r5
 8000666:	2e00      	cmp	r6, #0
 8000668:	d03f      	beq.n	80006ea <__udivmoddi4+0x16a>
 800066a:	e886 1010 	stmia.w	r6, {r4, ip}
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	b912      	cbnz	r2, 800067a <__udivmoddi4+0xfa>
 8000674:	2701      	movs	r7, #1
 8000676:	fbb7 f7f2 	udiv	r7, r7, r2
 800067a:	fab7 fe87 	clz	lr, r7
 800067e:	f1be 0f00 	cmp.w	lr, #0
 8000682:	d134      	bne.n	80006ee <__udivmoddi4+0x16e>
 8000684:	1beb      	subs	r3, r5, r7
 8000686:	0c3a      	lsrs	r2, r7, #16
 8000688:	fa1f fc87 	uxth.w	ip, r7
 800068c:	2101      	movs	r1, #1
 800068e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000692:	0c25      	lsrs	r5, r4, #16
 8000694:	fb02 3318 	mls	r3, r2, r8, r3
 8000698:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800069c:	fb0c f308 	mul.w	r3, ip, r8
 80006a0:	42ab      	cmp	r3, r5
 80006a2:	d907      	bls.n	80006b4 <__udivmoddi4+0x134>
 80006a4:	19ed      	adds	r5, r5, r7
 80006a6:	f108 30ff 	add.w	r0, r8, #4294967295
 80006aa:	d202      	bcs.n	80006b2 <__udivmoddi4+0x132>
 80006ac:	42ab      	cmp	r3, r5
 80006ae:	f200 80d1 	bhi.w	8000854 <__udivmoddi4+0x2d4>
 80006b2:	4680      	mov	r8, r0
 80006b4:	1aed      	subs	r5, r5, r3
 80006b6:	b2a3      	uxth	r3, r4
 80006b8:	fbb5 f0f2 	udiv	r0, r5, r2
 80006bc:	fb02 5510 	mls	r5, r2, r0, r5
 80006c0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80006c4:	fb0c fc00 	mul.w	ip, ip, r0
 80006c8:	45a4      	cmp	ip, r4
 80006ca:	d907      	bls.n	80006dc <__udivmoddi4+0x15c>
 80006cc:	19e4      	adds	r4, r4, r7
 80006ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80006d2:	d202      	bcs.n	80006da <__udivmoddi4+0x15a>
 80006d4:	45a4      	cmp	ip, r4
 80006d6:	f200 80b8 	bhi.w	800084a <__udivmoddi4+0x2ca>
 80006da:	4618      	mov	r0, r3
 80006dc:	eba4 040c 	sub.w	r4, r4, ip
 80006e0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006e4:	e79d      	b.n	8000622 <__udivmoddi4+0xa2>
 80006e6:	4631      	mov	r1, r6
 80006e8:	4630      	mov	r0, r6
 80006ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ee:	f1ce 0420 	rsb	r4, lr, #32
 80006f2:	fa05 f30e 	lsl.w	r3, r5, lr
 80006f6:	fa07 f70e 	lsl.w	r7, r7, lr
 80006fa:	fa20 f804 	lsr.w	r8, r0, r4
 80006fe:	0c3a      	lsrs	r2, r7, #16
 8000700:	fa25 f404 	lsr.w	r4, r5, r4
 8000704:	ea48 0803 	orr.w	r8, r8, r3
 8000708:	fbb4 f1f2 	udiv	r1, r4, r2
 800070c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000710:	fb02 4411 	mls	r4, r2, r1, r4
 8000714:	fa1f fc87 	uxth.w	ip, r7
 8000718:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800071c:	fb01 f30c 	mul.w	r3, r1, ip
 8000720:	42ab      	cmp	r3, r5
 8000722:	fa00 f40e 	lsl.w	r4, r0, lr
 8000726:	d909      	bls.n	800073c <__udivmoddi4+0x1bc>
 8000728:	19ed      	adds	r5, r5, r7
 800072a:	f101 30ff 	add.w	r0, r1, #4294967295
 800072e:	f080 808a 	bcs.w	8000846 <__udivmoddi4+0x2c6>
 8000732:	42ab      	cmp	r3, r5
 8000734:	f240 8087 	bls.w	8000846 <__udivmoddi4+0x2c6>
 8000738:	3902      	subs	r1, #2
 800073a:	443d      	add	r5, r7
 800073c:	1aeb      	subs	r3, r5, r3
 800073e:	fa1f f588 	uxth.w	r5, r8
 8000742:	fbb3 f0f2 	udiv	r0, r3, r2
 8000746:	fb02 3310 	mls	r3, r2, r0, r3
 800074a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800074e:	fb00 f30c 	mul.w	r3, r0, ip
 8000752:	42ab      	cmp	r3, r5
 8000754:	d907      	bls.n	8000766 <__udivmoddi4+0x1e6>
 8000756:	19ed      	adds	r5, r5, r7
 8000758:	f100 38ff 	add.w	r8, r0, #4294967295
 800075c:	d26f      	bcs.n	800083e <__udivmoddi4+0x2be>
 800075e:	42ab      	cmp	r3, r5
 8000760:	d96d      	bls.n	800083e <__udivmoddi4+0x2be>
 8000762:	3802      	subs	r0, #2
 8000764:	443d      	add	r5, r7
 8000766:	1aeb      	subs	r3, r5, r3
 8000768:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800076c:	e78f      	b.n	800068e <__udivmoddi4+0x10e>
 800076e:	f1c1 0720 	rsb	r7, r1, #32
 8000772:	fa22 f807 	lsr.w	r8, r2, r7
 8000776:	408b      	lsls	r3, r1
 8000778:	fa05 f401 	lsl.w	r4, r5, r1
 800077c:	ea48 0303 	orr.w	r3, r8, r3
 8000780:	fa20 fe07 	lsr.w	lr, r0, r7
 8000784:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000788:	40fd      	lsrs	r5, r7
 800078a:	ea4e 0e04 	orr.w	lr, lr, r4
 800078e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000792:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000796:	fb0c 5519 	mls	r5, ip, r9, r5
 800079a:	fa1f f883 	uxth.w	r8, r3
 800079e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80007a2:	fb09 f408 	mul.w	r4, r9, r8
 80007a6:	42ac      	cmp	r4, r5
 80007a8:	fa02 f201 	lsl.w	r2, r2, r1
 80007ac:	fa00 fa01 	lsl.w	sl, r0, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0x244>
 80007b2:	18ed      	adds	r5, r5, r3
 80007b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80007b8:	d243      	bcs.n	8000842 <__udivmoddi4+0x2c2>
 80007ba:	42ac      	cmp	r4, r5
 80007bc:	d941      	bls.n	8000842 <__udivmoddi4+0x2c2>
 80007be:	f1a9 0902 	sub.w	r9, r9, #2
 80007c2:	441d      	add	r5, r3
 80007c4:	1b2d      	subs	r5, r5, r4
 80007c6:	fa1f fe8e 	uxth.w	lr, lr
 80007ca:	fbb5 f0fc 	udiv	r0, r5, ip
 80007ce:	fb0c 5510 	mls	r5, ip, r0, r5
 80007d2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80007d6:	fb00 f808 	mul.w	r8, r0, r8
 80007da:	45a0      	cmp	r8, r4
 80007dc:	d907      	bls.n	80007ee <__udivmoddi4+0x26e>
 80007de:	18e4      	adds	r4, r4, r3
 80007e0:	f100 35ff 	add.w	r5, r0, #4294967295
 80007e4:	d229      	bcs.n	800083a <__udivmoddi4+0x2ba>
 80007e6:	45a0      	cmp	r8, r4
 80007e8:	d927      	bls.n	800083a <__udivmoddi4+0x2ba>
 80007ea:	3802      	subs	r0, #2
 80007ec:	441c      	add	r4, r3
 80007ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007f2:	eba4 0408 	sub.w	r4, r4, r8
 80007f6:	fba0 8902 	umull	r8, r9, r0, r2
 80007fa:	454c      	cmp	r4, r9
 80007fc:	46c6      	mov	lr, r8
 80007fe:	464d      	mov	r5, r9
 8000800:	d315      	bcc.n	800082e <__udivmoddi4+0x2ae>
 8000802:	d012      	beq.n	800082a <__udivmoddi4+0x2aa>
 8000804:	b156      	cbz	r6, 800081c <__udivmoddi4+0x29c>
 8000806:	ebba 030e 	subs.w	r3, sl, lr
 800080a:	eb64 0405 	sbc.w	r4, r4, r5
 800080e:	fa04 f707 	lsl.w	r7, r4, r7
 8000812:	40cb      	lsrs	r3, r1
 8000814:	431f      	orrs	r7, r3
 8000816:	40cc      	lsrs	r4, r1
 8000818:	6037      	str	r7, [r6, #0]
 800081a:	6074      	str	r4, [r6, #4]
 800081c:	2100      	movs	r1, #0
 800081e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000822:	4618      	mov	r0, r3
 8000824:	e6f8      	b.n	8000618 <__udivmoddi4+0x98>
 8000826:	4690      	mov	r8, r2
 8000828:	e6e0      	b.n	80005ec <__udivmoddi4+0x6c>
 800082a:	45c2      	cmp	sl, r8
 800082c:	d2ea      	bcs.n	8000804 <__udivmoddi4+0x284>
 800082e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000832:	eb69 0503 	sbc.w	r5, r9, r3
 8000836:	3801      	subs	r0, #1
 8000838:	e7e4      	b.n	8000804 <__udivmoddi4+0x284>
 800083a:	4628      	mov	r0, r5
 800083c:	e7d7      	b.n	80007ee <__udivmoddi4+0x26e>
 800083e:	4640      	mov	r0, r8
 8000840:	e791      	b.n	8000766 <__udivmoddi4+0x1e6>
 8000842:	4681      	mov	r9, r0
 8000844:	e7be      	b.n	80007c4 <__udivmoddi4+0x244>
 8000846:	4601      	mov	r1, r0
 8000848:	e778      	b.n	800073c <__udivmoddi4+0x1bc>
 800084a:	3802      	subs	r0, #2
 800084c:	443c      	add	r4, r7
 800084e:	e745      	b.n	80006dc <__udivmoddi4+0x15c>
 8000850:	4608      	mov	r0, r1
 8000852:	e708      	b.n	8000666 <__udivmoddi4+0xe6>
 8000854:	f1a8 0802 	sub.w	r8, r8, #2
 8000858:	443d      	add	r5, r7
 800085a:	e72b      	b.n	80006b4 <__udivmoddi4+0x134>

0800085c <__aeabi_idiv0>:
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop

08000860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <HAL_Init+0x40>)
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <HAL_Init+0x40>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000870:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <HAL_Init+0x40>)
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <HAL_Init+0x40>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800087a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_Init+0x40>)
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_Init+0x40>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 f947 	bl	8000b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	2001      	movs	r0, #1
 8000890:	f000 f808 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f007 faca 	bl	8007e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023c00 	.word	0x40023c00

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_InitTick+0x54>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x58>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80008be:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f95f 	bl	8000b86 <HAL_SYSTICK_Config>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00e      	b.n	80008f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d80a      	bhi.n	80008ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f000 f927 	bl	8000b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e4:	4a06      	ldr	r2, [pc, #24]	; (8000900 <HAL_InitTick+0x5c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e000      	b.n	80008f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000078 	.word	0x20000078
 80008fc:	20000004 	.word	0x20000004
 8000900:	20000000 	.word	0x20000000

08000904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_IncTick+0x20>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x24>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_IncTick+0x24>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000004 	.word	0x20000004
 8000928:	2000010c 	.word	0x2000010c

0800092c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <HAL_GetTick+0x14>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	2000010c 	.word	0x2000010c

08000944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800094c:	f7ff ffee 	bl	800092c <HAL_GetTick>
 8000950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800095c:	d005      	beq.n	800096a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_Delay+0x40>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4413      	add	r3, r2
 8000968:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800096a:	bf00      	nop
 800096c:	f7ff ffde 	bl	800092c <HAL_GetTick>
 8000970:	4602      	mov	r2, r0
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	1ad2      	subs	r2, r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	429a      	cmp	r2, r3
 800097a:	d3f7      	bcc.n	800096c <HAL_Delay+0x28>
  {
  }
}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000004 	.word	0x20000004

08000988 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <NVIC_SetPriorityGrouping+0x44>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a4:	4013      	ands	r3, r2
 80009a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ba:	4a04      	ldr	r2, [pc, #16]	; (80009cc <NVIC_SetPriorityGrouping+0x44>)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	60d3      	str	r3, [r2, #12]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <NVIC_GetPriorityGrouping+0x18>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	f003 0307 	and.w	r3, r3, #7
}
 80009de:	4618      	mov	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80009f6:	4909      	ldr	r1, [pc, #36]	; (8000a1c <NVIC_EnableIRQ+0x30>)
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	095b      	lsrs	r3, r3, #5
 80009fe:	79fa      	ldrb	r2, [r7, #7]
 8000a00:	f002 021f 	and.w	r2, r2, #31
 8000a04:	2001      	movs	r0, #1
 8000a06:	fa00 f202 	lsl.w	r2, r0, r2
 8000a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	da0b      	bge.n	8000a4c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	490d      	ldr	r1, [pc, #52]	; (8000a6c <NVIC_SetPriority+0x4c>)
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	f003 030f 	and.w	r3, r3, #15
 8000a3c:	3b04      	subs	r3, #4
 8000a3e:	683a      	ldr	r2, [r7, #0]
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	0112      	lsls	r2, r2, #4
 8000a44:	b2d2      	uxtb	r2, r2
 8000a46:	440b      	add	r3, r1
 8000a48:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a4a:	e009      	b.n	8000a60 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	4908      	ldr	r1, [pc, #32]	; (8000a70 <NVIC_SetPriority+0x50>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	683a      	ldr	r2, [r7, #0]
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	1e5a      	subs	r2, r3, #1
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	401a      	ands	r2, r3
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aba:	2101      	movs	r1, #1
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	1e59      	subs	r1, r3, #1
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	4313      	orrs	r3, r2
         );
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3724      	adds	r7, #36	; 0x24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae8:	d301      	bcc.n	8000aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00f      	b.n	8000b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <SysTick_Config+0x40>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af6:	210f      	movs	r1, #15
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f7ff ff90 	bl	8000a20 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <SysTick_Config+0x40>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SysTick_Config+0x40>)
 8000b08:	2207      	movs	r2, #7
 8000b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ff2f 	bl	8000988 <NVIC_SetPriorityGrouping>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b44:	f7ff ff44 	bl	80009d0 <NVIC_GetPriorityGrouping>
 8000b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	6978      	ldr	r0, [r7, #20]
 8000b50:	f7ff ff90 	bl	8000a74 <NVIC_EncodePriority>
 8000b54:	4602      	mov	r2, r0
 8000b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff5f 	bl	8000a20 <NVIC_SetPriority>
}
 8000b62:	bf00      	nop
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff37 	bl	80009ec <NVIC_EnableIRQ>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ffa2 	bl	8000ad8 <SysTick_Config>
 8000b94:	4603      	mov	r3, r0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	d106      	bne.n	8000bbc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000bae:	4a09      	ldr	r2, [pc, #36]	; (8000bd4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000bba:	e005      	b.n	8000bc8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000bbc:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f023 0304 	bic.w	r3, r3, #4
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000bdc:	f000 f802 	bl	8000be4 <HAL_SYSTICK_Callback>
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
 8000c0e:	e165      	b.n	8000edc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c10:	2201      	movs	r2, #1
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	f040 8154 	bne.w	8000ed6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d003      	beq.n	8000c3e <HAL_GPIO_Init+0x4a>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b12      	cmp	r3, #18
 8000c3c:	d123      	bne.n	8000c86 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	08da      	lsrs	r2, r3, #3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3208      	adds	r2, #8
 8000c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	220f      	movs	r2, #15
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	691a      	ldr	r2, [r3, #16]
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	f003 0307 	and.w	r3, r3, #7
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	08da      	lsrs	r2, r3, #3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3208      	adds	r2, #8
 8000c80:	69b9      	ldr	r1, [r7, #24]
 8000c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2203      	movs	r2, #3
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 0203 	and.w	r2, r3, #3
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d00b      	beq.n	8000cda <HAL_GPIO_Init+0xe6>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d007      	beq.n	8000cda <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cce:	2b11      	cmp	r3, #17
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b12      	cmp	r3, #18
 8000cd8:	d130      	bne.n	8000d3c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	68da      	ldr	r2, [r3, #12]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d10:	2201      	movs	r2, #1
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	091b      	lsrs	r3, r3, #4
 8000d26:	f003 0201 	and.w	r2, r3, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 80ae 	beq.w	8000ed6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4a5c      	ldr	r2, [pc, #368]	; (8000ef0 <HAL_GPIO_Init+0x2fc>)
 8000d80:	4b5b      	ldr	r3, [pc, #364]	; (8000ef0 <HAL_GPIO_Init+0x2fc>)
 8000d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b59      	ldr	r3, [pc, #356]	; (8000ef0 <HAL_GPIO_Init+0x2fc>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d96:	4a57      	ldr	r2, [pc, #348]	; (8000ef4 <HAL_GPIO_Init+0x300>)
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	220f      	movs	r2, #15
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4e      	ldr	r2, [pc, #312]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d025      	beq.n	8000e0e <HAL_GPIO_Init+0x21a>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4d      	ldr	r2, [pc, #308]	; (8000efc <HAL_GPIO_Init+0x308>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d01f      	beq.n	8000e0a <HAL_GPIO_Init+0x216>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a4c      	ldr	r2, [pc, #304]	; (8000f00 <HAL_GPIO_Init+0x30c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d019      	beq.n	8000e06 <HAL_GPIO_Init+0x212>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a4b      	ldr	r2, [pc, #300]	; (8000f04 <HAL_GPIO_Init+0x310>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d013      	beq.n	8000e02 <HAL_GPIO_Init+0x20e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a4a      	ldr	r2, [pc, #296]	; (8000f08 <HAL_GPIO_Init+0x314>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d00d      	beq.n	8000dfe <HAL_GPIO_Init+0x20a>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a49      	ldr	r2, [pc, #292]	; (8000f0c <HAL_GPIO_Init+0x318>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d007      	beq.n	8000dfa <HAL_GPIO_Init+0x206>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a48      	ldr	r2, [pc, #288]	; (8000f10 <HAL_GPIO_Init+0x31c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d101      	bne.n	8000df6 <HAL_GPIO_Init+0x202>
 8000df2:	2306      	movs	r3, #6
 8000df4:	e00c      	b.n	8000e10 <HAL_GPIO_Init+0x21c>
 8000df6:	2307      	movs	r3, #7
 8000df8:	e00a      	b.n	8000e10 <HAL_GPIO_Init+0x21c>
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	e008      	b.n	8000e10 <HAL_GPIO_Init+0x21c>
 8000dfe:	2304      	movs	r3, #4
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x21c>
 8000e02:	2303      	movs	r3, #3
 8000e04:	e004      	b.n	8000e10 <HAL_GPIO_Init+0x21c>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e002      	b.n	8000e10 <HAL_GPIO_Init+0x21c>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <HAL_GPIO_Init+0x21c>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	69fa      	ldr	r2, [r7, #28]
 8000e12:	f002 0203 	and.w	r2, r2, #3
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	4093      	lsls	r3, r2
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e20:	4934      	ldr	r1, [pc, #208]	; (8000ef4 <HAL_GPIO_Init+0x300>)
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e2e:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <HAL_GPIO_Init+0x320>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e52:	4a30      	ldr	r2, [pc, #192]	; (8000f14 <HAL_GPIO_Init+0x320>)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e58:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <HAL_GPIO_Init+0x320>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e7c:	4a25      	ldr	r2, [pc, #148]	; (8000f14 <HAL_GPIO_Init+0x320>)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e82:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <HAL_GPIO_Init+0x320>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ea6:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <HAL_GPIO_Init+0x320>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eac:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <HAL_GPIO_Init+0x320>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed0:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <HAL_GPIO_Init+0x320>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	2b0f      	cmp	r3, #15
 8000ee0:	f67f ae96 	bls.w	8000c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3724      	adds	r7, #36	; 0x24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40013800 	.word	0x40013800
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40020400 	.word	0x40020400
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40020c00 	.word	0x40020c00
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40021400 	.word	0x40021400
 8000f10:	40021800 	.word	0x40021800
 8000f14:	40013c00 	.word	0x40013c00

08000f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
 8000f24:	4613      	mov	r3, r2
 8000f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f28:	787b      	ldrb	r3, [r7, #1]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f2e:	887a      	ldrh	r2, [r7, #2]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f34:	e003      	b.n	8000f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f36:	887b      	ldrh	r3, [r7, #2]
 8000f38:	041a      	lsls	r2, r3, #16
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	619a      	str	r2, [r3, #24]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d006      	beq.n	8000f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f806 	bl	8000f7c <HAL_GPIO_EXTI_Callback>
  }
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40013c00 	.word	0x40013c00

08000f7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{ 
 8000f92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f94:	b08d      	sub	sp, #52	; 0x34
 8000f96:	af0a      	add	r7, sp, #40	; 0x28
 8000f98:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if(hhcd == NULL)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e03e      	b.n	8001022 <HAL_HCD_Init+0x90>
  }
  
  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
  
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_HCD_MspInit(hhcd);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f007 f887 	bl	80080c0 <HAL_HCD_MspInit>
  
  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 feac 	bl	8003d14 <USB_DisableGlobalInt>
  
  /* Init the Core (common init.) */
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	687e      	ldr	r6, [r7, #4]
 8000fc4:	466d      	mov	r5, sp
 8000fc6:	f106 0410 	add.w	r4, r6, #16
 8000fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fda:	1d33      	adds	r3, r6, #4
 8000fdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fde:	6838      	ldr	r0, [r7, #0]
 8000fe0:	f002 fe36 	bl	8003c50 <USB_CoreInit>
  
  /* Force Host Mode*/
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 fea3 	bl	8003d36 <USB_SetCurrentMode>
  
  /* Init Host */
  USB_HostInit(hhcd->Instance, hhcd->Init);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	687e      	ldr	r6, [r7, #4]
 8000ff8:	466d      	mov	r5, sp
 8000ffa:	f106 0410 	add.w	r4, r6, #16
 8000ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001006:	e894 0003 	ldmia.w	r4, {r0, r1}
 800100a:	e885 0003 	stmia.w	r5, {r0, r1}
 800100e:	1d33      	adds	r3, r6, #4
 8001010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001012:	6838      	ldr	r0, [r7, #0]
 8001014:	f002 ffb2 	bl	8003f7c <USB_HostInit>
  
  hhcd->State= HAL_HCD_STATE_READY;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2201      	movs	r2, #1
 800101c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800102a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800102a:	b590      	push	{r4, r7, lr}
 800102c:	b089      	sub	sp, #36	; 0x24
 800102e:	af04      	add	r7, sp, #16
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	4608      	mov	r0, r1
 8001034:	4611      	mov	r1, r2
 8001036:	461a      	mov	r2, r3
 8001038:	4603      	mov	r3, r0
 800103a:	70fb      	strb	r3, [r7, #3]
 800103c:	460b      	mov	r3, r1
 800103e:	70bb      	strb	r3, [r7, #2]
 8001040:	4613      	mov	r3, r2
 8001042:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]
  
  __HAL_LOCK(hhcd); 
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800104e:	2b01      	cmp	r3, #1
 8001050:	d101      	bne.n	8001056 <HAL_HCD_HC_Init+0x2c>
 8001052:	2302      	movs	r3, #2
 8001054:	e06c      	b.n	8001130 <HAL_HCD_HC_Init+0x106>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 800105e:	78fa      	ldrb	r2, [r7, #3]
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	3338      	adds	r3, #56	; 0x38
 800106e:	787a      	ldrb	r2, [r7, #1]
 8001070:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001072:	78fa      	ldrb	r2, [r7, #3]
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	440b      	add	r3, r1
 8001080:	3340      	adds	r3, #64	; 0x40
 8001082:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001084:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001086:	78fa      	ldrb	r2, [r7, #3]
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	440b      	add	r3, r1
 8001094:	3339      	adds	r3, #57	; 0x39
 8001096:	78fa      	ldrb	r2, [r7, #3]
 8001098:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800109a:	78fa      	ldrb	r2, [r7, #3]
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	440b      	add	r3, r1
 80010a8:	333f      	adds	r3, #63	; 0x3f
 80010aa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80010ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 80010b0:	78fa      	ldrb	r2, [r7, #3]
 80010b2:	78bb      	ldrb	r3, [r7, #2]
 80010b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010b8:	b2d8      	uxtb	r0, r3
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	440b      	add	r3, r1
 80010c6:	333a      	adds	r3, #58	; 0x3a
 80010c8:	4602      	mov	r2, r0
 80010ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 80010cc:	78fa      	ldrb	r2, [r7, #3]
 80010ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	09db      	lsrs	r3, r3, #7
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4618      	mov	r0, r3
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	440b      	add	r3, r1
 80010e6:	333b      	adds	r3, #59	; 0x3b
 80010e8:	4602      	mov	r2, r0
 80010ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].speed = speed;
 80010ec:	78fa      	ldrb	r2, [r7, #3]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	440b      	add	r3, r1
 80010fa:	333c      	adds	r3, #60	; 0x3c
 80010fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001100:	701a      	strb	r2, [r3, #0]
  
  status =  USB_HC_Init(hhcd->Instance, 
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	787c      	ldrb	r4, [r7, #1]
 8001108:	78ba      	ldrb	r2, [r7, #2]
 800110a:	78f9      	ldrb	r1, [r7, #3]
 800110c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	f897 3020 	ldrb.w	r3, [r7, #32]
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	4623      	mov	r3, r4
 800111e:	f003 f885 	bl	800422c <USB_HC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  return status;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	bd90      	pop	{r4, r7, pc}

08001138 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
  
  __HAL_LOCK(hhcd);   
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800114e:	2b01      	cmp	r3, #1
 8001150:	d101      	bne.n	8001156 <HAL_HCD_HC_Halt+0x1e>
 8001152:	2302      	movs	r3, #2
 8001154:	e00f      	b.n	8001176 <HAL_HCD_HC_Halt+0x3e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	78fa      	ldrb	r2, [r7, #3]
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f003 faa9 	bl	80046be <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  return status;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	4608      	mov	r0, r1
 800118a:	4611      	mov	r1, r2
 800118c:	461a      	mov	r2, r3
 800118e:	4603      	mov	r3, r0
 8001190:	70fb      	strb	r3, [r7, #3]
 8001192:	460b      	mov	r3, r1
 8001194:	70bb      	strb	r3, [r7, #2]
 8001196:	4613      	mov	r3, r2
 8001198:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800119a:	78fa      	ldrb	r2, [r7, #3]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	440b      	add	r3, r1
 80011a8:	333b      	adds	r3, #59	; 0x3b
 80011aa:	78ba      	ldrb	r2, [r7, #2]
 80011ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type; 
 80011ae:	78fa      	ldrb	r2, [r7, #3]
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	440b      	add	r3, r1
 80011bc:	333f      	adds	r3, #63	; 0x3f
 80011be:	787a      	ldrb	r2, [r7, #1]
 80011c0:	701a      	strb	r2, [r3, #0]
  
  if(token == 0)
 80011c2:	7c3b      	ldrb	r3, [r7, #16]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10a      	bne.n	80011de <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80011c8:	78fa      	ldrb	r2, [r7, #3]
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	440b      	add	r3, r1
 80011d6:	3342      	adds	r3, #66	; 0x42
 80011d8:	2203      	movs	r2, #3
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	e009      	b.n	80011f2 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80011de:	78fa      	ldrb	r2, [r7, #3]
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	440b      	add	r3, r1
 80011ec:	3342      	adds	r3, #66	; 0x42
 80011ee:	2202      	movs	r2, #2
 80011f0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 80011f2:	787b      	ldrb	r3, [r7, #1]
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	f200 8104 	bhi.w	8001402 <HAL_HCD_HC_SubmitRequest+0x282>
 80011fa:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <HAL_HCD_HC_SubmitRequest+0x80>)
 80011fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001200:	08001211 	.word	0x08001211
 8001204:	080013e7 	.word	0x080013e7
 8001208:	080012a9 	.word	0x080012a9
 800120c:	0800135d 	.word	0x0800135d
  {
  case EP_TYPE_CTRL:
    if((token == 1) && (direction == 0)) /*send data */
 8001210:	7c3b      	ldrb	r3, [r7, #16]
 8001212:	2b01      	cmp	r3, #1
 8001214:	f040 80f2 	bne.w	80013fc <HAL_HCD_HC_SubmitRequest+0x27c>
 8001218:	78bb      	ldrb	r3, [r7, #2]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f040 80ee 	bne.w	80013fc <HAL_HCD_HC_SubmitRequest+0x27c>
    {
      if (length == 0)
 8001220:	8b3b      	ldrh	r3, [r7, #24]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d109      	bne.n	800123a <HAL_HCD_HC_SubmitRequest+0xba>
      { /* For Status OUT stage, Length==0, Status Out PID = 1 */
        hhcd->hc[ch_num].toggle_out = 1;
 8001226:	78fa      	ldrb	r2, [r7, #3]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	440b      	add	r3, r1
 8001234:	3351      	adds	r3, #81	; 0x51
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
      }
      
      /* Set the Data Toggle bit as per the Flag */
      if (hhcd->hc[ch_num].toggle_out == 0)
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	440b      	add	r3, r1
 8001248:	3351      	adds	r3, #81	; 0x51
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10a      	bne.n	8001266 <HAL_HCD_HC_SubmitRequest+0xe6>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 8001250:	78fa      	ldrb	r2, [r7, #3]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	440b      	add	r3, r1
 800125e:	3342      	adds	r3, #66	; 0x42
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	e009      	b.n	800127a <HAL_HCD_HC_SubmitRequest+0xfa>
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001266:	78fa      	ldrb	r2, [r7, #3]
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	440b      	add	r3, r1
 8001274:	3342      	adds	r3, #66	; 0x42
 8001276:	2202      	movs	r2, #2
 8001278:	701a      	strb	r2, [r3, #0]
      }
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 800127a:	78fa      	ldrb	r2, [r7, #3]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	440b      	add	r3, r1
 8001288:	335c      	adds	r3, #92	; 0x5c
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b02      	cmp	r3, #2
 800128e:	f000 80b5 	beq.w	80013fc <HAL_HCD_HC_SubmitRequest+0x27c>
      {
        hhcd->hc[ch_num].do_ping = do_ping;
 8001292:	78fa      	ldrb	r2, [r7, #3]
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	440b      	add	r3, r1
 80012a0:	333d      	adds	r3, #61	; 0x3d
 80012a2:	7f3a      	ldrb	r2, [r7, #28]
 80012a4:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 80012a6:	e0a9      	b.n	80013fc <HAL_HCD_HC_SubmitRequest+0x27c>
  
  case EP_TYPE_BULK:
    if(direction == 0)
 80012a8:	78bb      	ldrb	r3, [r7, #2]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d135      	bne.n	800131a <HAL_HCD_HC_SubmitRequest+0x19a>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 80012ae:	78fa      	ldrb	r2, [r7, #3]
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	440b      	add	r3, r1
 80012bc:	3351      	adds	r3, #81	; 0x51
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10a      	bne.n	80012da <HAL_HCD_HC_SubmitRequest+0x15a>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 80012c4:	78fa      	ldrb	r2, [r7, #3]
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	3342      	adds	r3, #66	; 0x42
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	e009      	b.n	80012ee <HAL_HCD_HC_SubmitRequest+0x16e>
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012da:	78fa      	ldrb	r2, [r7, #3]
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	440b      	add	r3, r1
 80012e8:	3342      	adds	r3, #66	; 0x42
 80012ea:	2202      	movs	r2, #2
 80012ec:	701a      	strb	r2, [r3, #0]
      }
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 80012ee:	78fa      	ldrb	r2, [r7, #3]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	440b      	add	r3, r1
 80012fc:	335c      	adds	r3, #92	; 0x5c
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d07d      	beq.n	8001400 <HAL_HCD_HC_SubmitRequest+0x280>
      {
        hhcd->hc[ch_num].do_ping = do_ping;
 8001304:	78fa      	ldrb	r2, [r7, #3]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	440b      	add	r3, r1
 8001312:	333d      	adds	r3, #61	; 0x3d
 8001314:	7f3a      	ldrb	r2, [r7, #28]
 8001316:	701a      	strb	r2, [r3, #0]
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    
    break;
 8001318:	e072      	b.n	8001400 <HAL_HCD_HC_SubmitRequest+0x280>
      if( hhcd->hc[ch_num].toggle_in == 0)
 800131a:	78fa      	ldrb	r2, [r7, #3]
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	3350      	adds	r3, #80	; 0x50
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10a      	bne.n	8001346 <HAL_HCD_HC_SubmitRequest+0x1c6>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001330:	78fa      	ldrb	r2, [r7, #3]
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	440b      	add	r3, r1
 800133e:	3342      	adds	r3, #66	; 0x42
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
    break;
 8001344:	e05c      	b.n	8001400 <HAL_HCD_HC_SubmitRequest+0x280>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001346:	78fa      	ldrb	r2, [r7, #3]
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	440b      	add	r3, r1
 8001354:	3342      	adds	r3, #66	; 0x42
 8001356:	2202      	movs	r2, #2
 8001358:	701a      	strb	r2, [r3, #0]
    break;
 800135a:	e051      	b.n	8001400 <HAL_HCD_HC_SubmitRequest+0x280>
  case EP_TYPE_INTR:
    if(direction == 0)
 800135c:	78bb      	ldrb	r3, [r7, #2]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d120      	bne.n	80013a4 <HAL_HCD_HC_SubmitRequest+0x224>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8001362:	78fa      	ldrb	r2, [r7, #3]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	3351      	adds	r3, #81	; 0x51
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d10a      	bne.n	800138e <HAL_HCD_HC_SubmitRequest+0x20e>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 8001378:	78fa      	ldrb	r2, [r7, #3]
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	3342      	adds	r3, #66	; 0x42
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
      else
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    break;
 800138c:	e039      	b.n	8001402 <HAL_HCD_HC_SubmitRequest+0x282>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800138e:	78fa      	ldrb	r2, [r7, #3]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	440b      	add	r3, r1
 800139c:	3342      	adds	r3, #66	; 0x42
 800139e:	2202      	movs	r2, #2
 80013a0:	701a      	strb	r2, [r3, #0]
    break;
 80013a2:	e02e      	b.n	8001402 <HAL_HCD_HC_SubmitRequest+0x282>
      if( hhcd->hc[ch_num].toggle_in == 0)
 80013a4:	78fa      	ldrb	r2, [r7, #3]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	440b      	add	r3, r1
 80013b2:	3350      	adds	r3, #80	; 0x50
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10a      	bne.n	80013d0 <HAL_HCD_HC_SubmitRequest+0x250>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013ba:	78fa      	ldrb	r2, [r7, #3]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	440b      	add	r3, r1
 80013c8:	3342      	adds	r3, #66	; 0x42
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
    break;
 80013ce:	e018      	b.n	8001402 <HAL_HCD_HC_SubmitRequest+0x282>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013d0:	78fa      	ldrb	r2, [r7, #3]
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	440b      	add	r3, r1
 80013de:	3342      	adds	r3, #66	; 0x42
 80013e0:	2202      	movs	r2, #2
 80013e2:	701a      	strb	r2, [r3, #0]
    break;
 80013e4:	e00d      	b.n	8001402 <HAL_HCD_HC_SubmitRequest+0x282>
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013e6:	78fa      	ldrb	r2, [r7, #3]
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	440b      	add	r3, r1
 80013f4:	3342      	adds	r3, #66	; 0x42
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
    break;  
 80013fa:	e002      	b.n	8001402 <HAL_HCD_HC_SubmitRequest+0x282>
    break;
 80013fc:	bf00      	nop
 80013fe:	e000      	b.n	8001402 <HAL_HCD_HC_SubmitRequest+0x282>
    break;
 8001400:	bf00      	nop
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001402:	78fa      	ldrb	r2, [r7, #3]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	3344      	adds	r3, #68	; 0x44
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001416:	78fa      	ldrb	r2, [r7, #3]
 8001418:	8b39      	ldrh	r1, [r7, #24]
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4403      	add	r3, r0
 8001426:	3348      	adds	r3, #72	; 0x48
 8001428:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 800142a:	78fa      	ldrb	r2, [r7, #3]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	440b      	add	r3, r1
 8001438:	335c      	adds	r3, #92	; 0x5c
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0;
 800143e:	78fa      	ldrb	r2, [r7, #3]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	440b      	add	r3, r1
 800144c:	334c      	adds	r3, #76	; 0x4c
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001452:	78fa      	ldrb	r2, [r7, #3]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	3339      	adds	r3, #57	; 0x39
 8001462:	78fa      	ldrb	r2, [r7, #3]
 8001464:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001466:	78fa      	ldrb	r2, [r7, #3]
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	440b      	add	r3, r1
 8001474:	335d      	adds	r3, #93	; 0x5d
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	78fa      	ldrb	r2, [r7, #3]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	3338      	adds	r3, #56	; 0x38
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	18d1      	adds	r1, r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	f002 ffc5 	bl	8004424 <USB_HC_StartXfer>
 800149a:	4603      	mov	r3, r0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	613b      	str	r3, [r7, #16]
  uint32_t i = 0U , interrupt = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f002 fd19 	bl	8003ef6 <USB_GetMode>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	f040 80e9 	bne.w	800169e <HAL_HCD_IRQHandler+0x1fa>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 fcfb 	bl	8003ecc <USB_ReadInterrupts>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 80df 	beq.w	800169c <HAL_HCD_IRQHandler+0x1f8>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f002 fcf2 	bl	8003ecc <USB_ReadInterrupts>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014f2:	d104      	bne.n	80014fe <HAL_HCD_IRQHandler+0x5a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014fc:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fce2 	bl	8003ecc <USB_ReadInterrupts>
 8001508:	4603      	mov	r3, r0
 800150a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001512:	d104      	bne.n	800151e <HAL_HCD_IRQHandler+0x7a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800151c:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f002 fcd2 	bl	8003ecc <USB_ReadInterrupts>
 8001528:	4603      	mov	r3, r0
 800152a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800152e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001532:	d104      	bne.n	800153e <HAL_HCD_IRQHandler+0x9a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800153c:	615a      	str	r2, [r3, #20]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fcc2 	bl	8003ecc <USB_ReadInterrupts>
 8001548:	4603      	mov	r3, r0
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b02      	cmp	r3, #2
 8001550:	d103      	bne.n	800155a <HAL_HCD_IRQHandler+0xb6>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2202      	movs	r2, #2
 8001558:	615a      	str	r2, [r3, #20]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f002 fcb4 	bl	8003ecc <USB_ReadInterrupts>
 8001564:	4603      	mov	r3, r0
 8001566:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800156a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800156e:	d118      	bne.n	80015a2 <HAL_HCD_IRQHandler+0xfe>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001576:	461a      	mov	r2, r3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001584:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f006 fe02 	bl	8008190 <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2101      	movs	r1, #1
 8001592:	4618      	mov	r0, r3
 8001594:	f002 fd92 	bl	80040bc <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015a0:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 fc90 	bl	8003ecc <USB_ReadInterrupts>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b6:	d102      	bne.n	80015be <HAL_HCD_IRQHandler+0x11a>
    {
      HCD_Port_IRQHandler (hhcd);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f001 f805 	bl	80025c8 <HCD_Port_IRQHandler>
    }
    
    /* Handle Host SOF Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 fc82 	bl	8003ecc <USB_ReadInterrupts>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d106      	bne.n	80015e0 <HAL_HCD_IRQHandler+0x13c>
    {
      HAL_HCD_SOF_Callback(hhcd);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f006 fdc0 	bl	8008158 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2208      	movs	r2, #8
 80015de:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host channel Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 fc71 	bl	8003ecc <USB_ReadInterrupts>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015f4:	d134      	bne.n	8001660 <HAL_HCD_IRQHandler+0x1bc>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 f850 	bl	80046a0 <USB_HC_ReadInterrupt>
 8001600:	60f8      	str	r0, [r7, #12]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	e021      	b.n	800164c <HAL_HCD_IRQHandler+0x1a8>
      {
        if (interrupt & (1U << i))
 8001608:	2201      	movs	r2, #1
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	409a      	lsls	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d017      	beq.n	8001646 <HAL_HCD_IRQHandler+0x1a2>
        {
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	015a      	lsls	r2, r3, #5
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4413      	add	r3, r2
 800161e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d006      	beq.n	800163a <HAL_HCD_IRQHandler+0x196>
          {
            HCD_HC_IN_IRQHandler(hhcd, i);
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4619      	mov	r1, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f8b5 	bl	80017a2 <HCD_HC_IN_IRQHandler>
 8001638:	e005      	b.n	8001646 <HAL_HCD_IRQHandler+0x1a2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler (hhcd, i);
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	4619      	mov	r1, r3
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fbee 	bl	8001e22 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	429a      	cmp	r2, r3
 8001654:	d8d8      	bhi.n	8001608 <HAL_HCD_IRQHandler+0x164>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800165e:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Rx Queue Level Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f002 fc31 	bl	8003ecc <USB_ReadInterrupts>
 800166a:	4603      	mov	r3, r0
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	2b10      	cmp	r3, #16
 8001672:	d114      	bne.n	800169e <HAL_HCD_IRQHandler+0x1fa>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	6992      	ldr	r2, [r2, #24]
 800167e:	f022 0210 	bic.w	r2, r2, #16
 8001682:	619a      	str	r2, [r3, #24]
      
      HCD_RXQLVL_IRQHandler (hhcd);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 feed 	bl	8002464 <HCD_RXQLVL_IRQHandler>
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	6992      	ldr	r2, [r2, #24]
 8001694:	f042 0210 	orr.w	r2, r2, #16
 8001698:	619a      	str	r2, [r3, #24]
 800169a:	e000      	b.n	800169e <HAL_HCD_IRQHandler+0x1fa>
      return;
 800169c:	bf00      	nop
    }
  }
}
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{ 
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd); 
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_HCD_Start+0x16>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e013      	b.n	80016e2 <HAL_HCD_Start+0x3e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f002 fb13 	bl	8003cf2 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 fd51 	bl	800417a <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{ 
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd); 
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d101      	bne.n	8001700 <HAL_HCD_Stop+0x16>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e00d      	b.n	800171c <HAL_HCD_Stop+0x32>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f003 f8fb 	bl	8004908 <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f002 fcfd 	bl	8004130 <USB_ResetPort>
 8001736:	4603      	mov	r3, r0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/ 
  *            URB_ERROR/  
  *            URB_STALL      
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800174c:	78fa      	ldrb	r2, [r7, #3]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	440b      	add	r3, r1
 800175a:	335c      	adds	r3, #92	; 0x5c
 800175c:	781b      	ldrb	r3, [r3, #0]
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f002 fd49 	bl	800420e <USB_GetCurrentFrame>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f002 fd28 	bl	80041e8 <USB_GetHostSpeed>
 8001798:	4603      	mov	r3, r0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval None
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017a2:	b590      	push	{r4, r7, lr}
 80017a4:	b085      	sub	sp, #20
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	460b      	mov	r3, r1
 80017ac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	015a      	lsls	r2, r3, #5
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d01a      	beq.n	8001804 <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	015a      	lsls	r2, r3, #5
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017da:	461a      	mov	r2, r3
 80017dc:	2304      	movs	r3, #4
 80017de:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	015a      	lsls	r2, r3, #5
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ec:	4619      	mov	r1, r3
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	015a      	lsls	r2, r3, #5
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	60cb      	str	r3, [r1, #12]
 8001802:	e094      	b.n	800192e <HCD_HC_IN_IRQHandler+0x18c>
  }  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 0320 	and.w	r3, r3, #32
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <HCD_HC_IN_IRQHandler+0x8c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	015a      	lsls	r2, r3, #5
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001826:	461a      	mov	r2, r3
 8001828:	2320      	movs	r3, #32
 800182a:	6093      	str	r3, [r2, #8]
 800182c:	e07f      	b.n	800192e <HCD_HC_IN_IRQHandler+0x18c>
  }
  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	015a      	lsls	r2, r3, #5
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4413      	add	r3, r2
 8001836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d034      	beq.n	80018ae <HCD_HC_IN_IRQHandler+0x10c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	015a      	lsls	r2, r3, #5
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001850:	4619      	mov	r1, r3
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4413      	add	r3, r2
 800185a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	335d      	adds	r3, #93	; 0x5d
 8001876:	2205      	movs	r2, #5
 8001878:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	015a      	lsls	r2, r3, #5
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4413      	add	r3, r2
 8001882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001886:	461a      	mov	r2, r3
 8001888:	2310      	movs	r3, #16
 800188a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	015a      	lsls	r2, r3, #5
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001898:	461a      	mov	r2, r3
 800189a:	2308      	movs	r3, #8
 800189c:	6093      	str	r3, [r2, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	78fa      	ldrb	r2, [r7, #3]
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 ff09 	bl	80046be <USB_HC_Halt>
 80018ac:	e03f      	b.n	800192e <HCD_HC_IN_IRQHandler+0x18c>
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	015a      	lsls	r2, r3, #5
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d034      	beq.n	800192e <HCD_HC_IN_IRQHandler+0x18c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	015a      	lsls	r2, r3, #5
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d0:	4619      	mov	r1, r3
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	015a      	lsls	r2, r3, #5
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4413      	add	r3, r2
 80018da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	78fa      	ldrb	r2, [r7, #3]
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f002 fee5 	bl	80046be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	015a      	lsls	r2, r3, #5
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4413      	add	r3, r2
 80018fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001900:	461a      	mov	r2, r3
 8001902:	2310      	movs	r3, #16
 8001904:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001906:	78fa      	ldrb	r2, [r7, #3]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	440b      	add	r3, r1
 8001914:	335d      	adds	r3, #93	; 0x5d
 8001916:	2208      	movs	r2, #8
 8001918:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	015a      	lsls	r2, r3, #5
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4413      	add	r3, r2
 8001922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001926:	461a      	mov	r2, r3
 8001928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800192c:	6093      	str	r3, [r2, #8]
  }    
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	015a      	lsls	r2, r3, #5
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4413      	add	r3, r2
 8001936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001940:	2b00      	cmp	r3, #0
 8001942:	d022      	beq.n	800198a <HCD_HC_IN_IRQHandler+0x1e8>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	015a      	lsls	r2, r3, #5
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001950:	4619      	mov	r1, r3
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	015a      	lsls	r2, r3, #5
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4413      	add	r3, r2
 800195a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f002 fea5 	bl	80046be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	015a      	lsls	r2, r3, #5
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001980:	461a      	mov	r2, r3
 8001982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001986:	6093      	str	r3, [r2, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
      tmpreg |= USB_OTG_HCCHAR_CHENA;
      USBx_HC(chnum)->HCCHAR = tmpreg;
    }
  }
}
 8001988:	e247      	b.n	8001e1a <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	015a      	lsls	r2, r3, #5
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4413      	add	r3, r2
 8001992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 80c0 	beq.w	8001b22 <HCD_HC_IN_IRQHandler+0x380>
    if (hhcd->Init.dma_enable)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d01b      	beq.n	80019e2 <HCD_HC_IN_IRQHandler+0x240>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 80019aa:	78fa      	ldrb	r2, [r7, #3]
 80019ac:	78f9      	ldrb	r1, [r7, #3]
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4403      	add	r3, r0
 80019ba:	3348      	adds	r3, #72	; 0x48
 80019bc:	6819      	ldr	r1, [r3, #0]
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	0158      	lsls	r0, r3, #5
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4403      	add	r3, r0
 80019c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 80019d0:	1ac9      	subs	r1, r1, r3
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4403      	add	r3, r0
 80019de:	334c      	adds	r3, #76	; 0x4c
 80019e0:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XFRC;
 80019e2:	78fa      	ldrb	r2, [r7, #3]
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	440b      	add	r3, r1
 80019f0:	335d      	adds	r3, #93	; 0x5d
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	3358      	adds	r3, #88	; 0x58
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	015a      	lsls	r2, r3, #5
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4413      	add	r3, r2
 8001a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a16:	461a      	mov	r2, r3
 8001a18:	2301      	movs	r3, #1
 8001a1a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	440b      	add	r3, r1
 8001a2a:	333f      	adds	r3, #63	; 0x3f
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00a      	beq.n	8001a48 <HCD_HC_IN_IRQHandler+0x2a6>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	440b      	add	r3, r1
 8001a40:	333f      	adds	r3, #63	; 0x3f
 8001a42:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d121      	bne.n	8001a8c <HCD_HC_IN_IRQHandler+0x2ea>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	015a      	lsls	r2, r3, #5
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a54:	4619      	mov	r1, r3
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	015a      	lsls	r2, r3, #5
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 fe23 	bl	80046be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	015a      	lsls	r2, r3, #5
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a84:	461a      	mov	r2, r3
 8001a86:	2310      	movs	r3, #16
 8001a88:	6093      	str	r3, [r2, #8]
 8001a8a:	e033      	b.n	8001af4 <HCD_HC_IN_IRQHandler+0x352>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	440b      	add	r3, r1
 8001a9a:	333f      	adds	r3, #63	; 0x3f
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d128      	bne.n	8001af4 <HCD_HC_IN_IRQHandler+0x352>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001aa2:	78fb      	ldrb	r3, [r7, #3]
 8001aa4:	015a      	lsls	r2, r3, #5
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aae:	4619      	mov	r1, r3
 8001ab0:	78fb      	ldrb	r3, [r7, #3]
 8001ab2:	015a      	lsls	r2, r3, #5
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ac2:	600b      	str	r3, [r1, #0]
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8001ac4:	78fa      	ldrb	r2, [r7, #3]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	335c      	adds	r3, #92	; 0x5c
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001ad8:	78fa      	ldrb	r2, [r7, #3]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	440b      	add	r3, r1
 8001ae6:	335c      	adds	r3, #92	; 0x5c
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	4619      	mov	r1, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f006 fb5c 	bl	80081ac <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[chnum].toggle_in ^= 1U;
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	78f9      	ldrb	r1, [r7, #3]
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4403      	add	r3, r0
 8001b04:	3350      	adds	r3, #80	; 0x50
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	f083 0301 	eor.w	r3, r3, #1
 8001b0c:	b2d8      	uxtb	r0, r3
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	440b      	add	r3, r1
 8001b1a:	3350      	adds	r3, #80	; 0x50
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	701a      	strb	r2, [r3, #0]
}
 8001b20:	e17b      	b.n	8001e1a <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	015a      	lsls	r2, r3, #5
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4413      	add	r3, r2
 8001b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80b7 	beq.w	8001ca8 <HCD_HC_IN_IRQHandler+0x506>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8001b3a:	78fb      	ldrb	r3, [r7, #3]
 8001b3c:	015a      	lsls	r2, r3, #5
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4413      	add	r3, r2
 8001b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b46:	4619      	mov	r1, r3
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	015a      	lsls	r2, r3, #5
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f023 0302 	bic.w	r3, r3, #2
 8001b5a:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001b5c:	78fa      	ldrb	r2, [r7, #3]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	335d      	adds	r3, #93	; 0x5d
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d10a      	bne.n	8001b88 <HCD_HC_IN_IRQHandler+0x3e6>
      hhcd->hc[chnum].urb_state  = URB_DONE;      
 8001b72:	78fa      	ldrb	r2, [r7, #3]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	440b      	add	r3, r1
 8001b80:	335c      	adds	r3, #92	; 0x5c
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
 8001b86:	e077      	b.n	8001c78 <HCD_HC_IN_IRQHandler+0x4d6>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8001b88:	78fa      	ldrb	r2, [r7, #3]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	335d      	adds	r3, #93	; 0x5d
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	d10a      	bne.n	8001bb4 <HCD_HC_IN_IRQHandler+0x412>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8001b9e:	78fa      	ldrb	r2, [r7, #3]
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	440b      	add	r3, r1
 8001bac:	335c      	adds	r3, #92	; 0x5c
 8001bae:	2205      	movs	r2, #5
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	e061      	b.n	8001c78 <HCD_HC_IN_IRQHandler+0x4d6>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	335d      	adds	r3, #93	; 0x5d
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d00a      	beq.n	8001be0 <HCD_HC_IN_IRQHandler+0x43e>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	335d      	adds	r3, #93	; 0x5d
 8001bda:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d14b      	bne.n	8001c78 <HCD_HC_IN_IRQHandler+0x4d6>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	440b      	add	r3, r1
 8001bee:	3358      	adds	r3, #88	; 0x58
 8001bf0:	6819      	ldr	r1, [r3, #0]
 8001bf2:	1c48      	adds	r0, r1, #1
 8001bf4:	687c      	ldr	r4, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4423      	add	r3, r4
 8001c00:	3358      	adds	r3, #88	; 0x58
 8001c02:	6018      	str	r0, [r3, #0]
 8001c04:	2903      	cmp	r1, #3
 8001c06:	d914      	bls.n	8001c32 <HCD_HC_IN_IRQHandler+0x490>
        hhcd->hc[chnum].ErrCnt = 0U;
 8001c08:	78fa      	ldrb	r2, [r7, #3]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	3358      	adds	r3, #88	; 0x58
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001c1c:	78fa      	ldrb	r2, [r7, #3]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	440b      	add	r3, r1
 8001c2a:	335c      	adds	r3, #92	; 0x5c
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	701a      	strb	r2, [r3, #0]
 8001c30:	e009      	b.n	8001c46 <HCD_HC_IN_IRQHandler+0x4a4>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001c32:	78fa      	ldrb	r2, [r7, #3]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	440b      	add	r3, r1
 8001c40:	335c      	adds	r3, #92	; 0x5c
 8001c42:	2202      	movs	r2, #2
 8001c44:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c5c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c64:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	015a      	lsls	r2, r3, #5
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c72:	461a      	mov	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	015a      	lsls	r2, r3, #5
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c84:	461a      	mov	r2, r3
 8001c86:	2302      	movs	r3, #2
 8001c88:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001c8a:	78fa      	ldrb	r2, [r7, #3]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	335c      	adds	r3, #92	; 0x5c
 8001c9a:	781a      	ldrb	r2, [r3, #0]
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f006 fa83 	bl	80081ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001ca6:	e0b8      	b.n	8001e1a <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	015a      	lsls	r2, r3, #5
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d03d      	beq.n	8001d3a <HCD_HC_IN_IRQHandler+0x598>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	015a      	lsls	r2, r3, #5
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cca:	4619      	mov	r1, r3
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	015a      	lsls	r2, r3, #5
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f043 0302 	orr.w	r3, r3, #2
 8001cde:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].ErrCnt++;
 8001ce0:	78fa      	ldrb	r2, [r7, #3]
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	440b      	add	r3, r1
 8001cee:	3358      	adds	r3, #88	; 0x58
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	1c59      	adds	r1, r3, #1
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4403      	add	r3, r0
 8001d00:	3358      	adds	r3, #88	; 0x58
 8001d02:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	335d      	adds	r3, #93	; 0x5d
 8001d14:	2206      	movs	r2, #6
 8001d16:	701a      	strb	r2, [r3, #0]
    USB_HC_Halt(hhcd->Instance, chnum);     
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	78fa      	ldrb	r2, [r7, #3]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f002 fccc 	bl	80046be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	015a      	lsls	r2, r3, #5
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d32:	461a      	mov	r2, r3
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	6093      	str	r3, [r2, #8]
}
 8001d38:	e06f      	b.n	8001e1a <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d064      	beq.n	8001e1a <HCD_HC_IN_IRQHandler+0x678>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001d50:	78fa      	ldrb	r2, [r7, #3]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	333f      	adds	r3, #63	; 0x3f
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d117      	bne.n	8001d96 <HCD_HC_IN_IRQHandler+0x5f4>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	015a      	lsls	r2, r3, #5
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d72:	4619      	mov	r1, r3
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f043 0302 	orr.w	r3, r3, #2
 8001d86:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f002 fc94 	bl	80046be <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8001d96:	78fa      	ldrb	r2, [r7, #3]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	440b      	add	r3, r1
 8001da4:	335d      	adds	r3, #93	; 0x5d
 8001da6:	2203      	movs	r2, #3
 8001da8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db6:	461a      	mov	r2, r3
 8001db8:	2310      	movs	r3, #16
 8001dba:	6093      	str	r3, [r2, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	333f      	adds	r3, #63	; 0x3f
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00a      	beq.n	8001de8 <HCD_HC_IN_IRQHandler+0x646>
              (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001dd2:	78fa      	ldrb	r2, [r7, #3]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	333f      	adds	r3, #63	; 0x3f
 8001de2:	781b      	ldrb	r3, [r3, #0]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d118      	bne.n	8001e1a <HCD_HC_IN_IRQHandler+0x678>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001dfe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e06:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e14:	461a      	mov	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	6013      	str	r3, [r2, #0]
}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd90      	pop	{r4, r7, pc}

08001e22 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval None
  */
static void HCD_HC_OUT_IRQHandler  (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e22:	b590      	push	{r4, r7, lr}
 8001e24:	b085      	sub	sp, #20
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	60fb      	str	r3, [r7, #12]
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	015a      	lsls	r2, r3, #5
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d01a      	beq.n	8001e80 <HCD_HC_OUT_IRQHandler+0x5e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e56:	461a      	mov	r2, r3
 8001e58:	2304      	movs	r3, #4
 8001e5a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e68:	4619      	mov	r1, r3
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	60cb      	str	r3, [r1, #12]
    }
    
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
  }
} 
 8001e7e:	e2ed      	b.n	800245c <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d041      	beq.n	8001f1a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	015a      	lsls	r2, r3, #5
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2320      	movs	r3, #32
 8001ea6:	6093      	str	r3, [r2, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	440b      	add	r3, r1
 8001eb6:	333d      	adds	r3, #61	; 0x3d
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	f040 82ce 	bne.w	800245c <HCD_HC_OUT_IRQHandler+0x63a>
      hhcd->hc[chnum].state = HC_NYET;     
 8001ec0:	78fa      	ldrb	r2, [r7, #3]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	440b      	add	r3, r1
 8001ece:	335d      	adds	r3, #93	; 0x5d
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f002 fbdd 	bl	80046be <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001f04:	78fa      	ldrb	r2, [r7, #3]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	440b      	add	r3, r1
 8001f12:	335c      	adds	r3, #92	; 0x5c
 8001f14:	2202      	movs	r2, #2
 8001f16:	701a      	strb	r2, [r3, #0]
} 
 8001f18:	e2a0      	b.n	800245c <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d035      	beq.n	8001f9c <HCD_HC_OUT_IRQHandler+0x17a>
    hhcd->hc[chnum].state = HC_NYET;
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	335d      	adds	r3, #93	; 0x5d
 8001f40:	2204      	movs	r2, #4
 8001f42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt= 0U;    
 8001f44:	78fa      	ldrb	r2, [r7, #3]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	440b      	add	r3, r1
 8001f52:	3358      	adds	r3, #88	; 0x58
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f64:	4619      	mov	r1, r3
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f002 fb9b 	bl	80046be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	461a      	mov	r2, r3
 8001f96:	2340      	movs	r3, #64	; 0x40
 8001f98:	6093      	str	r3, [r2, #8]
} 
 8001f9a:	e25f      	b.n	800245c <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d022      	beq.n	8001ff8 <HCD_HC_OUT_IRQHandler+0x1d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	015a      	lsls	r2, r3, #5
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f043 0302 	orr.w	r3, r3, #2
 8001fd2:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f002 fb6e 	bl	80046be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fee:	461a      	mov	r2, r3
 8001ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff4:	6093      	str	r3, [r2, #8]
} 
 8001ff6:	e231      	b.n	800245c <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d035      	beq.n	800207a <HCD_HC_OUT_IRQHandler+0x258>
      hhcd->hc[chnum].ErrCnt = 0U;  
 800200e:	78fa      	ldrb	r2, [r7, #3]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	440b      	add	r3, r1
 800201c:	3358      	adds	r3, #88	; 0x58
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4413      	add	r3, r2
 800202a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202e:	4619      	mov	r1, r3
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	015a      	lsls	r2, r3, #5
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4413      	add	r3, r2
 8002038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f043 0302 	orr.w	r3, r3, #2
 8002042:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	78fa      	ldrb	r2, [r7, #3]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f002 fb36 	bl	80046be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4413      	add	r3, r2
 800205a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205e:	461a      	mov	r2, r3
 8002060:	2301      	movs	r3, #1
 8002062:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	335d      	adds	r3, #93	; 0x5d
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
} 
 8002078:	e1f0      	b.n	800245c <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4413      	add	r3, r2
 8002082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d02b      	beq.n	80020e8 <HCD_HC_OUT_IRQHandler+0x2c6>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209c:	461a      	mov	r2, r3
 800209e:	2308      	movs	r3, #8
 80020a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ae:	4619      	mov	r1, r3
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f043 0302 	orr.w	r3, r3, #2
 80020c2:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	78fa      	ldrb	r2, [r7, #3]
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f002 faf6 	bl	80046be <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	335d      	adds	r3, #93	; 0x5d
 80020e2:	2205      	movs	r2, #5
 80020e4:	701a      	strb	r2, [r3, #0]
} 
 80020e6:	e1b9      	b.n	800245c <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d035      	beq.n	800216a <HCD_HC_OUT_IRQHandler+0x348>
    hhcd->hc[chnum].ErrCnt = 0U;  
 80020fe:	78fa      	ldrb	r2, [r7, #3]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	3358      	adds	r3, #88	; 0x58
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4413      	add	r3, r2
 800211a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211e:	4619      	mov	r1, r3
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f043 0302 	orr.w	r3, r3, #2
 8002132:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f002 fabe 	bl	80046be <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	440b      	add	r3, r1
 8002150:	335d      	adds	r3, #93	; 0x5d
 8002152:	2203      	movs	r2, #3
 8002154:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4413      	add	r3, r2
 800215e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002162:	461a      	mov	r2, r3
 8002164:	2310      	movs	r3, #16
 8002166:	6093      	str	r3, [r2, #8]
} 
 8002168:	e178      	b.n	800245c <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4413      	add	r3, r2
 8002172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217c:	2b00      	cmp	r3, #0
 800217e:	d02b      	beq.n	80021d8 <HCD_HC_OUT_IRQHandler+0x3b6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4413      	add	r3, r2
 8002188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218c:	4619      	mov	r1, r3
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4413      	add	r3, r2
 8002196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f002 fa87 	bl	80046be <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	440b      	add	r3, r1
 80021be:	335d      	adds	r3, #93	; 0x5d
 80021c0:	2206      	movs	r2, #6
 80021c2:	701a      	strb	r2, [r3, #0]
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d0:	461a      	mov	r2, r3
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	6093      	str	r3, [r2, #8]
} 
 80021d6:	e141      	b.n	800245c <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d035      	beq.n	800225a <HCD_HC_OUT_IRQHandler+0x438>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fa:	4619      	mov	r1, r3
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	015a      	lsls	r2, r3, #5
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f043 0302 	orr.w	r3, r3, #2
 800220e:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f002 fa50 	bl	80046be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4413      	add	r3, r2
 8002226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222a:	461a      	mov	r2, r3
 800222c:	2310      	movs	r3, #16
 800222e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	015a      	lsls	r2, r3, #5
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4413      	add	r3, r2
 8002238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223c:	461a      	mov	r2, r3
 800223e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002242:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	335d      	adds	r3, #93	; 0x5d
 8002254:	2208      	movs	r2, #8
 8002256:	701a      	strb	r2, [r3, #0]
} 
 8002258:	e100      	b.n	800245c <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4413      	add	r3, r2
 8002262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80f5 	beq.w	800245c <HCD_HC_OUT_IRQHandler+0x63a>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4413      	add	r3, r2
 800227a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227e:	4619      	mov	r1, r3
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f023 0302 	bic.w	r3, r3, #2
 8002292:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	440b      	add	r3, r1
 80022a2:	335d      	adds	r3, #93	; 0x5d
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d12c      	bne.n	8002304 <HCD_HC_OUT_IRQHandler+0x4e2>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	440b      	add	r3, r1
 80022b8:	335c      	adds	r3, #92	; 0x5c
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 80022be:	78fa      	ldrb	r2, [r7, #3]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	333f      	adds	r3, #63	; 0x3f
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	f040 80ac 	bne.w	800242e <HCD_HC_OUT_IRQHandler+0x60c>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	78f9      	ldrb	r1, [r7, #3]
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4403      	add	r3, r0
 80022e6:	3351      	adds	r3, #81	; 0x51
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	f083 0301 	eor.w	r3, r3, #1
 80022ee:	b2d8      	uxtb	r0, r3
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	3351      	adds	r3, #81	; 0x51
 80022fe:	4602      	mov	r2, r0
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	e094      	b.n	800242e <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	440b      	add	r3, r1
 8002312:	335d      	adds	r3, #93	; 0x5d
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d10a      	bne.n	8002330 <HCD_HC_OUT_IRQHandler+0x50e>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	335c      	adds	r3, #92	; 0x5c
 800232a:	2202      	movs	r2, #2
 800232c:	701a      	strb	r2, [r3, #0]
 800232e:	e07e      	b.n	800242e <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 8002330:	78fa      	ldrb	r2, [r7, #3]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	335d      	adds	r3, #93	; 0x5d
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b04      	cmp	r3, #4
 8002344:	d114      	bne.n	8002370 <HCD_HC_OUT_IRQHandler+0x54e>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002346:	78fa      	ldrb	r2, [r7, #3]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	440b      	add	r3, r1
 8002354:	335c      	adds	r3, #92	; 0x5c
 8002356:	2202      	movs	r2, #2
 8002358:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].do_ping = 0U;
 800235a:	78fa      	ldrb	r2, [r7, #3]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	333d      	adds	r3, #61	; 0x3d
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	e05e      	b.n	800242e <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	335d      	adds	r3, #93	; 0x5d
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b05      	cmp	r3, #5
 8002384:	d10a      	bne.n	800239c <HCD_HC_OUT_IRQHandler+0x57a>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	335c      	adds	r3, #92	; 0x5c
 8002396:	2205      	movs	r2, #5
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	e048      	b.n	800242e <HCD_HC_OUT_IRQHandler+0x60c>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	335d      	adds	r3, #93	; 0x5d
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d00a      	beq.n	80023c8 <HCD_HC_OUT_IRQHandler+0x5a6>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	440b      	add	r3, r1
 80023c0:	335d      	adds	r3, #93	; 0x5d
 80023c2:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d132      	bne.n	800242e <HCD_HC_OUT_IRQHandler+0x60c>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	3358      	adds	r3, #88	; 0x58
 80023d8:	6819      	ldr	r1, [r3, #0]
 80023da:	1c48      	adds	r0, r1, #1
 80023dc:	687c      	ldr	r4, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4423      	add	r3, r4
 80023e8:	3358      	adds	r3, #88	; 0x58
 80023ea:	6018      	str	r0, [r3, #0]
 80023ec:	2903      	cmp	r1, #3
 80023ee:	d914      	bls.n	800241a <HCD_HC_OUT_IRQHandler+0x5f8>
        hhcd->hc[chnum].ErrCnt = 0U;
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	3358      	adds	r3, #88	; 0x58
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	440b      	add	r3, r1
 8002412:	335c      	adds	r3, #92	; 0x5c
 8002414:	2204      	movs	r2, #4
 8002416:	701a      	strb	r2, [r3, #0]
 8002418:	e009      	b.n	800242e <HCD_HC_OUT_IRQHandler+0x60c>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	335c      	adds	r3, #92	; 0x5c
 800242a:	2202      	movs	r2, #2
 800242c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800242e:	78fb      	ldrb	r3, [r7, #3]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243a:	461a      	mov	r2, r3
 800243c:	2302      	movs	r3, #2
 800243e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	440b      	add	r3, r1
 800244e:	335c      	adds	r3, #92	; 0x5c
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	4619      	mov	r1, r3
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f005 fea8 	bl	80081ac <HAL_HCD_HC_NotifyURBChange_Callback>
} 
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	bd90      	pop	{r4, r7, pc}

08002464 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	61fb      	str	r3, [r7, #28]
  uint8_t  channelnum = 0;  
 8002472:	2300      	movs	r3, #0
 8002474:	76fb      	strb	r3, [r7, #27]
  uint32_t pktsts;
  uint32_t pktcnt; 
  uint32_t temp = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
  
  temp = hhcd->Instance->GRXSTSP;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	617b      	str	r3, [r7, #20]
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	76fb      	strb	r3, [r7, #27]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	0c5b      	lsrs	r3, r3, #17
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	60fb      	str	r3, [r7, #12]
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024a2:	60bb      	str	r3, [r7, #8]
  
  switch (pktsts)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d003      	beq.n	80024b2 <HCD_RXQLVL_IRQHandler+0x4e>
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	f000 8082 	beq.w	80025b4 <HCD_RXQLVL_IRQHandler+0x150>
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
    break;
  case GRXSTS_PKTSTS_IN_XFER_COMP:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 80024b0:	e083      	b.n	80025ba <HCD_RXQLVL_IRQHandler+0x156>
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d07f      	beq.n	80025b8 <HCD_RXQLVL_IRQHandler+0x154>
 80024b8:	7efa      	ldrb	r2, [r7, #27]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	440b      	add	r3, r1
 80024c6:	3344      	adds	r3, #68	; 0x44
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d074      	beq.n	80025b8 <HCD_RXQLVL_IRQHandler+0x154>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	7efa      	ldrb	r2, [r7, #27]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	440b      	add	r3, r1
 80024e0:	3344      	adds	r3, #68	; 0x44
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	b292      	uxth	r2, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f001 fcc8 	bl	8003e7e <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 80024ee:	7efa      	ldrb	r2, [r7, #27]
 80024f0:	7ef9      	ldrb	r1, [r7, #27]
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4403      	add	r3, r0
 80024fe:	3344      	adds	r3, #68	; 0x44
 8002500:	6819      	ldr	r1, [r3, #0]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	4419      	add	r1, r3
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4403      	add	r3, r0
 8002512:	3344      	adds	r3, #68	; 0x44
 8002514:	6019      	str	r1, [r3, #0]
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8002516:	7efa      	ldrb	r2, [r7, #27]
 8002518:	7ef9      	ldrb	r1, [r7, #27]
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4403      	add	r3, r0
 8002526:	334c      	adds	r3, #76	; 0x4c
 8002528:	6819      	ldr	r1, [r3, #0]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	4419      	add	r1, r3
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4403      	add	r3, r0
 800253a:	334c      	adds	r3, #76	; 0x4c
 800253c:	6019      	str	r1, [r3, #0]
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 800253e:	7efb      	ldrb	r3, [r7, #27]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <HCD_RXQLVL_IRQHandler+0x160>)
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d031      	beq.n	80025b8 <HCD_RXQLVL_IRQHandler+0x154>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8002554:	7efb      	ldrb	r3, [r7, #27]
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	4413      	add	r3, r2
 800255c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800256a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002572:	613b      	str	r3, [r7, #16]
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8002574:	7efb      	ldrb	r3, [r7, #27]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	461a      	mov	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	6013      	str	r3, [r2, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8002586:	7efa      	ldrb	r2, [r7, #27]
 8002588:	7ef9      	ldrb	r1, [r7, #27]
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4403      	add	r3, r0
 8002596:	3350      	adds	r3, #80	; 0x50
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	f083 0301 	eor.w	r3, r3, #1
 800259e:	b2d8      	uxtb	r0, r3
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	440b      	add	r3, r1
 80025ac:	3350      	adds	r3, #80	; 0x50
 80025ae:	4602      	mov	r2, r0
 80025b0:	701a      	strb	r2, [r3, #0]
    break;
 80025b2:	e001      	b.n	80025b8 <HCD_RXQLVL_IRQHandler+0x154>
    break;
 80025b4:	bf00      	nop
 80025b6:	e000      	b.n	80025ba <HCD_RXQLVL_IRQHandler+0x156>
    break;
 80025b8:	bf00      	nop
  }
}
 80025ba:	bf00      	nop
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	1ff80000 	.word	0x1ff80000

080025c8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	613b      	str	r3, [r7, #16]
  hprt0_dup = USBx_HPRT0;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60fb      	str	r3, [r7, #12]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80025f0:	60fb      	str	r3, [r7, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d113      	bne.n	8002624 <HCD_Port_IRQHandler+0x5c>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b01      	cmp	r3, #1
 8002604:	d10a      	bne.n	800261c <HCD_Port_IRQHandler+0x54>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	6992      	ldr	r2, [r2, #24]
 8002610:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002614:	619a      	str	r2, [r3, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f005 fdac 	bl	8008174 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	60fb      	str	r3, [r7, #12]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b08      	cmp	r3, #8
 800262c:	d142      	bne.n	80026b4 <HCD_Port_IRQHandler+0xec>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f043 0308 	orr.w	r3, r3, #8
 8002634:	60fb      	str	r3, [r7, #12]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b04      	cmp	r3, #4
 800263e:	d126      	bne.n	800268e <HCD_Port_IRQHandler+0xc6>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d113      	bne.n	8002670 <HCD_Port_IRQHandler+0xa8>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800264e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002652:	d106      	bne.n	8002662 <HCD_Port_IRQHandler+0x9a>
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2102      	movs	r1, #2
 800265a:	4618      	mov	r0, r3
 800265c:	f001 fd2e 	bl	80040bc <USB_InitFSLSPClkSel>
 8002660:	e011      	b.n	8002686 <HCD_Port_IRQHandler+0xbe>
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2101      	movs	r1, #1
 8002668:	4618      	mov	r0, r3
 800266a:	f001 fd27 	bl	80040bc <USB_InitFSLSPClkSel>
 800266e:	e00a      	b.n	8002686 <HCD_Port_IRQHandler+0xbe>
        }
      }
      else
      {
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d106      	bne.n	8002686 <HCD_Port_IRQHandler+0xbe>
        {
          USBx_HOST->HFIR = 60000U;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800267e:	461a      	mov	r2, r3
 8002680:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002684:	6053      	str	r3, [r2, #4]
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f005 fd74 	bl	8008174 <HAL_HCD_Connect_Callback>
 800268c:	e012      	b.n	80026b4 <HCD_Port_IRQHandler+0xec>
    }
    else
    {
      /* Clean up HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002694:	461a      	mov	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80026a2:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	6992      	ldr	r2, [r2, #24]
 80026ae:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80026b2:	619a      	str	r2, [r3, #24]
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d103      	bne.n	80026c6 <HCD_Port_IRQHandler+0xfe>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f043 0320 	orr.w	r3, r3, #32
 80026c4:	60fb      	str	r3, [r7, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80026cc:	461a      	mov	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6013      	str	r3, [r2, #0]
}
 80026d2:	bf00      	nop
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0ca      	b.n	8002886 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b67      	ldr	r3, [pc, #412]	; (8002890 <HAL_RCC_ClockConfig+0x1b4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 020f 	and.w	r2, r3, #15
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d20c      	bcs.n	8002718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b64      	ldr	r3, [pc, #400]	; (8002890 <HAL_RCC_ClockConfig+0x1b4>)
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b62      	ldr	r3, [pc, #392]	; (8002890 <HAL_RCC_ClockConfig+0x1b4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 020f 	and.w	r2, r3, #15
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0b6      	b.n	8002886 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002730:	4a58      	ldr	r2, [pc, #352]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002732:	4b58      	ldr	r3, [pc, #352]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800273a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002748:	4a52      	ldr	r2, [pc, #328]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 800274a:	4b52      	ldr	r3, [pc, #328]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	494f      	ldr	r1, [pc, #316]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002756:	4b4f      	ldr	r3, [pc, #316]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d044      	beq.n	80027fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b46      	ldr	r3, [pc, #280]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d119      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07d      	b.n	8002886 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d003      	beq.n	800279a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002796:	2b03      	cmp	r3, #3
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	4b3e      	ldr	r3, [pc, #248]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e06d      	b.n	8002886 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e065      	b.n	8002886 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ba:	4936      	ldr	r1, [pc, #216]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 80027bc:	4b35      	ldr	r3, [pc, #212]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 0203 	bic.w	r2, r3, #3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027cc:	f7fe f8ae 	bl	800092c <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d4:	f7fe f8aa 	bl	800092c <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e04d      	b.n	8002886 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 020c 	and.w	r2, r3, #12
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d1eb      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027fc:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_RCC_ClockConfig+0x1b4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 020f 	and.w	r2, r3, #15
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d90c      	bls.n	8002824 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_RCC_ClockConfig+0x1b4>)
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <HAL_RCC_ClockConfig+0x1b4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 020f 	and.w	r2, r3, #15
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e030      	b.n	8002886 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002830:	4918      	ldr	r1, [pc, #96]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002832:	4b18      	ldr	r3, [pc, #96]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800284e:	4911      	ldr	r1, [pc, #68]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002850:	4b10      	ldr	r3, [pc, #64]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002862:	f000 fb7b 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 8002866:	4601      	mov	r1, r0
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	4a09      	ldr	r2, [pc, #36]	; (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	5cd3      	ldrb	r3, [r2, r3]
 8002876:	fa21 f303 	lsr.w	r3, r1, r3
 800287a:	4a08      	ldr	r2, [pc, #32]	; (800289c <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800287e:	2001      	movs	r0, #1
 8002880:	f7fe f810 	bl	80008a4 <HAL_InitTick>

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023c00 	.word	0x40023c00
 8002894:	40023800 	.word	0x40023800
 8002898:	08009ab8 	.word	0x08009ab8
 800289c:	20000078 	.word	0x20000078

080028a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000078 	.word	0x20000078

080028b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028bc:	f7ff fff0 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028c0:	4601      	mov	r1, r0
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	0a9b      	lsrs	r3, r3, #10
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	4a03      	ldr	r2, [pc, #12]	; (80028dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ce:	5cd3      	ldrb	r3, [r2, r3]
 80028d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40023800 	.word	0x40023800
 80028dc:	08009ac8 	.word	0x08009ac8

080028e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028e4:	f7ff ffdc 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028e8:	4601      	mov	r1, r0
 80028ea:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	0b5b      	lsrs	r3, r3, #13
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	4a03      	ldr	r2, [pc, #12]	; (8002904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40023800 	.word	0x40023800
 8002904:	08009ac8 	.word	0x08009ac8

08002908 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	; 0x30
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d010      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002940:	496f      	ldr	r1, [pc, #444]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002942:	4b6f      	ldr	r3, [pc, #444]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002948:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800295e:	2301      	movs	r3, #1
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d010      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800296e:	4964      	ldr	r1, [pc, #400]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002970:	4b63      	ldr	r3, [pc, #396]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002976:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800298c:	2301      	movs	r3, #1
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d017      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800299c:	4958      	ldr	r1, [pc, #352]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800299e:	4b58      	ldr	r3, [pc, #352]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029ba:	d101      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80029bc:	2301      	movs	r3, #1
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80029c8:	2301      	movs	r3, #1
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d017      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029d8:	4949      	ldr	r1, [pc, #292]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029da:	4b49      	ldr	r3, [pc, #292]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f6:	d101      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80029f8:	2301      	movs	r3, #1
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002a04:	2301      	movs	r3, #1
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 808a 	beq.w	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	4a39      	ldr	r2, [pc, #228]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a1c:	4b38      	ldr	r3, [pc, #224]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6413      	str	r3, [r2, #64]	; 0x40
 8002a26:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002a32:	4a34      	ldr	r2, [pc, #208]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002a34:	4b33      	ldr	r3, [pc, #204]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a3e:	f7fd ff75 	bl	800092c <HAL_GetTick>
 8002a42:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a46:	f7fd ff71 	bl	800092c <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e278      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a58:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a64:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d02f      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d028      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a82:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a8c:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a92:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002a98:	4a19      	ldr	r2, [pc, #100]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a9e:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d014      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7fd ff3f 	bl	800092c <HAL_GetTick>
 8002aae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fd ff3b 	bl	800092c <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e240      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ee      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002adc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ae0:	d114      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002ae2:	4907      	ldr	r1, [pc, #28]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af8:	4313      	orrs	r3, r2
 8002afa:	608b      	str	r3, [r1, #8]
 8002afc:	e00c      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40007000 	.word	0x40007000
 8002b08:	42470e40 	.word	0x42470e40
 8002b0c:	4a4a      	ldr	r2, [pc, #296]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b0e:	4b4a      	ldr	r3, [pc, #296]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b16:	6093      	str	r3, [r2, #8]
 8002b18:	4947      	ldr	r1, [pc, #284]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b1a:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b26:	4313      	orrs	r3, r2
 8002b28:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d004      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b36:	4a41      	ldr	r2, [pc, #260]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b3e:	6013      	str	r3, [r2, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002b4c:	493a      	ldr	r1, [pc, #232]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b4e:	4b3a      	ldr	r3, [pc, #232]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b6e:	4932      	ldr	r1, [pc, #200]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b70:	4b31      	ldr	r3, [pc, #196]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b76:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d011      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b90:	4929      	ldr	r1, [pc, #164]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b92:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b98:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002bc0:	491d      	ldr	r1, [pc, #116]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bc2:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d011      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002be2:	4915      	ldr	r1, [pc, #84]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002be4:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c00:	d101      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002c02:	2301      	movs	r3, #1
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c14:	f040 80ff 	bne.w	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c1e:	f7fd fe85 	bl	800092c <HAL_GetTick>
 8002c22:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c24:	e00e      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c26:	f7fd fe81 	bl	800092c <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d907      	bls.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e188      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	424711e0 	.word	0x424711e0
 8002c40:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c44:	4b7e      	ldr	r3, [pc, #504]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1ea      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d009      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d028      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d124      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c78:	4b71      	ldr	r3, [pc, #452]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c7e:	0c1b      	lsrs	r3, r3, #16
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	3301      	adds	r3, #1
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c8a:	4b6d      	ldr	r3, [pc, #436]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c90:	0e1b      	lsrs	r3, r3, #24
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c98:	4969      	ldr	r1, [pc, #420]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	019b      	lsls	r3, r3, #6
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	085b      	lsrs	r3, r3, #1
 8002caa:	3b01      	subs	r3, #1
 8002cac:	041b      	lsls	r3, r3, #16
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	061b      	lsls	r3, r3, #24
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	071b      	lsls	r3, r3, #28
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d035      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cec:	d130      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002cee:	4b54      	ldr	r3, [pc, #336]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf4:	0c1b      	lsrs	r3, r3, #16
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d00:	4b4f      	ldr	r3, [pc, #316]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d06:	0f1b      	lsrs	r3, r3, #28
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002d0e:	494c      	ldr	r1, [pc, #304]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	019b      	lsls	r3, r3, #6
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	3b01      	subs	r3, #1
 8002d22:	041b      	lsls	r3, r3, #16
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	061b      	lsls	r3, r3, #24
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	071b      	lsls	r3, r3, #28
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d38:	4941      	ldr	r1, [pc, #260]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d3a:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d40:	f023 021f 	bic.w	r2, r3, #31
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d029      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d64:	d124      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002d66:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d6c:	0c1b      	lsrs	r3, r3, #16
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	3301      	adds	r3, #1
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d78:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d7e:	0f1b      	lsrs	r3, r3, #28
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002d86:	492e      	ldr	r1, [pc, #184]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	019b      	lsls	r3, r3, #6
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	085b      	lsrs	r3, r3, #1
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	041b      	lsls	r3, r3, #16
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	061b      	lsls	r3, r3, #24
 8002da4:	431a      	orrs	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	071b      	lsls	r3, r3, #28
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d016      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dbc:	4920      	ldr	r1, [pc, #128]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	019b      	lsls	r3, r3, #6
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	085b      	lsrs	r3, r3, #1
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	041b      	lsls	r3, r3, #16
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	061b      	lsls	r3, r3, #24
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	071b      	lsls	r3, r3, #28
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002dea:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002df0:	f7fd fd9c 	bl	800092c <HAL_GetTick>
 8002df4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002df8:	f7fd fd98 	bl	800092c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e09f      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	f040 8095 	bne.w	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e24:	f7fd fd82 	bl	800092c <HAL_GetTick>
 8002e28:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e2a:	e00f      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002e2c:	f7fd fd7e 	bl	800092c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d908      	bls.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e085      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800
 8002e44:	42470068 	.word	0x42470068
 8002e48:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e4c:	4b41      	ldr	r3, [pc, #260]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e58:	d0e8      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d02b      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d127      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002e82:	4b34      	ldr	r3, [pc, #208]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002e94:	492f      	ldr	r1, [pc, #188]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	019b      	lsls	r3, r3, #6
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	041b      	lsls	r3, r3, #16
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002eb8:	4926      	ldr	r1, [pc, #152]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002eba:	4b26      	ldr	r3, [pc, #152]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ec0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d01d      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ee6:	d118      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ee8:	4b1a      	ldr	r3, [pc, #104]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eee:	0e1b      	lsrs	r3, r3, #24
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002ef6:	4917      	ldr	r1, [pc, #92]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699a      	ldr	r2, [r3, #24]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	019b      	lsls	r3, r3, #6
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	085b      	lsrs	r3, r3, #1
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	041b      	lsls	r3, r3, #16
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	061b      	lsls	r3, r3, #24
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f1a:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f20:	f7fd fd04 	bl	800092c <HAL_GetTick>
 8002f24:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002f28:	f7fd fd00 	bl	800092c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e007      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f3a:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f46:	d1ef      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3730      	adds	r7, #48	; 0x30
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800
 8002f58:	42470070 	.word	0x42470070

08002f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f60:	b0a1      	sub	sp, #132	; 0x84
 8002f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f78:	4ba0      	ldr	r3, [pc, #640]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	f200 8193 	bhi.w	80032ac <HAL_RCC_GetSysClockFreq+0x350>
 8002f86:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <HAL_RCC_GetSysClockFreq+0x30>)
 8002f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8c:	08002fc1 	.word	0x08002fc1
 8002f90:	080032ad 	.word	0x080032ad
 8002f94:	080032ad 	.word	0x080032ad
 8002f98:	080032ad 	.word	0x080032ad
 8002f9c:	08002fc7 	.word	0x08002fc7
 8002fa0:	080032ad 	.word	0x080032ad
 8002fa4:	080032ad 	.word	0x080032ad
 8002fa8:	080032ad 	.word	0x080032ad
 8002fac:	08002fcd 	.word	0x08002fcd
 8002fb0:	080032ad 	.word	0x080032ad
 8002fb4:	080032ad 	.word	0x080032ad
 8002fb8:	080032ad 	.word	0x080032ad
 8002fbc:	08003149 	.word	0x08003149
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fc0:	4b8f      	ldr	r3, [pc, #572]	; (8003200 <HAL_RCC_GetSysClockFreq+0x2a4>)
 8002fc2:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8002fc4:	e175      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fc6:	4b8f      	ldr	r3, [pc, #572]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2a8>)
 8002fc8:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8002fca:	e172      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fcc:	4b8b      	ldr	r3, [pc, #556]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd4:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fd6:	4b89      	ldr	r3, [pc, #548]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d056      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe2:	4b86      	ldr	r3, [pc, #536]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	099b      	lsrs	r3, r3, #6
 8002fe8:	f04f 0400 	mov.w	r4, #0
 8002fec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	ea01 0103 	and.w	r1, r1, r3
 8002ff8:	ea02 0204 	and.w	r2, r2, r4
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4614      	mov	r4, r2
 8003000:	0160      	lsls	r0, r4, #5
 8003002:	6678      	str	r0, [r7, #100]	; 0x64
 8003004:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003006:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800300a:	6678      	str	r0, [r7, #100]	; 0x64
 800300c:	015b      	lsls	r3, r3, #5
 800300e:	663b      	str	r3, [r7, #96]	; 0x60
 8003010:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8003014:	1a5b      	subs	r3, r3, r1
 8003016:	eb64 0402 	sbc.w	r4, r4, r2
 800301a:	01a0      	lsls	r0, r4, #6
 800301c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800301e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003020:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8003024:	65f8      	str	r0, [r7, #92]	; 0x5c
 8003026:	0198      	lsls	r0, r3, #6
 8003028:	65b8      	str	r0, [r7, #88]	; 0x58
 800302a:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 800302e:	1aed      	subs	r5, r5, r3
 8003030:	eb66 0604 	sbc.w	r6, r6, r4
 8003034:	4633      	mov	r3, r6
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	657b      	str	r3, [r7, #84]	; 0x54
 800303a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800303c:	4628      	mov	r0, r5
 800303e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003042:	657b      	str	r3, [r7, #84]	; 0x54
 8003044:	462b      	mov	r3, r5
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	653b      	str	r3, [r7, #80]	; 0x50
 800304a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800304e:	461d      	mov	r5, r3
 8003050:	4626      	mov	r6, r4
 8003052:	186b      	adds	r3, r5, r1
 8003054:	eb46 0402 	adc.w	r4, r6, r2
 8003058:	4618      	mov	r0, r3
 800305a:	4621      	mov	r1, r4
 800305c:	460b      	mov	r3, r1
 800305e:	025b      	lsls	r3, r3, #9
 8003060:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003064:	4602      	mov	r2, r0
 8003066:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 800306a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800306c:	4603      	mov	r3, r0
 800306e:	025b      	lsls	r3, r3, #9
 8003070:	64bb      	str	r3, [r7, #72]	; 0x48
 8003072:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003076:	4618      	mov	r0, r3
 8003078:	4621      	mov	r1, r4
 800307a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800307c:	f04f 0400 	mov.w	r4, #0
 8003080:	461a      	mov	r2, r3
 8003082:	4623      	mov	r3, r4
 8003084:	f7fd fa64 	bl	8000550 <__aeabi_uldivmod>
 8003088:	4603      	mov	r3, r0
 800308a:	460c      	mov	r4, r1
 800308c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800308e:	e04d      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003090:	4b5a      	ldr	r3, [pc, #360]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	f04f 0400 	mov.w	r4, #0
 800309a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	ea01 0103 	and.w	r1, r1, r3
 80030a6:	ea02 0204 	and.w	r2, r2, r4
 80030aa:	460b      	mov	r3, r1
 80030ac:	4614      	mov	r4, r2
 80030ae:	0160      	lsls	r0, r4, #5
 80030b0:	6478      	str	r0, [r7, #68]	; 0x44
 80030b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80030b4:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80030b8:	6478      	str	r0, [r7, #68]	; 0x44
 80030ba:	015b      	lsls	r3, r3, #5
 80030bc:	643b      	str	r3, [r7, #64]	; 0x40
 80030be:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80030c2:	1a5b      	subs	r3, r3, r1
 80030c4:	eb64 0402 	sbc.w	r4, r4, r2
 80030c8:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 80030cc:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 80030d0:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 80030d4:	ebba 0a03 	subs.w	sl, sl, r3
 80030d8:	eb6b 0b04 	sbc.w	fp, fp, r4
 80030dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ea:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80030ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80030f0:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80030f4:	eb1a 0a01 	adds.w	sl, sl, r1
 80030f8:	eb4b 0b02 	adc.w	fp, fp, r2
 80030fc:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8003100:	637b      	str	r3, [r7, #52]	; 0x34
 8003102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003104:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 8003108:	637b      	str	r3, [r7, #52]	; 0x34
 800310a:	ea4f 238a 	mov.w	r3, sl, lsl #10
 800310e:	633b      	str	r3, [r7, #48]	; 0x30
 8003110:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003114:	4650      	mov	r0, sl
 8003116:	4659      	mov	r1, fp
 8003118:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800311a:	f04f 0400 	mov.w	r4, #0
 800311e:	461a      	mov	r2, r3
 8003120:	4623      	mov	r3, r4
 8003122:	f7fd fa15 	bl	8000550 <__aeabi_uldivmod>
 8003126:	4603      	mov	r3, r0
 8003128:	460c      	mov	r4, r1
 800312a:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800312c:	4b33      	ldr	r3, [pc, #204]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2a0>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	3301      	adds	r3, #1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 800313c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800313e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8003146:	e0b4      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003148:	4b2c      	ldr	r3, [pc, #176]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2a0>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003150:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003152:	4b2a      	ldr	r3, [pc, #168]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d054      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315e:	4b27      	ldr	r3, [pc, #156]	; (80031fc <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	099b      	lsrs	r3, r3, #6
 8003164:	f04f 0400 	mov.w	r4, #0
 8003168:	f240 11ff 	movw	r1, #511	; 0x1ff
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	ea01 0103 	and.w	r1, r1, r3
 8003174:	ea02 0204 	and.w	r2, r2, r4
 8003178:	460b      	mov	r3, r1
 800317a:	4614      	mov	r4, r2
 800317c:	0160      	lsls	r0, r4, #5
 800317e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003180:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003182:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003186:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003188:	015b      	lsls	r3, r3, #5
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
 800318c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003190:	1a5b      	subs	r3, r3, r1
 8003192:	eb64 0402 	sbc.w	r4, r4, r2
 8003196:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800319a:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800319e:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80031a2:	ebb8 0803 	subs.w	r8, r8, r3
 80031a6:	eb69 0904 	sbc.w	r9, r9, r4
 80031aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
 80031b8:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80031bc:	623b      	str	r3, [r7, #32]
 80031be:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031c2:	eb18 0801 	adds.w	r8, r8, r1
 80031c6:	eb49 0902 	adc.w	r9, r9, r2
 80031ca:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80031d6:	61fb      	str	r3, [r7, #28]
 80031d8:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80031e2:	4640      	mov	r0, r8
 80031e4:	4649      	mov	r1, r9
 80031e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e8:	f04f 0400 	mov.w	r4, #0
 80031ec:	461a      	mov	r2, r3
 80031ee:	4623      	mov	r3, r4
 80031f0:	f7fd f9ae 	bl	8000550 <__aeabi_uldivmod>
 80031f4:	4603      	mov	r3, r0
 80031f6:	460c      	mov	r4, r1
 80031f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031fa:	e04b      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x338>
 80031fc:	40023800 	.word	0x40023800
 8003200:	00f42400 	.word	0x00f42400
 8003204:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003208:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x364>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	099b      	lsrs	r3, r3, #6
 800320e:	f04f 0400 	mov.w	r4, #0
 8003212:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	ea01 0103 	and.w	r1, r1, r3
 800321e:	ea02 0204 	and.w	r2, r2, r4
 8003222:	460b      	mov	r3, r1
 8003224:	4614      	mov	r4, r2
 8003226:	0160      	lsls	r0, r4, #5
 8003228:	6178      	str	r0, [r7, #20]
 800322a:	6978      	ldr	r0, [r7, #20]
 800322c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003230:	6178      	str	r0, [r7, #20]
 8003232:	015b      	lsls	r3, r3, #5
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800323a:	1a5b      	subs	r3, r3, r1
 800323c:	eb64 0402 	sbc.w	r4, r4, r2
 8003240:	01a6      	lsls	r6, r4, #6
 8003242:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8003246:	019d      	lsls	r5, r3, #6
 8003248:	1aed      	subs	r5, r5, r3
 800324a:	eb66 0604 	sbc.w	r6, r6, r4
 800324e:	00f3      	lsls	r3, r6, #3
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	00eb      	lsls	r3, r5, #3
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8003262:	186d      	adds	r5, r5, r1
 8003264:	eb46 0602 	adc.w	r6, r6, r2
 8003268:	02b3      	lsls	r3, r6, #10
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	02ab      	lsls	r3, r5, #10
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	e897 0060 	ldmia.w	r7, {r5, r6}
 800327c:	4628      	mov	r0, r5
 800327e:	4631      	mov	r1, r6
 8003280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003282:	f04f 0400 	mov.w	r4, #0
 8003286:	461a      	mov	r2, r3
 8003288:	4623      	mov	r3, r4
 800328a:	f7fd f961 	bl	8000550 <__aeabi_uldivmod>
 800328e:	4603      	mov	r3, r0
 8003290:	460c      	mov	r4, r1
 8003292:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003294:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x364>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	0f1b      	lsrs	r3, r3, #28
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 80032a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80032a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80032aa:	e002      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032ac:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x368>)
 80032ae:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80032b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3784      	adds	r7, #132	; 0x84
 80032b8:	46bd      	mov	sp, r7
 80032ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
 80032c4:	00f42400 	.word	0x00f42400

080032c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8083 	beq.w	80033e8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032e2:	4b95      	ldr	r3, [pc, #596]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d019      	beq.n	8003322 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032ee:	4b92      	ldr	r3, [pc, #584]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d106      	bne.n	8003308 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032fa:	4b8f      	ldr	r3, [pc, #572]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003306:	d00c      	beq.n	8003322 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003308:	4b8b      	ldr	r3, [pc, #556]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003310:	2b0c      	cmp	r3, #12
 8003312:	d112      	bne.n	800333a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003314:	4b88      	ldr	r3, [pc, #544]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800331c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003320:	d10b      	bne.n	800333a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003322:	4b85      	ldr	r3, [pc, #532]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d05b      	beq.n	80033e6 <HAL_RCC_OscConfig+0x11e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d157      	bne.n	80033e6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e216      	b.n	8003768 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x8a>
 8003344:	4a7c      	ldr	r2, [pc, #496]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 8003346:	4b7c      	ldr	r3, [pc, #496]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	e01d      	b.n	800338e <HAL_RCC_OscConfig+0xc6>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800335a:	d10c      	bne.n	8003376 <HAL_RCC_OscConfig+0xae>
 800335c:	4a76      	ldr	r2, [pc, #472]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 800335e:	4b76      	ldr	r3, [pc, #472]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4a73      	ldr	r2, [pc, #460]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 800336a:	4b73      	ldr	r3, [pc, #460]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	e00b      	b.n	800338e <HAL_RCC_OscConfig+0xc6>
 8003376:	4a70      	ldr	r2, [pc, #448]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 8003378:	4b6f      	ldr	r3, [pc, #444]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	4a6d      	ldr	r2, [pc, #436]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 8003384:	4b6c      	ldr	r3, [pc, #432]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800338c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d013      	beq.n	80033be <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003396:	f7fd fac9 	bl	800092c <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800339e:	f7fd fac5 	bl	800092c <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b64      	cmp	r3, #100	; 0x64
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e1db      	b.n	8003768 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b0:	4b61      	ldr	r3, [pc, #388]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCC_OscConfig+0xd6>
 80033bc:	e014      	b.n	80033e8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7fd fab5 	bl	800092c <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c6:	f7fd fab1 	bl	800092c <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b64      	cmp	r3, #100	; 0x64
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e1c7      	b.n	8003768 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d8:	4b57      	ldr	r3, [pc, #348]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f0      	bne.n	80033c6 <HAL_RCC_OscConfig+0xfe>
 80033e4:	e000      	b.n	80033e8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d06f      	beq.n	80034d4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033f4:	4b50      	ldr	r3, [pc, #320]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d017      	beq.n	8003430 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003400:	4b4d      	ldr	r3, [pc, #308]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003408:	2b08      	cmp	r3, #8
 800340a:	d105      	bne.n	8003418 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800340c:	4b4a      	ldr	r3, [pc, #296]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003418:	4b47      	ldr	r3, [pc, #284]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003420:	2b0c      	cmp	r3, #12
 8003422:	d11c      	bne.n	800345e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003424:	4b44      	ldr	r3, [pc, #272]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d116      	bne.n	800345e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003430:	4b41      	ldr	r3, [pc, #260]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_OscConfig+0x180>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d001      	beq.n	8003448 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e18f      	b.n	8003768 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003448:	493b      	ldr	r1, [pc, #236]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 800344a:	4b3b      	ldr	r3, [pc, #236]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4313      	orrs	r3, r2
 800345a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345c:	e03a      	b.n	80034d4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d020      	beq.n	80034a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003466:	4b35      	ldr	r3, [pc, #212]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fd fa5e 	bl	800092c <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003474:	f7fd fa5a 	bl	800092c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e170      	b.n	8003768 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003486:	4b2c      	ldr	r3, [pc, #176]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003492:	4929      	ldr	r1, [pc, #164]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 8003494:	4b28      	ldr	r3, [pc, #160]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
 80034a6:	e015      	b.n	80034d4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a8:	4b24      	ldr	r3, [pc, #144]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fd fa3d 	bl	800092c <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b6:	f7fd fa39 	bl	800092c <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e14f      	b.n	8003768 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c8:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f0      	bne.n	80034b6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d037      	beq.n	8003550 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d016      	beq.n	8003516 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e8:	4b15      	ldr	r3, [pc, #84]	; (8003540 <HAL_RCC_OscConfig+0x278>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ee:	f7fd fa1d 	bl	800092c <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f6:	f7fd fa19 	bl	800092c <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e12f      	b.n	8003768 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 800350a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x22e>
 8003514:	e01c      	b.n	8003550 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003516:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <HAL_RCC_OscConfig+0x278>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fd fa06 	bl	800092c <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003522:	e00f      	b.n	8003544 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003524:	f7fd fa02 	bl	800092c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d908      	bls.n	8003544 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e118      	b.n	8003768 <HAL_RCC_OscConfig+0x4a0>
 8003536:	bf00      	nop
 8003538:	40023800 	.word	0x40023800
 800353c:	42470000 	.word	0x42470000
 8003540:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003544:	4b8a      	ldr	r3, [pc, #552]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e9      	bne.n	8003524 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8097 	beq.w	800368c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355e:	2300      	movs	r3, #0
 8003560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003562:	4b83      	ldr	r3, [pc, #524]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10f      	bne.n	800358e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	4a7f      	ldr	r2, [pc, #508]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003574:	4b7e      	ldr	r3, [pc, #504]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357c:	6413      	str	r3, [r2, #64]	; 0x40
 800357e:	4b7c      	ldr	r3, [pc, #496]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800358a:	2301      	movs	r3, #1
 800358c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358e:	4b79      	ldr	r3, [pc, #484]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d118      	bne.n	80035cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359a:	4a76      	ldr	r2, [pc, #472]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800359c:	4b75      	ldr	r3, [pc, #468]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a6:	f7fd f9c1 	bl	800092c <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ae:	f7fd f9bd 	bl	800092c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e0d3      	b.n	8003768 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	4b6c      	ldr	r3, [pc, #432]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_OscConfig+0x31a>
 80035d4:	4a66      	ldr	r2, [pc, #408]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 80035d6:	4b66      	ldr	r3, [pc, #408]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6713      	str	r3, [r2, #112]	; 0x70
 80035e0:	e01c      	b.n	800361c <HAL_RCC_OscConfig+0x354>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b05      	cmp	r3, #5
 80035e8:	d10c      	bne.n	8003604 <HAL_RCC_OscConfig+0x33c>
 80035ea:	4a61      	ldr	r2, [pc, #388]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 80035ec:	4b60      	ldr	r3, [pc, #384]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f0:	f043 0304 	orr.w	r3, r3, #4
 80035f4:	6713      	str	r3, [r2, #112]	; 0x70
 80035f6:	4a5e      	ldr	r2, [pc, #376]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 80035f8:	4b5d      	ldr	r3, [pc, #372]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 80035fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6713      	str	r3, [r2, #112]	; 0x70
 8003602:	e00b      	b.n	800361c <HAL_RCC_OscConfig+0x354>
 8003604:	4a5a      	ldr	r2, [pc, #360]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003606:	4b5a      	ldr	r3, [pc, #360]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	f023 0301 	bic.w	r3, r3, #1
 800360e:	6713      	str	r3, [r2, #112]	; 0x70
 8003610:	4a57      	ldr	r2, [pc, #348]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003612:	4b57      	ldr	r3, [pc, #348]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	f023 0304 	bic.w	r3, r3, #4
 800361a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d015      	beq.n	8003650 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7fd f982 	bl	800092c <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362a:	e00a      	b.n	8003642 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800362c:	f7fd f97e 	bl	800092c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e092      	b.n	8003768 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003642:	4b4b      	ldr	r3, [pc, #300]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0ee      	beq.n	800362c <HAL_RCC_OscConfig+0x364>
 800364e:	e014      	b.n	800367a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003650:	f7fd f96c 	bl	800092c <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003656:	e00a      	b.n	800366e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7fd f968 	bl	800092c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e07c      	b.n	8003768 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366e:	4b40      	ldr	r3, [pc, #256]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ee      	bne.n	8003658 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d105      	bne.n	800368c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003680:	4a3b      	ldr	r2, [pc, #236]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d068      	beq.n	8003766 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003694:	4b36      	ldr	r3, [pc, #216]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 030c 	and.w	r3, r3, #12
 800369c:	2b08      	cmp	r3, #8
 800369e:	d060      	beq.n	8003762 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d145      	bne.n	8003734 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a8:	4b33      	ldr	r3, [pc, #204]	; (8003778 <HAL_RCC_OscConfig+0x4b0>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7fd f93d 	bl	800092c <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b6:	f7fd f939 	bl	800092c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e04f      	b.n	8003768 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c8:	4b29      	ldr	r3, [pc, #164]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f0      	bne.n	80036b6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d4:	4926      	ldr	r1, [pc, #152]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	019b      	lsls	r3, r3, #6
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	085b      	lsrs	r3, r3, #1
 80036ee:	3b01      	subs	r3, #1
 80036f0:	041b      	lsls	r3, r3, #16
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	061b      	lsls	r3, r3, #24
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	071b      	lsls	r3, r3, #28
 8003702:	4313      	orrs	r3, r2
 8003704:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003706:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <HAL_RCC_OscConfig+0x4b0>)
 8003708:	2201      	movs	r2, #1
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fd f90e 	bl	800092c <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003714:	f7fd f90a 	bl	800092c <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e020      	b.n	8003768 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003726:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x44c>
 8003732:	e018      	b.n	8003766 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003734:	4b10      	ldr	r3, [pc, #64]	; (8003778 <HAL_RCC_OscConfig+0x4b0>)
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7fd f8f7 	bl	800092c <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003742:	f7fd f8f3 	bl	800092c <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e009      	b.n	8003768 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_RCC_OscConfig+0x4a8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f0      	bne.n	8003742 <HAL_RCC_OscConfig+0x47a>
 8003760:	e001      	b.n	8003766 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40023800 	.word	0x40023800
 8003774:	40007000 	.word	0x40007000
 8003778:	42470060 	.word	0x42470060

0800377c <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e03f      	b.n	800380e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f004 fb94 	bl	8007ed0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2224      	movs	r2, #36	; 0x24
 80037ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	68d2      	ldr	r2, [r2, #12]
 80037ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037be:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f829 	bl	8003818 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	6912      	ldr	r2, [r2, #16]
 80037d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	6952      	ldr	r2, [r2, #20]
 80037e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037e4:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	68d2      	ldr	r2, [r2, #12]
 80037f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037f4:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003832:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003854:	f023 030c 	bic.w	r3, r3, #12
 8003858:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	4313      	orrs	r3, r2
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388c:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a8:	f040 80e4 	bne.w	8003a74 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4aab      	ldr	r2, [pc, #684]	; (8003b60 <UART_SetConfig+0x348>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d004      	beq.n	80038c0 <UART_SetConfig+0xa8>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4aaa      	ldr	r2, [pc, #680]	; (8003b64 <UART_SetConfig+0x34c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d16c      	bne.n	800399a <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681c      	ldr	r4, [r3, #0]
 80038c4:	f7ff f80c 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	009a      	lsls	r2, r3, #2
 80038d2:	441a      	add	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	fbb2 f3f3 	udiv	r3, r2, r3
 80038de:	4aa2      	ldr	r2, [pc, #648]	; (8003b68 <UART_SetConfig+0x350>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	011d      	lsls	r5, r3, #4
 80038e8:	f7fe fffa 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 80038ec:	4602      	mov	r2, r0
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	009a      	lsls	r2, r3, #2
 80038f6:	441a      	add	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8003902:	f7fe ffed 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8003906:	4602      	mov	r2, r0
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	009a      	lsls	r2, r3, #2
 8003910:	441a      	add	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	4a92      	ldr	r2, [pc, #584]	; (8003b68 <UART_SetConfig+0x350>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	2264      	movs	r2, #100	; 0x64
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	1af3      	subs	r3, r6, r3
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	3332      	adds	r3, #50	; 0x32
 8003930:	4a8d      	ldr	r2, [pc, #564]	; (8003b68 <UART_SetConfig+0x350>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800393e:	441d      	add	r5, r3
 8003940:	f7fe ffce 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8003944:	4602      	mov	r2, r0
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	009a      	lsls	r2, r3, #2
 800394e:	441a      	add	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	fbb2 f6f3 	udiv	r6, r2, r3
 800395a:	f7fe ffc1 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 800395e:	4602      	mov	r2, r0
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009a      	lsls	r2, r3, #2
 8003968:	441a      	add	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	4a7c      	ldr	r2, [pc, #496]	; (8003b68 <UART_SetConfig+0x350>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2264      	movs	r2, #100	; 0x64
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	1af3      	subs	r3, r6, r3
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	3332      	adds	r3, #50	; 0x32
 8003988:	4a77      	ldr	r2, [pc, #476]	; (8003b68 <UART_SetConfig+0x350>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	442b      	add	r3, r5
 8003996:	60a3      	str	r3, [r4, #8]
 8003998:	e154      	b.n	8003c44 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681c      	ldr	r4, [r3, #0]
 800399e:	f7fe ff8b 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 80039a2:	4602      	mov	r2, r0
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	009a      	lsls	r2, r3, #2
 80039ac:	441a      	add	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	4a6b      	ldr	r2, [pc, #428]	; (8003b68 <UART_SetConfig+0x350>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	011d      	lsls	r5, r3, #4
 80039c2:	f7fe ff79 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 80039c6:	4602      	mov	r2, r0
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	009a      	lsls	r2, r3, #2
 80039d0:	441a      	add	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80039dc:	f7fe ff6c 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	009a      	lsls	r2, r3, #2
 80039ea:	441a      	add	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f6:	4a5c      	ldr	r2, [pc, #368]	; (8003b68 <UART_SetConfig+0x350>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	2264      	movs	r2, #100	; 0x64
 8003a00:	fb02 f303 	mul.w	r3, r2, r3
 8003a04:	1af3      	subs	r3, r6, r3
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	3332      	adds	r3, #50	; 0x32
 8003a0a:	4a57      	ldr	r2, [pc, #348]	; (8003b68 <UART_SetConfig+0x350>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a18:	441d      	add	r5, r3
 8003a1a:	f7fe ff4d 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	009a      	lsls	r2, r3, #2
 8003a28:	441a      	add	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a34:	f7fe ff40 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	009a      	lsls	r2, r3, #2
 8003a42:	441a      	add	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	4a46      	ldr	r2, [pc, #280]	; (8003b68 <UART_SetConfig+0x350>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	2264      	movs	r2, #100	; 0x64
 8003a58:	fb02 f303 	mul.w	r3, r2, r3
 8003a5c:	1af3      	subs	r3, r6, r3
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	3332      	adds	r3, #50	; 0x32
 8003a62:	4a41      	ldr	r2, [pc, #260]	; (8003b68 <UART_SetConfig+0x350>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	442b      	add	r3, r5
 8003a70:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003a72:	e0e7      	b.n	8003c44 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a39      	ldr	r2, [pc, #228]	; (8003b60 <UART_SetConfig+0x348>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d004      	beq.n	8003a88 <UART_SetConfig+0x270>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a38      	ldr	r2, [pc, #224]	; (8003b64 <UART_SetConfig+0x34c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d171      	bne.n	8003b6c <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681c      	ldr	r4, [r3, #0]
 8003a8c:	f7fe ff28 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009a      	lsls	r2, r3, #2
 8003a9a:	441a      	add	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa6:	4a30      	ldr	r2, [pc, #192]	; (8003b68 <UART_SetConfig+0x350>)
 8003aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	011d      	lsls	r5, r3, #4
 8003ab0:	f7fe ff16 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	009a      	lsls	r2, r3, #2
 8003abe:	441a      	add	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	fbb2 f6f3 	udiv	r6, r2, r3
 8003aca:	f7fe ff09 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009a      	lsls	r2, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	4a20      	ldr	r2, [pc, #128]	; (8003b68 <UART_SetConfig+0x350>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	2264      	movs	r2, #100	; 0x64
 8003aee:	fb02 f303 	mul.w	r3, r2, r3
 8003af2:	1af3      	subs	r3, r6, r3
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	3332      	adds	r3, #50	; 0x32
 8003af8:	4a1b      	ldr	r2, [pc, #108]	; (8003b68 <UART_SetConfig+0x350>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b04:	441d      	add	r5, r3
 8003b06:	f7fe feeb 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	009a      	lsls	r2, r3, #2
 8003b14:	441a      	add	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b20:	f7fe fede 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009a      	lsls	r2, r3, #2
 8003b2e:	441a      	add	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3a:	4a0b      	ldr	r2, [pc, #44]	; (8003b68 <UART_SetConfig+0x350>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	2264      	movs	r2, #100	; 0x64
 8003b44:	fb02 f303 	mul.w	r3, r2, r3
 8003b48:	1af3      	subs	r3, r6, r3
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	3332      	adds	r3, #50	; 0x32
 8003b4e:	4a06      	ldr	r2, [pc, #24]	; (8003b68 <UART_SetConfig+0x350>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	442b      	add	r3, r5
 8003b5c:	60a3      	str	r3, [r4, #8]
 8003b5e:	e071      	b.n	8003c44 <UART_SetConfig+0x42c>
 8003b60:	40011000 	.word	0x40011000
 8003b64:	40011400 	.word	0x40011400
 8003b68:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681c      	ldr	r4, [r3, #0]
 8003b70:	f7fe fea2 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003b74:	4602      	mov	r2, r0
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009a      	lsls	r2, r3, #2
 8003b7e:	441a      	add	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8a:	4a30      	ldr	r2, [pc, #192]	; (8003c4c <UART_SetConfig+0x434>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	011d      	lsls	r5, r3, #4
 8003b94:	f7fe fe90 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009a      	lsls	r2, r3, #2
 8003ba2:	441a      	add	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	fbb2 f6f3 	udiv	r6, r2, r3
 8003bae:	f7fe fe83 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	009a      	lsls	r2, r3, #2
 8003bbc:	441a      	add	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc8:	4a20      	ldr	r2, [pc, #128]	; (8003c4c <UART_SetConfig+0x434>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	2264      	movs	r2, #100	; 0x64
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	1af3      	subs	r3, r6, r3
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	3332      	adds	r3, #50	; 0x32
 8003bdc:	4a1b      	ldr	r2, [pc, #108]	; (8003c4c <UART_SetConfig+0x434>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be8:	441d      	add	r5, r3
 8003bea:	f7fe fe65 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009a      	lsls	r2, r3, #2
 8003bf8:	441a      	add	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c04:	f7fe fe58 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	009a      	lsls	r2, r3, #2
 8003c12:	441a      	add	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1e:	4a0b      	ldr	r2, [pc, #44]	; (8003c4c <UART_SetConfig+0x434>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	2264      	movs	r2, #100	; 0x64
 8003c28:	fb02 f303 	mul.w	r3, r2, r3
 8003c2c:	1af3      	subs	r3, r6, r3
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	3332      	adds	r3, #50	; 0x32
 8003c32:	4a06      	ldr	r2, [pc, #24]	; (8003c4c <UART_SetConfig+0x434>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	442b      	add	r3, r5
 8003c40:	60a3      	str	r3, [r4, #8]
}
 8003c42:	e7ff      	b.n	8003c44 <UART_SetConfig+0x42c>
 8003c44:	bf00      	nop
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c4c:	51eb851f 	.word	0x51eb851f

08003c50 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c50:	b084      	sub	sp, #16
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	f107 0014 	add.w	r0, r7, #20
 8003c5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d120      	bne.n	8003caa <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 8003c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d105      	bne.n	8003ca2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f936 	bl	8003f14 <USB_CoreReset>
 8003ca8:	e00c      	b.n	8003cc4 <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f92c 	bl	8003f14 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d10b      	bne.n	8003ce2 <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f043 0206 	orr.w	r2, r3, #6
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f043 0220 	orr.w	r2, r3, #32
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cee:	b004      	add	sp, #16
 8003cf0:	4770      	bx	lr

08003cf2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f043 0201 	orr.w	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f023 0201 	bic.w	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8003d4e:	78fb      	ldrb	r3, [r7, #3]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d106      	bne.n	8003d62 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	60da      	str	r2, [r3, #12]
 8003d60:	e008      	b.n	8003d74 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d105      	bne.n	8003d74 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 8003d74:	2032      	movs	r0, #50	; 0x32
 8003d76:	f7fc fde5 	bl	8000944 <HAL_Delay>
  
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	019b      	lsls	r3, r3, #6
 8003d96:	f043 0220 	orr.w	r2, r3, #32
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3301      	adds	r3, #1
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4a09      	ldr	r2, [pc, #36]	; (8003dcc <USB_FlushTxFifo+0x48>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d901      	bls.n	8003db0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e006      	b.n	8003dbe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f003 0320 	and.w	r3, r3, #32
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d0f0      	beq.n	8003d9e <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	00030d40 	.word	0x00030d40

08003dd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2210      	movs	r2, #16
 8003de0:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3301      	adds	r3, #1
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <USB_FlushRxFifo+0x40>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e006      	b.n	8003e02 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d0f0      	beq.n	8003de2 <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	00030d40 	.word	0x00030d40

08003e14 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	4611      	mov	r1, r2
 8003e20:	461a      	mov	r2, r3
 8003e22:	460b      	mov	r3, r1
 8003e24:	71fb      	strb	r3, [r7, #7]
 8003e26:	4613      	mov	r3, r2
 8003e28:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 8003e32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d11a      	bne.n	8003e70 <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 8003e3a:	88bb      	ldrh	r3, [r7, #4]
 8003e3c:	3303      	adds	r3, #3
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	e00f      	b.n	8003e68 <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	031a      	lsls	r2, r3, #12
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e54:	461a      	mov	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	3304      	adds	r3, #4
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d3eb      	bcc.n	8003e48 <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	371c      	adds	r7, #28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b087      	sub	sp, #28
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	3303      	adds	r3, #3
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	e00b      	b.n	8003eb6 <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	3301      	adds	r3, #1
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d3ef      	bcc.n	8003e9e <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 8003ebe:	68bb      	ldr	r3, [r7, #8]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
  return v;  
 8003ee8:	68fb      	ldr	r3, [r7, #12]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f003 0301 	and.w	r3, r3, #1
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3301      	adds	r3, #1
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4a13      	ldr	r2, [pc, #76]	; (8003f78 <USB_CoreReset+0x64>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e01b      	b.n	8003f6a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	daf2      	bge.n	8003f20 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f043 0201 	orr.w	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <USB_CoreReset+0x64>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d901      	bls.n	8003f5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e006      	b.n	8003f6a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d0f0      	beq.n	8003f4a <USB_CoreReset+0x36>
  
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	00030d40 	.word	0x00030d40

08003f7c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	f107 001c 	add.w	r0, r7, #28
 8003f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f94:	461a      	mov	r2, r3
 8003f96:	2300      	movs	r3, #0
 8003f98:	6013      	str	r3, [r2, #0]
  
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d10f      	bne.n	8003fcc <USB_HostInit+0x50>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fb2:	d00b      	beq.n	8003fcc <USB_HostInit+0x50>
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fba:	461a      	mov	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f043 0304 	orr.w	r3, r3, #4
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	e00a      	b.n	8003fe2 <USB_HostInit+0x66>
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f023 0304 	bic.w	r3, r3, #4
 8003fe0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003fe2:	2110      	movs	r1, #16
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff fecd 	bl	8003d84 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff fef0 	bl	8003dd0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e015      	b.n	8004022 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004002:	461a      	mov	r2, r3
 8004004:	f04f 33ff 	mov.w	r3, #4294967295
 8004008:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4413      	add	r3, r2
 8004012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004016:	461a      	mov	r2, r3
 8004018:	2300      	movs	r3, #0
 800401a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3301      	adds	r3, #1
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	6a3a      	ldr	r2, [r7, #32]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	429a      	cmp	r2, r3
 8004028:	d8e5      	bhi.n	8003ff6 <USB_HostInit+0x7a>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 800402a:	2101      	movs	r1, #1
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f8a4 	bl	800417a <USB_DriveVbus>
  
  HAL_Delay(200U);
 8004032:	20c8      	movs	r0, #200	; 0xc8
 8004034:	f7fc fc86 	bl	8000944 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f04f 32ff 	mov.w	r2, #4294967295
 8004044:	615a      	str	r2, [r3, #20]
  
  if(USBx == USB_OTG_FS)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800404c:	d10a      	bne.n	8004064 <USB_HostInit+0xe8>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U; 
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2280      	movs	r2, #128	; 0x80
 8004052:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a14      	ldr	r2, [pc, #80]	; (80040a8 <USB_HostInit+0x12c>)
 8004058:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a13      	ldr	r2, [pc, #76]	; (80040ac <USB_HostInit+0x130>)
 800405e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004062:	e00a      	b.n	800407a <USB_HostInit+0xfe>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U; 
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800406a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a10      	ldr	r2, [pc, #64]	; (80040b0 <USB_HostInit+0x134>)
 8004070:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a0f      	ldr	r2, [pc, #60]	; (80040b4 <USB_HostInit+0x138>)
 8004076:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <USB_HostInit+0x110>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	f043 0210 	orr.w	r2, r3, #16
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699a      	ldr	r2, [r3, #24]
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <USB_HostInit+0x13c>)
 8004092:	4313      	orrs	r3, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040a4:	b004      	add	sp, #16
 80040a6:	4770      	bx	lr
 80040a8:	00600080 	.word	0x00600080
 80040ac:	004000e0 	.word	0x004000e0
 80040b0:	01000200 	.word	0x01000200
 80040b4:	00e00300 	.word	0x00e00300
 80040b8:	a3200008 	.word	0xa3200008

080040bc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock 
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	70fb      	strb	r3, [r7, #3]
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ce:	461a      	mov	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f023 0303 	bic.w	r3, r3, #3
 80040dc:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040e4:	4619      	mov	r1, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	78fb      	ldrb	r3, [r7, #3]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	4313      	orrs	r3, r2
 80040f6:	600b      	str	r3, [r1, #0]
  
  if (freq ==  HCFG_48_MHZ)
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d107      	bne.n	800410e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004104:	461a      	mov	r2, r3
 8004106:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800410a:	6053      	str	r3, [r2, #4]
 800410c:	e009      	b.n	8004122 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq ==  HCFG_6_MHZ)
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d106      	bne.n	8004122 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800411a:	461a      	mov	r2, r3
 800411c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004120:	6053      	str	r3, [r2, #4]
  } 
  return HAL_OK;  
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60fb      	str	r3, [r7, #12]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004148:	60fb      	str	r3, [r7, #12]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004150:	461a      	mov	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004158:	6013      	str	r3, [r2, #0]
  HAL_Delay (10U);                                /* See Note #1 */
 800415a:	200a      	movs	r0, #10
 800415c:	f7fc fbf2 	bl	8000944 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004166:	461a      	mov	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800416e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	460b      	mov	r3, r1
 8004184:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60fb      	str	r3, [r7, #12]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004196:	60fb      	str	r3, [r7, #12]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <USB_DriveVbus+0x3e>
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d107      	bne.n	80041b8 <USB_DriveVbus+0x3e>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80041ae:	461a      	mov	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041b6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c2:	d10a      	bne.n	80041da <USB_DriveVbus+0x60>
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d107      	bne.n	80041da <USB_DriveVbus+0x60>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80041d0:	461a      	mov	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041d8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK; 
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60fb      	str	r3, [r7, #12]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	0c5b      	lsrs	r3, r3, #17
 80041fe:	f003 0303 	and.w	r3, r3, #3
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	b29b      	uxth	r3, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	4608      	mov	r0, r1
 8004236:	4611      	mov	r1, r2
 8004238:	461a      	mov	r2, r3
 800423a:	4603      	mov	r3, r0
 800423c:	70fb      	strb	r3, [r7, #3]
 800423e:	460b      	mov	r3, r1
 8004240:	70bb      	strb	r3, [r7, #2]
 8004242:	4613      	mov	r3, r2
 8004244:	707b      	strb	r3, [r7, #1]
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4413      	add	r3, r2
 800424e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004252:	461a      	mov	r2, r3
 8004254:	f04f 33ff 	mov.w	r3, #4294967295
 8004258:	6093      	str	r3, [r2, #8]
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 800425a:	7d3b      	ldrb	r3, [r7, #20]
 800425c:	2b03      	cmp	r3, #3
 800425e:	f200 8086 	bhi.w	800436e <USB_HC_Init+0x142>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <USB_HC_Init+0x3c>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	08004279 	.word	0x08004279
 800426c:	08004325 	.word	0x08004325
 8004270:	08004279 	.word	0x08004279
 8004274:	080042e5 	.word	0x080042e5
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4413      	add	r3, r2
 8004280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004284:	461a      	mov	r2, r3
 8004286:	f240 439d 	movw	r3, #1181	; 0x49d
 800428a:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 800428c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004290:	2b00      	cmp	r3, #0
 8004292:	da11      	bge.n	80042b8 <USB_HC_Init+0x8c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4413      	add	r3, r2
 800429c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a0:	4619      	mov	r1, r3
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b4:	60cb      	str	r3, [r1, #12]
      if(USBx != USB_OTG_FS)
      {
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
      }
    }
    break;
 80042b6:	e055      	b.n	8004364 <USB_HC_Init+0x138>
      if(USBx != USB_OTG_FS)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042be:	d051      	beq.n	8004364 <USB_HC_Init+0x138>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042cc:	4619      	mov	r1, r3
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80042e0:	60cb      	str	r3, [r1, #12]
    break;
 80042e2:	e03f      	b.n	8004364 <USB_HC_Init+0x138>
    
  case EP_TYPE_INTR:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f0:	461a      	mov	r2, r3
 80042f2:	f240 639d 	movw	r3, #1693	; 0x69d
 80042f6:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_NAKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
 80042f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	da33      	bge.n	8004368 <USB_HC_Init+0x13c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4413      	add	r3, r2
 8004308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430c:	4619      	mov	r1, r3
 800430e:	78fb      	ldrb	r3, [r7, #3]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004320:	60cb      	str	r3, [r1, #12]
    }
    
    break;
 8004322:	e021      	b.n	8004368 <USB_HC_Init+0x13c>
  case EP_TYPE_ISOC:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4413      	add	r3, r2
 800432c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004330:	461a      	mov	r2, r3
 8004332:	f240 2325 	movw	r3, #549	; 0x225
 8004336:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_ACKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;   
    
    if (epnum & 0x80U) 
 8004338:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800433c:	2b00      	cmp	r3, #0
 800433e:	da15      	bge.n	800436c <USB_HC_Init+0x140>
    {
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4413      	add	r3, r2
 8004348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434c:	4619      	mov	r1, r3
 800434e:	78fb      	ldrb	r3, [r7, #3]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4413      	add	r3, r2
 8004356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004360:	60cb      	str	r3, [r1, #12]
    }
    break;
 8004362:	e003      	b.n	800436c <USB_HC_Init+0x140>
    break;
 8004364:	bf00      	nop
 8004366:	e002      	b.n	800436e <USB_HC_Init+0x142>
    break;
 8004368:	bf00      	nop
 800436a:	e000      	b.n	800436e <USB_HC_Init+0x142>
    break;
 800436c:	bf00      	nop
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004374:	4618      	mov	r0, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	78fa      	ldrb	r2, [r7, #3]
 8004380:	2101      	movs	r1, #1
 8004382:	fa01 f202 	lsl.w	r2, r1, r2
 8004386:	4313      	orrs	r3, r2
 8004388:	6183      	str	r3, [r0, #24]
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	619a      	str	r2, [r3, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4413      	add	r3, r2
 800439e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a2:	4619      	mov	r1, r3
 80043a4:	787b      	ldrb	r3, [r7, #1]
 80043a6:	059b      	lsls	r3, r3, #22
 80043a8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80043ac:	78bb      	ldrb	r3, [r7, #2]
 80043ae:	02db      	lsls	r3, r3, #11
 80043b0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80043b4:	431a      	orrs	r2, r3
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 80043b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da02      	bge.n	80043c4 <USB_HC_Init+0x198>
 80043be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c2:	e000      	b.n	80043c6 <USB_HC_Init+0x19a>
 80043c4:	2300      	movs	r3, #0
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80043c6:	431a      	orrs	r2, r3
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80043c8:	7c3b      	ldrb	r3, [r7, #16]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d102      	bne.n	80043d4 <USB_HC_Init+0x1a8>
 80043ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043d2:	e000      	b.n	80043d6 <USB_HC_Init+0x1aa>
 80043d4:	2300      	movs	r3, #0
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 80043d6:	431a      	orrs	r2, r3
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80043d8:	7d3b      	ldrb	r3, [r7, #20]
 80043da:	049b      	lsls	r3, r3, #18
 80043dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80043e0:	431a      	orrs	r2, r3
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 80043e2:	8b3b      	ldrh	r3, [r7, #24]
 80043e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80043e8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80043ea:	600b      	str	r3, [r1, #0]
    
  if (ep_type == EP_TYPE_INTR)
 80043ec:	7d3b      	ldrb	r3, [r7, #20]
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d110      	bne.n	8004414 <USB_HC_Init+0x1e8>
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fe:	4619      	mov	r1, r3
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4413      	add	r3, r2
 8004408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004412:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK; 
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop

08004424 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08a      	sub	sp, #40	; 0x28
 8004428:	af02      	add	r7, sp, #8
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	4613      	mov	r3, r2
 8004430:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 8004432:	2300      	movs	r3, #0
 8004434:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 8004436:	2300      	movs	r3, #0
 8004438:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 800443e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004442:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800444e:	d02b      	beq.n	80044a8 <USB_HC_StartXfer+0x84>
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	791b      	ldrb	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d127      	bne.n	80044a8 <USB_HC_StartXfer+0x84>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10b      	bne.n	8004476 <USB_HC_StartXfer+0x52>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	795b      	ldrb	r3, [r3, #5]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d107      	bne.n	8004476 <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	4619      	mov	r1, r3
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 fa0f 	bl	8004890 <USB_DoPing>
      return HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	e10d      	b.n	8004692 <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1)
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d115      	bne.n	80044a8 <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	785b      	ldrb	r3, [r3, #1]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448a:	4619      	mov	r1, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	785b      	ldrb	r3, [r3, #1]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4413      	add	r3, r2
 8004496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80044a0:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2200      	movs	r2, #0
 80044a6:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d019      	beq.n	80044e4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	8912      	ldrh	r2, [r2, #8]
 80044b8:	4413      	add	r3, r2
 80044ba:	3b01      	subs	r3, #1
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	8912      	ldrh	r2, [r2, #8]
 80044c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80044c4:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 80044c6:	8bfa      	ldrh	r2, [r7, #30]
 80044c8:	8b3b      	ldrh	r3, [r7, #24]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d90c      	bls.n	80044e8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80044ce:	8b3b      	ldrh	r3, [r7, #24]
 80044d0:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 80044d2:	8bfb      	ldrh	r3, [r7, #30]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	8912      	ldrh	r2, [r2, #8]
 80044d8:	fb02 f303 	mul.w	r3, r2, r3
 80044dc:	461a      	mov	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	611a      	str	r2, [r3, #16]
 80044e2:	e001      	b.n	80044e8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1;
 80044e4:	2301      	movs	r3, #1
 80044e6:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	78db      	ldrb	r3, [r3, #3]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d007      	beq.n	8004500 <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 80044f0:	8bfb      	ldrh	r3, [r7, #30]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	8912      	ldrh	r2, [r2, #8]
 80044f6:	fb02 f303 	mul.w	r3, r2, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	785b      	ldrb	r3, [r3, #1]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4413      	add	r3, r2
 800450a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450e:	4619      	mov	r1, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004518:	8bfb      	ldrh	r3, [r7, #30]
 800451a:	04db      	lsls	r3, r3, #19
 800451c:	4618      	mov	r0, r3
 800451e:	4b5f      	ldr	r3, [pc, #380]	; (800469c <USB_HC_StartXfer+0x278>)
 8004520:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004522:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	7a9b      	ldrb	r3, [r3, #10]
 8004528:	075b      	lsls	r3, r3, #29
 800452a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 800452e:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004530:	610b      	str	r3, [r1, #16]
  
  if (dma)
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	785b      	ldrb	r3, [r3, #1]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004546:	461a      	mov	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	bf0c      	ite	eq
 800455e:	2301      	moveq	r3, #1
 8004560:	2300      	movne	r3, #0
 8004562:	b2db      	uxtb	r3, r3
 8004564:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	785b      	ldrb	r3, [r3, #1]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004574:	4619      	mov	r1, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	785b      	ldrb	r3, [r3, #1]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800458a:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	785b      	ldrb	r3, [r3, #1]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4413      	add	r3, r2
 8004596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459a:	4619      	mov	r1, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	785b      	ldrb	r3, [r3, #1]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	7f7a      	ldrb	r2, [r7, #29]
 80045ae:	0752      	lsls	r2, r2, #29
 80045b0:	4313      	orrs	r3, r2
 80045b2:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	785b      	ldrb	r3, [r3, #1]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045cc:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045d4:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	785b      	ldrb	r3, [r3, #1]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e4:	461a      	mov	r2, r3
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d14f      	bne.n	8004690 <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	78db      	ldrb	r3, [r3, #3]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d14b      	bne.n	8004690 <USB_HC_StartXfer+0x26c>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d047      	beq.n	8004690 <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	79db      	ldrb	r3, [r3, #7]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d831      	bhi.n	800466c <USB_HC_StartXfer+0x248>
 8004608:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <USB_HC_StartXfer+0x1ec>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004621 	.word	0x08004621
 8004614:	08004645 	.word	0x08004645
 8004618:	08004621 	.word	0x08004621
 800461c:	08004645 	.word	0x08004645
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	3303      	adds	r3, #3
 8004626:	089b      	lsrs	r3, r3, #2
 8004628:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 800462a:	8b7a      	ldrh	r2, [r7, #26]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	b29b      	uxth	r3, r3
 8004632:	429a      	cmp	r2, r3
 8004634:	d91c      	bls.n	8004670 <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f043 0220 	orr.w	r2, r3, #32
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	619a      	str	r2, [r3, #24]
        }
        break;
 8004642:	e015      	b.n	8004670 <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	3303      	adds	r3, #3
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 800464e:	8b7a      	ldrh	r2, [r7, #26]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	b29b      	uxth	r3, r3
 800465a:	429a      	cmp	r2, r3
 800465c:	d90a      	bls.n	8004674 <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	619a      	str	r2, [r3, #24]
        }
        break;
 800466a:	e003      	b.n	8004674 <USB_HC_StartXfer+0x250>
        
      default:
        break;
 800466c:	bf00      	nop
 800466e:	e002      	b.n	8004676 <USB_HC_StartXfer+0x252>
        break;
 8004670:	bf00      	nop
 8004672:	e000      	b.n	8004676 <USB_HC_StartXfer+0x252>
        break;
 8004674:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	68d9      	ldr	r1, [r3, #12]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	785a      	ldrb	r2, [r3, #1]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	b298      	uxth	r0, r3
 8004684:	2300      	movs	r3, #0
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	4603      	mov	r3, r0
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f7ff fbc2 	bl	8003e14 <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	1ff80000 	.word	0x1ff80000

080046a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	b29b      	uxth	r3, r3
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	460b      	mov	r3, r1
 80046c8:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80046ce:	78fb      	ldrb	r3, [r7, #3]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	0c9b      	lsrs	r3, r3, #18
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00b      	beq.n	80046fe <USB_HC_Halt+0x40>
 80046e6:	78fb      	ldrb	r3, [r7, #3]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f2:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 80046f4:	0c9b      	lsrs	r3, r3, #18
 80046f6:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d160      	bne.n	80047c0 <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4413      	add	r3, r2
 8004706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470a:	4619      	mov	r1, r3
 800470c:	78fb      	ldrb	r3, [r7, #3]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4413      	add	r3, r2
 8004714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800471e:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d135      	bne.n	8004798 <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4413      	add	r3, r2
 8004734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004738:	4619      	mov	r1, r3
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4413      	add	r3, r2
 8004742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800474c:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4413      	add	r3, r2
 8004756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475a:	4619      	mov	r1, r3
 800475c:	78fb      	ldrb	r3, [r7, #3]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4413      	add	r3, r2
 8004764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800476e:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3301      	adds	r3, #1
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800477c:	d81e      	bhi.n	80047bc <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 800477e:	78fb      	ldrb	r3, [r7, #3]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4413      	add	r3, r2
 8004786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004794:	d0ec      	beq.n	8004770 <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004796:	e074      	b.n	8004882 <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8004798:	78fb      	ldrb	r3, [r7, #3]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a4:	4619      	mov	r1, r3
 80047a6:	78fb      	ldrb	r3, [r7, #3]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047b8:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80047ba:	e062      	b.n	8004882 <USB_HC_Halt+0x1c4>
          break;
 80047bc:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80047be:	e060      	b.n	8004882 <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047cc:	4619      	mov	r1, r3
 80047ce:	78fb      	ldrb	r3, [r7, #3]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047e0:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d135      	bne.n	800485c <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80047f0:	78fb      	ldrb	r3, [r7, #3]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fc:	4619      	mov	r1, r3
 80047fe:	78fb      	ldrb	r3, [r7, #3]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4413      	add	r3, r2
 8004806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004810:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4413      	add	r3, r2
 800481a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481e:	4619      	mov	r1, r3
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4413      	add	r3, r2
 8004828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004832:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	3301      	adds	r3, #1
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004840:	d81e      	bhi.n	8004880 <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4413      	add	r3, r2
 800484a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004858:	d0ec      	beq.n	8004834 <USB_HC_Halt+0x176>
 800485a:	e012      	b.n	8004882 <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4413      	add	r3, r2
 8004864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004868:	4619      	mov	r1, r3
 800486a:	78fb      	ldrb	r3, [r7, #3]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4413      	add	r3, r2
 8004872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800487c:	600b      	str	r3, [r1, #0]
 800487e:	e000      	b.n	8004882 <USB_HC_Halt+0x1c4>
          break;
 8004880:	bf00      	nop
    }
  }
  
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b0:	461a      	mov	r2, r3
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	04db      	lsls	r3, r3, #19
 80048b6:	4619      	mov	r1, r3
 80048b8:	4b12      	ldr	r3, [pc, #72]	; (8004904 <USB_DoPing+0x74>)
 80048ba:	400b      	ands	r3, r1
 80048bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048d8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048e0:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ee:	461a      	mov	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	1ff80000 	.word	0x1ff80000

08004908 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff f9fd 	bl	8003d14 <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 800491a:	2110      	movs	r1, #16
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff fa31 	bl	8003d84 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff fa54 	bl	8003dd0 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 8004928:	2300      	movs	r3, #0
 800492a:	75fb      	strb	r3, [r7, #23]
 800492c:	e01f      	b.n	800496e <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 800492e:	7dfb      	ldrb	r3, [r7, #23]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4413      	add	r3, r2
 8004936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004944:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800494c:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004954:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 8004956:	7dfb      	ldrb	r3, [r7, #23]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4413      	add	r3, r2
 800495e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004962:	461a      	mov	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 8004968:	7dfb      	ldrb	r3, [r7, #23]
 800496a:	3301      	adds	r3, #1
 800496c:	75fb      	strb	r3, [r7, #23]
 800496e:	7dfb      	ldrb	r3, [r7, #23]
 8004970:	2b0f      	cmp	r3, #15
 8004972:	d9dc      	bls.n	800492e <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 8004974:	2300      	movs	r3, #0
 8004976:	75fb      	strb	r3, [r7, #23]
 8004978:	e034      	b.n	80049e4 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 800497a:	7dfb      	ldrb	r3, [r7, #23]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4413      	add	r3, r2
 8004982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004990:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004998:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049a0:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 80049a2:	7dfb      	ldrb	r3, [r7, #23]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ae:	461a      	mov	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	3301      	adds	r3, #1
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049c0:	d80c      	bhi.n	80049dc <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049d8:	d0ec      	beq.n	80049b4 <USB_StopHost+0xac>
 80049da:	e000      	b.n	80049de <USB_StopHost+0xd6>
        break;
 80049dc:	bf00      	nop
  for (i = 0; i <= 15; i++)
 80049de:	7dfb      	ldrb	r3, [r7, #23]
 80049e0:	3301      	adds	r3, #1
 80049e2:	75fb      	strb	r3, [r7, #23]
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
 80049e6:	2b0f      	cmp	r3, #15
 80049e8:	d9c7      	bls.n	800497a <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f0:	461a      	mov	r2, r3
 80049f2:	f04f 33ff 	mov.w	r3, #4294967295
 80049f6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f04f 32ff 	mov.w	r2, #4294967295
 80049fe:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7ff f976 	bl	8003cf2 <USB_EnableGlobalInt>
  return HAL_OK;  
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit (USBH_HandleTypeDef *phost)
{	
 8004a10:	b590      	push	{r4, r7, lr}
 8004a12:	b08b      	sub	sp, #44	; 0x2c
 8004a14:	af04      	add	r7, sp, #16
 8004a16:	6078      	str	r0, [r7, #4]
  uint8_t max_ep;
  uint8_t num = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;
  
  USBH_StatusTypeDef status = USBH_FAIL ;
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	757b      	strb	r3, [r7, #21]
  HID_HandleTypeDef *HID_Handle;
  
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFF);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004a26:	7919      	ldrb	r1, [r3, #4]
 8004a28:	23ff      	movs	r3, #255	; 0xff
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f001 fd69 	bl	8006504 <USBH_FindInterface>
 8004a32:	4603      	mov	r3, r0
 8004a34:	75bb      	strb	r3, [r7, #22]

  if (interface == 0xFF) // did not find KB or mouse
 8004a36:	7dbb      	ldrb	r3, [r7, #22]
 8004a38:	2bff      	cmp	r3, #255	; 0xff
 8004a3a:	d10a      	bne.n	8004a52 <USBH_HID_InterfaceInit+0x42>
	  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0, 0xFF); // try looking for ds3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004a42:	7919      	ldrb	r1, [r3, #4]
 8004a44:	23ff      	movs	r3, #255	; 0xff
 8004a46:	2200      	movs	r2, #0
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f001 fd5b 	bl	8006504 <USBH_FindInterface>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	75bb      	strb	r3, [r7, #22]
  
  if(interface == 0xFF) /* No Valid Interface */
 8004a52:	7dbb      	ldrb	r3, [r7, #22]
 8004a54:	2bff      	cmp	r3, #255	; 0xff
 8004a56:	d110      	bne.n	8004a7a <USBH_HID_InterfaceInit+0x6a>
  {
    status = USBH_FAIL;  
 8004a58:	2302      	movs	r3, #2
 8004a5a:	757b      	strb	r3, [r7, #21]
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);         
 8004a5c:	48a7      	ldr	r0, [pc, #668]	; (8004cfc <USBH_HID_InterfaceInit+0x2ec>)
 8004a5e:	f003 fee5 	bl	800882c <iprintf>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	48a4      	ldr	r0, [pc, #656]	; (8004d00 <USBH_HID_InterfaceInit+0x2f0>)
 8004a6e:	f003 fedd 	bl	800882c <iprintf>
 8004a72:	200a      	movs	r0, #10
 8004a74:	f003 fef2 	bl	800885c <putchar>
 8004a78:	e13b      	b.n	8004cf2 <USBH_HID_InterfaceInit+0x2e2>
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8004a7a:	7dbb      	ldrb	r3, [r7, #22]
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f001 fcd8 	bl	8006434 <USBH_SelectInterface>
    phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc (sizeof(HID_HandleTypeDef));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8004a8a:	2034      	movs	r0, #52	; 0x34
 8004a8c:	f003 fe0a 	bl	80086a4 <malloc>
 8004a90:	4603      	mov	r3, r0
 8004a92:	61e3      	str	r3, [r4, #28]
    HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	613b      	str	r3, [r7, #16]
    HID_Handle->state = HID_ERROR;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2207      	movs	r2, #7
 8004aa2:	709a      	strb	r2, [r3, #2]
    
    /*Decode Bootclass Protocol: Mouse or Keyboard*/
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004aaa:	4619      	mov	r1, r3
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	231a      	movs	r3, #26
 8004ab0:	fb03 f301 	mul.w	r3, r3, r1
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f203 3343 	addw	r3, r3, #835	; 0x343
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d109      	bne.n	8004ad4 <USBH_HID_InterfaceInit+0xc4>
    {
      USBH_UsrLog ("KeyBoard device found!"); 
 8004ac0:	4890      	ldr	r0, [pc, #576]	; (8004d04 <USBH_HID_InterfaceInit+0x2f4>)
 8004ac2:	f003 feb3 	bl	800882c <iprintf>
 8004ac6:	200a      	movs	r0, #10
 8004ac8:	f003 fec8 	bl	800885c <putchar>
      HID_Handle->Init =  USBH_HID_KeybdInit;     
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4a8e      	ldr	r2, [pc, #568]	; (8004d08 <USBH_HID_InterfaceInit+0x2f8>)
 8004ad0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ad2:	e037      	b.n	8004b44 <USBH_HID_InterfaceInit+0x134>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)		  
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004ada:	4619      	mov	r1, r3
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	231a      	movs	r3, #26
 8004ae0:	fb03 f301 	mul.w	r3, r3, r1
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f203 3343 	addw	r3, r3, #835	; 0x343
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d109      	bne.n	8004b04 <USBH_HID_InterfaceInit+0xf4>
    {
      USBH_UsrLog ("Mouse device found!");         
 8004af0:	4886      	ldr	r0, [pc, #536]	; (8004d0c <USBH_HID_InterfaceInit+0x2fc>)
 8004af2:	f003 fe9b 	bl	800882c <iprintf>
 8004af6:	200a      	movs	r0, #10
 8004af8:	f003 feb0 	bl	800885c <putchar>
      HID_Handle->Init =  USBH_HID_MouseInit;     
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	4a84      	ldr	r2, [pc, #528]	; (8004d10 <USBH_HID_InterfaceInit+0x300>)
 8004b00:	631a      	str	r2, [r3, #48]	; 0x30
 8004b02:	e01f      	b.n	8004b44 <USBH_HID_InterfaceInit+0x134>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol  == HID_DS3_BOOT_CODE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	231a      	movs	r3, #26
 8004b10:	fb03 f301 	mul.w	r3, r3, r1
 8004b14:	4413      	add	r3, r2
 8004b16:	f203 3343 	addw	r3, r3, #835	; 0x343
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <USBH_HID_InterfaceInit+0x124>
	{
	  USBH_UsrLog ("DS3 device found!");
 8004b20:	487c      	ldr	r0, [pc, #496]	; (8004d14 <USBH_HID_InterfaceInit+0x304>)
 8004b22:	f003 fe83 	bl	800882c <iprintf>
 8004b26:	200a      	movs	r0, #10
 8004b28:	f003 fe98 	bl	800885c <putchar>
	  HID_Handle->Init =  USBH_HID_DS3Init;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	4a7a      	ldr	r2, [pc, #488]	; (8004d18 <USBH_HID_InterfaceInit+0x308>)
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
 8004b32:	e007      	b.n	8004b44 <USBH_HID_InterfaceInit+0x134>
	}
    else
    {
      USBH_UsrLog ("Protocol not supported.");  
 8004b34:	4879      	ldr	r0, [pc, #484]	; (8004d1c <USBH_HID_InterfaceInit+0x30c>)
 8004b36:	f003 fe79 	bl	800882c <iprintf>
 8004b3a:	200a      	movs	r0, #10
 8004b3c:	f003 fe8e 	bl	800885c <putchar>
      return USBH_FAIL;
 8004b40:	2302      	movs	r3, #2
 8004b42:	e0d7      	b.n	8004cf4 <USBH_HID_InterfaceInit+0x2e4>
    }
    
    HID_Handle->state     = HID_INIT;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2200      	movs	r2, #0
 8004b48:	709a      	strb	r2, [r3, #2]
    HID_Handle->ctl_state = HID_REQ_INIT; 
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	715a      	strb	r2, [r3, #5]
    HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004b56:	4619      	mov	r1, r3
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	231a      	movs	r3, #26
 8004b5c:	fb03 f301 	mul.w	r3, r3, r1
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8004b66:	781a      	ldrb	r2, [r3, #0]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	769a      	strb	r2, [r3, #26]
    HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004b72:	4619      	mov	r1, r3
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	231a      	movs	r3, #26
 8004b78:	fb03 f301 	mul.w	r3, r3, r1
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8004b82:	881a      	ldrh	r2, [r3, #0]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	831a      	strh	r2, [r3, #24]
    HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bInterval ;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004b8e:	4619      	mov	r1, r3
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	231a      	movs	r3, #26
 8004b94:	fb03 f301 	mul.w	r3, r3, r1
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	839a      	strh	r2, [r3, #28]
    
    if (HID_Handle->poll  < HID_MIN_POLL) 
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	8b9b      	ldrh	r3, [r3, #28]
 8004baa:	2b09      	cmp	r3, #9
 8004bac:	d802      	bhi.n	8004bb4 <USBH_HID_InterfaceInit+0x1a4>
    {
      HID_Handle->poll = HID_MIN_POLL;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	220a      	movs	r2, #10
 8004bb2:	839a      	strh	r2, [r3, #28]
    
    /* Check for available number of endpoints */
    /* Find the number of EPs in the Interface Descriptor */      
    /* Choose the lower number in order not to overrun the buffer allocated */
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
              phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004bba:	4619      	mov	r1, r3
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	231a      	movs	r3, #26
 8004bc0:	fb03 f301 	mul.w	r3, r3, r1
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8004bca:	781b      	ldrb	r3, [r3, #0]
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	bf28      	it	cs
 8004bd0:	2302      	movcs	r3, #2
 8004bd2:	73fb      	strb	r3, [r7, #15]
                  USBH_MAX_NUM_ENDPOINTS); 
    
    
    /* Decode endpoint IN and OUT address from interface descriptor */
    for ( ;num < max_ep; num++)
 8004bd4:	e086      	b.n	8004ce4 <USBH_HID_InterfaceInit+0x2d4>
    {
      if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress & 0x80)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004bdc:	4618      	mov	r0, r3
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	3301      	adds	r3, #1
 8004be4:	00d9      	lsls	r1, r3, #3
 8004be6:	231a      	movs	r3, #26
 8004be8:	fb03 f300 	mul.w	r3, r3, r0
 8004bec:	440b      	add	r3, r1
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	b25b      	sxtb	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	da38      	bge.n	8004c6e <USBH_HID_InterfaceInit+0x25e>
      {
        HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004c02:	4618      	mov	r0, r3
 8004c04:	7dfb      	ldrb	r3, [r7, #23]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	00d9      	lsls	r1, r3, #3
 8004c0c:	231a      	movs	r3, #26
 8004c0e:	fb03 f300 	mul.w	r3, r3, r0
 8004c12:	440b      	add	r3, r1
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8004c1a:	781a      	ldrb	r2, [r3, #0]
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	711a      	strb	r2, [r3, #4]
        HID_Handle->InPipe  =\
          USBH_AllocPipe(phost, HID_Handle->InEp);
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	791b      	ldrb	r3, [r3, #4]
 8004c24:	4619      	mov	r1, r3
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f002 fdb1 	bl	800778e <USBH_AllocPipe>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	461a      	mov	r2, r3
        HID_Handle->InPipe  =\
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	705a      	strb	r2, [r3, #1]
        
        /* Open pipe for IN endpoint */
        USBH_OpenPipe  (phost,
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	7859      	ldrb	r1, [r3, #1]
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	7918      	ldrb	r0, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	8b12      	ldrh	r2, [r2, #24]
 8004c4c:	9202      	str	r2, [sp, #8]
 8004c4e:	2203      	movs	r2, #3
 8004c50:	9201      	str	r2, [sp, #4]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	4623      	mov	r3, r4
 8004c56:	4602      	mov	r2, r0
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f002 fd69 	bl	8007730 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        HID_Handle->length); 
        
        USBH_LL_SetToggle (phost, HID_Handle->InPipe, 0);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	785b      	ldrb	r3, [r3, #1]
 8004c62:	2200      	movs	r2, #0
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f003 fc8f 	bl	800858a <USBH_LL_SetToggle>
 8004c6c:	e037      	b.n	8004cde <USBH_HID_InterfaceInit+0x2ce>
        
      }
      else
      {
        HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004c74:	4618      	mov	r0, r3
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	00d9      	lsls	r1, r3, #3
 8004c7e:	231a      	movs	r3, #26
 8004c80:	fb03 f300 	mul.w	r3, r3, r0
 8004c84:	440b      	add	r3, r1
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	70da      	strb	r2, [r3, #3]
        HID_Handle->OutPipe  =\
          USBH_AllocPipe(phost, HID_Handle->OutEp);
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	78db      	ldrb	r3, [r3, #3]
 8004c96:	4619      	mov	r1, r3
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f002 fd78 	bl	800778e <USBH_AllocPipe>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	461a      	mov	r2, r3
        HID_Handle->OutPipe  =\
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	701a      	strb	r2, [r3, #0]
        
        /* Open pipe for OUT endpoint */
        USBH_OpenPipe  (phost,
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	7819      	ldrb	r1, [r3, #0]
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	78d8      	ldrb	r0, [r3, #3]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	8b12      	ldrh	r2, [r2, #24]
 8004cbe:	9202      	str	r2, [sp, #8]
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	9201      	str	r2, [sp, #4]
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	4623      	mov	r3, r4
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f002 fd30 	bl	8007730 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        HID_Handle->length); 
        
        USBH_LL_SetToggle (phost, HID_Handle->OutPipe, 0);        
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f003 fc56 	bl	800858a <USBH_LL_SetToggle>
    for ( ;num < max_ep; num++)
 8004cde:	7dfb      	ldrb	r3, [r7, #23]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	75fb      	strb	r3, [r7, #23]
 8004ce4:	7dfa      	ldrb	r2, [r7, #23]
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	f4ff af74 	bcc.w	8004bd6 <USBH_HID_InterfaceInit+0x1c6>
      }
      
    }  
    status = USBH_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	757b      	strb	r3, [r7, #21]
  }
  return status;
 8004cf2:	7d7b      	ldrb	r3, [r7, #21]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd90      	pop	{r4, r7, pc}
 8004cfc:	080095f0 	.word	0x080095f0
 8004d00:	080095fc 	.word	0x080095fc
 8004d04:	08009624 	.word	0x08009624
 8004d08:	08005b31 	.word	0x08005b31
 8004d0c:	0800963c 	.word	0x0800963c
 8004d10:	08005d19 	.word	0x08005d19
 8004d14:	08009650 	.word	0x08009650
 8004d18:	08005a21 	.word	0x08005a21
 8004d1c:	08009664 	.word	0x08009664

08004d20 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_InterfaceDeInit (USBH_HandleTypeDef *phost )
{	
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	60fb      	str	r3, [r7, #12]
  
  if(HID_Handle->InPipe != 0x00)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	785b      	ldrb	r3, [r3, #1]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00e      	beq.n	8004d58 <USBH_HID_InterfaceDeInit+0x38>
  {   
    USBH_ClosePipe  (phost, HID_Handle->InPipe);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	785b      	ldrb	r3, [r3, #1]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f002 fd14 	bl	800776e <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->InPipe);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	785b      	ldrb	r3, [r3, #1]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f002 fd3d 	bl	80077cc <USBH_FreePipe>
    HID_Handle->InPipe = 0;     /* Reset the pipe as Free */  
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	705a      	strb	r2, [r3, #1]
  }
  
  if(HID_Handle->OutPipe != 0x00)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00e      	beq.n	8004d7e <USBH_HID_InterfaceDeInit+0x5e>
  {   
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	4619      	mov	r1, r3
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f002 fd01 	bl	800776e <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->OutPipe);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	4619      	mov	r1, r3
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f002 fd2a 	bl	80077cc <USBH_FreePipe>
    HID_Handle->OutPipe = 0;     /* Reset the pipe as Free */  
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	701a      	strb	r2, [r3, #0]
  }
  
  if(phost->pActiveClass->pData)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d006      	beq.n	8004d98 <USBH_HID_InterfaceDeInit+0x78>
  {
    USBH_free (phost->pActiveClass->pData);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f003 fc8e 	bl	80086b4 <free>
  }

  return USBH_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{   
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	6078      	str	r0, [r7, #4]
  uint8_t enable[4] = {0x42, 0x0C, 0x00, 0x00};
 8004dac:	4b5b      	ldr	r3, [pc, #364]	; (8004f1c <USBH_HID_ClassRequest+0x178>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef status         = USBH_BUSY;
 8004db2:	2301      	movs	r3, #1
 8004db4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8004db6:	2301      	movs	r3, #1
 8004db8:	75bb      	strb	r3, [r7, #22]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	613b      	str	r3, [r7, #16]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	795b      	ldrb	r3, [r3, #5]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	f200 8094 	bhi.w	8004ef6 <USBH_HID_ClassRequest+0x152>
 8004dce:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <USBH_HID_ClassRequest+0x30>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004df9 	.word	0x08004df9
 8004dd8:	08004ef7 	.word	0x08004ef7
 8004ddc:	08004e23 	.word	0x08004e23
 8004de0:	08004df9 	.word	0x08004df9
 8004de4:	08004ea7 	.word	0x08004ea7
 8004de8:	08004ed1 	.word	0x08004ed1
 8004dec:	08004ef7 	.word	0x08004ef7
 8004df0:	08004e5f 	.word	0x08004e5f
 8004df4:	08004e81 	.word	0x08004e81
  {
  case HID_REQ_INIT:  
  case HID_REQ_GET_HID_DESC:
    
    /* Get HID Desc */ 
    if (USBH_HID_GetHIDDescriptor (phost, USB_HID_DESC_SIZE)== USBH_OK)
 8004df8:	2109      	movs	r1, #9
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f974 	bl	80050e8 <USBH_HID_GetHIDDescriptor>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d179      	bne.n	8004efa <USBH_HID_ClassRequest+0x156>
    {
      
      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004e12:	4619      	mov	r1, r3
 8004e14:	4610      	mov	r0, r2
 8004e16:	f000 fa25 	bl	8005264 <USBH_HID_ParseHIDDesc>
      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	715a      	strb	r2, [r3, #5]
    }
    
    break;     
 8004e20:	e06b      	b.n	8004efa <USBH_HID_ClassRequest+0x156>
  case HID_REQ_GET_REPORT_DESC:
    
    
    /* Get Report Desc */ 
    if (USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength) == USBH_OK)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e26:	4619      	mov	r1, r3
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f944 	bl	80050b6 <USBH_HID_GetHIDReportDescriptor>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d164      	bne.n	8004efe <USBH_HID_ClassRequest+0x15a>
    {
      /* The descriptor is available in phost->device.Data */
    	if(phost->device.DevDesc.idVendor == 0x054C && phost->device.DevDesc.idProduct == 0x0268) // DS3 Sixaxis
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8004e3a:	f240 524c 	movw	r2, #1356	; 0x54c
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d109      	bne.n	8004e56 <USBH_HID_ClassRequest+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8004e48:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8004e4c:	d103      	bne.n	8004e56 <USBH_HID_ClassRequest+0xb2>
    	{
    		HID_Handle->ctl_state = HID_PS3_BOOTCODE;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	2207      	movs	r2, #7
 8004e52:	715a      	strb	r2, [r3, #5]
    	}
    	else HID_Handle->ctl_state = HID_REQ_SET_IDLE;
    }
    
    break;
 8004e54:	e053      	b.n	8004efe <USBH_HID_ClassRequest+0x15a>
    	else HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	2204      	movs	r2, #4
 8004e5a:	715a      	strb	r2, [r3, #5]
    break;
 8004e5c:	e04f      	b.n	8004efe <USBH_HID_ClassRequest+0x15a>
    
  case HID_PS3_BOOTCODE:
	  if(USBH_HID_SetReport(phost,0x03,0xF4,enable,4) == USBH_OK)
 8004e5e:	f107 020c 	add.w	r2, r7, #12
 8004e62:	2304      	movs	r3, #4
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	4613      	mov	r3, r2
 8004e68:	22f4      	movs	r2, #244	; 0xf4
 8004e6a:	2103      	movs	r1, #3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f97c 	bl	800516a <USBH_HID_SetReport>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d144      	bne.n	8004f02 <USBH_HID_ClassRequest+0x15e>
	  {
		  HID_Handle->ctl_state = HID_PS3_LED;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	715a      	strb	r2, [r3, #5]
		  //status = USBH_OK;
	  }
	  break;
 8004e7e:	e040      	b.n	8004f02 <USBH_HID_ClassRequest+0x15e>
  case HID_PS3_LED:
	  status = USBH_HID_SetReport(phost,0x02,0x01,led_buffer,sizeof(led_buffer));
 8004e80:	2330      	movs	r3, #48	; 0x30
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	4b26      	ldr	r3, [pc, #152]	; (8004f20 <USBH_HID_ClassRequest+0x17c>)
 8004e86:	2201      	movs	r2, #1
 8004e88:	2102      	movs	r1, #2
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f96d 	bl	800516a <USBH_HID_SetReport>
 8004e90:	4603      	mov	r3, r0
 8004e92:	75fb      	strb	r3, [r7, #23]
  	  if(status == USBH_OK)
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d135      	bne.n	8004f06 <USBH_HID_ClassRequest+0x162>
  	  {
  		  HID_Handle->ctl_state = HID_REQ_IDLE; // enable ps3 communication
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	715a      	strb	r2, [r3, #5]

  		  status = USBH_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	75fb      	strb	r3, [r7, #23]
  	  }
  	  break;
 8004ea4:	e02f      	b.n	8004f06 <USBH_HID_ClassRequest+0x162>

  case HID_REQ_SET_IDLE:
    
    classReqStatus = USBH_HID_SetIdle (phost, 0, 0);
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f935 	bl	800511a <USBH_HID_SetIdle>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	75bb      	strb	r3, [r7, #22]
    
    /* set Idle */
    if (classReqStatus == USBH_OK)
 8004eb4:	7dbb      	ldrb	r3, [r7, #22]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d103      	bne.n	8004ec2 <USBH_HID_ClassRequest+0x11e>
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;  
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2205      	movs	r2, #5
 8004ebe:	715a      	strb	r2, [r3, #5]
    }
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL; // Why if it's not supported would we set it to this state?!
    } 
    break; 
 8004ec0:	e023      	b.n	8004f0a <USBH_HID_ClassRequest+0x166>
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
 8004ec2:	7dbb      	ldrb	r3, [r7, #22]
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d120      	bne.n	8004f0a <USBH_HID_ClassRequest+0x166>
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL; // Why if it's not supported would we set it to this state?!
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	2205      	movs	r2, #5
 8004ecc:	715a      	strb	r2, [r3, #5]
    break; 
 8004ece:	e01c      	b.n	8004f0a <USBH_HID_ClassRequest+0x166>
    
  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
    if (USBH_HID_SetProtocol (phost, 0) == USBH_OK)
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f9a1 	bl	800521a <USBH_HID_SetProtocol>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d117      	bne.n	8004f0e <USBH_HID_ClassRequest+0x16a>
    {
      HID_Handle->ctl_state = HID_REQ_IDLE;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	715a      	strb	r2, [r3, #5]
      
      /* all requests performed*/
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE); 
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004eea:	2102      	movs	r1, #2
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
      status = USBH_OK; 
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	75fb      	strb	r3, [r7, #23]
    } 
    break;
 8004ef4:	e00b      	b.n	8004f0e <USBH_HID_ClassRequest+0x16a>
    
  case HID_REQ_IDLE:
  default:
    break;
 8004ef6:	bf00      	nop
 8004ef8:	e00a      	b.n	8004f10 <USBH_HID_ClassRequest+0x16c>
    break;     
 8004efa:	bf00      	nop
 8004efc:	e008      	b.n	8004f10 <USBH_HID_ClassRequest+0x16c>
    break;
 8004efe:	bf00      	nop
 8004f00:	e006      	b.n	8004f10 <USBH_HID_ClassRequest+0x16c>
	  break;
 8004f02:	bf00      	nop
 8004f04:	e004      	b.n	8004f10 <USBH_HID_ClassRequest+0x16c>
  	  break;
 8004f06:	bf00      	nop
 8004f08:	e002      	b.n	8004f10 <USBH_HID_ClassRequest+0x16c>
    break; 
 8004f0a:	bf00      	nop
 8004f0c:	e000      	b.n	8004f10 <USBH_HID_ClassRequest+0x16c>
    break;
 8004f0e:	bf00      	nop
  }
  
  return status; 
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	0800967c 	.word	0x0800967c
 8004f20:	20000008 	.word	0x20000008

08004f24 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	73fb      	strb	r3, [r7, #15]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	60bb      	str	r3, [r7, #8]
  
  switch (HID_Handle->state)
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	789b      	ldrb	r3, [r3, #2]
 8004f3e:	2b06      	cmp	r3, #6
 8004f40:	f200 808b 	bhi.w	800505a <USBH_HID_Process+0x136>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <USBH_HID_Process+0x28>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004f69 	.word	0x08004f69
 8004f50:	08004f71 	.word	0x08004f71
 8004f54:	0800505b 	.word	0x0800505b
 8004f58:	0800505b 	.word	0x0800505b
 8004f5c:	08004fc1 	.word	0x08004fc1
 8004f60:	08004fab 	.word	0x08004fab
 8004f64:	08004fef 	.word	0x08004fef
  {
  case HID_INIT:
    HID_Handle->Init(phost); 
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	4798      	blx	r3
  case HID_IDLE:
    if(USBH_HID_GetReport (phost,
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	695a      	ldr	r2, [r3, #20]
                           0x01,
                            0,
                            HID_Handle->pData,
                            HID_Handle->length) == USBH_OK)
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	8b1b      	ldrh	r3, [r3, #24]
    if(USBH_HID_GetReport (phost,
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2101      	movs	r1, #1
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f91d 	bl	80051c2 <USBH_HID_GetReport>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d167      	bne.n	800505e <USBH_HID_Process+0x13a>
    {
      
      fifo_write(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);  
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f103 0008 	add.w	r0, r3, #8
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	6959      	ldr	r1, [r3, #20]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	8b1b      	ldrh	r3, [r3, #24]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f000 fa45 	bl	800542c <fifo_write>
      HID_Handle->state = HID_SYNC;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2205      	movs	r2, #5
 8004fa6:	709a      	strb	r2, [r3, #2]
    }
    
    break;
 8004fa8:	e059      	b.n	800505e <USBH_HID_Process+0x13a>
    
  case HID_SYNC:

    /* Sync with start of Even Frame */
    if(phost->Timer & 1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d054      	beq.n	8005062 <USBH_HID_Process+0x13e>
    {
      HID_Handle->state = HID_GET_DATA; 
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2204      	movs	r2, #4
 8004fbc:	709a      	strb	r2, [r3, #2]
    }
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif   
    break;
 8004fbe:	e050      	b.n	8005062 <USBH_HID_Process+0x13e>
    
  case HID_GET_DATA:

    USBH_InterruptReceiveData(phost, 
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	6959      	ldr	r1, [r3, #20]
                              HID_Handle->pData,
                              HID_Handle->length,
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	8b1b      	ldrh	r3, [r3, #24]
    USBH_InterruptReceiveData(phost, 
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	785b      	ldrb	r3, [r3, #1]
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f002 fb8f 	bl	80076f2 <USBH_InterruptReceiveData>
                              HID_Handle->InPipe);
    
    HID_Handle->state = HID_POLL;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2206      	movs	r2, #6
 8004fd8:	709a      	strb	r2, [r3, #2]
    HID_Handle->timer = phost->Timer;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	621a      	str	r2, [r3, #32]
    HID_Handle->DataReady = 0;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    break;
 8004fec:	e03c      	b.n	8005068 <USBH_HID_Process+0x144>
    
  case HID_POLL:
    
    if(USBH_LL_GetURBState(phost , HID_Handle->InPipe) == USBH_URB_DONE)
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	785b      	ldrb	r3, [r3, #1]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f003 faa7 	bl	8008548 <USBH_LL_GetURBState>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d116      	bne.n	800502e <USBH_HID_Process+0x10a>
    {
      if(HID_Handle->DataReady == 0)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005006:	2b00      	cmp	r3, #0
 8005008:	d12d      	bne.n	8005066 <USBH_HID_Process+0x142>
      {
        fifo_write(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f103 0008 	add.w	r0, r3, #8
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	6959      	ldr	r1, [r3, #20]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	8b1b      	ldrh	r3, [r3, #24]
 8005018:	461a      	mov	r2, r3
 800501a:	f000 fa07 	bl	800542c <fifo_write>
        HID_Handle->DataReady = 1;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        USBH_HID_EventCallback(phost);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fa54 	bl	80054d4 <USBH_HID_EventCallback>
        HID_Handle->state = HID_GET_DATA;
      }
    } 
    

    break;
 800502c:	e01b      	b.n	8005066 <USBH_HID_Process+0x142>
    else if(USBH_LL_GetURBState(phost , HID_Handle->InPipe) == USBH_URB_STALL) /* IN Endpoint Stalled */
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	785b      	ldrb	r3, [r3, #1]
 8005032:	4619      	mov	r1, r3
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f003 fa87 	bl	8008548 <USBH_LL_GetURBState>
 800503a:	4603      	mov	r3, r0
 800503c:	2b05      	cmp	r3, #5
 800503e:	d112      	bne.n	8005066 <USBH_HID_Process+0x142>
      if(USBH_ClrFeature(phost,
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	7e9b      	ldrb	r3, [r3, #26]
 8005044:	4619      	mov	r1, r3
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f001 ff5f 	bl	8006f0a <USBH_ClrFeature>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d109      	bne.n	8005066 <USBH_HID_Process+0x142>
        HID_Handle->state = HID_GET_DATA;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2204      	movs	r2, #4
 8005056:	709a      	strb	r2, [r3, #2]
    break;
 8005058:	e005      	b.n	8005066 <USBH_HID_Process+0x142>
    
  default:
    break;
 800505a:	bf00      	nop
 800505c:	e004      	b.n	8005068 <USBH_HID_Process+0x144>
    break;
 800505e:	bf00      	nop
 8005060:	e002      	b.n	8005068 <USBH_HID_Process+0x144>
    break;
 8005062:	bf00      	nop
 8005064:	e000      	b.n	8005068 <USBH_HID_Process+0x144>
    break;
 8005066:	bf00      	nop
  }
  return status;
 8005068:	7bfb      	ldrb	r3, [r7, #15]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop

08005074 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	60fb      	str	r3, [r7, #12]
  
  if(HID_Handle->state == HID_POLL)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	789b      	ldrb	r3, [r3, #2]
 800508a:	2b06      	cmp	r3, #6
 800508c:	d10c      	bne.n	80050a8 <USBH_HID_SOFProcess+0x34>
  {
    if(( phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	8b92      	ldrh	r2, [r2, #28]
 800509e:	4293      	cmp	r3, r2
 80050a0:	d302      	bcc.n	80050a8 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2204      	movs	r2, #4
 80050a6:	709a      	strb	r2, [r3, #2]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
  }
  return USBH_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor (USBH_HandleTypeDef *phost,
                                                         uint16_t length)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b086      	sub	sp, #24
 80050ba:	af02      	add	r7, sp, #8
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	460b      	mov	r3, r1
 80050c0:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  
  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,                                  
                              USB_DESC_HID_REPORT, 
                              phost->device.Data,
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80050c8:	887b      	ldrh	r3, [r7, #2]
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	4613      	mov	r3, r2
 80050ce:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 80050d2:	2101      	movs	r1, #1
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f001 fe9c 	bl	8006e12 <USBH_GetDescriptor>
 80050da:	4603      	mov	r3, r0
 80050dc:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/
  
  
  return status;
 80050de:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <USBH_HID_GetHIDDescriptor>:
  * @param  Length : HID Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor (USBH_HandleTypeDef *phost,
                                            uint16_t length)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  
  status = USBH_GetDescriptor( phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,                                  
                              USB_DESC_HID,
                              phost->device.Data,
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor( phost,
 80050fa:	887b      	ldrh	r3, [r7, #2]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	4613      	mov	r3, r2
 8005100:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8005104:	2101      	movs	r1, #1
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f001 fe83 	bl	8006e12 <USBH_GetDescriptor>
 800510c:	4603      	mov	r3, r0
 800510e:	73fb      	strb	r3, [r7, #15]
                              length);
 
  return status;
 8005110:	7bfb      	ldrb	r3, [r7, #15]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle (USBH_HandleTypeDef *phost,
                                         uint8_t duration,
                                         uint8_t reportId)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	460b      	mov	r3, r1
 8005124:	70fb      	strb	r3, [r7, #3]
 8005126:	4613      	mov	r3, r2
 8005128:	70bb      	strb	r3, [r7, #2]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2221      	movs	r2, #33	; 0x21
 800512e:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	220a      	movs	r2, #10
 8005134:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (duration << 8 ) | reportId;
 8005136:	78fb      	ldrb	r3, [r7, #3]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	b21a      	sxth	r2, r3
 800513c:	78bb      	ldrb	r3, [r7, #2]
 800513e:	b21b      	sxth	r3, r3
 8005140:	4313      	orrs	r3, r2
 8005142:	b21b      	sxth	r3, r3
 8005144:	b29a      	uxth	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	825a      	strh	r2, [r3, #18]
  
  phost->Control.setup.b.wIndex.w = 0;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );
 8005156:	2200      	movs	r2, #0
 8005158:	2100      	movs	r1, #0
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f002 f8b9 	bl	80072d2 <USBH_CtlReq>
 8005160:	4603      	mov	r3, r0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <USBH_HID_SetReport>:
USBH_StatusTypeDef USBH_HID_SetReport (USBH_HandleTypeDef *phost,
                                    uint8_t reportType,
                                    uint8_t reportId,
                                    uint8_t* reportBuff,
                                    uint8_t reportLen)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	607b      	str	r3, [r7, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	72fb      	strb	r3, [r7, #11]
 8005178:	4613      	mov	r3, r2
 800517a:	72bb      	strb	r3, [r7, #10]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2221      	movs	r2, #33	; 0x21
 8005180:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_REPORT;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2209      	movs	r2, #9
 8005186:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (reportType << 8 ) | reportId;
 8005188:	7afb      	ldrb	r3, [r7, #11]
 800518a:	021b      	lsls	r3, r3, #8
 800518c:	b21a      	sxth	r2, r3
 800518e:	7abb      	ldrb	r3, [r7, #10]
 8005190:	b21b      	sxth	r3, r3
 8005192:	4313      	orrs	r3, r2
 8005194:	b21b      	sxth	r3, r3
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	825a      	strh	r2, [r3, #18]
  
  phost->Control.setup.b.wIndex.w = 0;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80051a2:	7e3b      	ldrb	r3, [r7, #24]
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, reportBuff , reportLen );
 80051aa:	7e3b      	ldrb	r3, [r7, #24]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	461a      	mov	r2, r3
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f002 f88d 	bl	80072d2 <USBH_CtlReq>
 80051b8:	4603      	mov	r3, r0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport (USBH_HandleTypeDef *phost,
                                    uint8_t reportType,
                                    uint8_t reportId,
                                    uint8_t* reportBuff,
                                    uint8_t reportLen)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	607b      	str	r3, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	72fb      	strb	r3, [r7, #11]
 80051d0:	4613      	mov	r3, r2
 80051d2:	72bb      	strb	r3, [r7, #10]
  
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE |\
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	22a1      	movs	r2, #161	; 0xa1
 80051d8:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (reportType << 8 ) | reportId;
 80051e0:	7afb      	ldrb	r3, [r7, #11]
 80051e2:	021b      	lsls	r3, r3, #8
 80051e4:	b21a      	sxth	r2, r3
 80051e6:	7abb      	ldrb	r3, [r7, #10]
 80051e8:	b21b      	sxth	r3, r3
 80051ea:	4313      	orrs	r3, r2
 80051ec:	b21b      	sxth	r3, r3
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	825a      	strh	r2, [r3, #18]
  
  phost->Control.setup.b.wIndex.w = 0;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80051fa:	7e3b      	ldrb	r3, [r7, #24]
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, reportBuff , reportLen );
 8005202:	7e3b      	ldrb	r3, [r7, #24]
 8005204:	b29b      	uxth	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f002 f861 	bl	80072d2 <USBH_CtlReq>
 8005210:	4603      	mov	r3, r0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                            uint8_t protocol)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b082      	sub	sp, #8
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	70fb      	strb	r3, [r7, #3]
  
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2221      	movs	r2, #33	; 0x21
 800522a:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	220b      	movs	r2, #11
 8005230:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = protocol != 0 ? 0 : 1;
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	2b00      	cmp	r3, #0
 8005236:	bf0c      	ite	eq
 8005238:	2301      	moveq	r3, #1
 800523a:	2300      	movne	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	b29a      	uxth	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );
 8005250:	2200      	movs	r2, #0
 8005252:	2100      	movs	r1, #0
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f002 f83c 	bl	80072d2 <USBH_CtlReq>
 800525a:	4603      	mov	r3, r0
  
}
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc (HID_DescTypeDef *desc, uint8_t *buf)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  
  desc->bLength                  = *(uint8_t  *) (buf + 0);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781a      	ldrb	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	701a      	strb	r2, [r3, #0]
  desc->bDescriptorType          = *(uint8_t  *) (buf + 1);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	785a      	ldrb	r2, [r3, #1]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	705a      	strb	r2, [r3, #1]
  desc->bcdHID                   =  LE16  (buf + 2);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	3302      	adds	r3, #2
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	b29a      	uxth	r2, r3
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	3303      	adds	r3, #3
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	b29b      	uxth	r3, r3
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	b29b      	uxth	r3, r3
 8005292:	4413      	add	r3, r2
 8005294:	b29a      	uxth	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	805a      	strh	r2, [r3, #2]
  desc->bCountryCode             = *(uint8_t  *) (buf + 4);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	791a      	ldrb	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	711a      	strb	r2, [r3, #4]
  desc->bNumDescriptors          = *(uint8_t  *) (buf + 5);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	795a      	ldrb	r2, [r3, #5]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	715a      	strb	r2, [r3, #5]
  desc->bReportDescriptorType    = *(uint8_t  *) (buf + 6);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	799a      	ldrb	r2, [r3, #6]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	719a      	strb	r2, [r3, #6]
  desc->wItemLength              =  LE16  (buf + 7);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	3307      	adds	r3, #7
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	3308      	adds	r3, #8
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	4413      	add	r3, r2
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	811a      	strh	r2, [r3, #8]
} 
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 80052e2:	23ff      	movs	r3, #255	; 0xff
 80052e4:	73fb      	strb	r3, [r7, #15]
  
  if(phost->gState == HOST_CLASS)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b0a      	cmp	r3, #10
 80052ee:	d131      	bne.n	8005354 <USBH_HID_GetDeviceType+0x7a>
  {
    
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol \
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80052f6:	4619      	mov	r1, r3
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	231a      	movs	r3, #26
 80052fc:	fb03 f301 	mul.w	r3, r3, r1
 8005300:	4413      	add	r3, r2
 8005302:	f203 3343 	addw	r3, r3, #835	; 0x343
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d102      	bne.n	8005312 <USBH_HID_GetDeviceType+0x38>
      == HID_KEYBRD_BOOT_CODE)
    {
      type = HID_KEYBOARD;  
 800530c:	2302      	movs	r3, #2
 800530e:	73fb      	strb	r3, [r7, #15]
 8005310:	e020      	b.n	8005354 <USBH_HID_GetDeviceType+0x7a>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol \
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005318:	4619      	mov	r1, r3
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	231a      	movs	r3, #26
 800531e:	fb03 f301 	mul.w	r3, r3, r1
 8005322:	4413      	add	r3, r2
 8005324:	f203 3343 	addw	r3, r3, #835	; 0x343
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b02      	cmp	r3, #2
 800532c:	d102      	bne.n	8005334 <USBH_HID_GetDeviceType+0x5a>
      == HID_MOUSE_BOOT_CODE)		  
    {
      type=  HID_MOUSE;  
 800532e:	2301      	movs	r3, #1
 8005330:	73fb      	strb	r3, [r7, #15]
 8005332:	e00f      	b.n	8005354 <USBH_HID_GetDeviceType+0x7a>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol \
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800533a:	4619      	mov	r1, r3
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	231a      	movs	r3, #26
 8005340:	fb03 f301 	mul.w	r3, r3, r1
 8005344:	4413      	add	r3, r2
 8005346:	f203 3343 	addw	r3, r3, #835	; 0x343
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <USBH_HID_GetDeviceType+0x7a>
	  == HID_DS3_BOOT_CODE)
	{
	  type=  HID_DS3;
 8005350:	2303      	movs	r3, #3
 8005352:	73fb      	strb	r3, [r7, #15]
	}
  }
  return type;
 8005354:	7bfb      	ldrb	r3, [r7, #15]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <fifo_init>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void fifo_init(FIFO_TypeDef * f, uint8_t * buf, uint16_t size)
{
 8005362:	b480      	push	{r7}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	4613      	mov	r3, r2
 800536e:	80fb      	strh	r3, [r7, #6]
     f->head = 0;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	809a      	strh	r2, [r3, #4]
     f->tail = 0;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	80da      	strh	r2, [r3, #6]
     f->lock = 0;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	729a      	strb	r2, [r3, #10]
     f->size = size;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	88fa      	ldrh	r2, [r7, #6]
 8005386:	811a      	strh	r2, [r3, #8]
     f->buf = buf;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	601a      	str	r2, [r3, #0]
}
 800538e:	bf00      	nop
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <fifo_read>:
  * @param  buf: read buffer 
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t  fifo_read(FIFO_TypeDef * f, void * buf, uint16_t  nbytes)
{
 800539a:	b480      	push	{r7}
 800539c:	b087      	sub	sp, #28
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	4613      	mov	r3, r2
 80053a6:	80fb      	strh	r3, [r7, #6]
  uint16_t  i;
  uint8_t * p;
  p = (uint8_t*) buf;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	613b      	str	r3, [r7, #16]
  
  if(f->lock == 0)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	7a9b      	ldrb	r3, [r3, #10]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d131      	bne.n	8005418 <fifo_read+0x7e>
  {
    f->lock = 1;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	729a      	strb	r2, [r3, #10]
    for(i=0; i < nbytes; i++)
 80053ba:	2300      	movs	r3, #0
 80053bc:	82fb      	strh	r3, [r7, #22]
 80053be:	e027      	b.n	8005410 <fifo_read+0x76>
    {
      if( f->tail != f->head )
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	88da      	ldrh	r2, [r3, #6]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	889b      	ldrh	r3, [r3, #4]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d019      	beq.n	8005400 <fifo_read+0x66>
      { 
        *p++ = f->buf[f->tail];  
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	613a      	str	r2, [r7, #16]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	6812      	ldr	r2, [r2, #0]
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	88c9      	ldrh	r1, [r1, #6]
 80053da:	440a      	add	r2, r1
 80053dc:	7812      	ldrb	r2, [r2, #0]
 80053de:	701a      	strb	r2, [r3, #0]
        f->tail++;  
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	88db      	ldrh	r3, [r3, #6]
 80053e4:	3301      	adds	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	80da      	strh	r2, [r3, #6]
        if( f->tail == f->size )
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	88da      	ldrh	r2, [r3, #6]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	891b      	ldrh	r3, [r3, #8]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d108      	bne.n	800540a <fifo_read+0x70>
        {  
          f->tail = 0;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	80da      	strh	r2, [r3, #6]
 80053fe:	e004      	b.n	800540a <fifo_read+0x70>
        }
      } else 
      {
        f->lock = 0;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	729a      	strb	r2, [r3, #10]
        return i; 
 8005406:	8afb      	ldrh	r3, [r7, #22]
 8005408:	e00a      	b.n	8005420 <fifo_read+0x86>
    for(i=0; i < nbytes; i++)
 800540a:	8afb      	ldrh	r3, [r7, #22]
 800540c:	3301      	adds	r3, #1
 800540e:	82fb      	strh	r3, [r7, #22]
 8005410:	8afa      	ldrh	r2, [r7, #22]
 8005412:	88fb      	ldrh	r3, [r7, #6]
 8005414:	429a      	cmp	r2, r3
 8005416:	d3d3      	bcc.n	80053c0 <fifo_read+0x26>
      }
    }
  }
  f->lock = 0;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	729a      	strb	r2, [r3, #10]
  return nbytes;
 800541e:	88fb      	ldrh	r3, [r7, #6]
}
 8005420:	4618      	mov	r0, r3
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <fifo_write>:
  * @param  buf: read buffer 
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t  fifo_write(FIFO_TypeDef * f, const void * buf, uint16_t  nbytes)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	4613      	mov	r3, r2
 8005438:	80fb      	strh	r3, [r7, #6]
  uint16_t  i;
  const uint8_t * p;
  p = (const uint8_t*) buf;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	613b      	str	r3, [r7, #16]
  if(f->lock == 0)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	7a9b      	ldrb	r3, [r3, #10]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d13c      	bne.n	80054c0 <fifo_write+0x94>
  {
    f->lock = 1;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	729a      	strb	r2, [r3, #10]
    for(i=0; i < nbytes; i++)
 800544c:	2300      	movs	r3, #0
 800544e:	82fb      	strh	r3, [r7, #22]
 8005450:	e032      	b.n	80054b8 <fifo_write+0x8c>
    {
      if( (f->head + 1 == f->tail) ||
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	889b      	ldrh	r3, [r3, #4]
 8005456:	3301      	adds	r3, #1
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	88d2      	ldrh	r2, [r2, #6]
 800545c:	4293      	cmp	r3, r2
 800545e:	d00a      	beq.n	8005476 <fifo_write+0x4a>
         ( (f->head + 1 == f->size) && (f->tail == 0)) )
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	889b      	ldrh	r3, [r3, #4]
 8005464:	3301      	adds	r3, #1
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	8912      	ldrh	r2, [r2, #8]
      if( (f->head + 1 == f->tail) ||
 800546a:	4293      	cmp	r3, r2
 800546c:	d108      	bne.n	8005480 <fifo_write+0x54>
         ( (f->head + 1 == f->size) && (f->tail == 0)) )
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	88db      	ldrh	r3, [r3, #6]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d104      	bne.n	8005480 <fifo_write+0x54>
      {
        f->lock = 0;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	729a      	strb	r2, [r3, #10]
        return i;
 800547c:	8afb      	ldrh	r3, [r7, #22]
 800547e:	e023      	b.n	80054c8 <fifo_write+0x9c>
      } 
      else 
      {
        f->buf[f->head] = *p++;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	8892      	ldrh	r2, [r2, #4]
 8005488:	441a      	add	r2, r3
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1c59      	adds	r1, r3, #1
 800548e:	6139      	str	r1, [r7, #16]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	7013      	strb	r3, [r2, #0]
        f->head++;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	889b      	ldrh	r3, [r3, #4]
 8005498:	3301      	adds	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	809a      	strh	r2, [r3, #4]
        if( f->head == f->size )
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	889a      	ldrh	r2, [r3, #4]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	891b      	ldrh	r3, [r3, #8]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d102      	bne.n	80054b2 <fifo_write+0x86>
        {
          f->head = 0;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	809a      	strh	r2, [r3, #4]
    for(i=0; i < nbytes; i++)
 80054b2:	8afb      	ldrh	r3, [r7, #22]
 80054b4:	3301      	adds	r3, #1
 80054b6:	82fb      	strh	r3, [r7, #22]
 80054b8:	8afa      	ldrh	r2, [r7, #22]
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d3c8      	bcc.n	8005452 <fifo_write+0x26>
        }
      }
    }
  }
  f->lock = 0;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	729a      	strb	r2, [r3, #10]
  return nbytes;
 80054c6:	88fb      	ldrh	r3, [r7, #6]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <USBH_HID_EventCallback>:
*  @param  phost: Selected device
* @retval None
*/

__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08e      	sub	sp, #56	; 0x38
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
	HID_TypeTypeDef type = HID_UNKNOWN;
 80054dc:	23ff      	movs	r3, #255	; 0xff
 80054de:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	HID_KEYBD_Info_TypeDef* kb_state = NULL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HID_DS3_Info_TypeDef* ds3_state = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	62bb      	str	r3, [r7, #40]	; 0x28

	type = USBH_HID_GetDeviceType(phost);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7ff fef5 	bl	80052da <USBH_HID_GetDeviceType>
 80054f0:	4603      	mov	r3, r0
 80054f2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	//TODO: memset to 0 and then resetting flags must be an atomic operation!
	// that will prevent represses!
	// disable interrupts during long if statements?

	switch(type)
 80054f6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d003      	beq.n	8005506 <USBH_HID_EventCallback+0x32>
 80054fe:	2b03      	cmp	r3, #3
 8005500:	f000 809e 	beq.w	8005640 <USBH_HID_EventCallback+0x16c>
			// end of analog code

			__enable_irq();
			break;
		default:
			break;
 8005504:	e286      	b.n	8005a14 <USBH_HID_EventCallback+0x540>
			kb_state = USBH_HID_GetKeybdInfo(phost);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fb62 	bl	8005bd0 <USBH_HID_GetKeybdInfo>
 800550c:	62f8      	str	r0, [r7, #44]	; 0x2c
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800550e:	b672      	cpsid	i
			memset(&n64_data,0,4);
 8005510:	2204      	movs	r2, #4
 8005512:	2100      	movs	r1, #0
 8005514:	48af      	ldr	r0, [pc, #700]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 8005516:	f003 f8d5 	bl	80086c4 <memset>
			for(int index = 0;index < 6;index++)
 800551a:	2300      	movs	r3, #0
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
 800551e:	e089      	b.n	8005634 <USBH_HID_EventCallback+0x160>
				if(kb_state->keys[index] == KEY_A)
 8005520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005524:	4413      	add	r3, r2
 8005526:	3309      	adds	r3, #9
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b04      	cmp	r3, #4
 800552c:	d105      	bne.n	800553a <USBH_HID_EventCallback+0x66>
					n64_data.a = 1;
 800552e:	4aa9      	ldr	r2, [pc, #676]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 8005530:	7813      	ldrb	r3, [r2, #0]
 8005532:	f043 0301 	orr.w	r3, r3, #1
 8005536:	7013      	strb	r3, [r2, #0]
					continue;
 8005538:	e079      	b.n	800562e <USBH_HID_EventCallback+0x15a>
				if(kb_state->keys[index] == KEY_S)
 800553a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800553c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553e:	4413      	add	r3, r2
 8005540:	3309      	adds	r3, #9
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b16      	cmp	r3, #22
 8005546:	d105      	bne.n	8005554 <USBH_HID_EventCallback+0x80>
					n64_data.b = 1;
 8005548:	4aa2      	ldr	r2, [pc, #648]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 800554a:	7813      	ldrb	r3, [r2, #0]
 800554c:	f043 0302 	orr.w	r3, r3, #2
 8005550:	7013      	strb	r3, [r2, #0]
					continue;
 8005552:	e06c      	b.n	800562e <USBH_HID_EventCallback+0x15a>
				if(kb_state->keys[index] == KEY_D)
 8005554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005558:	4413      	add	r3, r2
 800555a:	3309      	adds	r3, #9
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b07      	cmp	r3, #7
 8005560:	d105      	bne.n	800556e <USBH_HID_EventCallback+0x9a>
					n64_data.z = 1;
 8005562:	4a9c      	ldr	r2, [pc, #624]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 8005564:	7813      	ldrb	r3, [r2, #0]
 8005566:	f043 0304 	orr.w	r3, r3, #4
 800556a:	7013      	strb	r3, [r2, #0]
					continue;
 800556c:	e05f      	b.n	800562e <USBH_HID_EventCallback+0x15a>
				if(kb_state->keys[index] == KEY_F)
 800556e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005572:	4413      	add	r3, r2
 8005574:	3309      	adds	r3, #9
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b09      	cmp	r3, #9
 800557a:	d105      	bne.n	8005588 <USBH_HID_EventCallback+0xb4>
					n64_data.r = 1;
 800557c:	4a95      	ldr	r2, [pc, #596]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 800557e:	7853      	ldrb	r3, [r2, #1]
 8005580:	f043 0308 	orr.w	r3, r3, #8
 8005584:	7053      	strb	r3, [r2, #1]
					continue;
 8005586:	e052      	b.n	800562e <USBH_HID_EventCallback+0x15a>
				if(kb_state->keys[index] == KEY_W)
 8005588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800558a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558c:	4413      	add	r3, r2
 800558e:	3309      	adds	r3, #9
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b1a      	cmp	r3, #26
 8005594:	d105      	bne.n	80055a2 <USBH_HID_EventCallback+0xce>
					n64_data.c_up = 1;
 8005596:	4a8f      	ldr	r2, [pc, #572]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 8005598:	7853      	ldrb	r3, [r2, #1]
 800559a:	f043 0310 	orr.w	r3, r3, #16
 800559e:	7053      	strb	r3, [r2, #1]
					continue;
 80055a0:	e045      	b.n	800562e <USBH_HID_EventCallback+0x15a>
				if(kb_state->keys[index] == KEY_1_EXCLAMATION_MARK)
 80055a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a6:	4413      	add	r3, r2
 80055a8:	3309      	adds	r3, #9
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b1e      	cmp	r3, #30
 80055ae:	d105      	bne.n	80055bc <USBH_HID_EventCallback+0xe8>
					n64_data.l = 1;
 80055b0:	4a88      	ldr	r2, [pc, #544]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 80055b2:	7853      	ldrb	r3, [r2, #1]
 80055b4:	f043 0304 	orr.w	r3, r3, #4
 80055b8:	7053      	strb	r3, [r2, #1]
					continue;
 80055ba:	e038      	b.n	800562e <USBH_HID_EventCallback+0x15a>
				if(kb_state->keys[index] == KEY_ENTER)
 80055bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c0:	4413      	add	r3, r2
 80055c2:	3309      	adds	r3, #9
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b28      	cmp	r3, #40	; 0x28
 80055c8:	d105      	bne.n	80055d6 <USBH_HID_EventCallback+0x102>
					n64_data.start = 1;
 80055ca:	4a82      	ldr	r2, [pc, #520]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 80055cc:	7813      	ldrb	r3, [r2, #0]
 80055ce:	f043 0308 	orr.w	r3, r3, #8
 80055d2:	7013      	strb	r3, [r2, #0]
					continue;
 80055d4:	e02b      	b.n	800562e <USBH_HID_EventCallback+0x15a>
				if(kb_state->keys[index] == KEY_UPARROW)
 80055d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055da:	4413      	add	r3, r2
 80055dc:	3309      	adds	r3, #9
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b52      	cmp	r3, #82	; 0x52
 80055e2:	d103      	bne.n	80055ec <USBH_HID_EventCallback+0x118>
					n64_data.y_axis = 0x26;
 80055e4:	4b7b      	ldr	r3, [pc, #492]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 80055e6:	2226      	movs	r2, #38	; 0x26
 80055e8:	70da      	strb	r2, [r3, #3]
					continue;
 80055ea:	e020      	b.n	800562e <USBH_HID_EventCallback+0x15a>
				if(kb_state->keys[index] == KEY_DOWNARROW)
 80055ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f0:	4413      	add	r3, r2
 80055f2:	3309      	adds	r3, #9
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b51      	cmp	r3, #81	; 0x51
 80055f8:	d103      	bne.n	8005602 <USBH_HID_EventCallback+0x12e>
					n64_data.y_axis = 0x39;
 80055fa:	4b76      	ldr	r3, [pc, #472]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 80055fc:	2239      	movs	r2, #57	; 0x39
 80055fe:	70da      	strb	r2, [r3, #3]
					continue;
 8005600:	e015      	b.n	800562e <USBH_HID_EventCallback+0x15a>
				if(kb_state->keys[index] == KEY_LEFTARROW)
 8005602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005606:	4413      	add	r3, r2
 8005608:	3309      	adds	r3, #9
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b50      	cmp	r3, #80	; 0x50
 800560e:	d103      	bne.n	8005618 <USBH_HID_EventCallback+0x144>
					n64_data.x_axis = 0x39;
 8005610:	4b70      	ldr	r3, [pc, #448]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 8005612:	2239      	movs	r2, #57	; 0x39
 8005614:	709a      	strb	r2, [r3, #2]
					continue;
 8005616:	e00a      	b.n	800562e <USBH_HID_EventCallback+0x15a>
				if(kb_state->keys[index] == KEY_RIGHTARROW)
 8005618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800561a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561c:	4413      	add	r3, r2
 800561e:	3309      	adds	r3, #9
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2b4f      	cmp	r3, #79	; 0x4f
 8005624:	d103      	bne.n	800562e <USBH_HID_EventCallback+0x15a>
					n64_data.x_axis = 0x26;
 8005626:	4b6b      	ldr	r3, [pc, #428]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 8005628:	2226      	movs	r2, #38	; 0x26
 800562a:	709a      	strb	r2, [r3, #2]
					continue;
 800562c:	bf00      	nop
			for(int index = 0;index < 6;index++)
 800562e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005630:	3301      	adds	r3, #1
 8005632:	637b      	str	r3, [r7, #52]	; 0x34
 8005634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005636:	2b05      	cmp	r3, #5
 8005638:	f77f af72 	ble.w	8005520 <USBH_HID_EventCallback+0x4c>
  __ASM volatile ("cpsie i" : : : "memory");
 800563c:	b662      	cpsie	i
			break;
 800563e:	e1e9      	b.n	8005a14 <USBH_HID_EventCallback+0x540>
			ds3_state = USBH_HID_GetDS3Info(phost);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fa61 	bl	8005b08 <USBH_HID_GetDS3Info>
 8005646:	62b8      	str	r0, [r7, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 8005648:	b672      	cpsid	i
			memset(&n64_data,0,4);
 800564a:	2204      	movs	r2, #4
 800564c:	2100      	movs	r1, #0
 800564e:	4861      	ldr	r0, [pc, #388]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 8005650:	f003 f838 	bl	80086c4 <memset>
			if(ds3_state->x)
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	78db      	ldrb	r3, [r3, #3]
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d004      	beq.n	800566c <USBH_HID_EventCallback+0x198>
				n64_data.a = 1;
 8005662:	4a5c      	ldr	r2, [pc, #368]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 8005664:	7813      	ldrb	r3, [r2, #0]
 8005666:	f043 0301 	orr.w	r3, r3, #1
 800566a:	7013      	strb	r3, [r2, #0]
			if(ds3_state->triangle)
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	78db      	ldrb	r3, [r3, #3]
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d004      	beq.n	8005684 <USBH_HID_EventCallback+0x1b0>
				n64_data.c_up = 1;
 800567a:	4a56      	ldr	r2, [pc, #344]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 800567c:	7853      	ldrb	r3, [r2, #1]
 800567e:	f043 0310 	orr.w	r3, r3, #16
 8005682:	7053      	strb	r3, [r2, #1]
			if(ds3_state->square)
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	78db      	ldrb	r3, [r3, #3]
 8005688:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d004      	beq.n	800569c <USBH_HID_EventCallback+0x1c8>
				n64_data.b = 1;
 8005692:	4a50      	ldr	r2, [pc, #320]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 8005694:	7813      	ldrb	r3, [r2, #0]
 8005696:	f043 0302 	orr.w	r3, r3, #2
 800569a:	7013      	strb	r3, [r2, #0]
			if(ds3_state->circle)
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	78db      	ldrb	r3, [r3, #3]
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d004      	beq.n	80056b4 <USBH_HID_EventCallback+0x1e0>
				n64_data.c_right = 1;
 80056aa:	4a4a      	ldr	r2, [pc, #296]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 80056ac:	7853      	ldrb	r3, [r2, #1]
 80056ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b2:	7053      	strb	r3, [r2, #1]
			if(ds3_state->L1)
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	78db      	ldrb	r3, [r3, #3]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d004      	beq.n	80056cc <USBH_HID_EventCallback+0x1f8>
				n64_data.l = 1;
 80056c2:	4a44      	ldr	r2, [pc, #272]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 80056c4:	7853      	ldrb	r3, [r2, #1]
 80056c6:	f043 0304 	orr.w	r3, r3, #4
 80056ca:	7053      	strb	r3, [r2, #1]
			if(ds3_state->R1)
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	78db      	ldrb	r3, [r3, #3]
 80056d0:	f003 0308 	and.w	r3, r3, #8
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d004      	beq.n	80056e4 <USBH_HID_EventCallback+0x210>
				n64_data.r = 1;
 80056da:	4a3e      	ldr	r2, [pc, #248]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 80056dc:	7853      	ldrb	r3, [r2, #1]
 80056de:	f043 0308 	orr.w	r3, r3, #8
 80056e2:	7053      	strb	r3, [r2, #1]
			if(ds3_state->R2)
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	78db      	ldrb	r3, [r3, #3]
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d004      	beq.n	80056fc <USBH_HID_EventCallback+0x228>
				n64_data.z = 1;
 80056f2:	4a38      	ldr	r2, [pc, #224]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 80056f4:	7813      	ldrb	r3, [r2, #0]
 80056f6:	f043 0304 	orr.w	r3, r3, #4
 80056fa:	7013      	strb	r3, [r2, #0]
			if(ds3_state->L2)
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	78db      	ldrb	r3, [r3, #3]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d004      	beq.n	8005714 <USBH_HID_EventCallback+0x240>
				n64_data.c_left = 1;
 800570a:	4a32      	ldr	r2, [pc, #200]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 800570c:	7853      	ldrb	r3, [r2, #1]
 800570e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005712:	7053      	strb	r3, [r2, #1]
			if(ds3_state->start)
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	789b      	ldrb	r3, [r3, #2]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d004      	beq.n	800572c <USBH_HID_EventCallback+0x258>
				n64_data.start = 1;
 8005722:	4a2c      	ldr	r2, [pc, #176]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 8005724:	7813      	ldrb	r3, [r2, #0]
 8005726:	f043 0308 	orr.w	r3, r3, #8
 800572a:	7013      	strb	r3, [r2, #0]
			if(ds3_state->select)
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	789b      	ldrb	r3, [r3, #2]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d004      	beq.n	8005744 <USBH_HID_EventCallback+0x270>
				n64_data.c_down = 1;
 800573a:	4a26      	ldr	r2, [pc, #152]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 800573c:	7853      	ldrb	r3, [r2, #1]
 800573e:	f043 0320 	orr.w	r3, r3, #32
 8005742:	7053      	strb	r3, [r2, #1]
			if(ds3_state->d_up)
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	789b      	ldrb	r3, [r3, #2]
 8005748:	f003 0310 	and.w	r3, r3, #16
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d004      	beq.n	800575c <USBH_HID_EventCallback+0x288>
				n64_data.up = 1;
 8005752:	4a20      	ldr	r2, [pc, #128]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 8005754:	7813      	ldrb	r3, [r2, #0]
 8005756:	f043 0310 	orr.w	r3, r3, #16
 800575a:	7013      	strb	r3, [r2, #0]
			if(ds3_state->d_down)
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	789b      	ldrb	r3, [r3, #2]
 8005760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d004      	beq.n	8005774 <USBH_HID_EventCallback+0x2a0>
				n64_data.down = 1;
 800576a:	4a1a      	ldr	r2, [pc, #104]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 800576c:	7813      	ldrb	r3, [r2, #0]
 800576e:	f043 0320 	orr.w	r3, r3, #32
 8005772:	7013      	strb	r3, [r2, #0]
			if(ds3_state->d_left)
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	789b      	ldrb	r3, [r3, #2]
 8005778:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d004      	beq.n	800578c <USBH_HID_EventCallback+0x2b8>
				n64_data.left = 1;
 8005782:	4a14      	ldr	r2, [pc, #80]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 8005784:	7813      	ldrb	r3, [r2, #0]
 8005786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800578a:	7013      	strb	r3, [r2, #0]
			if(ds3_state->d_right)
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	789b      	ldrb	r3, [r3, #2]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d004      	beq.n	80057a4 <USBH_HID_EventCallback+0x2d0>
				n64_data.right = 1;
 800579a:	4a0e      	ldr	r2, [pc, #56]	; (80057d4 <USBH_HID_EventCallback+0x300>)
 800579c:	7813      	ldrb	r3, [r2, #0]
 800579e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a2:	7013      	strb	r3, [r2, #0]
			const int sensitivity = 100;
 80057a4:	2364      	movs	r3, #100	; 0x64
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
			const int dead_zone = 20;
 80057a8:	2314      	movs	r3, #20
 80057aa:	623b      	str	r3, [r7, #32]
			const float DS3_MAX = 128;
 80057ac:	f04f 4386 	mov.w	r3, #1124073472	; 0x43000000
 80057b0:	61fb      	str	r3, [r7, #28]
			const float N64_MAX = (sensitivity > 0) ? 127*(sensitivity/100.0f) : 0;
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	dd15      	ble.n	80057e4 <USBH_HID_EventCallback+0x310>
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057c2:	eddf 6a07 	vldr	s13, [pc, #28]	; 80057e0 <USBH_HID_EventCallback+0x30c>
 80057c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057ca:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80057d8 <USBH_HID_EventCallback+0x304>
 80057ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057d2:	e009      	b.n	80057e8 <USBH_HID_EventCallback+0x314>
 80057d4:	20000194 	.word	0x20000194
 80057d8:	42fe0000 	.word	0x42fe0000
 80057dc:	00000000 	.word	0x00000000
 80057e0:	42c80000 	.word	0x42c80000
 80057e4:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 80057dc <USBH_HID_EventCallback+0x308>
 80057e8:	edc7 7a06 	vstr	s15, [r7, #24]
			float deadzoneValue = (dead_zone/100.0f) * DS3_MAX;
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057f6:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 80057e0 <USBH_HID_EventCallback+0x30c>
 80057fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80057fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8005802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005806:	edc7 7a05 	vstr	s15, [r7, #20]
			float deadzoneRelation = DS3_MAX / (DS3_MAX - deadzoneValue);
 800580a:	ed97 7a07 	vldr	s14, [r7, #28]
 800580e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005812:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005816:	edd7 6a07 	vldr	s13, [r7, #28]
 800581a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800581e:	edc7 7a04 	vstr	s15, [r7, #16]
			int8_t LSX = 0, LSY = 0; // -128 to +127...
 8005822:	2300      	movs	r3, #0
 8005824:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005828:	2300      	movs	r3, #0
 800582a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			float unscaled_result = 0;
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]
			int8_t stick_lx = ds3_state->LAnalogX - 128;
 8005834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005836:	799b      	ldrb	r3, [r3, #6]
 8005838:	3b80      	subs	r3, #128	; 0x80
 800583a:	b2db      	uxtb	r3, r3
 800583c:	72fb      	strb	r3, [r7, #11]
			int8_t stick_ly = ds3_state->LAnalogY - 128;
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	79db      	ldrb	r3, [r3, #7]
 8005842:	3b80      	subs	r3, #128	; 0x80
 8005844:	b2db      	uxtb	r3, r3
 8005846:	72bb      	strb	r3, [r7, #10]
			if(stick_lx >= deadzoneValue) // positive = right
 8005848:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800584c:	ee07 3a90 	vmov	s15, r3
 8005850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005854:	edd7 7a05 	vldr	s15, [r7, #20]
 8005858:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800585c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005860:	db21      	blt.n	80058a6 <USBH_HID_EventCallback+0x3d2>
				unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 8005862:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800586e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005872:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005876:	edd7 7a04 	vldr	s15, [r7, #16]
 800587a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587e:	edc7 7a03 	vstr	s15, [r7, #12]
				LSX = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 8005882:	edd7 6a06 	vldr	s13, [r7, #24]
 8005886:	edd7 7a07 	vldr	s15, [r7, #28]
 800588a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005896:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800589a:	edc7 7a00 	vstr	s15, [r7]
 800589e:	783b      	ldrb	r3, [r7, #0]
 80058a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058a4:	e039      	b.n	800591a <USBH_HID_EventCallback+0x446>
			else if(stick_lx <= (-deadzoneValue)) // negative = left
 80058a6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80058b6:	eef1 7a67 	vneg.f32	s15, s15
 80058ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c2:	d82a      	bhi.n	800591a <USBH_HID_EventCallback+0x446>
				stick_lx = -stick_lx; // compute as positive, then negate at the end
 80058c4:	7afb      	ldrb	r3, [r7, #11]
 80058c6:	425b      	negs	r3, r3
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	72fb      	strb	r3, [r7, #11]
				unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 80058cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80058d0:	ee07 3a90 	vmov	s15, r3
 80058d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80058dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80058e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e8:	edc7 7a03 	vstr	s15, [r7, #12]
				LSX = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 80058ec:	edd7 6a06 	vldr	s13, [r7, #24]
 80058f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80058f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80058fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005904:	edc7 7a00 	vstr	s15, [r7]
 8005908:	783b      	ldrb	r3, [r7, #0]
 800590a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				LSX = -LSX;
 800590e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005912:	425b      	negs	r3, r3
 8005914:	b2db      	uxtb	r3, r3
 8005916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			if(stick_ly >= deadzoneValue) // DS3 positive = down
 800591a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005926:	edd7 7a05 	vldr	s15, [r7, #20]
 800592a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800592e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005932:	db27      	blt.n	8005984 <USBH_HID_EventCallback+0x4b0>
				unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 8005934:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005938:	ee07 3a90 	vmov	s15, r3
 800593c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005940:	edd7 7a05 	vldr	s15, [r7, #20]
 8005944:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005948:	edd7 7a04 	vldr	s15, [r7, #16]
 800594c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005950:	edc7 7a03 	vstr	s15, [r7, #12]
				LSY = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 8005954:	edd7 6a06 	vldr	s13, [r7, #24]
 8005958:	edd7 7a07 	vldr	s15, [r7, #28]
 800595c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005960:	edd7 7a03 	vldr	s15, [r7, #12]
 8005964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800596c:	edc7 7a00 	vstr	s15, [r7]
 8005970:	783b      	ldrb	r3, [r7, #0]
 8005972:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				LSY = -LSY; // for n64 down is negative
 8005976:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800597a:	425b      	negs	r3, r3
 800597c:	b2db      	uxtb	r3, r3
 800597e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005982:	e033      	b.n	80059ec <USBH_HID_EventCallback+0x518>
			else if(stick_ly <= (-deadzoneValue)) // DS3 negative = down
 8005984:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005988:	ee07 3a90 	vmov	s15, r3
 800598c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005990:	edd7 7a05 	vldr	s15, [r7, #20]
 8005994:	eef1 7a67 	vneg.f32	s15, s15
 8005998:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800599c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a0:	d824      	bhi.n	80059ec <USBH_HID_EventCallback+0x518>
				stick_ly = -stick_ly; // compute as positive, then negate at the end
 80059a2:	7abb      	ldrb	r3, [r7, #10]
 80059a4:	425b      	negs	r3, r3
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	72bb      	strb	r3, [r7, #10]
				unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 80059aa:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80059ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059be:	edd7 7a04 	vldr	s15, [r7, #16]
 80059c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c6:	edc7 7a03 	vstr	s15, [r7, #12]
				LSY = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 80059ca:	edd7 6a06 	vldr	s13, [r7, #24]
 80059ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80059d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80059da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059e2:	edc7 7a00 	vstr	s15, [r7]
 80059e6:	783b      	ldrb	r3, [r7, #0]
 80059e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			n64_data.x_axis = reverse((uint8_t)LSX);
 80059ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059f0:	4618      	mov	r0, r3
 80059f2:	f001 ff2a 	bl	800784a <reverse>
 80059f6:	4603      	mov	r3, r0
 80059f8:	461a      	mov	r2, r3
 80059fa:	4b08      	ldr	r3, [pc, #32]	; (8005a1c <USBH_HID_EventCallback+0x548>)
 80059fc:	709a      	strb	r2, [r3, #2]
			n64_data.y_axis = reverse((uint8_t)LSY);
 80059fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005a02:	4618      	mov	r0, r3
 8005a04:	f001 ff21 	bl	800784a <reverse>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	4b03      	ldr	r3, [pc, #12]	; (8005a1c <USBH_HID_EventCallback+0x548>)
 8005a0e:	70da      	strb	r2, [r3, #3]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a10:	b662      	cpsie	i
			break;
 8005a12:	bf00      	nop
	}
}
 8005a14:	bf00      	nop
 8005a16:	3738      	adds	r7, #56	; 0x38
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	20000194 	.word	0x20000194

08005a20 <USBH_HID_DS3Init>:
  255,   /*max value device can report*/
  1      /*resolution*/
};

USBH_StatusTypeDef USBH_HID_DS3Init(USBH_HandleTypeDef *phost)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
	  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	60fb      	str	r3, [r7, #12]

	  memset(&ds3_data,0,sizeof(HID_DS3_Info_TypeDef));
 8005a32:	2230      	movs	r2, #48	; 0x30
 8005a34:	2100      	movs	r1, #0
 8005a36:	4811      	ldr	r0, [pc, #68]	; (8005a7c <USBH_HID_DS3Init+0x5c>)
 8005a38:	f002 fe44 	bl	80086c4 <memset>
	  memset(ds3_report_data,0,sizeof(uint32_t)*12);
 8005a3c:	2230      	movs	r2, #48	; 0x30
 8005a3e:	2100      	movs	r1, #0
 8005a40:	480f      	ldr	r0, [pc, #60]	; (8005a80 <USBH_HID_DS3Init+0x60>)
 8005a42:	f002 fe3f 	bl	80086c4 <memset>

	  if(HID_Handle->length > (sizeof(ds3_report_data)/sizeof(uint32_t)))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8b1b      	ldrh	r3, [r3, #24]
 8005a4a:	2b0c      	cmp	r3, #12
 8005a4c:	d902      	bls.n	8005a54 <USBH_HID_DS3Init+0x34>
	  {
	    HID_Handle->length = (sizeof(ds3_report_data)/sizeof(uint32_t));
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	220c      	movs	r2, #12
 8005a52:	831a      	strh	r2, [r3, #24]
	  }
	  HID_Handle->pData = (uint8_t*)ds3_report_data;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4a0a      	ldr	r2, [pc, #40]	; (8005a80 <USBH_HID_DS3Init+0x60>)
 8005a58:	615a      	str	r2, [r3, #20]
	  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(ds3_report_data));
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f103 0008 	add.w	r0, r3, #8
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005a66:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	f7ff fc79 	bl	8005362 <fifo_init>

	  return USBH_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000140 	.word	0x20000140
 8005a80:	20000110 	.word	0x20000110

08005a84 <USBH_HID_DS3Decode>:


static USBH_StatusTypeDef USBH_HID_DS3Decode(USBH_HandleTypeDef *phost)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  int x;

  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	60bb      	str	r3, [r7, #8]
  if(HID_Handle->length == 0)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	8b1b      	ldrh	r3, [r3, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <USBH_HID_DS3Decode+0x1e>
  {
    return USBH_FAIL;
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e027      	b.n	8005af2 <USBH_HID_DS3Decode+0x6e>
  }
  /*Fill report */
  if(fifo_read(&HID_Handle->fifo, &ds3_report_data, HID_Handle->length) ==  HID_Handle->length)
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f103 0008 	add.w	r0, r3, #8
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	8b1b      	ldrh	r3, [r3, #24]
 8005aac:	461a      	mov	r2, r3
 8005aae:	4913      	ldr	r1, [pc, #76]	; (8005afc <USBH_HID_DS3Decode+0x78>)
 8005ab0:	f7ff fc73 	bl	800539a <fifo_read>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	8b1b      	ldrh	r3, [r3, #24]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d117      	bne.n	8005af0 <USBH_HID_DS3Decode+0x6c>
  {
	for(x=0; x < sizeof(HID_DS3_Info_TypeDef); x++)
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	e00f      	b.n	8005ae6 <USBH_HID_DS3Decode+0x62>
	{
		ds3_data.data[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ds3_byte, x);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	4619      	mov	r1, r3
 8005acc:	480c      	ldr	r0, [pc, #48]	; (8005b00 <USBH_HID_DS3Decode+0x7c>)
 8005ace:	f000 f95b 	bl	8005d88 <HID_ReadItem>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	b2d9      	uxtb	r1, r3
 8005ad6:	4a0b      	ldr	r2, [pc, #44]	; (8005b04 <USBH_HID_DS3Decode+0x80>)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	460a      	mov	r2, r1
 8005ade:	701a      	strb	r2, [r3, #0]
	for(x=0; x < sizeof(HID_DS3_Info_TypeDef); x++)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b2f      	cmp	r3, #47	; 0x2f
 8005aea:	d9ec      	bls.n	8005ac6 <USBH_HID_DS3Decode+0x42>
	}

    return USBH_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	e000      	b.n	8005af2 <USBH_HID_DS3Decode+0x6e>
  }
  return   USBH_FAIL;
 8005af0:	2302      	movs	r3, #2
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000110 	.word	0x20000110
 8005b00:	08009978 	.word	0x08009978
 8005b04:	20000140 	.word	0x20000140

08005b08 <USBH_HID_GetDS3Info>:

HID_DS3_Info_TypeDef *USBH_HID_GetDS3Info(USBH_HandleTypeDef *phost)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 if(USBH_HID_DS3Decode(phost) == USBH_OK)
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff ffb7 	bl	8005a84 <USBH_HID_DS3Decode>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <USBH_HID_GetDS3Info+0x18>
 {
  return &ds3_data;
 8005b1c:	4b03      	ldr	r3, [pc, #12]	; (8005b2c <USBH_HID_GetDS3Info+0x24>)
 8005b1e:	e000      	b.n	8005b22 <USBH_HID_GetDS3Info+0x1a>
 }
 else
 {
  return NULL;
 8005b20:	2300      	movs	r3, #0
 }
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20000140 	.word	0x20000140

08005b30 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;  
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	60bb      	str	r3, [r7, #8]
    
  keybd_info.lctrl=keybd_info.lshift= 0;
 8005b42:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <USBH_HID_KeybdInit+0x98>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	709a      	strb	r2, [r3, #2]
 8005b48:	4b1f      	ldr	r3, [pc, #124]	; (8005bc8 <USBH_HID_KeybdInit+0x98>)
 8005b4a:	789a      	ldrb	r2, [r3, #2]
 8005b4c:	4b1e      	ldr	r3, [pc, #120]	; (8005bc8 <USBH_HID_KeybdInit+0x98>)
 8005b4e:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt=keybd_info.lgui= 0;
 8005b50:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <USBH_HID_KeybdInit+0x98>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	711a      	strb	r2, [r3, #4]
 8005b56:	4b1c      	ldr	r3, [pc, #112]	; (8005bc8 <USBH_HID_KeybdInit+0x98>)
 8005b58:	791a      	ldrb	r2, [r3, #4]
 8005b5a:	4b1b      	ldr	r3, [pc, #108]	; (8005bc8 <USBH_HID_KeybdInit+0x98>)
 8005b5c:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl=keybd_info.rshift= 0;
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <USBH_HID_KeybdInit+0x98>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	719a      	strb	r2, [r3, #6]
 8005b64:	4b18      	ldr	r3, [pc, #96]	; (8005bc8 <USBH_HID_KeybdInit+0x98>)
 8005b66:	799a      	ldrb	r2, [r3, #6]
 8005b68:	4b17      	ldr	r3, [pc, #92]	; (8005bc8 <USBH_HID_KeybdInit+0x98>)
 8005b6a:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt=keybd_info.rgui=0;
 8005b6c:	4b16      	ldr	r3, [pc, #88]	; (8005bc8 <USBH_HID_KeybdInit+0x98>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	721a      	strb	r2, [r3, #8]
 8005b72:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <USBH_HID_KeybdInit+0x98>)
 8005b74:	7a1a      	ldrb	r2, [r3, #8]
 8005b76:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <USBH_HID_KeybdInit+0x98>)
 8005b78:	71da      	strb	r2, [r3, #7]
  
  
  for(x=0; x< (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	e007      	b.n	8005b90 <USBH_HID_KeybdInit+0x60>
  {
    keybd_report_data[x]=0;
 8005b80:	4a12      	ldr	r2, [pc, #72]	; (8005bcc <USBH_HID_KeybdInit+0x9c>)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2100      	movs	r1, #0
 8005b86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(x=0; x< (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d9f4      	bls.n	8005b80 <USBH_HID_KeybdInit+0x50>
  }
  
  if(HID_Handle->length > (sizeof(keybd_report_data)/sizeof(uint32_t)))
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	8b1b      	ldrh	r3, [r3, #24]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d902      	bls.n	8005ba4 <USBH_HID_KeybdInit+0x74>
  {
    HID_Handle->length = (sizeof(keybd_report_data)/sizeof(uint32_t));
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t*)keybd_report_data;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	4a09      	ldr	r2, [pc, #36]	; (8005bcc <USBH_HID_KeybdInit+0x9c>)
 8005ba8:	615a      	str	r2, [r3, #20]
  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f103 0008 	add.w	r0, r3, #8
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005bb6:	2250      	movs	r2, #80	; 0x50
 8005bb8:	4619      	mov	r1, r3
 8005bba:	f7ff fbd2 	bl	8005362 <fifo_init>
  
  return USBH_OK;    
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20000178 	.word	0x20000178
 8005bcc:	20000170 	.word	0x20000170

08005bd0 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  if(USBH_HID_KeybdDecode(phost) == USBH_OK)
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f80d 	bl	8005bf8 <USBH_HID_KeybdDecode>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <USBH_HID_GetKeybdInfo+0x18>
 {
  return &keybd_info;
 8005be4:	4b03      	ldr	r3, [pc, #12]	; (8005bf4 <USBH_HID_GetKeybdInfo+0x24>)
 8005be6:	e000      	b.n	8005bea <USBH_HID_GetKeybdInfo+0x1a>
 }
 else
 {
  return NULL; 
 8005be8:	2300      	movs	r3, #0
 }  
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000178 	.word	0x20000178

08005bf8 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 8005bf8:	b590      	push	{r4, r7, lr}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint8_t x;
  
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	60bb      	str	r3, [r7, #8]
  if(HID_Handle->length == 0)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	8b1b      	ldrh	r3, [r3, #24]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 8005c12:	2302      	movs	r3, #2
 8005c14:	e065      	b.n	8005ce2 <USBH_HID_KeybdDecode+0xea>
  }
  /*Fill report */
  if(fifo_read(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f103 0008 	add.w	r0, r3, #8
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	8b1b      	ldrh	r3, [r3, #24]
 8005c20:	461a      	mov	r2, r3
 8005c22:	4932      	ldr	r1, [pc, #200]	; (8005cec <USBH_HID_KeybdDecode+0xf4>)
 8005c24:	f7ff fbb9 	bl	800539a <fifo_read>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	8b1b      	ldrh	r3, [r3, #24]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d155      	bne.n	8005ce0 <USBH_HID_KeybdDecode+0xe8>
  {
    
    keybd_info.lctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0);
 8005c34:	2100      	movs	r1, #0
 8005c36:	482e      	ldr	r0, [pc, #184]	; (8005cf0 <USBH_HID_KeybdDecode+0xf8>)
 8005c38:	f000 f8a6 	bl	8005d88 <HID_ReadItem>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	4b2c      	ldr	r3, [pc, #176]	; (8005cf4 <USBH_HID_KeybdDecode+0xfc>)
 8005c42:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0);
 8005c44:	2100      	movs	r1, #0
 8005c46:	482c      	ldr	r0, [pc, #176]	; (8005cf8 <USBH_HID_KeybdDecode+0x100>)
 8005c48:	f000 f89e 	bl	8005d88 <HID_ReadItem>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	4b28      	ldr	r3, [pc, #160]	; (8005cf4 <USBH_HID_KeybdDecode+0xfc>)
 8005c52:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0);
 8005c54:	2100      	movs	r1, #0
 8005c56:	4829      	ldr	r0, [pc, #164]	; (8005cfc <USBH_HID_KeybdDecode+0x104>)
 8005c58:	f000 f896 	bl	8005d88 <HID_ReadItem>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	4b24      	ldr	r3, [pc, #144]	; (8005cf4 <USBH_HID_KeybdDecode+0xfc>)
 8005c62:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0);
 8005c64:	2100      	movs	r1, #0
 8005c66:	4826      	ldr	r0, [pc, #152]	; (8005d00 <USBH_HID_KeybdDecode+0x108>)
 8005c68:	f000 f88e 	bl	8005d88 <HID_ReadItem>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	4b20      	ldr	r3, [pc, #128]	; (8005cf4 <USBH_HID_KeybdDecode+0xfc>)
 8005c72:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0);
 8005c74:	2100      	movs	r1, #0
 8005c76:	4823      	ldr	r0, [pc, #140]	; (8005d04 <USBH_HID_KeybdDecode+0x10c>)
 8005c78:	f000 f886 	bl	8005d88 <HID_ReadItem>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	4b1c      	ldr	r3, [pc, #112]	; (8005cf4 <USBH_HID_KeybdDecode+0xfc>)
 8005c82:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0);
 8005c84:	2100      	movs	r1, #0
 8005c86:	4820      	ldr	r0, [pc, #128]	; (8005d08 <USBH_HID_KeybdDecode+0x110>)
 8005c88:	f000 f87e 	bl	8005d88 <HID_ReadItem>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	4b18      	ldr	r3, [pc, #96]	; (8005cf4 <USBH_HID_KeybdDecode+0xfc>)
 8005c92:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0);
 8005c94:	2100      	movs	r1, #0
 8005c96:	481d      	ldr	r0, [pc, #116]	; (8005d0c <USBH_HID_KeybdDecode+0x114>)
 8005c98:	f000 f876 	bl	8005d88 <HID_ReadItem>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	4b14      	ldr	r3, [pc, #80]	; (8005cf4 <USBH_HID_KeybdDecode+0xfc>)
 8005ca2:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0);
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	481a      	ldr	r0, [pc, #104]	; (8005d10 <USBH_HID_KeybdDecode+0x118>)
 8005ca8:	f000 f86e 	bl	8005d88 <HID_ReadItem>
 8005cac:	4603      	mov	r3, r0
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	4b10      	ldr	r3, [pc, #64]	; (8005cf4 <USBH_HID_KeybdDecode+0xfc>)
 8005cb2:	721a      	strb	r2, [r3, #8]
    
    for(x=0; x < sizeof(keybd_info.keys); x++)
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	73fb      	strb	r3, [r7, #15]
 8005cb8:	e00d      	b.n	8005cd6 <USBH_HID_KeybdDecode+0xde>
    {    
      keybd_info.keys[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 8005cba:	7bfc      	ldrb	r4, [r7, #15]
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4814      	ldr	r0, [pc, #80]	; (8005d14 <USBH_HID_KeybdDecode+0x11c>)
 8005cc2:	f000 f861 	bl	8005d88 <HID_ReadItem>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <USBH_HID_KeybdDecode+0xfc>)
 8005ccc:	4423      	add	r3, r4
 8005cce:	725a      	strb	r2, [r3, #9]
    for(x=0; x < sizeof(keybd_info.keys); x++)
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	73fb      	strb	r3, [r7, #15]
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
 8005cd8:	2b05      	cmp	r3, #5
 8005cda:	d9ee      	bls.n	8005cba <USBH_HID_KeybdDecode+0xc2>
    }
    
    return USBH_OK; 
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e000      	b.n	8005ce2 <USBH_HID_KeybdDecode+0xea>
  }
  return   USBH_FAIL;  
 8005ce0:	2302      	movs	r3, #2
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd90      	pop	{r4, r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20000170 	.word	0x20000170
 8005cf0:	08009998 	.word	0x08009998
 8005cf4:	20000178 	.word	0x20000178
 8005cf8:	080099b8 	.word	0x080099b8
 8005cfc:	080099d8 	.word	0x080099d8
 8005d00:	080099f8 	.word	0x080099f8
 8005d04:	08009a18 	.word	0x08009a18
 8005d08:	08009a38 	.word	0x08009a38
 8005d0c:	08009a58 	.word	0x08009a58
 8005d10:	08009a78 	.word	0x08009a78
 8005d14:	08009a98 	.word	0x08009a98

08005d18 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	60fb      	str	r3, [r7, #12]

  mouse_info.x=0;
 8005d2a:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <USBH_HID_MouseInit+0x68>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	701a      	strb	r2, [r3, #0]
  mouse_info.y=0;
 8005d30:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <USBH_HID_MouseInit+0x68>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0]=0;
 8005d36:	4b12      	ldr	r3, [pc, #72]	; (8005d80 <USBH_HID_MouseInit+0x68>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1]=0;
 8005d3c:	4b10      	ldr	r3, [pc, #64]	; (8005d80 <USBH_HID_MouseInit+0x68>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2]=0;
 8005d42:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <USBH_HID_MouseInit+0x68>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	711a      	strb	r2, [r3, #4]
  
  mouse_report_data[0]=0;
 8005d48:	4b0e      	ldr	r3, [pc, #56]	; (8005d84 <USBH_HID_MouseInit+0x6c>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
  
  if(HID_Handle->length > sizeof(mouse_report_data))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8b1b      	ldrh	r3, [r3, #24]
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d902      	bls.n	8005d5c <USBH_HID_MouseInit+0x44>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2204      	movs	r2, #4
 8005d5a:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)mouse_report_data;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4a09      	ldr	r2, [pc, #36]	; (8005d84 <USBH_HID_MouseInit+0x6c>)
 8005d60:	615a      	str	r2, [r3, #20]
  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f103 0008 	add.w	r0, r3, #8
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005d6e:	2228      	movs	r2, #40	; 0x28
 8005d70:	4619      	mov	r1, r3
 8005d72:	f7ff faf6 	bl	8005362 <fifo_init>

  return USBH_OK;  
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20000188 	.word	0x20000188
 8005d84:	20000190 	.word	0x20000190

08005d88 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b089      	sub	sp, #36	; 0x24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	70fb      	strb	r3, [r7, #3]
  uint32_t val=0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61fb      	str	r3, [r7, #28]
  uint32_t x=0;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data=ri->data;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	617b      	str	r3, [r7, #20]
  uint8_t shift=ri->shift;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	7a1b      	ldrb	r3, [r3, #8]
 8005da6:	74fb      	strb	r3, [r7, #19]
  
  /* get the logical value of the item */
  
  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	7a5b      	ldrb	r3, [r3, #9]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d01a      	beq.n	8005de6 <HID_ReadItem+0x5e>
  { 
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	7a5b      	ldrb	r3, [r3, #9]
 8005db4:	78fa      	ldrb	r2, [r7, #3]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d301      	bcc.n	8005dbe <HID_ReadItem+0x36>
    {
      return(0);
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e07a      	b.n	8005eb4 <HID_ReadItem+0x12c>
    }
    
    /* calculate bit offset */
    bofs = ndx*ri->size;
 8005dbe:	78fb      	ldrb	r3, [r7, #3]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6852      	ldr	r2, [r2, #4]
 8005dc4:	fb02 f303 	mul.w	r3, r2, r3
 8005dc8:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 8005dca:	7cfb      	ldrb	r3, [r7, #19]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */    
    data+=bofs/8;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	08db      	lsrs	r3, r3, #3
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4413      	add	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]
    shift=(uint8_t)(bofs%8);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for(x=0; x < ((ri->size & 0x7) ? (ri->size/8)+1 : (ri->size/8)); x++)
 8005de6:	2300      	movs	r3, #0
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	e00a      	b.n	8005e02 <HID_ReadItem+0x7a>
  {
    val=(uint32_t)(*data << (x*8));
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	61fb      	str	r3, [r7, #28]
  for(x=0; x < ((ri->size & 0x7) ? (ri->size/8)+1 : (ri->size/8)); x++)
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	61bb      	str	r3, [r7, #24]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d004      	beq.n	8005e18 <HID_ReadItem+0x90>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	08db      	lsrs	r3, r3, #3
 8005e14:	3301      	adds	r3, #1
 8005e16:	e002      	b.n	8005e1e <HID_ReadItem+0x96>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	08db      	lsrs	r3, r3, #3
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d8e3      	bhi.n	8005dec <HID_ReadItem+0x64>
  }    
  val=(val >> shift) & ((1<<ri->size)-1);
 8005e24:	7cfb      	ldrb	r3, [r7, #19]
 8005e26:	69fa      	ldr	r2, [r7, #28]
 8005e28:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6852      	ldr	r2, [r2, #4]
 8005e30:	2101      	movs	r1, #1
 8005e32:	fa01 f202 	lsl.w	r2, r1, r2
 8005e36:	3a01      	subs	r2, #1
 8005e38:	4013      	ands	r3, r2
 8005e3a:	61fb      	str	r3, [r7, #28]
  
  if (val < ri->logical_min || val > ri->logical_max)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d804      	bhi.n	8005e50 <HID_ReadItem+0xc8>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691a      	ldr	r2, [r3, #16]
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d201      	bcs.n	8005e54 <HID_ReadItem+0xcc>
  {
    return(0);
 8005e50:	2300      	movs	r3, #0
 8005e52:	e02f      	b.n	8005eb4 <HID_ReadItem+0x12c>
  }
  
  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1<<(ri->size-1))))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	7a9b      	ldrb	r3, [r3, #10]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d020      	beq.n	8005e9e <HID_ReadItem+0x116>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	2201      	movs	r2, #1
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	461a      	mov	r2, r3
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d015      	beq.n	8005e9e <HID_ReadItem+0x116>
  {
    /* yes, so sign extend value to 32 bits. */
    int vs=(int)((-1 & ~((1<<(ri->size))-1)) | val);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	425b      	negs	r3, r3
 8005e7e:	461a      	mov	r2, r3
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60bb      	str	r3, [r7, #8]
    
    if(ri->resolution == 1)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <HID_ReadItem+0x10a>
    {
      return((uint32_t)vs);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	e010      	b.n	8005eb4 <HID_ReadItem+0x12c>
    }
    return((uint32_t)(vs*ri->resolution));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	fb02 f303 	mul.w	r3, r2, r3
 8005e9c:	e00a      	b.n	8005eb4 <HID_ReadItem+0x12c>
  }
  else
  {
    if(ri->resolution == 1)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HID_ReadItem+0x122>
    {
      return(val);
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	e004      	b.n	8005eb4 <HID_ReadItem+0x12c>
    }
    return(val*ri->resolution);    
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	fb02 f303 	mul.w	r3, r2, r3
  }  
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3724      	adds	r7, #36	; 0x24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <XPAD_360_WIRELESS_ProcessInputData>:
/** @defgroup USBH_XPAD_CORE_Private_Functions
* @{
*/ 

void XPAD_360_WIRELESS_ProcessInputData(USBH_HandleTypeDef *phost)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ec8:	b672      	cpsid	i
	__disable_irq();
	memset(&n64_data,0,4);
 8005eca:	2204      	movs	r2, #4
 8005ecc:	2100      	movs	r1, #0
 8005ece:	4804      	ldr	r0, [pc, #16]	; (8005ee0 <XPAD_360_WIRELESS_ProcessInputData+0x20>)
 8005ed0:	f002 fbf8 	bl	80086c4 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8005ed4:	b662      	cpsie	i
	__enable_irq();
}
 8005ed6:	bf00      	nop
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000194 	.word	0x20000194

08005ee4 <XPAD_360_WIRED_ProcessInputData>:

void XPAD_360_WIRED_ProcessInputData(USBH_HandleTypeDef *phost)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8005eec:	b672      	cpsid	i
	__disable_irq();
	memset(&n64_data,0,4);
 8005eee:	2204      	movs	r2, #4
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	4804      	ldr	r0, [pc, #16]	; (8005f04 <XPAD_360_WIRED_ProcessInputData+0x20>)
 8005ef4:	f002 fbe6 	bl	80086c4 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8005ef8:	b662      	cpsie	i
	__enable_irq();
}
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000194 	.word	0x20000194

08005f08 <XPAD_XBONE_ProcessInputData>:

void XPAD_XBONE_ProcessInputData(USBH_HandleTypeDef *phost)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f10:	b672      	cpsid	i
	__disable_irq();
	memset(&n64_data,0,4);
 8005f12:	2204      	movs	r2, #4
 8005f14:	2100      	movs	r1, #0
 8005f16:	4804      	ldr	r0, [pc, #16]	; (8005f28 <XPAD_XBONE_ProcessInputData+0x20>)
 8005f18:	f002 fbd4 	bl	80086c4 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8005f1c:	b662      	cpsie	i
	__enable_irq();
}
 8005f1e:	bf00      	nop
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20000194 	.word	0x20000194

08005f2c <USBH_XPAD_Init>:

USBH_StatusTypeDef USBH_XPAD_Init(USBH_HandleTypeDef *phost)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
	// clear data structures out
	// send appropriate start packet depending on XPAD_TypeTypeDef
	return USBH_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
	...

08005f44 <USBH_XPAD_InterfaceInit>:
  *         The function init the XPAD class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_XPAD_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005f44:	b590      	push	{r4, r7, lr}
 8005f46:	b08b      	sub	sp, #44	; 0x2c
 8005f48:	af04      	add	r7, sp, #16
 8005f4a:	6078      	str	r0, [r7, #4]
	uint8_t max_ep;
	uint8_t num = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	75fb      	strb	r3, [r7, #23]
	uint8_t interface;

	XPAD_HandleTypeDef *XPAD_Handle;
	XPAD_TypeTypeDef ctype = XPAD_UNKNOWN;
 8005f50:	23ff      	movs	r3, #255	; 0xff
 8005f52:	757b      	strb	r3, [r7, #21]

	// class, subclass, protocol
	interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0x5D, 0x81); // X360 wireless
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f5a:	7919      	ldrb	r1, [r3, #4]
 8005f5c:	2381      	movs	r3, #129	; 0x81
 8005f5e:	225d      	movs	r2, #93	; 0x5d
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 facf 	bl	8006504 <USBH_FindInterface>
 8005f66:	4603      	mov	r3, r0
 8005f68:	75bb      	strb	r3, [r7, #22]

	if (interface == 0xFF)
 8005f6a:	7dbb      	ldrb	r3, [r7, #22]
 8005f6c:	2bff      	cmp	r3, #255	; 0xff
 8005f6e:	d131      	bne.n	8005fd4 <USBH_XPAD_InterfaceInit+0x90>
	{
		interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0x5D, 0x01); // X360 wired
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f76:	7919      	ldrb	r1, [r3, #4]
 8005f78:	2301      	movs	r3, #1
 8005f7a:	225d      	movs	r2, #93	; 0x5d
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fac1 	bl	8006504 <USBH_FindInterface>
 8005f82:	4603      	mov	r3, r0
 8005f84:	75bb      	strb	r3, [r7, #22]

		if (interface == 0xFF)
 8005f86:	7dbb      	ldrb	r3, [r7, #22]
 8005f88:	2bff      	cmp	r3, #255	; 0xff
 8005f8a:	d120      	bne.n	8005fce <USBH_XPAD_InterfaceInit+0x8a>
		{
			  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0x47, 0xD0); // XBONE wired
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f92:	7919      	ldrb	r1, [r3, #4]
 8005f94:	23d0      	movs	r3, #208	; 0xd0
 8005f96:	2247      	movs	r2, #71	; 0x47
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fab3 	bl	8006504 <USBH_FindInterface>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	75bb      	strb	r3, [r7, #22]

			  if(interface == 0xFF) /* No Valid Interface */
 8005fa2:	7dbb      	ldrb	r3, [r7, #22]
 8005fa4:	2bff      	cmp	r3, #255	; 0xff
 8005fa6:	d10f      	bne.n	8005fc8 <USBH_XPAD_InterfaceInit+0x84>
			  {
				USBH_DbgLog ("Cannot Find any valid interface for %s class.", phost->pActiveClass->Name);
 8005fa8:	4881      	ldr	r0, [pc, #516]	; (80061b0 <USBH_XPAD_InterfaceInit+0x26c>)
 8005faa:	f002 fc3f 	bl	800882c <iprintf>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	487e      	ldr	r0, [pc, #504]	; (80061b4 <USBH_XPAD_InterfaceInit+0x270>)
 8005fba:	f002 fc37 	bl	800882c <iprintf>
 8005fbe:	200a      	movs	r0, #10
 8005fc0:	f002 fc4c 	bl	800885c <putchar>
				return USBH_FAIL;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e0ef      	b.n	80061a8 <USBH_XPAD_InterfaceInit+0x264>
			  }
			  else
			  {
				  ctype = XPAD_XBONE;
 8005fc8:	2304      	movs	r3, #4
 8005fca:	757b      	strb	r3, [r7, #21]
 8005fcc:	e004      	b.n	8005fd8 <USBH_XPAD_InterfaceInit+0x94>
			  }
		}
		else
		{
			ctype = XPAD_360_WIRED;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	757b      	strb	r3, [r7, #21]
 8005fd2:	e001      	b.n	8005fd8 <USBH_XPAD_InterfaceInit+0x94>
		}
	}
	else
	{
		ctype = XPAD_360_WIRELESS;
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	757b      	strb	r3, [r7, #21]
	}

	// open endpoints and stuff
	USBH_SelectInterface (phost, interface);
 8005fd8:	7dbb      	ldrb	r3, [r7, #22]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fa29 	bl	8006434 <USBH_SelectInterface>
	phost->pActiveClass->pData = (XPAD_HandleTypeDef *)USBH_malloc (sizeof(XPAD_HandleTypeDef));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005fe8:	2020      	movs	r0, #32
 8005fea:	f002 fb5b 	bl	80086a4 <malloc>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	61e3      	str	r3, [r4, #28]
	XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	613b      	str	r3, [r7, #16]

	XPAD_Handle->Init = USBH_XPAD_Init;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	4a6e      	ldr	r2, [pc, #440]	; (80061b8 <USBH_XPAD_InterfaceInit+0x274>)
 8006000:	619a      	str	r2, [r3, #24]

	XPAD_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006008:	4619      	mov	r1, r3
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	231a      	movs	r3, #26
 800600e:	fb03 f301 	mul.w	r3, r3, r1
 8006012:	4413      	add	r3, r2
 8006014:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	729a      	strb	r2, [r3, #10]
	XPAD_Handle->length    = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006024:	4619      	mov	r1, r3
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	231a      	movs	r3, #26
 800602a:	fb03 f301 	mul.w	r3, r3, r1
 800602e:	4413      	add	r3, r2
 8006030:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006034:	881a      	ldrh	r2, [r3, #0]
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	811a      	strh	r2, [r3, #8]
	XPAD_Handle->poll      = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bInterval ;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006040:	4619      	mov	r1, r3
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	231a      	movs	r3, #26
 8006046:	fb03 f301 	mul.w	r3, r3, r1
 800604a:	4413      	add	r3, r2
 800604c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	b29a      	uxth	r2, r3
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	819a      	strh	r2, [r3, #12]
	XPAD_Handle->xpad_type = ctype;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	7d7a      	ldrb	r2, [r7, #21]
 800605c:	771a      	strb	r2, [r3, #28]

	if (XPAD_Handle->poll  < 10)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	899b      	ldrh	r3, [r3, #12]
 8006062:	2b09      	cmp	r3, #9
 8006064:	d802      	bhi.n	800606c <USBH_XPAD_InterfaceInit+0x128>
	{
		XPAD_Handle->poll = 10;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	220a      	movs	r2, #10
 800606a:	819a      	strh	r2, [r3, #12]

	/* Check for available number of endpoints */
	/* Find the number of EPs in the Interface Descriptor */
	/* Choose the lower number in order not to overrun the buffer allocated */
	max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
			  phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006072:	4619      	mov	r1, r3
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	231a      	movs	r3, #26
 8006078:	fb03 f301 	mul.w	r3, r3, r1
 800607c:	4413      	add	r3, r2
 800607e:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8006082:	781b      	ldrb	r3, [r3, #0]
	max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8006084:	2b02      	cmp	r3, #2
 8006086:	bf28      	it	cs
 8006088:	2302      	movcs	r3, #2
 800608a:	73fb      	strb	r3, [r7, #15]
				  USBH_MAX_NUM_ENDPOINTS);


	/* Decode endpoint IN and OUT address from interface descriptor */
	for ( ;num < max_ep; num++)
 800608c:	e086      	b.n	800619c <USBH_XPAD_InterfaceInit+0x258>
	{
	  if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress & 0x80)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006094:	4618      	mov	r0, r3
 8006096:	7dfb      	ldrb	r3, [r7, #23]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	3301      	adds	r3, #1
 800609c:	00d9      	lsls	r1, r3, #3
 800609e:	231a      	movs	r3, #26
 80060a0:	fb03 f300 	mul.w	r3, r3, r0
 80060a4:	440b      	add	r3, r1
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	b25b      	sxtb	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	da38      	bge.n	8006126 <USBH_XPAD_InterfaceInit+0x1e2>
	  {
		  XPAD_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80060ba:	4618      	mov	r0, r3
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	3301      	adds	r3, #1
 80060c2:	00d9      	lsls	r1, r3, #3
 80060c4:	231a      	movs	r3, #26
 80060c6:	fb03 f300 	mul.w	r3, r3, r0
 80060ca:	440b      	add	r3, r1
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80060d2:	781a      	ldrb	r2, [r3, #0]
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	70da      	strb	r2, [r3, #3]
		  XPAD_Handle->InPipe  =\
		  USBH_AllocPipe(phost, XPAD_Handle->InEp);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	78db      	ldrb	r3, [r3, #3]
 80060dc:	4619      	mov	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f001 fb55 	bl	800778e <USBH_AllocPipe>
 80060e4:	4603      	mov	r3, r0
 80060e6:	461a      	mov	r2, r3
		  XPAD_Handle->InPipe  =\
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	705a      	strb	r2, [r3, #1]

		/* Open pipe for IN endpoint */
		USBH_OpenPipe  (phost,
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	7859      	ldrb	r1, [r3, #1]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	78d8      	ldrb	r0, [r3, #3]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	8912      	ldrh	r2, [r2, #8]
 8006104:	9202      	str	r2, [sp, #8]
 8006106:	2203      	movs	r2, #3
 8006108:	9201      	str	r2, [sp, #4]
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	4623      	mov	r3, r4
 800610e:	4602      	mov	r2, r0
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 fb0d 	bl	8007730 <USBH_OpenPipe>
						phost->device.address,
						phost->device.speed,
						USB_EP_TYPE_INTR,
						XPAD_Handle->length);

		USBH_LL_SetToggle (phost, XPAD_Handle->InPipe, 0);
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	785b      	ldrb	r3, [r3, #1]
 800611a:	2200      	movs	r2, #0
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f002 fa33 	bl	800858a <USBH_LL_SetToggle>
 8006124:	e037      	b.n	8006196 <USBH_XPAD_InterfaceInit+0x252>

	  }
	  else
	  {
		  XPAD_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800612c:	4618      	mov	r0, r3
 800612e:	7dfb      	ldrb	r3, [r7, #23]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	3301      	adds	r3, #1
 8006134:	00d9      	lsls	r1, r3, #3
 8006136:	231a      	movs	r3, #26
 8006138:	fb03 f300 	mul.w	r3, r3, r0
 800613c:	440b      	add	r3, r1
 800613e:	4413      	add	r3, r2
 8006140:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8006144:	781a      	ldrb	r2, [r3, #0]
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	709a      	strb	r2, [r3, #2]
		  XPAD_Handle->OutPipe  =\
		  USBH_AllocPipe(phost, XPAD_Handle->OutEp);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	789b      	ldrb	r3, [r3, #2]
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f001 fb1c 	bl	800778e <USBH_AllocPipe>
 8006156:	4603      	mov	r3, r0
 8006158:	461a      	mov	r2, r3
		  XPAD_Handle->OutPipe  =\
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	701a      	strb	r2, [r3, #0]

		/* Open pipe for OUT endpoint */
		USBH_OpenPipe  (phost,
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	7819      	ldrb	r1, [r3, #0]
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	7898      	ldrb	r0, [r3, #2]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	8912      	ldrh	r2, [r2, #8]
 8006176:	9202      	str	r2, [sp, #8]
 8006178:	2203      	movs	r2, #3
 800617a:	9201      	str	r2, [sp, #4]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	4623      	mov	r3, r4
 8006180:	4602      	mov	r2, r0
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 fad4 	bl	8007730 <USBH_OpenPipe>
						phost->device.address,
						phost->device.speed,
						USB_EP_TYPE_INTR,
						XPAD_Handle->length);

		USBH_LL_SetToggle (phost, XPAD_Handle->OutPipe, 0);
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2200      	movs	r2, #0
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f002 f9fa 	bl	800858a <USBH_LL_SetToggle>
	for ( ;num < max_ep; num++)
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	3301      	adds	r3, #1
 800619a:	75fb      	strb	r3, [r7, #23]
 800619c:	7dfa      	ldrb	r2, [r7, #23]
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	f4ff af74 	bcc.w	800608e <USBH_XPAD_InterfaceInit+0x14a>
	  }

	}

	return USBH_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd90      	pop	{r4, r7, pc}
 80061b0:	08009688 	.word	0x08009688
 80061b4:	08009694 	.word	0x08009694
 80061b8:	08005f2d 	.word	0x08005f2d

080061bc <USBH_XPAD_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the XPAD class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_XPAD_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  XPAD_HandleTypeDef *XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	60fb      	str	r3, [r7, #12]

  if(XPAD_Handle->InPipe != 0x00)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	785b      	ldrb	r3, [r3, #1]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00e      	beq.n	80061f4 <USBH_XPAD_InterfaceDeInit+0x38>
  {
	USBH_ClosePipe  (phost, XPAD_Handle->InPipe);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 fac6 	bl	800776e <USBH_ClosePipe>
	USBH_FreePipe  (phost, XPAD_Handle->InPipe);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f001 faef 	bl	80077cc <USBH_FreePipe>
	XPAD_Handle->InPipe = 0;     /* Reset the pipe as Free */
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	705a      	strb	r2, [r3, #1]
  }

  if(XPAD_Handle->OutPipe != 0x00)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00e      	beq.n	800621a <USBH_XPAD_InterfaceDeInit+0x5e>
  {
	USBH_ClosePipe(phost, XPAD_Handle->OutPipe);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f001 fab3 	bl	800776e <USBH_ClosePipe>
	USBH_FreePipe  (phost, XPAD_Handle->OutPipe);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	4619      	mov	r1, r3
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 fadc 	bl	80077cc <USBH_FreePipe>
	XPAD_Handle->OutPipe = 0;     /* Reset the pipe as Free */
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	701a      	strb	r2, [r3, #0]
  }

  if(phost->pActiveClass->pData)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d006      	beq.n	8006234 <USBH_XPAD_InterfaceDeInit+0x78>
  {
	USBH_free(phost->pActiveClass->pData);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	4618      	mov	r0, r3
 8006230:	f002 fa40 	bl	80086b4 <free>
  }

  return USBH_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBH_XPAD_ClassRequest>:
  *         for XPAD class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_XPAD_ClassRequest (USBH_HandleTypeDef *phost)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
	// should be fine to keep this blank since there are no standard class requests for a custom class!
	return USBH_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <USBH_XPAD_Process>:
  *         The function is for managing state machine for XPAD data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_XPAD_Process (USBH_HandleTypeDef *phost)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
	XPAD_HandleTypeDef *XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	60fb      	str	r3, [r7, #12]
	// should depend on state

	// if ready for polling

	switch(XPAD_Handle->xpad_type)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	7f1b      	ldrb	r3, [r3, #28]
 800626a:	2b03      	cmp	r3, #3
 800626c:	d008      	beq.n	8006280 <USBH_XPAD_Process+0x2c>
 800626e:	2b04      	cmp	r3, #4
 8006270:	d00a      	beq.n	8006288 <USBH_XPAD_Process+0x34>
 8006272:	2b02      	cmp	r3, #2
 8006274:	d000      	beq.n	8006278 <USBH_XPAD_Process+0x24>
			break;
		case XPAD_XBONE:
			XPAD_XBONE_ProcessInputData(phost);
			break;
		default:
			break;
 8006276:	e00b      	b.n	8006290 <USBH_XPAD_Process+0x3c>
			XPAD_360_WIRELESS_ProcessInputData(phost);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7ff fe21 	bl	8005ec0 <XPAD_360_WIRELESS_ProcessInputData>
		break;
 800627e:	e007      	b.n	8006290 <USBH_XPAD_Process+0x3c>
			XPAD_360_WIRED_ProcessInputData(phost);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff fe2f 	bl	8005ee4 <XPAD_360_WIRED_ProcessInputData>
			break;
 8006286:	e003      	b.n	8006290 <USBH_XPAD_Process+0x3c>
			XPAD_XBONE_ProcessInputData(phost);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff fe3d 	bl	8005f08 <XPAD_XBONE_ProcessInputData>
			break;
 800628e:	bf00      	nop
	}
 
	return USBH_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <USBH_XPAD_SOFProcess>:
  *         XPAD XPAD process
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_XPAD_SOFProcess (USBH_HandleTypeDef *phost)
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  
  return USBH_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t ), uint8_t id)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 80062c4:	4814      	ldr	r0, [pc, #80]	; (8006318 <USBH_Init+0x68>)
 80062c6:	f002 fab1 	bl	800882c <iprintf>
 80062ca:	4814      	ldr	r0, [pc, #80]	; (800631c <USBH_Init+0x6c>)
 80062cc:	f002 faae 	bl	800882c <iprintf>
 80062d0:	200a      	movs	r0, #10
 80062d2:	f002 fac3 	bl	800885c <putchar>
    return USBH_FAIL; 
 80062d6:	2302      	movs	r3, #2
 80062d8:	e019      	b.n	800630e <USBH_Init+0x5e>
  }
  
  /* Set DRiver ID */
  phost->id = id;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	79fa      	ldrb	r2, [r7, #7]
 80062de:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
  
  /* Unlink class*/
  phost->pActiveClass = NULL;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  
  /* Restore default states and prepare EP0 */ 
  DeInitStateMachine(phost);
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f814 	bl	8006320 <DeInitStateMachine>
  
  /* Assign User process */
  if(pUsrFunc != NULL)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <USBH_Init+0x56>
  {
    phost->pUser = pUsrFunc;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#endif  
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
#endif  
  
  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f001 ff5e 	bl	80081c8 <USBH_LL_Init>
  return USBH_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	080096c4 	.word	0x080096c4
 800631c:	080096cc 	.word	0x080096cc

08006320 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 8006328:	2300      	movs	r3, #0
 800632a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800632c:	e008      	b.n	8006340 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	32e0      	adds	r2, #224	; 0xe0
 8006334:	2100      	movs	r1, #0
 8006336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3301      	adds	r3, #1
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b0e      	cmp	r3, #14
 8006344:	d9f3      	bls.n	800632e <DeInitStateMachine+0xe>
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	e009      	b.n	8006360 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0;
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4413      	add	r3, r2
 8006352:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	3301      	adds	r3, #1
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006366:	d3f1      	bcc.n	800634c <DeInitStateMachine+0x2c>
  }
  
  phost->gState = HOST_IDLE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0;  
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  
  phost->Control.state = CTRL_SETUP;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2240      	movs	r2, #64	; 0x40
 800638c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	765a      	strb	r2, [r3, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  
  return USBH_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
	...

080063b4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	73fb      	strb	r3, [r7, #15]
  
  if(pclass != 0)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01f      	beq.n	8006408 <USBH_RegisterClass+0x54>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d80e      	bhi.n	80063f0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063d8:	1c59      	adds	r1, r3, #1
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	33dc      	adds	r3, #220	; 0xdc
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	73fb      	strb	r3, [r7, #15]
 80063ee:	e016      	b.n	800641e <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 80063f0:	480d      	ldr	r0, [pc, #52]	; (8006428 <USBH_RegisterClass+0x74>)
 80063f2:	f002 fa1b 	bl	800882c <iprintf>
 80063f6:	480d      	ldr	r0, [pc, #52]	; (800642c <USBH_RegisterClass+0x78>)
 80063f8:	f002 fa18 	bl	800882c <iprintf>
 80063fc:	200a      	movs	r0, #10
 80063fe:	f002 fa2d 	bl	800885c <putchar>
      status = USBH_FAIL; 
 8006402:	2302      	movs	r3, #2
 8006404:	73fb      	strb	r3, [r7, #15]
 8006406:	e00a      	b.n	800641e <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 8006408:	4807      	ldr	r0, [pc, #28]	; (8006428 <USBH_RegisterClass+0x74>)
 800640a:	f002 fa0f 	bl	800882c <iprintf>
 800640e:	4808      	ldr	r0, [pc, #32]	; (8006430 <USBH_RegisterClass+0x7c>)
 8006410:	f002 fa0c 	bl	800882c <iprintf>
 8006414:	200a      	movs	r0, #10
 8006416:	f002 fa21 	bl	800885c <putchar>
    status = USBH_FAIL; 
 800641a:	2302      	movs	r3, #2
 800641c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800641e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	080096c4 	.word	0x080096c4
 800642c:	080096e0 	.word	0x080096e0
 8006430:	080096fc 	.word	0x080096fc

08006434 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	73fb      	strb	r3, [r7, #15]
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800644a:	78fa      	ldrb	r2, [r7, #3]
 800644c:	429a      	cmp	r2, r3
 800644e:	d23c      	bcs.n	80064ca <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	78fa      	ldrb	r2, [r7, #3]
 8006454:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    USBH_UsrLog ("Switching to Interface (#%d)", interface);
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	4619      	mov	r1, r3
 800645c:	4823      	ldr	r0, [pc, #140]	; (80064ec <USBH_SelectInterface+0xb8>)
 800645e:	f002 f9e5 	bl	800882c <iprintf>
 8006462:	200a      	movs	r0, #10
 8006464:	f002 f9fa 	bl	800885c <putchar>
    USBH_UsrLog ("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass );
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	211a      	movs	r1, #26
 800646e:	fb01 f303 	mul.w	r3, r1, r3
 8006472:	4413      	add	r3, r2
 8006474:	f203 3341 	addw	r3, r3, #833	; 0x341
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	4619      	mov	r1, r3
 800647c:	481c      	ldr	r0, [pc, #112]	; (80064f0 <USBH_SelectInterface+0xbc>)
 800647e:	f002 f9d5 	bl	800882c <iprintf>
 8006482:	200a      	movs	r0, #10
 8006484:	f002 f9ea 	bl	800885c <putchar>
    USBH_UsrLog ("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass );
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	211a      	movs	r1, #26
 800648e:	fb01 f303 	mul.w	r3, r1, r3
 8006492:	4413      	add	r3, r2
 8006494:	f203 3342 	addw	r3, r3, #834	; 0x342
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	4619      	mov	r1, r3
 800649c:	4815      	ldr	r0, [pc, #84]	; (80064f4 <USBH_SelectInterface+0xc0>)
 800649e:	f002 f9c5 	bl	800882c <iprintf>
 80064a2:	200a      	movs	r0, #10
 80064a4:	f002 f9da 	bl	800885c <putchar>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	211a      	movs	r1, #26
 80064ae:	fb01 f303 	mul.w	r3, r1, r3
 80064b2:	4413      	add	r3, r2
 80064b4:	f203 3343 	addw	r3, r3, #835	; 0x343
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	4619      	mov	r1, r3
 80064bc:	480e      	ldr	r0, [pc, #56]	; (80064f8 <USBH_SelectInterface+0xc4>)
 80064be:	f002 f9b5 	bl	800882c <iprintf>
 80064c2:	200a      	movs	r0, #10
 80064c4:	f002 f9ca 	bl	800885c <putchar>
 80064c8:	e00a      	b.n	80064e0 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
 80064ca:	480c      	ldr	r0, [pc, #48]	; (80064fc <USBH_SelectInterface+0xc8>)
 80064cc:	f002 f9ae 	bl	800882c <iprintf>
 80064d0:	480b      	ldr	r0, [pc, #44]	; (8006500 <USBH_SelectInterface+0xcc>)
 80064d2:	f002 f9ab 	bl	800882c <iprintf>
 80064d6:	200a      	movs	r0, #10
 80064d8:	f002 f9c0 	bl	800885c <putchar>
    status = USBH_FAIL; 
 80064dc:	2302      	movs	r3, #2
 80064de:	73fb      	strb	r3, [r7, #15]
  }
  return status;  
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	08009714 	.word	0x08009714
 80064f0:	08009734 	.word	0x08009734
 80064f4:	08009744 	.word	0x08009744
 80064f8:	08009754 	.word	0x08009754
 80064fc:	080096c4 	.word	0x080096c4
 8006500:	08009764 	.word	0x08009764

08006504 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	4608      	mov	r0, r1
 800650e:	4611      	mov	r1, r2
 8006510:	461a      	mov	r2, r3
 8006512:	4603      	mov	r3, r0
 8006514:	70fb      	strb	r3, [r7, #3]
 8006516:	460b      	mov	r3, r1
 8006518:	70bb      	strb	r3, [r7, #2]
 800651a:	4613      	mov	r3, r2
 800651c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  int8_t                        if_ix = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	75fb      	strb	r3, [r7, #23]
  
  pif = (USBH_InterfaceDescTypeDef *)0;
 8006522:	2300      	movs	r3, #0
 8006524:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;  
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f203 3332 	addw	r3, r3, #818	; 0x332
 800652c:	60fb      	str	r3, [r7, #12]
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800652e:	e029      	b.n	8006584 <USBH_FindInterface+0x80>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006530:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006534:	221a      	movs	r2, #26
 8006536:	fb02 f303 	mul.w	r3, r2, r3
 800653a:	3308      	adds	r3, #8
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	3302      	adds	r3, #2
 8006542:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	795b      	ldrb	r3, [r3, #5]
 8006548:	78fa      	ldrb	r2, [r7, #3]
 800654a:	429a      	cmp	r2, r3
 800654c:	d002      	beq.n	8006554 <USBH_FindInterface+0x50>
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	2bff      	cmp	r3, #255	; 0xff
 8006552:	d111      	bne.n	8006578 <USBH_FindInterface+0x74>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8006558:	78ba      	ldrb	r2, [r7, #2]
 800655a:	429a      	cmp	r2, r3
 800655c:	d002      	beq.n	8006564 <USBH_FindInterface+0x60>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 800655e:	78bb      	ldrb	r3, [r7, #2]
 8006560:	2bff      	cmp	r3, #255	; 0xff
 8006562:	d109      	bne.n	8006578 <USBH_FindInterface+0x74>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8006568:	787a      	ldrb	r2, [r7, #1]
 800656a:	429a      	cmp	r2, r3
 800656c:	d002      	beq.n	8006574 <USBH_FindInterface+0x70>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 800656e:	787b      	ldrb	r3, [r7, #1]
 8006570:	2bff      	cmp	r3, #255	; 0xff
 8006572:	d101      	bne.n	8006578 <USBH_FindInterface+0x74>
    {
      return  if_ix;
 8006574:	7dfb      	ldrb	r3, [r7, #23]
 8006576:	e00a      	b.n	800658e <USBH_FindInterface+0x8a>
    }
    if_ix++;
 8006578:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800657c:	b2db      	uxtb	r3, r3
 800657e:	3301      	adds	r3, #1
 8006580:	b2db      	uxtb	r3, r3
 8006582:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006584:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006588:	2b01      	cmp	r3, #1
 800658a:	ddd1      	ble.n	8006530 <USBH_FindInterface+0x2c>
  }
  return 0xFF;
 800658c:	23ff      	movs	r3, #255	; 0xff
}
 800658e:	4618      	mov	r0, r3
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b082      	sub	sp, #8
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f001 fe50 	bl	8008248 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 80065a8:	2101      	movs	r1, #1
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f001 ffdf 	bl	800856e <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b088      	sub	sp, #32
 80065c0:	af04      	add	r7, sp, #16
 80065c2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80065c4:	2302      	movs	r3, #2
 80065c6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->gState)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b0a      	cmp	r3, #10
 80065d4:	f200 816b 	bhi.w	80068ae <USBH_Process+0x2f2>
 80065d8:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <USBH_Process+0x24>)
 80065da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065de:	bf00      	nop
 80065e0:	0800660d 	.word	0x0800660d
 80065e4:	080068af 	.word	0x080068af
 80065e8:	0800662f 	.word	0x0800662f
 80065ec:	08006889 	.word	0x08006889
 80065f0:	080068af 	.word	0x080068af
 80065f4:	080066c9 	.word	0x080066c9
 80065f8:	0800682d 	.word	0x0800682d
 80065fc:	08006711 	.word	0x08006711
 8006600:	08006731 	.word	0x08006731
 8006604:	0800675d 	.word	0x0800675d
 8006608:	08006871 	.word	0x08006871
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 814c 	beq.w	80068b2 <USBH_Process+0x2f6>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200); 
 8006620:	20c8      	movs	r0, #200	; 0xc8
 8006622:	f001 ffe5 	bl	80085f0 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f001 fe98 	bl	800835c <USBH_LL_ResetPort>
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif
    }
    break;
 800662c:	e141      	b.n	80068b2 <USBH_Process+0x2f6>
  case HOST_DEV_WAIT_FOR_ATTACHMENT:
    break;    
    
  case HOST_DEV_ATTACHED :
    
    USBH_UsrLog("USB Device Attached");  
 800662e:	48aa      	ldr	r0, [pc, #680]	; (80068d8 <USBH_Process+0x31c>)
 8006630:	f002 f8fc 	bl	800882c <iprintf>
 8006634:	200a      	movs	r0, #10
 8006636:	f002 f911 	bl	800885c <putchar>
      
    /* Wait for 100 ms after Reset */
    USBH_Delay(100); 
 800663a:	2064      	movs	r0, #100	; 0x64
 800663c:	f001 ffd8 	bl	80085f0 <USBH_Delay>
          
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f001 fe65 	bl	8008310 <USBH_LL_GetSpeed>
 8006646:	4603      	mov	r3, r0
 8006648:	461a      	mov	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
    
    phost->gState = HOST_ENUMERATION;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2205      	movs	r2, #5
 8006654:	701a      	strb	r2, [r3, #0]
    
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 8006656:	2100      	movs	r1, #0
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 f898 	bl	800778e <USBH_AllocPipe>
 800665e:	4603      	mov	r3, r0
 8006660:	461a      	mov	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8006666:	2180      	movs	r1, #128	; 0x80
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f001 f890 	bl	800778e <USBH_AllocPipe>
 800666e:	4603      	mov	r3, r0
 8006670:	461a      	mov	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	711a      	strb	r2, [r3, #4]
    
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	7919      	ldrb	r1, [r3, #4]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size); 
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800668a:	b292      	uxth	r2, r2
 800668c:	9202      	str	r2, [sp, #8]
 800668e:	2200      	movs	r2, #0
 8006690:	9201      	str	r2, [sp, #4]
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	4603      	mov	r3, r0
 8006696:	2280      	movs	r2, #128	; 0x80
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f001 f849 	bl	8007730 <USBH_OpenPipe>
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	7959      	ldrb	r1, [r3, #5]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size);
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80066b2:	b292      	uxth	r2, r2
 80066b4:	9202      	str	r2, [sp, #8]
 80066b6:	2200      	movs	r2, #0
 80066b8:	9201      	str	r2, [sp, #4]
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	4603      	mov	r3, r0
 80066be:	2200      	movs	r2, #0
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 f835 	bl	8007730 <USBH_OpenPipe>
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif    
    
    break;
 80066c6:	e101      	b.n	80068cc <USBH_Process+0x310>
    
  case HOST_ENUMERATION:     
    /* Check for enumeration status */  
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f919 	bl	8006900 <USBH_HandleEnum>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f040 80f0 	bne.w	80068b6 <USBH_Process+0x2fa>
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
 80066d6:	4881      	ldr	r0, [pc, #516]	; (80068dc <USBH_Process+0x320>)
 80066d8:	f002 f8a8 	bl	800882c <iprintf>
 80066dc:	200a      	movs	r0, #10
 80066de:	f002 f8bd 	bl	800885c <putchar>
      phost->device.current_interface = 0;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d109      	bne.n	8006708 <USBH_Process+0x14c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
 80066f4:	487a      	ldr	r0, [pc, #488]	; (80068e0 <USBH_Process+0x324>)
 80066f6:	f002 f899 	bl	800882c <iprintf>
 80066fa:	200a      	movs	r0, #10
 80066fc:	f002 f8ae 	bl	800885c <putchar>
        phost->gState  = HOST_SET_CONFIGURATION;        
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2208      	movs	r2, #8
 8006704:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT; 
      }
          
    }
    break;
 8006706:	e0d6      	b.n	80068b6 <USBH_Process+0x2fa>
        phost->gState  = HOST_INPUT; 
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2207      	movs	r2, #7
 800670c:	701a      	strb	r2, [r3, #0]
    break;
 800670e:	e0d2      	b.n	80068b6 <USBH_Process+0x2fa>
    
  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 80cf 	beq.w	80068ba <USBH_Process+0x2fe>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006722:	2101      	movs	r1, #1
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2208      	movs	r2, #8
 800672c:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1)
        osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif         
      }
    }
    break;
 800672e:	e0c4      	b.n	80068ba <USBH_Process+0x2fe>
    
  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006736:	b29b      	uxth	r3, r3
 8006738:	4619      	mov	r1, r3
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fbc2 	bl	8006ec4 <USBH_SetCfg>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	f040 80bb 	bne.w	80068be <USBH_Process+0x302>
    {
      phost->gState  = HOST_CHECK_CLASS;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2209      	movs	r2, #9
 800674c:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
 800674e:	4865      	ldr	r0, [pc, #404]	; (80068e4 <USBH_Process+0x328>)
 8006750:	f002 f86c 	bl	800882c <iprintf>
 8006754:	200a      	movs	r0, #10
 8006756:	f002 f881 	bl	800885c <putchar>
      
    }      
    
    break;
 800675a:	e0b0      	b.n	80068be <USBH_Process+0x302>
    
  case HOST_CHECK_CLASS:
    
    if(phost->ClassNumber == 0)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <USBH_Process+0x1b8>
    {
      USBH_UsrLog ("No Class has been registered.");
 8006766:	4860      	ldr	r0, [pc, #384]	; (80068e8 <USBH_Process+0x32c>)
 8006768:	f002 f860 	bl	800882c <iprintf>
 800676c:	200a      	movs	r0, #10
 800676e:	f002 f875 	bl	800885c <putchar>
    }
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif 
    break;    
 8006772:	e0ab      	b.n	80068cc <USBH_Process+0x310>
      phost->pActiveClass = NULL;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 800677c:	2300      	movs	r3, #0
 800677e:	73fb      	strb	r3, [r7, #15]
 8006780:	e015      	b.n	80067ae <USBH_Process+0x1f2>
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006782:	7bfa      	ldrb	r2, [r7, #15]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	32dc      	adds	r2, #220	; 0xdc
 8006788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678c:	791a      	ldrb	r2, [r3, #4]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 8006794:	429a      	cmp	r2, r3
 8006796:	d107      	bne.n	80067a8 <USBH_Process+0x1ec>
          phost->pActiveClass = phost->pClass[idx];
 8006798:	7bfa      	ldrb	r2, [r7, #15]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	32dc      	adds	r2, #220	; 0xdc
 800679e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	3301      	adds	r3, #1
 80067ac:	73fb      	strb	r3, [r7, #15]
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d9e6      	bls.n	8006782 <USBH_Process+0x1c6>
      if(phost->pActiveClass != NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d02c      	beq.n	8006818 <USBH_Process+0x25c>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	4798      	blx	r3
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d114      	bne.n	80067fa <USBH_Process+0x23e>
          phost->gState  = HOST_CLASS_REQUEST; 
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2206      	movs	r2, #6
 80067d4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4619      	mov	r1, r3
 80067e0:	4842      	ldr	r0, [pc, #264]	; (80068ec <USBH_Process+0x330>)
 80067e2:	f002 f823 	bl	800882c <iprintf>
 80067e6:	200a      	movs	r0, #10
 80067e8:	f002 f838 	bl	800885c <putchar>
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80067f2:	2103      	movs	r1, #3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	4798      	blx	r3
    break;    
 80067f8:	e068      	b.n	80068cc <USBH_Process+0x310>
          phost->gState  = HOST_ABORT_STATE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	220c      	movs	r2, #12
 80067fe:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4619      	mov	r1, r3
 800680a:	4839      	ldr	r0, [pc, #228]	; (80068f0 <USBH_Process+0x334>)
 800680c:	f002 f80e 	bl	800882c <iprintf>
 8006810:	200a      	movs	r0, #10
 8006812:	f002 f823 	bl	800885c <putchar>
    break;    
 8006816:	e059      	b.n	80068cc <USBH_Process+0x310>
        phost->gState  = HOST_ABORT_STATE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	220c      	movs	r2, #12
 800681c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
 800681e:	4835      	ldr	r0, [pc, #212]	; (80068f4 <USBH_Process+0x338>)
 8006820:	f002 f804 	bl	800882c <iprintf>
 8006824:	200a      	movs	r0, #10
 8006826:	f002 f819 	bl	800885c <putchar>
    break;    
 800682a:	e04f      	b.n	80068cc <USBH_Process+0x310>
    
  case HOST_CLASS_REQUEST:  
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00f      	beq.n	8006856 <USBH_Process+0x29a>
    {
      status = phost->pActiveClass->Requests(phost);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	4798      	blx	r3
 8006842:	4603      	mov	r3, r0
 8006844:	73bb      	strb	r3, [r7, #14]
      
      if(status == USBH_OK)
 8006846:	7bbb      	ldrb	r3, [r7, #14]
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d139      	bne.n	80068c2 <USBH_Process+0x306>
      {
        phost->gState  = HOST_CLASS;        
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	220a      	movs	r2, #10
 8006852:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    
    break;    
 8006854:	e035      	b.n	80068c2 <USBH_Process+0x306>
      phost->gState  = HOST_ABORT_STATE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	220c      	movs	r2, #12
 800685a:	701a      	strb	r2, [r3, #0]
      USBH_ErrLog ("Invalid Class Driver.");
 800685c:	4826      	ldr	r0, [pc, #152]	; (80068f8 <USBH_Process+0x33c>)
 800685e:	f001 ffe5 	bl	800882c <iprintf>
 8006862:	4826      	ldr	r0, [pc, #152]	; (80068fc <USBH_Process+0x340>)
 8006864:	f001 ffe2 	bl	800882c <iprintf>
 8006868:	200a      	movs	r0, #10
 800686a:	f001 fff7 	bl	800885c <putchar>
    break;    
 800686e:	e028      	b.n	80068c2 <USBH_Process+0x306>
  case HOST_CLASS:   
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006876:	2b00      	cmp	r3, #0
 8006878:	d025      	beq.n	80068c6 <USBH_Process+0x30a>
    { 
      phost->pActiveClass->BgndProcess(phost);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	4798      	blx	r3
    }
    break;       
 8006886:	e01e      	b.n	80068c6 <USBH_Process+0x30a>

  case HOST_DEV_DISCONNECTED :
    
    DeInitStateMachine(phost);  
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff fd49 	bl	8006320 <DeInitStateMachine>
    
    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006894:	2b00      	cmp	r3, #0
 8006896:	d018      	beq.n	80068ca <USBH_Process+0x30e>
    {
      phost->pActiveClass->DeInit(phost); 
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }     
    break;
 80068ac:	e00d      	b.n	80068ca <USBH_Process+0x30e>
    
  case HOST_ABORT_STATE:
  default :
    break;
 80068ae:	bf00      	nop
 80068b0:	e00c      	b.n	80068cc <USBH_Process+0x310>
    break;
 80068b2:	bf00      	nop
 80068b4:	e00a      	b.n	80068cc <USBH_Process+0x310>
    break;
 80068b6:	bf00      	nop
 80068b8:	e008      	b.n	80068cc <USBH_Process+0x310>
    break;
 80068ba:	bf00      	nop
 80068bc:	e006      	b.n	80068cc <USBH_Process+0x310>
    break;
 80068be:	bf00      	nop
 80068c0:	e004      	b.n	80068cc <USBH_Process+0x310>
    break;    
 80068c2:	bf00      	nop
 80068c4:	e002      	b.n	80068cc <USBH_Process+0x310>
    break;       
 80068c6:	bf00      	nop
 80068c8:	e000      	b.n	80068cc <USBH_Process+0x310>
    break;
 80068ca:	bf00      	nop
  }
 return USBH_OK;  
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	08009784 	.word	0x08009784
 80068dc:	08009798 	.word	0x08009798
 80068e0:	080097ac 	.word	0x080097ac
 80068e4:	080097d4 	.word	0x080097d4
 80068e8:	080097f0 	.word	0x080097f0
 80068ec:	08009810 	.word	0x08009810
 80068f0:	08009824 	.word	0x08009824
 80068f4:	08009844 	.word	0x08009844
 80068f8:	080096c4 	.word	0x080096c4
 80068fc:	0800986c 	.word	0x0800986c

08006900 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b088      	sub	sp, #32
 8006904:	af04      	add	r7, sp, #16
 8006906:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;  
 8006908:	2301      	movs	r3, #1
 800690a:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->EnumState)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	2b07      	cmp	r3, #7
 8006912:	f200 8148 	bhi.w	8006ba6 <USBH_HandleEnum+0x2a6>
 8006916:	a201      	add	r2, pc, #4	; (adr r2, 800691c <USBH_HandleEnum+0x1c>)
 8006918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691c:	0800693d 	.word	0x0800693d
 8006920:	080069af 	.word	0x080069af
 8006924:	080069ef 	.word	0x080069ef
 8006928:	08006a79 	.word	0x08006a79
 800692c:	08006a91 	.word	0x08006a91
 8006930:	08006aaf 	.word	0x08006aaf
 8006934:	08006b03 	.word	0x08006b03
 8006938:	08006b57 	.word	0x08006b57
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 800693c:	2108      	movs	r1, #8
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f9f0 	bl	8006d24 <USBH_Get_DevDesc>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	f040 812f 	bne.w	8006baa <USBH_HandleEnum+0x2aa>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	7919      	ldrb	r1, [r3, #4]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006970:	b292      	uxth	r2, r2
 8006972:	9202      	str	r2, [sp, #8]
 8006974:	2200      	movs	r2, #0
 8006976:	9201      	str	r2, [sp, #4]
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	4603      	mov	r3, r0
 800697c:	2280      	movs	r2, #128	; 0x80
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fed6 	bl	8007730 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	7959      	ldrb	r1, [r3, #5]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);           
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006998:	b292      	uxth	r2, r2
 800699a:	9202      	str	r2, [sp, #8]
 800699c:	2200      	movs	r2, #0
 800699e:	9201      	str	r2, [sp, #4]
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	4603      	mov	r3, r0
 80069a4:	2200      	movs	r2, #0
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fec2 	bl	8007730 <USBH_OpenPipe>
      
    }
    break;
 80069ac:	e0fd      	b.n	8006baa <USBH_HandleEnum+0x2aa>
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80069ae:	2112      	movs	r1, #18
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f9b7 	bl	8006d24 <USBH_Get_DevDesc>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f040 80f8 	bne.w	8006bae <USBH_HandleEnum+0x2ae>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 80069c4:	4619      	mov	r1, r3
 80069c6:	4883      	ldr	r0, [pc, #524]	; (8006bd4 <USBH_HandleEnum+0x2d4>)
 80069c8:	f001 ff30 	bl	800882c <iprintf>
 80069cc:	200a      	movs	r0, #10
 80069ce:	f001 ff45 	bl	800885c <putchar>
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 80069d8:	4619      	mov	r1, r3
 80069da:	487f      	ldr	r0, [pc, #508]	; (8006bd8 <USBH_HandleEnum+0x2d8>)
 80069dc:	f001 ff26 	bl	800882c <iprintf>
 80069e0:	200a      	movs	r0, #10
 80069e2:	f001 ff3b 	bl	800885c <putchar>
      
      phost->EnumState = ENUM_SET_ADDR;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2202      	movs	r2, #2
 80069ea:	705a      	strb	r2, [r3, #1]
       
    }
    break;
 80069ec:	e0df      	b.n	8006bae <USBH_HandleEnum+0x2ae>
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80069ee:	2101      	movs	r1, #1
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fa43 	bl	8006e7c <USBH_SetAddress>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f040 80da 	bne.w	8006bb2 <USBH_HandleEnum+0x2b2>
    {
      USBH_Delay(2);
 80069fe:	2002      	movs	r0, #2
 8006a00:	f001 fdf6 	bl	80085f0 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
      
      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 8006a12:	4619      	mov	r1, r3
 8006a14:	4871      	ldr	r0, [pc, #452]	; (8006bdc <USBH_HandleEnum+0x2dc>)
 8006a16:	f001 ff09 	bl	800882c <iprintf>
 8006a1a:	200a      	movs	r0, #10
 8006a1c:	f001 ff1e 	bl	800885c <putchar>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2203      	movs	r2, #3
 8006a24:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	7919      	ldrb	r1, [r3, #4]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006a3a:	b292      	uxth	r2, r2
 8006a3c:	9202      	str	r2, [sp, #8]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	9201      	str	r2, [sp, #4]
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	4603      	mov	r3, r0
 8006a46:	2280      	movs	r2, #128	; 0x80
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fe71 	bl	8007730 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	7959      	ldrb	r1, [r3, #5]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);        
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006a62:	b292      	uxth	r2, r2
 8006a64:	9202      	str	r2, [sp, #8]
 8006a66:	2200      	movs	r2, #0
 8006a68:	9201      	str	r2, [sp, #4]
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2200      	movs	r2, #0
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fe5d 	bl	8007730 <USBH_OpenPipe>
    }
    break;
 8006a76:	e09c      	b.n	8006bb2 <USBH_HandleEnum+0x2b2>
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
 8006a78:	2109      	movs	r1, #9
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f97a 	bl	8006d74 <USBH_Get_CfgDesc>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f040 8097 	bne.w	8006bb6 <USBH_HandleEnum+0x2b6>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2204      	movs	r2, #4
 8006a8c:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006a8e:	e092      	b.n	8006bb6 <USBH_HandleEnum+0x2b6>
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f96b 	bl	8006d74 <USBH_Get_CfgDesc>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f040 808a 	bne.w	8006bba <USBH_HandleEnum+0x2ba>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2205      	movs	r2, #5
 8006aaa:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006aac:	e085      	b.n	8006bba <USBH_HandleEnum+0x2ba>
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d01a      	beq.n	8006aee <USBH_HandleEnum+0x1ee>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 132e 	ldrb.w	r1, [r3, #814]	; 0x32e
                               phost->device.DevDesc.iManufacturer, 
                                phost->device.Data , 
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006ac4:	23ff      	movs	r3, #255	; 0xff
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f978 	bl	8006dbc <USBH_Get_StringDesc>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d175      	bne.n	8006bbe <USBH_HandleEnum+0x2be>
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4841      	ldr	r0, [pc, #260]	; (8006be0 <USBH_HandleEnum+0x2e0>)
 8006adc:	f001 fea6 	bl	800882c <iprintf>
 8006ae0:	200a      	movs	r0, #10
 8006ae2:	f001 febb 	bl	800885c <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2206      	movs	r2, #6
 8006aea:	705a      	strb	r2, [r3, #1]
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    break;
 8006aec:	e067      	b.n	8006bbe <USBH_HandleEnum+0x2be>
     USBH_UsrLog("Manufacturer : N/A");      
 8006aee:	483d      	ldr	r0, [pc, #244]	; (8006be4 <USBH_HandleEnum+0x2e4>)
 8006af0:	f001 fe9c 	bl	800882c <iprintf>
 8006af4:	200a      	movs	r0, #10
 8006af6:	f001 feb1 	bl	800885c <putchar>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2206      	movs	r2, #6
 8006afe:	705a      	strb	r2, [r3, #1]
    break;
 8006b00:	e05d      	b.n	8006bbe <USBH_HandleEnum+0x2be>
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01a      	beq.n	8006b42 <USBH_HandleEnum+0x242>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 132f 	ldrb.w	r1, [r3, #815]	; 0x32f
                               phost->device.DevDesc.iProduct, 
                               phost->device.Data, 
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006b18:	23ff      	movs	r3, #255	; 0xff
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f94e 	bl	8006dbc <USBH_Get_StringDesc>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d14d      	bne.n	8006bc2 <USBH_HandleEnum+0x2c2>
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	482e      	ldr	r0, [pc, #184]	; (8006be8 <USBH_HandleEnum+0x2e8>)
 8006b30:	f001 fe7c 	bl	800882c <iprintf>
 8006b34:	200a      	movs	r0, #10
 8006b36:	f001 fe91 	bl	800885c <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2207      	movs	r2, #7
 8006b3e:	705a      	strb	r2, [r3, #1]
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    } 
    break;
 8006b40:	e03f      	b.n	8006bc2 <USBH_HandleEnum+0x2c2>
      USBH_UsrLog("Product : N/A");
 8006b42:	482a      	ldr	r0, [pc, #168]	; (8006bec <USBH_HandleEnum+0x2ec>)
 8006b44:	f001 fe72 	bl	800882c <iprintf>
 8006b48:	200a      	movs	r0, #10
 8006b4a:	f001 fe87 	bl	800885c <putchar>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2207      	movs	r2, #7
 8006b52:	705a      	strb	r2, [r3, #1]
    break;
 8006b54:	e035      	b.n	8006bc2 <USBH_HandleEnum+0x2c2>
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d019      	beq.n	8006b94 <USBH_HandleEnum+0x294>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iSerialNumber, 
                               phost->device.Data, 
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006b6c:	23ff      	movs	r3, #255	; 0xff
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f924 	bl	8006dbc <USBH_Get_StringDesc>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d125      	bne.n	8006bc6 <USBH_HandleEnum+0x2c6>
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)phost->device.Data);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b80:	4619      	mov	r1, r3
 8006b82:	481b      	ldr	r0, [pc, #108]	; (8006bf0 <USBH_HandleEnum+0x2f0>)
 8006b84:	f001 fe52 	bl	800882c <iprintf>
 8006b88:	200a      	movs	r0, #10
 8006b8a:	f001 fe67 	bl	800885c <putchar>
        Status = USBH_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73fb      	strb	r3, [r7, #15]
      Status = USBH_OK;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    }  
    break;
 8006b92:	e018      	b.n	8006bc6 <USBH_HandleEnum+0x2c6>
      USBH_UsrLog("Serial Number : N/A"); 
 8006b94:	4817      	ldr	r0, [pc, #92]	; (8006bf4 <USBH_HandleEnum+0x2f4>)
 8006b96:	f001 fe49 	bl	800882c <iprintf>
 8006b9a:	200a      	movs	r0, #10
 8006b9c:	f001 fe5e 	bl	800885c <putchar>
      Status = USBH_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ba4:	e00f      	b.n	8006bc6 <USBH_HandleEnum+0x2c6>
    
  default:
    break;
 8006ba6:	bf00      	nop
 8006ba8:	e00e      	b.n	8006bc8 <USBH_HandleEnum+0x2c8>
    break;
 8006baa:	bf00      	nop
 8006bac:	e00c      	b.n	8006bc8 <USBH_HandleEnum+0x2c8>
    break;
 8006bae:	bf00      	nop
 8006bb0:	e00a      	b.n	8006bc8 <USBH_HandleEnum+0x2c8>
    break;
 8006bb2:	bf00      	nop
 8006bb4:	e008      	b.n	8006bc8 <USBH_HandleEnum+0x2c8>
    break;
 8006bb6:	bf00      	nop
 8006bb8:	e006      	b.n	8006bc8 <USBH_HandleEnum+0x2c8>
    break;
 8006bba:	bf00      	nop
 8006bbc:	e004      	b.n	8006bc8 <USBH_HandleEnum+0x2c8>
    break;
 8006bbe:	bf00      	nop
 8006bc0:	e002      	b.n	8006bc8 <USBH_HandleEnum+0x2c8>
    break;
 8006bc2:	bf00      	nop
 8006bc4:	e000      	b.n	8006bc8 <USBH_HandleEnum+0x2c8>
    break;
 8006bc6:	bf00      	nop
  }  
  return Status;
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	08009884 	.word	0x08009884
 8006bd8:	08009890 	.word	0x08009890
 8006bdc:	0800989c 	.word	0x0800989c
 8006be0:	080098b4 	.word	0x080098b4
 8006be4:	080098c8 	.word	0x080098c8
 8006be8:	080098dc 	.word	0x080098dc
 8006bec:	080098ec 	.word	0x080098ec
 8006bf0:	080098fc 	.word	0x080098fc
 8006bf4:	08009910 	.word	0x08009910

08006bf8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b082      	sub	sp, #8
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f804 	bl	8006c3a <USBH_HandleSof>
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b082      	sub	sp, #8
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b0a      	cmp	r3, #10
 8006c4a:	d10a      	bne.n	8006c62 <USBH_HandleSof+0x28>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d005      	beq.n	8006c62 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
  }
}
 8006c62:	bf00      	nop
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10f      	bne.n	8006c9c <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
    
    if(phost->pUser != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00e      	beq.n	8006cac <USBH_LL_Connect+0x42>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c94:	2104      	movs	r1, #4
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	4798      	blx	r3
 8006c9a:	e007      	b.n	8006cac <USBH_LL_Connect+0x42>
    }
  } 
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d102      	bne.n	8006cac <USBH_LL_Connect+0x42>
  {
    phost->gState = HOST_DEV_ATTACHED ;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2202      	movs	r2, #2
 8006caa:	701a      	strb	r2, [r3, #0]
  }
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 faf3 	bl	80082ac <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	791b      	ldrb	r3, [r3, #4]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fd7d 	bl	80077cc <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	795b      	ldrb	r3, [r3, #5]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fd77 	bl	80077cc <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d005      	beq.n	8006cfc <USBH_LL_Disconnect+0x44>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006cf6:	2105      	movs	r1, #5
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
 8006cfc:	4808      	ldr	r0, [pc, #32]	; (8006d20 <USBH_LL_Disconnect+0x68>)
 8006cfe:	f001 fd95 	bl	800882c <iprintf>
 8006d02:	200a      	movs	r0, #10
 8006d04:	f001 fdaa 	bl	800885c <putchar>
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 fa9d 	bl	8008248 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2203      	movs	r2, #3
 8006d12:	701a      	strb	r2, [r3, #0]
  
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	08009924 	.word	0x08009924

08006d24 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af02      	add	r7, sp, #8
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;
  
  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  phost->device.Data,
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006d36:	78fb      	ldrb	r3, [r7, #3]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d42:	2100      	movs	r1, #0
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f864 	bl	8006e12 <USBH_GetDescriptor>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	73fb      	strb	r3, [r7, #15]
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <USBH_Get_DevDesc+0x46>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data, length);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f503 7048 	add.w	r0, r3, #800	; 0x320
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d60:	78fa      	ldrb	r2, [r7, #3]
 8006d62:	b292      	uxth	r2, r2
 8006d64:	4619      	mov	r1, r3
 8006d66:	f000 f8f4 	bl	8006f52 <USBH_ParseDevDesc>
  }
  return status;      
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,                      
                             uint16_t length)

{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af02      	add	r7, sp, #8
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1)  
  pData = phost->device.CfgDesc_Raw;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	331c      	adds	r3, #28
 8006d84:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif  
  if((status = USBH_GetDescriptor(phost,
 8006d86:	887b      	ldrh	r3, [r7, #2]
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d90:	2100      	movs	r1, #0
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f83d 	bl	8006e12 <USBH_GetDescriptor>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	72fb      	strb	r3, [r7, #11]
 8006d9c:	7afb      	ldrb	r3, [r7, #11]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d107      	bne.n	8006db2 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {
    
    /* Commands successfully sent and Response Received  */       
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f203 3332 	addw	r3, r3, #818	; 0x332
 8006da8:	887a      	ldrh	r2, [r7, #2]
 8006daa:	68f9      	ldr	r1, [r7, #12]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 f940 	bl	8007032 <USBH_ParseCfgDesc>
                       pData,
                       length); 
    
  }
  return status;
 8006db2:	7afb      	ldrb	r3, [r7, #11]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b088      	sub	sp, #32
 8006dc0:	af02      	add	r7, sp, #8
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	607a      	str	r2, [r7, #4]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	460b      	mov	r3, r1
 8006dca:	72fb      	strb	r3, [r7, #11]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8006dd0:	7afb      	ldrb	r3, [r7, #11]
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006dd8:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  phost->device.Data,
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006de0:	893b      	ldrh	r3, [r7, #8]
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	460b      	mov	r3, r1
 8006de6:	2100      	movs	r1, #0
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 f812 	bl	8006e12 <USBH_GetDescriptor>
 8006dee:	4603      	mov	r3, r0
 8006df0:	75fb      	strb	r3, [r7, #23]
 8006df2:	7dfb      	ldrb	r3, [r7, #23]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d107      	bne.n	8006e08 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(phost->device.Data,buff, length);    
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006dfe:	893a      	ldrh	r2, [r7, #8]
 8006e00:	6879      	ldr	r1, [r7, #4]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 fa17 	bl	8007236 <USBH_ParseStringDesc>
  }
  return status;
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,                          
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	607b      	str	r3, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	72fb      	strb	r3, [r7, #11]
 8006e20:	4613      	mov	r3, r2
 8006e22:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	789b      	ldrb	r3, [r3, #2]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d11c      	bne.n	8006e66 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006e2c:	7afb      	ldrb	r3, [r7, #11]
 8006e2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2206      	movs	r2, #6
 8006e3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	893a      	ldrh	r2, [r7, #8]
 8006e42:	825a      	strh	r2, [r3, #18]
    
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 8006e44:	893b      	ldrh	r3, [r7, #8]
 8006e46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e4e:	d104      	bne.n	8006e5a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f240 4209 	movw	r2, #1033	; 0x409
 8006e56:	829a      	strh	r2, [r3, #20]
 8006e58:	e002      	b.n	8006e60 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length; 
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8b3a      	ldrh	r2, [r7, #24]
 8006e64:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff , length );     
 8006e66:	8b3b      	ldrh	r3, [r7, #24]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	6879      	ldr	r1, [r7, #4]
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 fa30 	bl	80072d2 <USBH_CtlReq>
 8006e72:	4603      	mov	r3, r0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost, 
                                   uint8_t DeviceAddress)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	460b      	mov	r3, r1
 8006e86:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	789b      	ldrb	r3, [r3, #2]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d10f      	bne.n	8006eb0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2205      	movs	r2, #5
 8006e9a:	745a      	strb	r2, [r3, #17]
    
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006e9c:	78fb      	ldrb	r3, [r7, #3]
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fa0c 	bl	80072d2 <USBH_CtlReq>
 8006eba:	4603      	mov	r3, r0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <USBH_SetCfg>:
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, 
                               uint16_t cfg_idx)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	789b      	ldrb	r3, [r3, #2]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d10e      	bne.n	8006ef6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2209      	movs	r2, #9
 8006ee2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	887a      	ldrh	r2, [r7, #2]
 8006ee8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0; 
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	82da      	strh	r2, [r3, #22]
  }
  
  return USBH_CtlReq(phost, 0 , 0 );      
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	2100      	movs	r1, #0
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f9e9 	bl	80072d2 <USBH_CtlReq>
 8006f00:	4603      	mov	r3, r0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <USBH_ClrFeature>:
  * @param  hc_num: Host channel number 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost,
                                   uint8_t ep_num) 
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b082      	sub	sp, #8
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	789b      	ldrb	r3, [r3, #2]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d10f      	bne.n	8006f3e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2202      	movs	r2, #2
 8006f22:	741a      	strb	r2, [r3, #16]
      USB_REQ_RECIPIENT_ENDPOINT |
        USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;           
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );   
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2100      	movs	r1, #0
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f9c5 	bl	80072d2 <USBH_CtlReq>
 8006f48:	4603      	mov	r3, r0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b085      	sub	sp, #20
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	60f8      	str	r0, [r7, #12]
 8006f5a:	60b9      	str	r1, [r7, #8]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	785a      	ldrb	r2, [r3, #1]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	3302      	adds	r3, #2
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	3303      	adds	r3, #3
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	021b      	lsls	r3, r3, #8
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	4413      	add	r3, r2
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	791a      	ldrb	r2, [r3, #4]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	795a      	ldrb	r2, [r3, #5]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	799a      	ldrb	r2, [r3, #6]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	79da      	ldrb	r2, [r3, #7]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	71da      	strb	r2, [r3, #7]
  
  if (length > 8)
 8006fac:	88fb      	ldrh	r3, [r7, #6]
 8006fae:	2b08      	cmp	r3, #8
 8006fb0:	d939      	bls.n	8007026 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	3308      	adds	r3, #8
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	3309      	adds	r3, #9
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	021b      	lsls	r3, r3, #8
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	4413      	add	r3, r2
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	330a      	adds	r3, #10
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	330b      	adds	r3, #11
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	021b      	lsls	r3, r3, #8
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	4413      	add	r3, r2
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	330c      	adds	r3, #12
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	330d      	adds	r3, #13
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	021b      	lsls	r3, r3, #8
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	4413      	add	r3, r2
 8007000:	b29a      	uxth	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	7b9a      	ldrb	r2, [r3, #14]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	7bda      	ldrb	r2, [r3, #15]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	7c1a      	ldrb	r2, [r3, #16]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	7c5a      	ldrb	r2, [r3, #17]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	745a      	strb	r2, [r3, #17]
  }
}
 8007026:	bf00      	nop
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <USBH_ParseCfgDesc>:
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc,
                               uint8_t *buf, 
                               uint16_t length)
{  
 8007032:	b580      	push	{r7, lr}
 8007034:	b08a      	sub	sp, #40	; 0x28
 8007036:	af00      	add	r7, sp, #0
 8007038:	60f8      	str	r0, [r7, #12]
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	4613      	mov	r3, r2
 800703e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;  
  USBH_DescHeader_t             *pdesc = (USBH_DescHeader_t *)buf;
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                      ptr;
  int8_t                        if_ix = 0;
 8007044:	2300      	movs	r3, #0
 8007046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  int8_t                        ep_ix = 0;  
 800704a:	2300      	movs	r3, #0
 800704c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  
  pdesc   = (USBH_DescHeader_t *)buf;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	781a      	ldrb	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	785a      	ldrb	r2, [r3, #1]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	3302      	adds	r3, #2
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	b29a      	uxth	r2, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	3303      	adds	r3, #3
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	b29b      	uxth	r3, r3
 8007074:	021b      	lsls	r3, r3, #8
 8007076:	b29b      	uxth	r3, r3
 8007078:	4413      	add	r3, r2
 800707a:	b29a      	uxth	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	791a      	ldrb	r2, [r3, #4]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	795a      	ldrb	r2, [r3, #5]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	799a      	ldrb	r2, [r3, #6]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	79da      	ldrb	r2, [r3, #7]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	7a1a      	ldrb	r2, [r3, #8]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	721a      	strb	r2, [r3, #8]
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80070a8:	88fb      	ldrh	r3, [r7, #6]
 80070aa:	2b09      	cmp	r3, #9
 80070ac:	d963      	bls.n	8007176 <USBH_ParseCfgDesc+0x144>
  {
    ptr = USB_LEN_CFG_DESC;
 80070ae:	2309      	movs	r3, #9
 80070b0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	61fb      	str	r3, [r7, #28]
    
    
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 80070b6:	e055      	b.n	8007164 <USBH_ParseCfgDesc+0x132>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 80070b8:	f107 0316 	add.w	r3, r7, #22
 80070bc:	4619      	mov	r1, r3
 80070be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070c0:	f000 f8ec 	bl	800729c <USBH_GetNextDesc>
 80070c4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	785b      	ldrb	r3, [r3, #1]
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	d14a      	bne.n	8007164 <USBH_ParseCfgDesc+0x132>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80070ce:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80070d2:	221a      	movs	r2, #26
 80070d4:	fb02 f303 	mul.w	r3, r2, r3
 80070d8:	3308      	adds	r3, #8
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4413      	add	r3, r2
 80070de:	3302      	adds	r3, #2
 80070e0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)pdesc);            
 80070e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070e4:	69f8      	ldr	r0, [r7, #28]
 80070e6:	f000 f84a 	bl	800717e <USBH_ParseInterfaceDesc>
        
        ep_ix = 0;
 80070ea:	2300      	movs	r3, #0
 80070ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;        
 80070f0:	2300      	movs	r3, #0
 80070f2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80070f4:	e024      	b.n	8007140 <USBH_ParseCfgDesc+0x10e>
        {
          pdesc = USBH_GetNextDesc((uint8_t*) pdesc, &ptr);
 80070f6:	f107 0316 	add.w	r3, r7, #22
 80070fa:	4619      	mov	r1, r3
 80070fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070fe:	f000 f8cd 	bl	800729c <USBH_GetNextDesc>
 8007102:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	785b      	ldrb	r3, [r3, #1]
 8007108:	2b05      	cmp	r3, #5
 800710a:	d119      	bne.n	8007140 <USBH_ParseCfgDesc+0x10e>
          {  
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800710c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8007110:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 8007114:	3201      	adds	r2, #1
 8007116:	00d2      	lsls	r2, r2, #3
 8007118:	211a      	movs	r1, #26
 800711a:	fb01 f303 	mul.w	r3, r1, r3
 800711e:	4413      	add	r3, r2
 8007120:	3308      	adds	r3, #8
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	4413      	add	r3, r2
 8007126:	3304      	adds	r3, #4
 8007128:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
 800712a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800712c:	69b8      	ldr	r0, [r7, #24]
 800712e:	f000 f855 	bl	80071dc <USBH_ParseEPDesc>
            ep_ix++;
 8007132:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8007136:	b2db      	uxtb	r3, r3
 8007138:	3301      	adds	r3, #1
 800713a:	b2db      	uxtb	r3, r3
 800713c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007140:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8007144:	69fa      	ldr	r2, [r7, #28]
 8007146:	7912      	ldrb	r2, [r2, #4]
 8007148:	4293      	cmp	r3, r2
 800714a:	da04      	bge.n	8007156 <USBH_ParseCfgDesc+0x124>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	885a      	ldrh	r2, [r3, #2]
 8007150:	8afb      	ldrh	r3, [r7, #22]
 8007152:	429a      	cmp	r2, r3
 8007154:	d8cf      	bhi.n	80070f6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007156:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800715a:	b2db      	uxtb	r3, r3
 800715c:	3301      	adds	r3, #1
 800715e:	b2db      	uxtb	r3, r3
 8007160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 8007164:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8007168:	2b01      	cmp	r3, #1
 800716a:	dc04      	bgt.n	8007176 <USBH_ParseCfgDesc+0x144>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	885a      	ldrh	r2, [r3, #2]
 8007170:	8afb      	ldrh	r3, [r7, #22]
 8007172:	429a      	cmp	r2, r3
 8007174:	d8a0      	bhi.n	80070b8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }  
}
 8007176:	bf00      	nop
 8007178:	3728      	adds	r7, #40	; 0x28
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor, 
                                      uint8_t *buf)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	781a      	ldrb	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	785a      	ldrb	r2, [r3, #1]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	789a      	ldrb	r2, [r3, #2]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	78da      	ldrb	r2, [r3, #3]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	791a      	ldrb	r2, [r3, #4]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	795a      	ldrb	r2, [r3, #5]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	799a      	ldrb	r2, [r3, #6]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	79da      	ldrb	r2, [r3, #7]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	7a1a      	ldrb	r2, [r3, #8]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	721a      	strb	r2, [r3, #8]
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	781a      	ldrb	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	785a      	ldrb	r2, [r3, #1]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	789a      	ldrb	r2, [r3, #2]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	78da      	ldrb	r2, [r3, #3]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	3304      	adds	r3, #4
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	b29a      	uxth	r2, r3
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	3305      	adds	r3, #5
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	b29b      	uxth	r3, r3
 8007216:	021b      	lsls	r3, r3, #8
 8007218:	b29b      	uxth	r3, r3
 800721a:	4413      	add	r3, r2
 800721c:	b29a      	uxth	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	799a      	ldrb	r2, [r3, #6]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	719a      	strb	r2, [r3, #6]
}
 800722a:	bf00      	nop
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <USBH_ParseStringDesc>:
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, 
                                  uint8_t* pdest, 
                                  uint16_t length)
{
 8007236:	b480      	push	{r7}
 8007238:	b087      	sub	sp, #28
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	4613      	mov	r3, r2
 8007242:	80fb      	strh	r3, [r7, #6]
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3301      	adds	r3, #1
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b03      	cmp	r3, #3
 800724c:	d120      	bne.n	8007290 <USBH_ParseStringDesc+0x5a>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	1e9a      	subs	r2, r3, #2
 8007254:	88fb      	ldrh	r3, [r7, #6]
 8007256:	4293      	cmp	r3, r2
 8007258:	bfa8      	it	ge
 800725a:	4613      	movge	r3, r2
 800725c:	82bb      	strh	r3, [r7, #20]
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3302      	adds	r3, #2
 8007262:	60fb      	str	r3, [r7, #12]
    
    for (idx = 0; idx < strlength; idx+=2 )
 8007264:	2300      	movs	r3, #0
 8007266:	82fb      	strh	r3, [r7, #22]
 8007268:	e00b      	b.n	8007282 <USBH_ParseStringDesc+0x4c>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800726a:	8afb      	ldrh	r3, [r7, #22]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	4413      	add	r3, r2
 8007270:	781a      	ldrb	r2, [r3, #0]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	3301      	adds	r3, #1
 800727a:	60bb      	str	r3, [r7, #8]
    for (idx = 0; idx < strlength; idx+=2 )
 800727c:	8afb      	ldrh	r3, [r7, #22]
 800727e:	3302      	adds	r3, #2
 8007280:	82fb      	strh	r3, [r7, #22]
 8007282:	8afa      	ldrh	r2, [r7, #22]
 8007284:	8abb      	ldrh	r3, [r7, #20]
 8007286:	429a      	cmp	r2, r3
 8007288:	d3ef      	bcc.n	800726a <USBH_ParseStringDesc+0x34>
    }  
    *pdest = 0; /* mark end of string */  
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2200      	movs	r2, #0
 800728e:	701a      	strb	r2, [r3, #0]
  }
}
 8007290:	bf00      	nop
 8007292:	371c      	adds	r7, #28
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	881a      	ldrh	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	4413      	add	r3, r2
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
         ((USBH_DescHeader_t *)pbuf)->bLength);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4413      	add	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]
 
  return(pnext);
 80072c4:	68fb      	ldr	r3, [r7, #12]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b086      	sub	sp, #24
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	60f8      	str	r0, [r7, #12]
 80072da:	60b9      	str	r1, [r7, #8]
 80072dc:	4613      	mov	r3, r2
 80072de:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80072e0:	2301      	movs	r3, #1
 80072e2:	75fb      	strb	r3, [r7, #23]
  
  switch (phost->RequestState)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	789b      	ldrb	r3, [r3, #2]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d002      	beq.n	80072f2 <USBH_CtlReq+0x20>
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d00f      	beq.n	8007310 <USBH_CtlReq+0x3e>
      status = USBH_FAIL;
    }   
    break;
    
  default:
    break; 
 80072f0:	e028      	b.n	8007344 <USBH_CtlReq+0x72>
    phost->Control.buff = buff; 
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	88fa      	ldrh	r2, [r7, #6]
 80072fc:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;  
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2201      	movs	r2, #1
 8007302:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2202      	movs	r2, #2
 8007308:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800730a:	2301      	movs	r3, #1
 800730c:	75fb      	strb	r3, [r7, #23]
    break;
 800730e:	e019      	b.n	8007344 <USBH_CtlReq+0x72>
    status = USBH_HandleControl(phost);
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f81d 	bl	8007350 <USBH_HandleControl>
 8007316:	4603      	mov	r3, r0
 8007318:	75fb      	strb	r3, [r7, #23]
     if (status == USBH_OK) 
 800731a:	7dfb      	ldrb	r3, [r7, #23]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d108      	bne.n	8007332 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2201      	movs	r2, #1
 8007324:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;  
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;      
 800732c:	2300      	movs	r3, #0
 800732e:	75fb      	strb	r3, [r7, #23]
    break;
 8007330:	e007      	b.n	8007342 <USBH_CtlReq+0x70>
    else if  (status == USBH_FAIL)
 8007332:	7dfb      	ldrb	r3, [r7, #23]
 8007334:	2b02      	cmp	r3, #2
 8007336:	d104      	bne.n	8007342 <USBH_CtlReq+0x70>
      phost->RequestState = CMD_SEND;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2201      	movs	r2, #1
 800733c:	709a      	strb	r2, [r3, #2]
      status = USBH_FAIL;
 800733e:	2302      	movs	r3, #2
 8007340:	75fb      	strb	r3, [r7, #23]
    break;
 8007342:	bf00      	nop
  }
  return status;
 8007344:	7dfb      	ldrb	r3, [r7, #23]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
	...

08007350 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af02      	add	r7, sp, #8
 8007356:	6078      	str	r0, [r7, #4]
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8007358:	2301      	movs	r3, #1
 800735a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800735c:	2300      	movs	r3, #0
 800735e:	73bb      	strb	r3, [r7, #14]
  
  switch (phost->Control.state)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	7e1b      	ldrb	r3, [r3, #24]
 8007364:	3b01      	subs	r3, #1
 8007366:	2b0a      	cmp	r3, #10
 8007368:	f200 8152 	bhi.w	8007610 <USBH_HandleControl+0x2c0>
 800736c:	a201      	add	r2, pc, #4	; (adr r2, 8007374 <USBH_HandleControl+0x24>)
 800736e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007372:	bf00      	nop
 8007374:	080073a1 	.word	0x080073a1
 8007378:	080073bb 	.word	0x080073bb
 800737c:	0800741f 	.word	0x0800741f
 8007380:	08007445 	.word	0x08007445
 8007384:	0800747d 	.word	0x0800747d
 8007388:	080074a9 	.word	0x080074a9
 800738c:	080074fb 	.word	0x080074fb
 8007390:	0800751d 	.word	0x0800751d
 8007394:	08007559 	.word	0x08007559
 8007398:	08007581 	.word	0x08007581
 800739c:	080075bf 	.word	0x080075bf
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
	                   (uint8_t *)phost->Control.setup.d8 , 
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f103 0110 	add.w	r1, r3, #16
    USBH_CtlSendSetup     (phost, 
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	795b      	ldrb	r3, [r3, #5]
 80073aa:	461a      	mov	r2, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f943 	bl	8007638 <USBH_CtlSendSetup>
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	761a      	strb	r2, [r3, #24]
    break; 
 80073b8:	e135      	b.n	8007626 <USBH_HandleControl+0x2d6>
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	795b      	ldrb	r3, [r3, #5]
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 f8c1 	bl	8008548 <USBH_LL_GetURBState>
 80073c6:	4603      	mov	r3, r0
 80073c8:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d11e      	bne.n	800740e <USBH_HandleControl+0xbe>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	7c1b      	ldrb	r3, [r3, #16]
 80073d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073d8:	737b      	strb	r3, [r7, #13]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	8adb      	ldrh	r3, [r3, #22]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <USBH_HandleControl+0xa8>
      {        
        if (direction == USB_D2H)
 80073e2:	7b7b      	ldrb	r3, [r7, #13]
 80073e4:	2b80      	cmp	r3, #128	; 0x80
 80073e6:	d103      	bne.n	80073f0 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2203      	movs	r2, #3
 80073ec:	761a      	strb	r2, [r3, #24]
      phost->Control.state = CTRL_ERROR;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }    
    break;
 80073ee:	e111      	b.n	8007614 <USBH_HandleControl+0x2c4>
          phost->Control.state = CTRL_DATA_OUT;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2205      	movs	r2, #5
 80073f4:	761a      	strb	r2, [r3, #24]
    break;
 80073f6:	e10d      	b.n	8007614 <USBH_HandleControl+0x2c4>
        if (direction == USB_D2H)
 80073f8:	7b7b      	ldrb	r3, [r7, #13]
 80073fa:	2b80      	cmp	r3, #128	; 0x80
 80073fc:	d103      	bne.n	8007406 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2209      	movs	r2, #9
 8007402:	761a      	strb	r2, [r3, #24]
    break;
 8007404:	e106      	b.n	8007614 <USBH_HandleControl+0x2c4>
          phost->Control.state = CTRL_STATUS_IN;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2207      	movs	r2, #7
 800740a:	761a      	strb	r2, [r3, #24]
    break;
 800740c:	e102      	b.n	8007614 <USBH_HandleControl+0x2c4>
    else if(URB_Status == USBH_URB_ERROR)
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	2b04      	cmp	r3, #4
 8007412:	f040 80ff 	bne.w	8007614 <USBH_HandleControl+0x2c4>
      phost->Control.state = CTRL_ERROR;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	220b      	movs	r2, #11
 800741a:	761a      	strb	r2, [r3, #24]
    break;
 800741c:	e0fa      	b.n	8007614 <USBH_HandleControl+0x2c4>
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
     phost->Control.timer = phost->Timer;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007424:	b29a      	uxth	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6899      	ldr	r1, [r3, #8]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	899a      	ldrh	r2, [r3, #12]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	791b      	ldrb	r3, [r3, #4]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f93d 	bl	80076b6 <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.pipe_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2204      	movs	r2, #4
 8007440:	761a      	strb	r2, [r3, #24]
    break;    
 8007442:	e0f0      	b.n	8007626 <USBH_HandleControl+0x2d6>
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	791b      	ldrb	r3, [r3, #4]
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f001 f87c 	bl	8008548 <USBH_LL_GetURBState>
 8007450:	4603      	mov	r3, r0
 8007452:	73bb      	strb	r3, [r7, #14]
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d102      	bne.n	8007460 <USBH_HandleControl+0x110>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2209      	movs	r2, #9
 800745e:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 8007460:	7bbb      	ldrb	r3, [r7, #14]
 8007462:	2b05      	cmp	r3, #5
 8007464:	d102      	bne.n	800746c <USBH_HandleControl+0x11c>
    { 
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007466:	2303      	movs	r3, #3
 8007468:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_ERROR;  
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 800746a:	e0d5      	b.n	8007618 <USBH_HandleControl+0x2c8>
    else if (URB_Status == USBH_URB_ERROR)
 800746c:	7bbb      	ldrb	r3, [r7, #14]
 800746e:	2b04      	cmp	r3, #4
 8007470:	f040 80d2 	bne.w	8007618 <USBH_HandleControl+0x2c8>
      phost->Control.state = CTRL_ERROR;  
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	220b      	movs	r2, #11
 8007478:	761a      	strb	r2, [r3, #24]
    break;
 800747a:	e0cd      	b.n	8007618 <USBH_HandleControl+0x2c8>
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6899      	ldr	r1, [r3, #8]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	899a      	ldrh	r2, [r3, #12]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	7958      	ldrb	r0, [r3, #5]
 8007488:	2301      	movs	r3, #1
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	4603      	mov	r3, r0
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f8ec 	bl	800766c <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800749a:	b29a      	uxth	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2206      	movs	r2, #6
 80074a4:	761a      	strb	r2, [r3, #24]
    break;
 80074a6:	e0be      	b.n	8007626 <USBH_HandleControl+0x2d6>
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	795b      	ldrb	r3, [r3, #5]
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f001 f84a 	bl	8008548 <USBH_LL_GetURBState>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73bb      	strb	r3, [r7, #14]
    
    if  (URB_Status == USBH_URB_DONE)
 80074b8:	7bbb      	ldrb	r3, [r7, #14]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d103      	bne.n	80074c6 <USBH_HandleControl+0x176>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2207      	movs	r2, #7
 80074c2:	761a      	strb	r2, [r3, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    } 
    break;
 80074c4:	e0aa      	b.n	800761c <USBH_HandleControl+0x2cc>
    else if  (URB_Status == USBH_URB_STALL) 
 80074c6:	7bbb      	ldrb	r3, [r7, #14]
 80074c8:	2b05      	cmp	r3, #5
 80074ca:	d105      	bne.n	80074d8 <USBH_HandleControl+0x188>
      phost->Control.state = CTRL_STALLED; 
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	220c      	movs	r2, #12
 80074d0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80074d2:	2303      	movs	r3, #3
 80074d4:	73fb      	strb	r3, [r7, #15]
    break;
 80074d6:	e0a1      	b.n	800761c <USBH_HandleControl+0x2cc>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d103      	bne.n	80074e6 <USBH_HandleControl+0x196>
      phost->Control.state = CTRL_DATA_OUT;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2205      	movs	r2, #5
 80074e2:	761a      	strb	r2, [r3, #24]
    break;
 80074e4:	e09a      	b.n	800761c <USBH_HandleControl+0x2cc>
    else if (URB_Status == USBH_URB_ERROR)
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	f040 8097 	bne.w	800761c <USBH_HandleControl+0x2cc>
      phost->Control.state = CTRL_ERROR;  
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	220b      	movs	r2, #11
 80074f2:	761a      	strb	r2, [r3, #24]
      status = USBH_FAIL;    
 80074f4:	2302      	movs	r3, #2
 80074f6:	73fb      	strb	r3, [r7, #15]
    break;
 80074f8:	e090      	b.n	800761c <USBH_HandleControl+0x2cc>
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	791b      	ldrb	r3, [r3, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	2100      	movs	r1, #0
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f8d7 	bl	80076b6 <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.pipe_in);
    phost->Control.timer = phost->Timer;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800750e:	b29a      	uxth	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2208      	movs	r2, #8
 8007518:	761a      	strb	r2, [r3, #24]
    
    break;
 800751a:	e084      	b.n	8007626 <USBH_HandleControl+0x2d6>
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	791b      	ldrb	r3, [r3, #4]
 8007520:	4619      	mov	r1, r3
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f001 f810 	bl	8008548 <USBH_LL_GetURBState>
 8007528:	4603      	mov	r3, r0
 800752a:	73bb      	strb	r3, [r7, #14]
    
    if  ( URB_Status == USBH_URB_DONE)
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d105      	bne.n	800753e <USBH_HandleControl+0x1ee>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	220d      	movs	r2, #13
 8007536:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	73fb      	strb	r3, [r7, #15]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 800753c:	e070      	b.n	8007620 <USBH_HandleControl+0x2d0>
    else if (URB_Status == USBH_URB_ERROR)
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	2b04      	cmp	r3, #4
 8007542:	d103      	bne.n	800754c <USBH_HandleControl+0x1fc>
      phost->Control.state = CTRL_ERROR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	220b      	movs	r2, #11
 8007548:	761a      	strb	r2, [r3, #24]
    break;
 800754a:	e069      	b.n	8007620 <USBH_HandleControl+0x2d0>
     else if(URB_Status == USBH_URB_STALL)
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	2b05      	cmp	r3, #5
 8007550:	d166      	bne.n	8007620 <USBH_HandleControl+0x2d0>
      status = USBH_NOT_SUPPORTED;
 8007552:	2303      	movs	r3, #3
 8007554:	73fb      	strb	r3, [r7, #15]
    break;
 8007556:	e063      	b.n	8007620 <USBH_HandleControl+0x2d0>
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	795a      	ldrb	r2, [r3, #5]
 800755c:	2301      	movs	r3, #1
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	4613      	mov	r3, r2
 8007562:	2200      	movs	r2, #0
 8007564:	2100      	movs	r1, #0
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f880 	bl	800766c <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007572:	b29a      	uxth	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	220a      	movs	r2, #10
 800757c:	761a      	strb	r2, [r3, #24]
    break;
 800757e:	e052      	b.n	8007626 <USBH_HandleControl+0x2d6>
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	795b      	ldrb	r3, [r3, #5]
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 ffde 	bl	8008548 <USBH_LL_GetURBState>
 800758c:	4603      	mov	r3, r0
 800758e:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d105      	bne.n	80075a2 <USBH_HandleControl+0x252>
    { 
      status = USBH_OK;      
 8007596:	2300      	movs	r3, #0
 8007598:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE; 
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	220d      	movs	r2, #13
 800759e:	761a      	strb	r2, [r3, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 80075a0:	e040      	b.n	8007624 <USBH_HandleControl+0x2d4>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d103      	bne.n	80075b0 <USBH_HandleControl+0x260>
      phost->Control.state = CTRL_STATUS_OUT;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2209      	movs	r2, #9
 80075ac:	761a      	strb	r2, [r3, #24]
    break;
 80075ae:	e039      	b.n	8007624 <USBH_HandleControl+0x2d4>
    else if (URB_Status == USBH_URB_ERROR)
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d136      	bne.n	8007624 <USBH_HandleControl+0x2d4>
      phost->Control.state = CTRL_ERROR; 
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	220b      	movs	r2, #11
 80075ba:	761a      	strb	r2, [r3, #24]
    break;
 80075bc:	e032      	b.n	8007624 <USBH_HandleControl+0x2d4>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	7e5b      	ldrb	r3, [r3, #25]
 80075c2:	3301      	adds	r3, #1
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	765a      	strb	r2, [r3, #25]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	7e5b      	ldrb	r3, [r3, #25]
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d809      	bhi.n	80075e6 <USBH_HandleControl+0x296>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fe6a 	bl	80082ac <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80075e4:	e01f      	b.n	8007626 <USBH_HandleControl+0x2d6>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80075ec:	2106      	movs	r1, #6
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	4798      	blx	r3
      phost->Control.errorcount = 0;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	765a      	strb	r2, [r3, #25]
      USBH_ErrLog("Control error");
 80075f8:	480d      	ldr	r0, [pc, #52]	; (8007630 <USBH_HandleControl+0x2e0>)
 80075fa:	f001 f917 	bl	800882c <iprintf>
 80075fe:	480d      	ldr	r0, [pc, #52]	; (8007634 <USBH_HandleControl+0x2e4>)
 8007600:	f001 f914 	bl	800882c <iprintf>
 8007604:	200a      	movs	r0, #10
 8007606:	f001 f929 	bl	800885c <putchar>
      status = USBH_FAIL;
 800760a:	2302      	movs	r3, #2
 800760c:	73fb      	strb	r3, [r7, #15]
    break;
 800760e:	e00a      	b.n	8007626 <USBH_HandleControl+0x2d6>
    
  default:
    break;
 8007610:	bf00      	nop
 8007612:	e008      	b.n	8007626 <USBH_HandleControl+0x2d6>
    break;
 8007614:	bf00      	nop
 8007616:	e006      	b.n	8007626 <USBH_HandleControl+0x2d6>
    break;
 8007618:	bf00      	nop
 800761a:	e004      	b.n	8007626 <USBH_HandleControl+0x2d6>
    break;
 800761c:	bf00      	nop
 800761e:	e002      	b.n	8007626 <USBH_HandleControl+0x2d6>
    break;
 8007620:	bf00      	nop
 8007622:	e000      	b.n	8007626 <USBH_HandleControl+0x2d6>
    break;
 8007624:	bf00      	nop
  }
  return status;
 8007626:	7bfb      	ldrb	r3, [r7, #15]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	0800993c 	.word	0x0800993c
 8007634:	08009944 	.word	0x08009944

08007638 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b088      	sub	sp, #32
 800763c:	af04      	add	r7, sp, #16
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	4613      	mov	r3, r2
 8007644:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007646:	79f9      	ldrb	r1, [r7, #7]
 8007648:	2300      	movs	r3, #0
 800764a:	9303      	str	r3, [sp, #12]
 800764c:	2308      	movs	r3, #8
 800764e:	9302      	str	r3, [sp, #8]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	9301      	str	r3, [sp, #4]
 8007654:	2300      	movs	r3, #0
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	2300      	movs	r3, #0
 800765a:	2200      	movs	r2, #0
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 ff2b 	bl	80084b8 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af04      	add	r7, sp, #16
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	4611      	mov	r1, r2
 8007678:	461a      	mov	r2, r3
 800767a:	460b      	mov	r3, r1
 800767c:	80fb      	strh	r3, [r7, #6]
 800767e:	4613      	mov	r3, r2
 8007680:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <USBH_CtlSendData+0x24>
  {
    do_ping = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	763b      	strb	r3, [r7, #24]
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007690:	7979      	ldrb	r1, [r7, #5]
 8007692:	7e3b      	ldrb	r3, [r7, #24]
 8007694:	9303      	str	r3, [sp, #12]
 8007696:	88fb      	ldrh	r3, [r7, #6]
 8007698:	9302      	str	r3, [sp, #8]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	2301      	movs	r3, #1
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	2300      	movs	r3, #0
 80076a4:	2200      	movs	r2, #0
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 ff06 	bl	80084b8 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b088      	sub	sp, #32
 80076ba:	af04      	add	r7, sp, #16
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	4611      	mov	r1, r2
 80076c2:	461a      	mov	r2, r3
 80076c4:	460b      	mov	r3, r1
 80076c6:	80fb      	strh	r3, [r7, #6]
 80076c8:	4613      	mov	r3, r2
 80076ca:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80076cc:	7979      	ldrb	r1, [r7, #5]
 80076ce:	2300      	movs	r3, #0
 80076d0:	9303      	str	r3, [sp, #12]
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	9302      	str	r3, [sp, #8]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	2301      	movs	r3, #1
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	2300      	movs	r3, #0
 80076e0:	2201      	movs	r2, #1
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 fee8 	bl	80084b8 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
 80076e8:	2300      	movs	r3, #0
  
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t pipe_num)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b088      	sub	sp, #32
 80076f6:	af04      	add	r7, sp, #16
 80076f8:	60f8      	str	r0, [r7, #12]
 80076fa:	60b9      	str	r1, [r7, #8]
 80076fc:	4611      	mov	r1, r2
 80076fe:	461a      	mov	r2, r3
 8007700:	460b      	mov	r3, r1
 8007702:	71fb      	strb	r3, [r7, #7]
 8007704:	4613      	mov	r3, r2
 8007706:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007708:	79fb      	ldrb	r3, [r7, #7]
 800770a:	b29b      	uxth	r3, r3
 800770c:	79b9      	ldrb	r1, [r7, #6]
 800770e:	2200      	movs	r2, #0
 8007710:	9203      	str	r2, [sp, #12]
 8007712:	9302      	str	r3, [sp, #8]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	2301      	movs	r3, #1
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	2303      	movs	r3, #3
 800771e:	2201      	movs	r2, #1
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 fec9 	bl	80084b8 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0); 
  
  return USBH_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af04      	add	r7, sp, #16
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	4608      	mov	r0, r1
 800773a:	4611      	mov	r1, r2
 800773c:	461a      	mov	r2, r3
 800773e:	4603      	mov	r3, r0
 8007740:	70fb      	strb	r3, [r7, #3]
 8007742:	460b      	mov	r3, r1
 8007744:	70bb      	strb	r3, [r7, #2]
 8007746:	4613      	mov	r3, r2
 8007748:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800774a:	7878      	ldrb	r0, [r7, #1]
 800774c:	78ba      	ldrb	r2, [r7, #2]
 800774e:	78f9      	ldrb	r1, [r7, #3]
 8007750:	8b3b      	ldrh	r3, [r7, #24]
 8007752:	9302      	str	r3, [sp, #8]
 8007754:	7d3b      	ldrb	r3, [r7, #20]
 8007756:	9301      	str	r3, [sp, #4]
 8007758:	7c3b      	ldrb	r3, [r7, #16]
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	4603      	mov	r3, r0
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fe2e 	bl	80083c0 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  
  return USBH_OK; 
 8007764:	2300      	movs	r3, #0

}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fe64 	bl	800844c <USBH_LL_ClosePipe>
  
  return USBH_OK; 
 8007784:	2300      	movs	r3, #0

}
 8007786:	4618      	mov	r0, r3
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b084      	sub	sp, #16
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;
  
  pipe =  USBH_GetFreePipe(phost);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f832 	bl	8007804 <USBH_GetFreePipe>
 80077a0:	4603      	mov	r3, r0
 80077a2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFF)
 80077a4:	89fb      	ldrh	r3, [r7, #14]
 80077a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d008      	beq.n	80077c0 <USBH_AllocPipe+0x32>
  {
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 80077ae:	89fa      	ldrh	r2, [r7, #14]
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077b6:	4619      	mov	r1, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	32e0      	adds	r2, #224	; 0xe0
 80077bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return pipe;
 80077c0:	89fb      	ldrh	r3, [r7, #14]
 80077c2:	b2db      	uxtb	r3, r3
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	460b      	mov	r3, r1
 80077d6:	70fb      	strb	r3, [r7, #3]
   if(idx < 11)
 80077d8:	78fb      	ldrb	r3, [r7, #3]
 80077da:	2b0a      	cmp	r3, #10
 80077dc:	d80b      	bhi.n	80077f6 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFF;
 80077de:	78fa      	ldrb	r2, [r7, #3]
 80077e0:	78f9      	ldrb	r1, [r7, #3]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	31e0      	adds	r1, #224	; 0xe0
 80077e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80077ea:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	32e0      	adds	r2, #224	; 0xe0
 80077f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	73fb      	strb	r3, [r7, #15]
  
  for (idx = 0 ; idx < 11 ; idx++)
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
 8007814:	e00e      	b.n	8007834 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 8007816:	7bfa      	ldrb	r2, [r7, #15]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	32e0      	adds	r2, #224	; 0xe0
 800781c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d102      	bne.n	800782e <USBH_GetFreePipe+0x2a>
	{
	   return idx;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	b29b      	uxth	r3, r3
 800782c:	e007      	b.n	800783e <USBH_GetFreePipe+0x3a>
  for (idx = 0 ; idx < 11 ; idx++)
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	3301      	adds	r3, #1
 8007832:	73fb      	strb	r3, [r7, #15]
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	2b0a      	cmp	r3, #10
 8007838:	d9ed      	bls.n	8007816 <USBH_GetFreePipe+0x12>
	} 
  }
  return 0xFFFF;
 800783a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <reverse>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

uint8_t reverse(uint8_t b)
{
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	4603      	mov	r3, r0
 8007852:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 8007854:	79fb      	ldrb	r3, [r7, #7]
 8007856:	091b      	lsrs	r3, r3, #4
 8007858:	b2db      	uxtb	r3, r3
 800785a:	b25a      	sxtb	r2, r3
 800785c:	79fb      	ldrb	r3, [r7, #7]
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	b25b      	sxtb	r3, r3
 8007862:	4313      	orrs	r3, r2
 8007864:	b25b      	sxtb	r3, r3
 8007866:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 8007868:	79fb      	ldrb	r3, [r7, #7]
 800786a:	109b      	asrs	r3, r3, #2
 800786c:	b25b      	sxtb	r3, r3
 800786e:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8007872:	b25a      	sxtb	r2, r3
 8007874:	79fb      	ldrb	r3, [r7, #7]
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	b25b      	sxtb	r3, r3
 800787a:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 800787e:	b25b      	sxtb	r3, r3
 8007880:	4313      	orrs	r3, r2
 8007882:	b25b      	sxtb	r3, r3
 8007884:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 8007886:	79fb      	ldrb	r3, [r7, #7]
 8007888:	105b      	asrs	r3, r3, #1
 800788a:	b25b      	sxtb	r3, r3
 800788c:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8007890:	b25a      	sxtb	r2, r3
 8007892:	79fb      	ldrb	r3, [r7, #7]
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	b25b      	sxtb	r3, r3
 8007898:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 800789c:	b25b      	sxtb	r3, r3
 800789e:	4313      	orrs	r3, r2
 80078a0:	b25b      	sxtb	r3, r3
 80078a2:	71fb      	strb	r3, [r7, #7]
   return b;
 80078a4:	79fb      	ldrb	r3, [r7, #7]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
	...

080078b4 <SetN64DataInputMode>:

void SetN64DataInputMode()
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0
	// port A8 to input mode
	GPIOA->MODER &= ~(1 << 17);
 80078b8:	4a08      	ldr	r2, [pc, #32]	; (80078dc <SetN64DataInputMode+0x28>)
 80078ba:	4b08      	ldr	r3, [pc, #32]	; (80078dc <SetN64DataInputMode+0x28>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80078c2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1 << 16);
 80078c4:	4a05      	ldr	r2, [pc, #20]	; (80078dc <SetN64DataInputMode+0x28>)
 80078c6:	4b05      	ldr	r3, [pc, #20]	; (80078dc <SetN64DataInputMode+0x28>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ce:	6013      	str	r3, [r2, #0]
}
 80078d0:	bf00      	nop
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	40020000 	.word	0x40020000

080078e0 <SetN64DataOutputMode>:

void SetN64DataOutputMode()
{
 80078e0:	b480      	push	{r7}
 80078e2:	af00      	add	r7, sp, #0
	// port A8 to output mode
	GPIOA->MODER &= ~(1 << 17);
 80078e4:	4a08      	ldr	r2, [pc, #32]	; (8007908 <SetN64DataOutputMode+0x28>)
 80078e6:	4b08      	ldr	r3, [pc, #32]	; (8007908 <SetN64DataOutputMode+0x28>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80078ee:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1 << 16);
 80078f0:	4a05      	ldr	r2, [pc, #20]	; (8007908 <SetN64DataOutputMode+0x28>)
 80078f2:	4b05      	ldr	r3, [pc, #20]	; (8007908 <SetN64DataOutputMode+0x28>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078fa:	6013      	str	r3, [r2, #0]
}
 80078fc:	bf00      	nop
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	40020000 	.word	0x40020000

0800790c <write_1>:

void write_1()
{
 800790c:	b580      	push	{r7, lr}
 800790e:	af00      	add	r7, sp, #0
	GPIOA->BSRR = (1 << 24);
 8007910:	4b07      	ldr	r3, [pc, #28]	; (8007930 <write_1+0x24>)
 8007912:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007916:	619a      	str	r2, [r3, #24]
	my_wait_us_asm(1);
 8007918:	2001      	movs	r0, #1
 800791a:	f7f8 fc79 	bl	8000210 <my_wait_us_asm>
	GPIOA->BSRR = (1 << 8);
 800791e:	4b04      	ldr	r3, [pc, #16]	; (8007930 <write_1+0x24>)
 8007920:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007924:	619a      	str	r2, [r3, #24]
    my_wait_us_asm(3);
 8007926:	2003      	movs	r0, #3
 8007928:	f7f8 fc72 	bl	8000210 <my_wait_us_asm>
}
 800792c:	bf00      	nop
 800792e:	bd80      	pop	{r7, pc}
 8007930:	40020000 	.word	0x40020000

08007934 <write_0>:

void write_0()
{
 8007934:	b580      	push	{r7, lr}
 8007936:	af00      	add	r7, sp, #0
	GPIOA->BSRR = (1 << 24);
 8007938:	4b07      	ldr	r3, [pc, #28]	; (8007958 <write_0+0x24>)
 800793a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800793e:	619a      	str	r2, [r3, #24]
	my_wait_us_asm(3);
 8007940:	2003      	movs	r0, #3
 8007942:	f7f8 fc65 	bl	8000210 <my_wait_us_asm>
	GPIOA->BSRR = (1 << 8);
 8007946:	4b04      	ldr	r3, [pc, #16]	; (8007958 <write_0+0x24>)
 8007948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800794c:	619a      	str	r2, [r3, #24]
    my_wait_us_asm(1);
 800794e:	2001      	movs	r0, #1
 8007950:	f7f8 fc5e 	bl	8000210 <my_wait_us_asm>
}
 8007954:	bf00      	nop
 8007956:	bd80      	pop	{r7, pc}
 8007958:	40020000 	.word	0x40020000

0800795c <SendStop>:

void SendStop()
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
	GPIOA->BSRR = (1 << 24);
 8007960:	4b06      	ldr	r3, [pc, #24]	; (800797c <SendStop+0x20>)
 8007962:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007966:	619a      	str	r2, [r3, #24]
	my_wait_us_asm(1);
 8007968:	2001      	movs	r0, #1
 800796a:	f7f8 fc51 	bl	8000210 <my_wait_us_asm>
	GPIOA->BSRR = (1 << 8);
 800796e:	4b03      	ldr	r3, [pc, #12]	; (800797c <SendStop+0x20>)
 8007970:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007974:	619a      	str	r2, [r3, #24]
}
 8007976:	bf00      	nop
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	40020000 	.word	0x40020000

08007980 <SendByte>:

// send a byte from LSB to MSB (proper serialization)
void SendByte(unsigned char b)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	4603      	mov	r3, r0
 8007988:	71fb      	strb	r3, [r7, #7]
    for(int i = 0;i < 8;i++) // send all 8 bits, one at a time
 800798a:	2300      	movs	r3, #0
 800798c:	60fb      	str	r3, [r7, #12]
 800798e:	e00f      	b.n	80079b0 <SendByte+0x30>
    {
        if((b >> i) & 1)
 8007990:	79fa      	ldrb	r2, [r7, #7]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	fa42 f303 	asr.w	r3, r2, r3
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <SendByte+0x26>
        {
            write_1();
 80079a0:	f7ff ffb4 	bl	800790c <write_1>
 80079a4:	e001      	b.n	80079aa <SendByte+0x2a>
        }
        else
        {
            write_0();
 80079a6:	f7ff ffc5 	bl	8007934 <write_0>
    for(int i = 0;i < 8;i++) // send all 8 bits, one at a time
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3301      	adds	r3, #1
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b07      	cmp	r3, #7
 80079b4:	ddec      	ble.n	8007990 <SendByte+0x10>
        }
    }
}
 80079b6:	bf00      	nop
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <SendIdentity>:

void SendIdentity()
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	af00      	add	r7, sp, #0
    // reply 0x05, 0x00, 0x02
    SendByte(0x05);
 80079c2:	2005      	movs	r0, #5
 80079c4:	f7ff ffdc 	bl	8007980 <SendByte>
    SendByte(0x00);
 80079c8:	2000      	movs	r0, #0
 80079ca:	f7ff ffd9 	bl	8007980 <SendByte>
    SendByte(0x02);
 80079ce:	2002      	movs	r0, #2
 80079d0:	f7ff ffd6 	bl	8007980 <SendByte>
    SendStop();
 80079d4:	f7ff ffc2 	bl	800795c <SendStop>
}
 80079d8:	bf00      	nop
 80079da:	bd80      	pop	{r7, pc}

080079dc <SendControllerData>:

void SendControllerData()
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
    unsigned long data = *(unsigned long*)&n64_data;
 80079e2:	4b11      	ldr	r3, [pc, #68]	; (8007a28 <SendControllerData+0x4c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60bb      	str	r3, [r7, #8]
    unsigned int size = sizeof(data) * 8; // should be 4 bytes * 8 = 32 bits
 80079e8:	2320      	movs	r3, #32
 80079ea:	607b      	str	r3, [r7, #4]

    for(unsigned int i = 0;i < size;i++)
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	e00f      	b.n	8007a12 <SendControllerData+0x36>
    {
        if((data >> i) & 1)
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	fa22 f303 	lsr.w	r3, r2, r3
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <SendControllerData+0x2c>
        {
            write_1();
 8007a02:	f7ff ff83 	bl	800790c <write_1>
 8007a06:	e001      	b.n	8007a0c <SendControllerData+0x30>
        }
        else
        {
            write_0();
 8007a08:	f7ff ff94 	bl	8007934 <write_0>
    for(unsigned int i = 0;i < size;i++)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	60fb      	str	r3, [r7, #12]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d3eb      	bcc.n	80079f2 <SendControllerData+0x16>
        }
    }

    SendStop();
 8007a1a:	f7ff ff9f 	bl	800795c <SendStop>
}
 8007a1e:	bf00      	nop
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000194 	.word	0x20000194

08007a2c <GetMiddleOfPulse>:

// 0 is 3 microseconds low followed by 1 microsecond high
// 1 is 1 microsecond low followed by 3 microseconds high
unsigned int GetMiddleOfPulse()
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
    // wait for line to go high
    while(1)
    {
        if(GPIOA->IDR & 0x0100) break;
 8007a30:	4b0d      	ldr	r3, [pc, #52]	; (8007a68 <GetMiddleOfPulse+0x3c>)
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d0f9      	beq.n	8007a30 <GetMiddleOfPulse+0x4>
    }

    // wait for line to go low
    while(1)
    {
        if(!(GPIOA->IDR & 0x0100)) break;
 8007a3c:	4b0a      	ldr	r3, [pc, #40]	; (8007a68 <GetMiddleOfPulse+0x3c>)
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d000      	beq.n	8007a4a <GetMiddleOfPulse+0x1e>
 8007a48:	e7f8      	b.n	8007a3c <GetMiddleOfPulse+0x10>
 8007a4a:	bf00      	nop
    }

    // now we have the falling edge

    // wait 2 microseconds to be in the middle of the pulse, and read. high --> 1.  low --> 0.
    my_wait_us_asm(2);
 8007a4c:	2002      	movs	r0, #2
 8007a4e:	f7f8 fbdf 	bl	8000210 <my_wait_us_asm>

    return (GPIOA->IDR & 0x0100) ? 1U : 0U;
 8007a52:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <GetMiddleOfPulse+0x3c>)
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <GetMiddleOfPulse+0x36>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e000      	b.n	8007a64 <GetMiddleOfPulse+0x38>
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	40020000 	.word	0x40020000

08007a6c <readCommand>:

// continuously read bits until at least 9 are read, confirm valid command, return without stop bit
unsigned int readCommand()
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
	// we are already at the first falling edge
	// get middle of first pulse, 2us later
	my_wait_us_asm(2);
 8007a72:	2002      	movs	r0, #2
 8007a74:	f7f8 fbcc 	bl	8000210 <my_wait_us_asm>
    unsigned int command = (GPIOA->IDR & 0x0100) ? 1U : 0U, bits_read = 1;
 8007a78:	4b11      	ldr	r3, [pc, #68]	; (8007ac0 <readCommand+0x54>)
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <readCommand+0x1c>
 8007a84:	2301      	movs	r3, #1
 8007a86:	e000      	b.n	8007a8a <readCommand+0x1e>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	607b      	str	r3, [r7, #4]
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	603b      	str	r3, [r7, #0]

    while(1) // read at least 9 bits (2 bytes + stop bit)
    {
        command = command << 1; // make room for the new bit
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	607b      	str	r3, [r7, #4]
        command += GetMiddleOfPulse();
 8007a96:	f7ff ffc9 	bl	8007a2c <GetMiddleOfPulse>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	607b      	str	r3, [r7, #4]

        bits_read++;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	603b      	str	r3, [r7, #0]

        if(bits_read >= 9) // only consider when at least a whole command's length has been read
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2b08      	cmp	r3, #8
 8007aac:	d9f0      	bls.n	8007a90 <readCommand+0x24>
        {
        	command = command >> 1; // get rid of the stop bit (which is always a 1)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	085b      	lsrs	r3, r3, #1
 8007ab2:	607b      	str	r3, [r7, #4]
        	return command;
 8007ab4:	687b      	ldr	r3, [r7, #4]
        }
    }
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	40020000 	.word	0x40020000

08007ac4 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  memset(&n64_data,0,4); // clear controller state
 8007ac8:	2204      	movs	r2, #4
 8007aca:	2100      	movs	r1, #0
 8007acc:	4807      	ldr	r0, [pc, #28]	; (8007aec <main+0x28>)
 8007ace:	f000 fdf9 	bl	80086c4 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ad2:	f7f8 fec5 	bl	8000860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ad6:	f000 f80b 	bl	8007af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007ada:	f000 f8cb 	bl	8007c74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8007ade:	f000 f89b 	bl	8007c18 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8007ae2:	f000 fa99 	bl	8008018 <MX_USB_HOST_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8007ae6:	f000 fab3 	bl	8008050 <MX_USB_HOST_Process>
 8007aea:	e7fc      	b.n	8007ae6 <main+0x22>
 8007aec:	20000194 	.word	0x20000194

08007af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) // 168 MHz
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b0ac      	sub	sp, #176	; 0xb0
 8007af4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007af6:	2300      	movs	r3, #0
 8007af8:	60bb      	str	r3, [r7, #8]
 8007afa:	4a43      	ldr	r2, [pc, #268]	; (8007c08 <SystemClock_Config+0x118>)
 8007afc:	4b42      	ldr	r3, [pc, #264]	; (8007c08 <SystemClock_Config+0x118>)
 8007afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b04:	6413      	str	r3, [r2, #64]	; 0x40
 8007b06:	4b40      	ldr	r3, [pc, #256]	; (8007c08 <SystemClock_Config+0x118>)
 8007b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b0e:	60bb      	str	r3, [r7, #8]
 8007b10:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b12:	2300      	movs	r3, #0
 8007b14:	607b      	str	r3, [r7, #4]
 8007b16:	4a3d      	ldr	r2, [pc, #244]	; (8007c0c <SystemClock_Config+0x11c>)
 8007b18:	4b3c      	ldr	r3, [pc, #240]	; (8007c0c <SystemClock_Config+0x11c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	4b3a      	ldr	r3, [pc, #232]	; (8007c0c <SystemClock_Config+0x11c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b2a:	607b      	str	r3, [r7, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007b32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007b40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007b48:	2304      	movs	r3, #4
 8007b4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007b4e:	23a8      	movs	r3, #168	; 0xa8
 8007b50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007b54:	2302      	movs	r3, #2
 8007b56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007b5a:	2307      	movs	r3, #7
 8007b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007b60:	2302      	movs	r3, #2
 8007b62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b66:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fb fbac 	bl	80032c8 <HAL_RCC_OscConfig>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d004      	beq.n	8007b80 <SystemClock_Config+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007b76:	f240 112f 	movw	r1, #303	; 0x12f
 8007b7a:	4825      	ldr	r0, [pc, #148]	; (8007c10 <SystemClock_Config+0x120>)
 8007b7c:	f000 f950 	bl	8007e20 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b80:	230f      	movs	r3, #15
 8007b82:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b84:	2302      	movs	r3, #2
 8007b86:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007b8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007b90:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b96:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007b98:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007b9c:	2105      	movs	r1, #5
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fa fd9c 	bl	80026dc <HAL_RCC_ClockConfig>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d004      	beq.n	8007bb4 <SystemClock_Config+0xc4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007baa:	f240 113d 	movw	r1, #317	; 0x13d
 8007bae:	4818      	ldr	r0, [pc, #96]	; (8007c10 <SystemClock_Config+0x120>)
 8007bb0:	f000 f936 	bl	8007e20 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007bb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bb8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007bbe:	f107 030c 	add.w	r3, r7, #12
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fa fea0 	bl	8002908 <HAL_RCCEx_PeriphCLKConfig>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d004      	beq.n	8007bd8 <SystemClock_Config+0xe8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007bce:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007bd2:	480f      	ldr	r0, [pc, #60]	; (8007c10 <SystemClock_Config+0x120>)
 8007bd4:	f000 f924 	bl	8007e20 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8007bd8:	f7fa fe62 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	4b0d      	ldr	r3, [pc, #52]	; (8007c14 <SystemClock_Config+0x124>)
 8007be0:	fba3 2302 	umull	r2, r3, r3, r2
 8007be4:	099b      	lsrs	r3, r3, #6
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7f8 ffcd 	bl	8000b86 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8007bec:	2004      	movs	r0, #4
 8007bee:	f7f8 ffd7 	bl	8000ba0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
  HAL_NVIC_SetPriority(SysTick_IRQn, 1, 0);
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfa:	f7f8 ff9a 	bl	8000b32 <HAL_NVIC_SetPriority>
}
 8007bfe:	bf00      	nop
 8007c00:	37b0      	adds	r7, #176	; 0xb0
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	40023800 	.word	0x40023800
 8007c0c:	40007000 	.word	0x40007000
 8007c10:	08009954 	.word	0x08009954
 8007c14:	10624dd3 	.word	0x10624dd3

08007c18 <MX_USART2_UART_Init>:
//  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
//}

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8007c1c:	4b12      	ldr	r3, [pc, #72]	; (8007c68 <MX_USART2_UART_Init+0x50>)
 8007c1e:	4a13      	ldr	r2, [pc, #76]	; (8007c6c <MX_USART2_UART_Init+0x54>)
 8007c20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007c22:	4b11      	ldr	r3, [pc, #68]	; (8007c68 <MX_USART2_UART_Init+0x50>)
 8007c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007c28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007c2a:	4b0f      	ldr	r3, [pc, #60]	; (8007c68 <MX_USART2_UART_Init+0x50>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007c30:	4b0d      	ldr	r3, [pc, #52]	; (8007c68 <MX_USART2_UART_Init+0x50>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007c36:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <MX_USART2_UART_Init+0x50>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007c3c:	4b0a      	ldr	r3, [pc, #40]	; (8007c68 <MX_USART2_UART_Init+0x50>)
 8007c3e:	220c      	movs	r2, #12
 8007c40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007c42:	4b09      	ldr	r3, [pc, #36]	; (8007c68 <MX_USART2_UART_Init+0x50>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007c48:	4b07      	ldr	r3, [pc, #28]	; (8007c68 <MX_USART2_UART_Init+0x50>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007c4e:	4806      	ldr	r0, [pc, #24]	; (8007c68 <MX_USART2_UART_Init+0x50>)
 8007c50:	f7fb fd94 	bl	800377c <HAL_UART_Init>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d004      	beq.n	8007c64 <MX_USART2_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007c5a:	f240 119f 	movw	r1, #415	; 0x19f
 8007c5e:	4804      	ldr	r0, [pc, #16]	; (8007c70 <MX_USART2_UART_Init+0x58>)
 8007c60:	f000 f8de 	bl	8007e20 <_Error_Handler>
  }

}
 8007c64:	bf00      	nop
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	20000198 	.word	0x20000198
 8007c6c:	40004400 	.word	0x40004400
 8007c70:	08009954 	.word	0x08009954

08007c74 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
static void MX_GPIO_Init(void)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08a      	sub	sp, #40	; 0x28
 8007c78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	613b      	str	r3, [r7, #16]
 8007c7e:	4a62      	ldr	r2, [pc, #392]	; (8007e08 <MX_GPIO_Init+0x194>)
 8007c80:	4b61      	ldr	r3, [pc, #388]	; (8007e08 <MX_GPIO_Init+0x194>)
 8007c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c84:	f043 0304 	orr.w	r3, r3, #4
 8007c88:	6313      	str	r3, [r2, #48]	; 0x30
 8007c8a:	4b5f      	ldr	r3, [pc, #380]	; (8007e08 <MX_GPIO_Init+0x194>)
 8007c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8e:	f003 0304 	and.w	r3, r3, #4
 8007c92:	613b      	str	r3, [r7, #16]
 8007c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	4a5b      	ldr	r2, [pc, #364]	; (8007e08 <MX_GPIO_Init+0x194>)
 8007c9c:	4b5a      	ldr	r3, [pc, #360]	; (8007e08 <MX_GPIO_Init+0x194>)
 8007c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ca6:	4b58      	ldr	r3, [pc, #352]	; (8007e08 <MX_GPIO_Init+0x194>)
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60bb      	str	r3, [r7, #8]
 8007cb6:	4a54      	ldr	r2, [pc, #336]	; (8007e08 <MX_GPIO_Init+0x194>)
 8007cb8:	4b53      	ldr	r3, [pc, #332]	; (8007e08 <MX_GPIO_Init+0x194>)
 8007cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbc:	f043 0301 	orr.w	r3, r3, #1
 8007cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8007cc2:	4b51      	ldr	r3, [pc, #324]	; (8007e08 <MX_GPIO_Init+0x194>)
 8007cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	60bb      	str	r3, [r7, #8]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cce:	2300      	movs	r3, #0
 8007cd0:	607b      	str	r3, [r7, #4]
 8007cd2:	4a4d      	ldr	r2, [pc, #308]	; (8007e08 <MX_GPIO_Init+0x194>)
 8007cd4:	4b4c      	ldr	r3, [pc, #304]	; (8007e08 <MX_GPIO_Init+0x194>)
 8007cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd8:	f043 0302 	orr.w	r3, r3, #2
 8007cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8007cde:	4b4a      	ldr	r3, [pc, #296]	; (8007e08 <MX_GPIO_Init+0x194>)
 8007ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce2:	f003 0302 	and.w	r3, r3, #2
 8007ce6:	607b      	str	r3, [r7, #4]
 8007ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007cea:	2300      	movs	r3, #0
 8007cec:	603b      	str	r3, [r7, #0]
 8007cee:	4a46      	ldr	r2, [pc, #280]	; (8007e08 <MX_GPIO_Init+0x194>)
 8007cf0:	4b45      	ldr	r3, [pc, #276]	; (8007e08 <MX_GPIO_Init+0x194>)
 8007cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf4:	f043 0308 	orr.w	r3, r3, #8
 8007cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8007cfa:	4b43      	ldr	r3, [pc, #268]	; (8007e08 <MX_GPIO_Init+0x194>)
 8007cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfe:	f003 0308 	and.w	r3, r3, #8
 8007d02:	603b      	str	r3, [r7, #0]
 8007d04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8007d06:	2200      	movs	r2, #0
 8007d08:	2120      	movs	r1, #32
 8007d0a:	4840      	ldr	r0, [pc, #256]	; (8007e0c <MX_GPIO_Init+0x198>)
 8007d0c:	f7f9 f904 	bl	8000f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8007d10:	2200      	movs	r2, #0
 8007d12:	2140      	movs	r1, #64	; 0x40
 8007d14:	483e      	ldr	r0, [pc, #248]	; (8007e10 <MX_GPIO_Init+0x19c>)
 8007d16:	f7f9 f8ff 	bl	8000f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8007d1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007d20:	4b3c      	ldr	r3, [pc, #240]	; (8007e14 <MX_GPIO_Init+0x1a0>)
 8007d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d24:	2300      	movs	r3, #0
 8007d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007d28:	f107 0314 	add.w	r3, r7, #20
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	4838      	ldr	r0, [pc, #224]	; (8007e10 <MX_GPIO_Init+0x19c>)
 8007d30:	f7f8 ff60 	bl	8000bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8007d34:	f641 73bf 	movw	r3, #8127	; 0x1fbf
 8007d38:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d42:	f107 0314 	add.w	r3, r7, #20
 8007d46:	4619      	mov	r1, r3
 8007d48:	4831      	ldr	r0, [pc, #196]	; (8007e10 <MX_GPIO_Init+0x19c>)
 8007d4a:	f7f8 ff53 	bl	8000bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6 
                           PA7 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 8007d4e:	f248 43d3 	movw	r3, #34003	; 0x84d3
 8007d52:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d54:	2303      	movs	r3, #3
 8007d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d5c:	f107 0314 	add.w	r3, r7, #20
 8007d60:	4619      	mov	r1, r3
 8007d62:	482a      	ldr	r0, [pc, #168]	; (8007e0c <MX_GPIO_Init+0x198>)
 8007d64:	f7f8 ff46 	bl	8000bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8007d68:	2320      	movs	r3, #32
 8007d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d70:	2300      	movs	r3, #0
 8007d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d74:	2300      	movs	r3, #0
 8007d76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8007d78:	f107 0314 	add.w	r3, r7, #20
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	4823      	ldr	r0, [pc, #140]	; (8007e0c <MX_GPIO_Init+0x198>)
 8007d80:	f7f8 ff38 	bl	8000bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB12 PB13 PB14 PB15 
                           PB4 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8007d84:	f24f 73f7 	movw	r3, #63479	; 0xf7f7
 8007d88:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d92:	f107 0314 	add.w	r3, r7, #20
 8007d96:	4619      	mov	r1, r3
 8007d98:	481f      	ldr	r0, [pc, #124]	; (8007e18 <MX_GPIO_Init+0x1a4>)
 8007d9a:	f7f8 ff2b 	bl	8000bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007d9e:	2340      	movs	r3, #64	; 0x40
 8007da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007da2:	2301      	movs	r3, #1
 8007da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007daa:	2303      	movs	r3, #3
 8007dac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dae:	f107 0314 	add.w	r3, r7, #20
 8007db2:	4619      	mov	r1, r3
 8007db4:	4816      	ldr	r0, [pc, #88]	; (8007e10 <MX_GPIO_Init+0x19c>)
 8007db6:	f7f8 ff1d 	bl	8000bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : N64_DATA_Pin */
  GPIO_InitStruct.Pin = N64_DATA_Pin;
 8007dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007dc0:	4b14      	ldr	r3, [pc, #80]	; (8007e14 <MX_GPIO_Init+0x1a0>)
 8007dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(N64_DATA_GPIO_Port, &GPIO_InitStruct);
 8007dcc:	f107 0314 	add.w	r3, r7, #20
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	480e      	ldr	r0, [pc, #56]	; (8007e0c <MX_GPIO_Init+0x198>)
 8007dd4:	f7f8 ff0e 	bl	8000bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007dd8:	2304      	movs	r3, #4
 8007dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007de0:	2300      	movs	r3, #0
 8007de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007de4:	f107 0314 	add.w	r3, r7, #20
 8007de8:	4619      	mov	r1, r3
 8007dea:	480c      	ldr	r0, [pc, #48]	; (8007e1c <MX_GPIO_Init+0x1a8>)
 8007dec:	f7f8 ff02 	bl	8000bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8007df0:	2200      	movs	r2, #0
 8007df2:	2100      	movs	r1, #0
 8007df4:	2017      	movs	r0, #23
 8007df6:	f7f8 fe9c 	bl	8000b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007dfa:	2017      	movs	r0, #23
 8007dfc:	f7f8 feb5 	bl	8000b6a <HAL_NVIC_EnableIRQ>

}
 8007e00:	bf00      	nop
 8007e02:	3728      	adds	r7, #40	; 0x28
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	40023800 	.word	0x40023800
 8007e0c:	40020000 	.word	0x40020000
 8007e10:	40020800 	.word	0x40020800
 8007e14:	10210000 	.word	0x10210000
 8007e18:	40020400 	.word	0x40020400
 8007e1c:	40020c00 	.word	0x40020c00

08007e20 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8007e2a:	e7fe      	b.n	8007e2a <_Error_Handler+0xa>

08007e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e32:	2300      	movs	r3, #0
 8007e34:	607b      	str	r3, [r7, #4]
 8007e36:	4a25      	ldr	r2, [pc, #148]	; (8007ecc <HAL_MspInit+0xa0>)
 8007e38:	4b24      	ldr	r3, [pc, #144]	; (8007ecc <HAL_MspInit+0xa0>)
 8007e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e40:	6453      	str	r3, [r2, #68]	; 0x44
 8007e42:	4b22      	ldr	r3, [pc, #136]	; (8007ecc <HAL_MspInit+0xa0>)
 8007e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e4a:	607b      	str	r3, [r7, #4]
 8007e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e4e:	2300      	movs	r3, #0
 8007e50:	603b      	str	r3, [r7, #0]
 8007e52:	4a1e      	ldr	r2, [pc, #120]	; (8007ecc <HAL_MspInit+0xa0>)
 8007e54:	4b1d      	ldr	r3, [pc, #116]	; (8007ecc <HAL_MspInit+0xa0>)
 8007e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8007e5e:	4b1b      	ldr	r3, [pc, #108]	; (8007ecc <HAL_MspInit+0xa0>)
 8007e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e66:	603b      	str	r3, [r7, #0]
 8007e68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007e6a:	2003      	movs	r0, #3
 8007e6c:	f7f8 fe56 	bl	8000b1c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8007e70:	2200      	movs	r2, #0
 8007e72:	2101      	movs	r1, #1
 8007e74:	f06f 000b 	mvn.w	r0, #11
 8007e78:	f7f8 fe5b 	bl	8000b32 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2101      	movs	r1, #1
 8007e80:	f06f 000a 	mvn.w	r0, #10
 8007e84:	f7f8 fe55 	bl	8000b32 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	f06f 0009 	mvn.w	r0, #9
 8007e90:	f7f8 fe4f 	bl	8000b32 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8007e94:	2200      	movs	r2, #0
 8007e96:	2101      	movs	r1, #1
 8007e98:	f06f 0004 	mvn.w	r0, #4
 8007e9c:	f7f8 fe49 	bl	8000b32 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	f06f 0003 	mvn.w	r0, #3
 8007ea8:	f7f8 fe43 	bl	8000b32 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8007eac:	2200      	movs	r2, #0
 8007eae:	2101      	movs	r1, #1
 8007eb0:	f06f 0001 	mvn.w	r0, #1
 8007eb4:	f7f8 fe3d 	bl	8000b32 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 1, 0);
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2101      	movs	r1, #1
 8007ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec0:	f7f8 fe37 	bl	8000b32 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007ec4:	bf00      	nop
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	40023800 	.word	0x40023800

08007ed0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b088      	sub	sp, #32
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a12      	ldr	r2, [pc, #72]	; (8007f28 <HAL_UART_MspInit+0x58>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d11d      	bne.n	8007f1e <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60bb      	str	r3, [r7, #8]
 8007ee6:	4a11      	ldr	r2, [pc, #68]	; (8007f2c <HAL_UART_MspInit+0x5c>)
 8007ee8:	4b10      	ldr	r3, [pc, #64]	; (8007f2c <HAL_UART_MspInit+0x5c>)
 8007eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8007ef2:	4b0e      	ldr	r3, [pc, #56]	; (8007f2c <HAL_UART_MspInit+0x5c>)
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007efa:	60bb      	str	r3, [r7, #8]
 8007efc:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007efe:	230c      	movs	r3, #12
 8007f00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f02:	2302      	movs	r3, #2
 8007f04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f06:	2301      	movs	r3, #1
 8007f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007f0e:	2307      	movs	r3, #7
 8007f10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f12:	f107 030c 	add.w	r3, r7, #12
 8007f16:	4619      	mov	r1, r3
 8007f18:	4805      	ldr	r0, [pc, #20]	; (8007f30 <HAL_UART_MspInit+0x60>)
 8007f1a:	f7f8 fe6b 	bl	8000bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007f1e:	bf00      	nop
 8007f20:	3720      	adds	r7, #32
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	40004400 	.word	0x40004400
 8007f2c:	40023800 	.word	0x40023800
 8007f30:	40020000 	.word	0x40020000

08007f34 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007f38:	f7f8 fce4 	bl	8000904 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8007f3c:	f7f8 fe4c 	bl	8000bd8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007f40:	bf00      	nop
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
	// A8 is n64 data
	// C6 is debug pin
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Read 64 command
	GPIOC->BSRR = (1 << 6); // debug pin C6 high
 8007f4a:	4b12      	ldr	r3, [pc, #72]	; (8007f94 <EXTI9_5_IRQHandler+0x50>)
 8007f4c:	2240      	movs	r2, #64	; 0x40
 8007f4e:	619a      	str	r2, [r3, #24]
	unsigned int cmd = readCommand();
 8007f50:	f7ff fd8c 	bl	8007a6c <readCommand>
 8007f54:	6078      	str	r0, [r7, #4]

	//my_wait_us_asm(2); // wait a small amount of time before replying

	//-------- SEND RESPONSE
	SetN64DataOutputMode();
 8007f56:	f7ff fcc3 	bl	80078e0 <SetN64DataOutputMode>

	switch(cmd)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d007      	beq.n	8007f70 <EXTI9_5_IRQHandler+0x2c>
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d302      	bcc.n	8007f6a <EXTI9_5_IRQHandler+0x26>
 8007f64:	2bff      	cmp	r3, #255	; 0xff
 8007f66:	d000      	beq.n	8007f6a <EXTI9_5_IRQHandler+0x26>
	  case 0x01: // poll for state
		  SendControllerData();
		  break;
	  default:
		  // we do not process the read and write commands (memory pack)
		  break;
 8007f68:	e005      	b.n	8007f76 <EXTI9_5_IRQHandler+0x32>
		  SendIdentity();
 8007f6a:	f7ff fd28 	bl	80079be <SendIdentity>
		  break;
 8007f6e:	e002      	b.n	8007f76 <EXTI9_5_IRQHandler+0x32>
		  SendControllerData();
 8007f70:	f7ff fd34 	bl	80079dc <SendControllerData>
		  break;
 8007f74:	bf00      	nop
	}
	//-------- DONE SENDING RESPOSE

	SetN64DataInputMode();
 8007f76:	f7ff fc9d 	bl	80078b4 <SetN64DataInputMode>

	GPIOC->BSRR = (1 << 22); // debug pin C6 low
 8007f7a:	4b06      	ldr	r3, [pc, #24]	; (8007f94 <EXTI9_5_IRQHandler+0x50>)
 8007f7c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8007f80:	619a      	str	r2, [r3, #24]

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8007f82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007f86:	f7f8 ffe1 	bl	8000f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007f8a:	bf00      	nop
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	40020800 	.word	0x40020800

08007f98 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8007f9c:	4802      	ldr	r0, [pc, #8]	; (8007fa8 <OTG_FS_IRQHandler+0x10>)
 8007f9e:	f7f9 fa81 	bl	80014a4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007fa2:	bf00      	nop
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	200005a4 	.word	0x200005a4

08007fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007fac:	b480      	push	{r7}
 8007fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007fb0:	4a16      	ldr	r2, [pc, #88]	; (800800c <SystemInit+0x60>)
 8007fb2:	4b16      	ldr	r3, [pc, #88]	; (800800c <SystemInit+0x60>)
 8007fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007fc0:	4a13      	ldr	r2, [pc, #76]	; (8008010 <SystemInit+0x64>)
 8007fc2:	4b13      	ldr	r3, [pc, #76]	; (8008010 <SystemInit+0x64>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f043 0301 	orr.w	r3, r3, #1
 8007fca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007fcc:	4b10      	ldr	r3, [pc, #64]	; (8008010 <SystemInit+0x64>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007fd2:	4a0f      	ldr	r2, [pc, #60]	; (8008010 <SystemInit+0x64>)
 8007fd4:	4b0e      	ldr	r3, [pc, #56]	; (8008010 <SystemInit+0x64>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fe0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007fe2:	4b0b      	ldr	r3, [pc, #44]	; (8008010 <SystemInit+0x64>)
 8007fe4:	4a0b      	ldr	r2, [pc, #44]	; (8008014 <SystemInit+0x68>)
 8007fe6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007fe8:	4a09      	ldr	r2, [pc, #36]	; (8008010 <SystemInit+0x64>)
 8007fea:	4b09      	ldr	r3, [pc, #36]	; (8008010 <SystemInit+0x64>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ff2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007ff4:	4b06      	ldr	r3, [pc, #24]	; (8008010 <SystemInit+0x64>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007ffa:	4b04      	ldr	r3, [pc, #16]	; (800800c <SystemInit+0x60>)
 8007ffc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008000:	609a      	str	r2, [r3, #8]
#endif
}
 8008002:	bf00      	nop
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	e000ed00 	.word	0xe000ed00
 8008010:	40023800 	.word	0x40023800
 8008014:	24003010 	.word	0x24003010

08008018 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 800801c:	2201      	movs	r2, #1
 800801e:	4908      	ldr	r1, [pc, #32]	; (8008040 <MX_USB_HOST_Init+0x28>)
 8008020:	4808      	ldr	r0, [pc, #32]	; (8008044 <MX_USB_HOST_Init+0x2c>)
 8008022:	f7fe f945 	bl	80062b0 <USBH_Init>

  USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS);
 8008026:	4908      	ldr	r1, [pc, #32]	; (8008048 <MX_USB_HOST_Init+0x30>)
 8008028:	4806      	ldr	r0, [pc, #24]	; (8008044 <MX_USB_HOST_Init+0x2c>)
 800802a:	f7fe f9c3 	bl	80063b4 <USBH_RegisterClass>
  USBH_RegisterClass(&hUsbHostFS, USBH_XPAD_CLASS);
 800802e:	4907      	ldr	r1, [pc, #28]	; (800804c <MX_USB_HOST_Init+0x34>)
 8008030:	4804      	ldr	r0, [pc, #16]	; (8008044 <MX_USB_HOST_Init+0x2c>)
 8008032:	f7fe f9bf 	bl	80063b4 <USBH_RegisterClass>

  USBH_Start(&hUsbHostFS);
 8008036:	4803      	ldr	r0, [pc, #12]	; (8008044 <MX_USB_HOST_Init+0x2c>)
 8008038:	f7fe faaf 	bl	800659a <USBH_Start>

  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800803c:	bf00      	nop
 800803e:	bd80      	pop	{r7, pc}
 8008040:	08008065 	.word	0x08008065
 8008044:	200001d8 	.word	0x200001d8
 8008048:	20000038 	.word	0x20000038
 800804c:	20000058 	.word	0x20000058

08008050 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008054:	4802      	ldr	r0, [pc, #8]	; (8008060 <MX_USB_HOST_Process+0x10>)
 8008056:	f7fe fab1 	bl	80065bc <USBH_Process>
}
 800805a:	bf00      	nop
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	200001d8 	.word	0x200001d8

08008064 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	3b01      	subs	r3, #1
 8008074:	2b04      	cmp	r3, #4
 8008076:	d819      	bhi.n	80080ac <USBH_UserProcess+0x48>
 8008078:	a201      	add	r2, pc, #4	; (adr r2, 8008080 <USBH_UserProcess+0x1c>)
 800807a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807e:	bf00      	nop
 8008080:	080080ad 	.word	0x080080ad
 8008084:	0800809d 	.word	0x0800809d
 8008088:	080080ad 	.word	0x080080ad
 800808c:	080080a5 	.word	0x080080a5
 8008090:	08008095 	.word	0x08008095
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008094:	4b09      	ldr	r3, [pc, #36]	; (80080bc <USBH_UserProcess+0x58>)
 8008096:	2203      	movs	r2, #3
 8008098:	701a      	strb	r2, [r3, #0]
  break;
 800809a:	e008      	b.n	80080ae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800809c:	4b07      	ldr	r3, [pc, #28]	; (80080bc <USBH_UserProcess+0x58>)
 800809e:	2202      	movs	r2, #2
 80080a0:	701a      	strb	r2, [r3, #0]
  break;
 80080a2:	e004      	b.n	80080ae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80080a4:	4b05      	ldr	r3, [pc, #20]	; (80080bc <USBH_UserProcess+0x58>)
 80080a6:	2201      	movs	r2, #1
 80080a8:	701a      	strb	r2, [r3, #0]
  break;
 80080aa:	e000      	b.n	80080ae <USBH_UserProcess+0x4a>

  default:
  break;
 80080ac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80080ae:	bf00      	nop
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	200000fc 	.word	0x200000fc

080080c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080d0:	d139      	bne.n	8008146 <HAL_HCD_MspInit+0x86>
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80080d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080d8:	2300      	movs	r3, #0
 80080da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080dc:	2300      	movs	r3, #0
 80080de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080e0:	f107 030c 	add.w	r3, r7, #12
 80080e4:	4619      	mov	r1, r3
 80080e6:	481a      	ldr	r0, [pc, #104]	; (8008150 <HAL_HCD_MspInit+0x90>)
 80080e8:	f7f8 fd84 	bl	8000bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80080ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80080f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080f2:	2302      	movs	r3, #2
 80080f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080f6:	2300      	movs	r3, #0
 80080f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080fa:	2303      	movs	r3, #3
 80080fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080fe:	230a      	movs	r3, #10
 8008100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008102:	f107 030c 	add.w	r3, r7, #12
 8008106:	4619      	mov	r1, r3
 8008108:	4811      	ldr	r0, [pc, #68]	; (8008150 <HAL_HCD_MspInit+0x90>)
 800810a:	f7f8 fd73 	bl	8000bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800810e:	4a11      	ldr	r2, [pc, #68]	; (8008154 <HAL_HCD_MspInit+0x94>)
 8008110:	4b10      	ldr	r3, [pc, #64]	; (8008154 <HAL_HCD_MspInit+0x94>)
 8008112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008118:	6353      	str	r3, [r2, #52]	; 0x34
 800811a:	2300      	movs	r3, #0
 800811c:	60bb      	str	r3, [r7, #8]
 800811e:	4a0d      	ldr	r2, [pc, #52]	; (8008154 <HAL_HCD_MspInit+0x94>)
 8008120:	4b0c      	ldr	r3, [pc, #48]	; (8008154 <HAL_HCD_MspInit+0x94>)
 8008122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008128:	6453      	str	r3, [r2, #68]	; 0x44
 800812a:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <HAL_HCD_MspInit+0x94>)
 800812c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800812e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008132:	60bb      	str	r3, [r7, #8]
 8008134:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 8008136:	2200      	movs	r2, #0
 8008138:	2102      	movs	r1, #2
 800813a:	2043      	movs	r0, #67	; 0x43
 800813c:	f7f8 fcf9 	bl	8000b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008140:	2043      	movs	r0, #67	; 0x43
 8008142:	f7f8 fd12 	bl	8000b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008146:	bf00      	nop
 8008148:	3720      	adds	r7, #32
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	40020000 	.word	0x40020000
 8008154:	40023800 	.word	0x40023800

08008158 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fd55 	bl	8006c16 <USBH_LL_IncTimer>
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe fd71 	bl	8006c6a <USBH_LL_Connect>
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe fd8a 	bl	8006cb8 <USBH_LL_Disconnect>
}
 80081a4:	bf00      	nop
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	70fb      	strb	r3, [r7, #3]
 80081b8:	4613      	mov	r3, r2
 80081ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d12c      	bne.n	8008234 <USBH_LL_Init+0x6c>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80081da:	4a19      	ldr	r2, [pc, #100]	; (8008240 <USBH_LL_Init+0x78>)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  phost->pData = &hhcd_USB_OTG_FS;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a16      	ldr	r2, [pc, #88]	; (8008240 <USBH_LL_Init+0x78>)
 80081e6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80081ea:	4b15      	ldr	r3, [pc, #84]	; (8008240 <USBH_LL_Init+0x78>)
 80081ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80081f0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80081f2:	4b13      	ldr	r3, [pc, #76]	; (8008240 <USBH_LL_Init+0x78>)
 80081f4:	2208      	movs	r2, #8
 80081f6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80081f8:	4b11      	ldr	r3, [pc, #68]	; (8008240 <USBH_LL_Init+0x78>)
 80081fa:	2203      	movs	r2, #3
 80081fc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80081fe:	4b10      	ldr	r3, [pc, #64]	; (8008240 <USBH_LL_Init+0x78>)
 8008200:	2200      	movs	r2, #0
 8008202:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008204:	4b0e      	ldr	r3, [pc, #56]	; (8008240 <USBH_LL_Init+0x78>)
 8008206:	2202      	movs	r2, #2
 8008208:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800820a:	4b0d      	ldr	r3, [pc, #52]	; (8008240 <USBH_LL_Init+0x78>)
 800820c:	2200      	movs	r2, #0
 800820e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008210:	480b      	ldr	r0, [pc, #44]	; (8008240 <USBH_LL_Init+0x78>)
 8008212:	f7f8 febe 	bl	8000f92 <HAL_HCD_Init>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <USBH_LL_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800821c:	21df      	movs	r1, #223	; 0xdf
 800821e:	4809      	ldr	r0, [pc, #36]	; (8008244 <USBH_LL_Init+0x7c>)
 8008220:	f7ff fdfe 	bl	8007e20 <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008224:	4806      	ldr	r0, [pc, #24]	; (8008240 <USBH_LL_Init+0x78>)
 8008226:	f7f9 faa0 	bl	800176a <HAL_HCD_GetCurrentFrame>
 800822a:	4603      	mov	r3, r0
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7fe fce2 	bl	8006bf8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	200005a4 	.word	0x200005a4
 8008244:	08009964 	.word	0x08009964

08008248 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Start(phost->pData);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800825e:	4618      	mov	r0, r3
 8008260:	f7f9 fa20 	bl	80016a4 <HAL_HCD_Start>
 8008264:	4603      	mov	r3, r0
 8008266:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	2b03      	cmp	r3, #3
 800826c:	d816      	bhi.n	800829c <USBH_LL_Start+0x54>
 800826e:	a201      	add	r2, pc, #4	; (adr r2, 8008274 <USBH_LL_Start+0x2c>)
 8008270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008274:	08008285 	.word	0x08008285
 8008278:	0800828b 	.word	0x0800828b
 800827c:	08008291 	.word	0x08008291
 8008280:	08008297 	.word	0x08008297
    case HAL_OK :
      usb_status = USBH_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]
    break;
 8008288:	e00b      	b.n	80082a2 <USBH_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800828a:	2302      	movs	r3, #2
 800828c:	73fb      	strb	r3, [r7, #15]
    break;
 800828e:	e008      	b.n	80082a2 <USBH_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008290:	2301      	movs	r3, #1
 8008292:	73fb      	strb	r3, [r7, #15]
    break;
 8008294:	e005      	b.n	80082a2 <USBH_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008296:	2302      	movs	r3, #2
 8008298:	73fb      	strb	r3, [r7, #15]
    break;
 800829a:	e002      	b.n	80082a2 <USBH_LL_Start+0x5a>
    default :
      usb_status = USBH_FAIL;
 800829c:	2302      	movs	r3, #2
 800829e:	73fb      	strb	r3, [r7, #15]
    break;
 80082a0:	bf00      	nop
  }
  return usb_status;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Stop(phost->pData);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7f9 fa11 	bl	80016ea <HAL_HCD_Stop>
 80082c8:	4603      	mov	r3, r0
 80082ca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d816      	bhi.n	8008300 <USBH_LL_Stop+0x54>
 80082d2:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <USBH_LL_Stop+0x2c>)
 80082d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d8:	080082e9 	.word	0x080082e9
 80082dc:	080082ef 	.word	0x080082ef
 80082e0:	080082f5 	.word	0x080082f5
 80082e4:	080082fb 	.word	0x080082fb
    case HAL_OK :
      usb_status = USBH_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	73fb      	strb	r3, [r7, #15]
    break;
 80082ec:	e00b      	b.n	8008306 <USBH_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80082ee:	2302      	movs	r3, #2
 80082f0:	73fb      	strb	r3, [r7, #15]
    break;
 80082f2:	e008      	b.n	8008306 <USBH_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80082f4:	2301      	movs	r3, #1
 80082f6:	73fb      	strb	r3, [r7, #15]
    break;
 80082f8:	e005      	b.n	8008306 <USBH_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80082fa:	2302      	movs	r3, #2
 80082fc:	73fb      	strb	r3, [r7, #15]
    break;
 80082fe:	e002      	b.n	8008306 <USBH_LL_Stop+0x5a>
    default :
      usb_status = USBH_FAIL;
 8008300:	2302      	movs	r3, #2
 8008302:	73fb      	strb	r3, [r7, #15]
    break;
 8008304:	bf00      	nop
  }
  return usb_status;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008318:	2301      	movs	r3, #1
 800831a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008322:	4618      	mov	r0, r3
 8008324:	f7f9 fa2f 	bl	8001786 <HAL_HCD_GetCurrentSpeed>
 8008328:	4603      	mov	r3, r0
 800832a:	2b01      	cmp	r3, #1
 800832c:	d007      	beq.n	800833e <USBH_LL_GetSpeed+0x2e>
 800832e:	2b01      	cmp	r3, #1
 8008330:	d302      	bcc.n	8008338 <USBH_LL_GetSpeed+0x28>
 8008332:	2b02      	cmp	r3, #2
 8008334:	d006      	beq.n	8008344 <USBH_LL_GetSpeed+0x34>
 8008336:	e008      	b.n	800834a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008338:	2300      	movs	r3, #0
 800833a:	73fb      	strb	r3, [r7, #15]
    break;
 800833c:	e008      	b.n	8008350 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800833e:	2301      	movs	r3, #1
 8008340:	73fb      	strb	r3, [r7, #15]
    break;
 8008342:	e005      	b.n	8008350 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008344:	2302      	movs	r3, #2
 8008346:	73fb      	strb	r3, [r7, #15]
    break;
 8008348:	e002      	b.n	8008350 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800834a:	2301      	movs	r3, #1
 800834c:	73fb      	strb	r3, [r7, #15]
    break;
 800834e:	bf00      	nop
  }
  return  speed;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
	...

0800835c <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008372:	4618      	mov	r0, r3
 8008374:	f7f9 f9d6 	bl	8001724 <HAL_HCD_ResetPort>
 8008378:	4603      	mov	r3, r0
 800837a:	73bb      	strb	r3, [r7, #14]
  switch (hal_status) {
 800837c:	7bbb      	ldrb	r3, [r7, #14]
 800837e:	2b03      	cmp	r3, #3
 8008380:	d816      	bhi.n	80083b0 <USBH_LL_ResetPort+0x54>
 8008382:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <USBH_LL_ResetPort+0x2c>)
 8008384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008388:	08008399 	.word	0x08008399
 800838c:	0800839f 	.word	0x0800839f
 8008390:	080083a5 	.word	0x080083a5
 8008394:	080083ab 	.word	0x080083ab
    case HAL_OK :
      usb_status = USBH_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	73fb      	strb	r3, [r7, #15]
    break;
 800839c:	e00b      	b.n	80083b6 <USBH_LL_ResetPort+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800839e:	2302      	movs	r3, #2
 80083a0:	73fb      	strb	r3, [r7, #15]
    break;
 80083a2:	e008      	b.n	80083b6 <USBH_LL_ResetPort+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80083a4:	2301      	movs	r3, #1
 80083a6:	73fb      	strb	r3, [r7, #15]
    break;
 80083a8:	e005      	b.n	80083b6 <USBH_LL_ResetPort+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80083aa:	2302      	movs	r3, #2
 80083ac:	73fb      	strb	r3, [r7, #15]
    break;
 80083ae:	e002      	b.n	80083b6 <USBH_LL_ResetPort+0x5a>
    default :
      usb_status = USBH_FAIL;
 80083b0:	2302      	movs	r3, #2
 80083b2:	73fb      	strb	r3, [r7, #15]
    break;
 80083b4:	bf00      	nop
  }
  return usb_status;
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80083c0:	b590      	push	{r4, r7, lr}
 80083c2:	b089      	sub	sp, #36	; 0x24
 80083c4:	af04      	add	r7, sp, #16
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	4608      	mov	r0, r1
 80083ca:	4611      	mov	r1, r2
 80083cc:	461a      	mov	r2, r3
 80083ce:	4603      	mov	r3, r0
 80083d0:	70fb      	strb	r3, [r7, #3]
 80083d2:	460b      	mov	r3, r1
 80083d4:	70bb      	strb	r3, [r7, #2]
 80083d6:	4613      	mov	r3, r2
 80083d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80083e8:	787c      	ldrb	r4, [r7, #1]
 80083ea:	78ba      	ldrb	r2, [r7, #2]
 80083ec:	78f9      	ldrb	r1, [r7, #3]
 80083ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083f0:	9302      	str	r3, [sp, #8]
 80083f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	4623      	mov	r3, r4
 8008400:	f7f8 fe13 	bl	800102a <HAL_HCD_HC_Init>
 8008404:	4603      	mov	r3, r0
 8008406:	73bb      	strb	r3, [r7, #14]
                               dev_address, speed, ep_type, mps);

  switch (hal_status) {
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	2b03      	cmp	r3, #3
 800840c:	d816      	bhi.n	800843c <USBH_LL_OpenPipe+0x7c>
 800840e:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <USBH_LL_OpenPipe+0x54>)
 8008410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008414:	08008425 	.word	0x08008425
 8008418:	0800842b 	.word	0x0800842b
 800841c:	08008431 	.word	0x08008431
 8008420:	08008437 	.word	0x08008437
    case HAL_OK :
      usb_status = USBH_OK;
 8008424:	2300      	movs	r3, #0
 8008426:	73fb      	strb	r3, [r7, #15]
    break;
 8008428:	e00b      	b.n	8008442 <USBH_LL_OpenPipe+0x82>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800842a:	2302      	movs	r3, #2
 800842c:	73fb      	strb	r3, [r7, #15]
    break;
 800842e:	e008      	b.n	8008442 <USBH_LL_OpenPipe+0x82>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008430:	2301      	movs	r3, #1
 8008432:	73fb      	strb	r3, [r7, #15]
    break;
 8008434:	e005      	b.n	8008442 <USBH_LL_OpenPipe+0x82>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008436:	2302      	movs	r3, #2
 8008438:	73fb      	strb	r3, [r7, #15]
    break;
 800843a:	e002      	b.n	8008442 <USBH_LL_OpenPipe+0x82>
    default :
      usb_status = USBH_FAIL;
 800843c:	2302      	movs	r3, #2
 800843e:	73fb      	strb	r3, [r7, #15]
    break;
 8008440:	bf00      	nop
  }
  return usb_status;
 8008442:	7bfb      	ldrb	r3, [r7, #15]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	bd90      	pop	{r4, r7, pc}

0800844c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008466:	78fa      	ldrb	r2, [r7, #3]
 8008468:	4611      	mov	r1, r2
 800846a:	4618      	mov	r0, r3
 800846c:	f7f8 fe64 	bl	8001138 <HAL_HCD_HC_Halt>
 8008470:	4603      	mov	r3, r0
 8008472:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008474:	7bbb      	ldrb	r3, [r7, #14]
 8008476:	2b03      	cmp	r3, #3
 8008478:	d816      	bhi.n	80084a8 <USBH_LL_ClosePipe+0x5c>
 800847a:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <USBH_LL_ClosePipe+0x34>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	08008491 	.word	0x08008491
 8008484:	08008497 	.word	0x08008497
 8008488:	0800849d 	.word	0x0800849d
 800848c:	080084a3 	.word	0x080084a3
    case HAL_OK :
      usb_status = USBH_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	73fb      	strb	r3, [r7, #15]
    break;
 8008494:	e00b      	b.n	80084ae <USBH_LL_ClosePipe+0x62>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008496:	2302      	movs	r3, #2
 8008498:	73fb      	strb	r3, [r7, #15]
    break;
 800849a:	e008      	b.n	80084ae <USBH_LL_ClosePipe+0x62>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800849c:	2301      	movs	r3, #1
 800849e:	73fb      	strb	r3, [r7, #15]
    break;
 80084a0:	e005      	b.n	80084ae <USBH_LL_ClosePipe+0x62>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80084a2:	2302      	movs	r3, #2
 80084a4:	73fb      	strb	r3, [r7, #15]
    break;
 80084a6:	e002      	b.n	80084ae <USBH_LL_ClosePipe+0x62>
    default :
      usb_status = USBH_FAIL;
 80084a8:	2302      	movs	r3, #2
 80084aa:	73fb      	strb	r3, [r7, #15]
    break;
 80084ac:	bf00      	nop
  }
  return usb_status;
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80084b8:	b590      	push	{r4, r7, lr}
 80084ba:	b089      	sub	sp, #36	; 0x24
 80084bc:	af04      	add	r7, sp, #16
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	4608      	mov	r0, r1
 80084c2:	4611      	mov	r1, r2
 80084c4:	461a      	mov	r2, r3
 80084c6:	4603      	mov	r3, r0
 80084c8:	70fb      	strb	r3, [r7, #3]
 80084ca:	460b      	mov	r3, r1
 80084cc:	70bb      	strb	r3, [r7, #2]
 80084ce:	4613      	mov	r3, r2
 80084d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80084e0:	787c      	ldrb	r4, [r7, #1]
 80084e2:	78ba      	ldrb	r2, [r7, #2]
 80084e4:	78f9      	ldrb	r1, [r7, #3]
 80084e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80084ea:	9303      	str	r3, [sp, #12]
 80084ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084ee:	9302      	str	r3, [sp, #8]
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	9301      	str	r3, [sp, #4]
 80084f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	4623      	mov	r3, r4
 80084fc:	f7f8 fe40 	bl	8001180 <HAL_HCD_HC_SubmitRequest>
 8008500:	4603      	mov	r3, r0
 8008502:	73bb      	strb	r3, [r7, #14]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  switch (hal_status) {
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	2b03      	cmp	r3, #3
 8008508:	d816      	bhi.n	8008538 <USBH_LL_SubmitURB+0x80>
 800850a:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <USBH_LL_SubmitURB+0x58>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	08008521 	.word	0x08008521
 8008514:	08008527 	.word	0x08008527
 8008518:	0800852d 	.word	0x0800852d
 800851c:	08008533 	.word	0x08008533
    case HAL_OK :
      usb_status = USBH_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	73fb      	strb	r3, [r7, #15]
    break;
 8008524:	e00b      	b.n	800853e <USBH_LL_SubmitURB+0x86>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008526:	2302      	movs	r3, #2
 8008528:	73fb      	strb	r3, [r7, #15]
    break;
 800852a:	e008      	b.n	800853e <USBH_LL_SubmitURB+0x86>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800852c:	2301      	movs	r3, #1
 800852e:	73fb      	strb	r3, [r7, #15]
    break;
 8008530:	e005      	b.n	800853e <USBH_LL_SubmitURB+0x86>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008532:	2302      	movs	r3, #2
 8008534:	73fb      	strb	r3, [r7, #15]
    break;
 8008536:	e002      	b.n	800853e <USBH_LL_SubmitURB+0x86>
    default :
      usb_status = USBH_FAIL;
 8008538:	2302      	movs	r3, #2
 800853a:	73fb      	strb	r3, [r7, #15]
    break;
 800853c:	bf00      	nop
  }
  return usb_status;
 800853e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	bd90      	pop	{r4, r7, pc}

08008548 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800855a:	78fa      	ldrb	r2, [r7, #3]
 800855c:	4611      	mov	r1, r2
 800855e:	4618      	mov	r0, r3
 8008560:	f7f9 f8ee 	bl	8001740 <HAL_HCD_HC_GetURBState>
 8008564:	4603      	mov	r3, r0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3708      	adds	r7, #8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	460b      	mov	r3, r1
 8008578:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800857a:	20c8      	movs	r0, #200	; 0xc8
 800857c:	f7f8 f9e2 	bl	8000944 <HAL_Delay>
  return USBH_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800858a:	b480      	push	{r7}
 800858c:	b085      	sub	sp, #20
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	460b      	mov	r3, r1
 8008594:	70fb      	strb	r3, [r7, #3]
 8008596:	4613      	mov	r3, r2
 8008598:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085a0:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80085a2:	78fa      	ldrb	r2, [r7, #3]
 80085a4:	68f9      	ldr	r1, [r7, #12]
 80085a6:	4613      	mov	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	00db      	lsls	r3, r3, #3
 80085ae:	440b      	add	r3, r1
 80085b0:	333b      	adds	r3, #59	; 0x3b
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00a      	beq.n	80085ce <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80085b8:	78fa      	ldrb	r2, [r7, #3]
 80085ba:	68f9      	ldr	r1, [r7, #12]
 80085bc:	4613      	mov	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	00db      	lsls	r3, r3, #3
 80085c4:	440b      	add	r3, r1
 80085c6:	3350      	adds	r3, #80	; 0x50
 80085c8:	78ba      	ldrb	r2, [r7, #2]
 80085ca:	701a      	strb	r2, [r3, #0]
 80085cc:	e009      	b.n	80085e2 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80085ce:	78fa      	ldrb	r2, [r7, #3]
 80085d0:	68f9      	ldr	r1, [r7, #12]
 80085d2:	4613      	mov	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	00db      	lsls	r3, r3, #3
 80085da:	440b      	add	r3, r1
 80085dc:	3351      	adds	r3, #81	; 0x51
 80085de:	78ba      	ldrb	r2, [r7, #2]
 80085e0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7f8 f9a3 	bl	8000944 <HAL_Delay>
}
 80085fe:	bf00      	nop
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008640 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800860c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800860e:	e003      	b.n	8008618 <LoopCopyDataInit>

08008610 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008610:	4b0c      	ldr	r3, [pc, #48]	; (8008644 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008612:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008614:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008616:	3104      	adds	r1, #4

08008618 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008618:	480b      	ldr	r0, [pc, #44]	; (8008648 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800861a:	4b0c      	ldr	r3, [pc, #48]	; (800864c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800861c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800861e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008620:	d3f6      	bcc.n	8008610 <CopyDataInit>
  ldr  r2, =_sbss
 8008622:	4a0b      	ldr	r2, [pc, #44]	; (8008650 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008624:	e002      	b.n	800862c <LoopFillZerobss>

08008626 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008626:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008628:	f842 3b04 	str.w	r3, [r2], #4

0800862c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800862c:	4b09      	ldr	r3, [pc, #36]	; (8008654 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800862e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008630:	d3f9      	bcc.n	8008626 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008632:	f7ff fcbb 	bl	8007fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008636:	f000 f811 	bl	800865c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800863a:	f7ff fa43 	bl	8007ac4 <main>
  bx  lr    
 800863e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008640:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008644:	08009b78 	.word	0x08009b78
  ldr  r0, =_sdata
 8008648:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800864c:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 8008650:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 8008654:	20000840 	.word	0x20000840

08008658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008658:	e7fe      	b.n	8008658 <ADC_IRQHandler>
	...

0800865c <__libc_init_array>:
 800865c:	b570      	push	{r4, r5, r6, lr}
 800865e:	4e0d      	ldr	r6, [pc, #52]	; (8008694 <__libc_init_array+0x38>)
 8008660:	4c0d      	ldr	r4, [pc, #52]	; (8008698 <__libc_init_array+0x3c>)
 8008662:	1ba4      	subs	r4, r4, r6
 8008664:	10a4      	asrs	r4, r4, #2
 8008666:	2500      	movs	r5, #0
 8008668:	42a5      	cmp	r5, r4
 800866a:	d109      	bne.n	8008680 <__libc_init_array+0x24>
 800866c:	4e0b      	ldr	r6, [pc, #44]	; (800869c <__libc_init_array+0x40>)
 800866e:	4c0c      	ldr	r4, [pc, #48]	; (80086a0 <__libc_init_array+0x44>)
 8008670:	f000 ffb0 	bl	80095d4 <_init>
 8008674:	1ba4      	subs	r4, r4, r6
 8008676:	10a4      	asrs	r4, r4, #2
 8008678:	2500      	movs	r5, #0
 800867a:	42a5      	cmp	r5, r4
 800867c:	d105      	bne.n	800868a <__libc_init_array+0x2e>
 800867e:	bd70      	pop	{r4, r5, r6, pc}
 8008680:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008684:	4798      	blx	r3
 8008686:	3501      	adds	r5, #1
 8008688:	e7ee      	b.n	8008668 <__libc_init_array+0xc>
 800868a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800868e:	4798      	blx	r3
 8008690:	3501      	adds	r5, #1
 8008692:	e7f2      	b.n	800867a <__libc_init_array+0x1e>
 8008694:	08009b70 	.word	0x08009b70
 8008698:	08009b70 	.word	0x08009b70
 800869c:	08009b70 	.word	0x08009b70
 80086a0:	08009b74 	.word	0x08009b74

080086a4 <malloc>:
 80086a4:	4b02      	ldr	r3, [pc, #8]	; (80086b0 <malloc+0xc>)
 80086a6:	4601      	mov	r1, r0
 80086a8:	6818      	ldr	r0, [r3, #0]
 80086aa:	f000 b861 	b.w	8008770 <_malloc_r>
 80086ae:	bf00      	nop
 80086b0:	2000007c 	.word	0x2000007c

080086b4 <free>:
 80086b4:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <free+0xc>)
 80086b6:	4601      	mov	r1, r0
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	f000 b80b 	b.w	80086d4 <_free_r>
 80086be:	bf00      	nop
 80086c0:	2000007c 	.word	0x2000007c

080086c4 <memset>:
 80086c4:	4402      	add	r2, r0
 80086c6:	4603      	mov	r3, r0
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d100      	bne.n	80086ce <memset+0xa>
 80086cc:	4770      	bx	lr
 80086ce:	f803 1b01 	strb.w	r1, [r3], #1
 80086d2:	e7f9      	b.n	80086c8 <memset+0x4>

080086d4 <_free_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4605      	mov	r5, r0
 80086d8:	2900      	cmp	r1, #0
 80086da:	d045      	beq.n	8008768 <_free_r+0x94>
 80086dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e0:	1f0c      	subs	r4, r1, #4
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bfb8      	it	lt
 80086e6:	18e4      	addlt	r4, r4, r3
 80086e8:	f000 f9a6 	bl	8008a38 <__malloc_lock>
 80086ec:	4a1f      	ldr	r2, [pc, #124]	; (800876c <_free_r+0x98>)
 80086ee:	6813      	ldr	r3, [r2, #0]
 80086f0:	4610      	mov	r0, r2
 80086f2:	b933      	cbnz	r3, 8008702 <_free_r+0x2e>
 80086f4:	6063      	str	r3, [r4, #4]
 80086f6:	6014      	str	r4, [r2, #0]
 80086f8:	4628      	mov	r0, r5
 80086fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086fe:	f000 b99c 	b.w	8008a3a <__malloc_unlock>
 8008702:	42a3      	cmp	r3, r4
 8008704:	d90c      	bls.n	8008720 <_free_r+0x4c>
 8008706:	6821      	ldr	r1, [r4, #0]
 8008708:	1862      	adds	r2, r4, r1
 800870a:	4293      	cmp	r3, r2
 800870c:	bf04      	itt	eq
 800870e:	681a      	ldreq	r2, [r3, #0]
 8008710:	685b      	ldreq	r3, [r3, #4]
 8008712:	6063      	str	r3, [r4, #4]
 8008714:	bf04      	itt	eq
 8008716:	1852      	addeq	r2, r2, r1
 8008718:	6022      	streq	r2, [r4, #0]
 800871a:	6004      	str	r4, [r0, #0]
 800871c:	e7ec      	b.n	80086f8 <_free_r+0x24>
 800871e:	4613      	mov	r3, r2
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	b10a      	cbz	r2, 8008728 <_free_r+0x54>
 8008724:	42a2      	cmp	r2, r4
 8008726:	d9fa      	bls.n	800871e <_free_r+0x4a>
 8008728:	6819      	ldr	r1, [r3, #0]
 800872a:	1858      	adds	r0, r3, r1
 800872c:	42a0      	cmp	r0, r4
 800872e:	d10b      	bne.n	8008748 <_free_r+0x74>
 8008730:	6820      	ldr	r0, [r4, #0]
 8008732:	4401      	add	r1, r0
 8008734:	1858      	adds	r0, r3, r1
 8008736:	4282      	cmp	r2, r0
 8008738:	6019      	str	r1, [r3, #0]
 800873a:	d1dd      	bne.n	80086f8 <_free_r+0x24>
 800873c:	6810      	ldr	r0, [r2, #0]
 800873e:	6852      	ldr	r2, [r2, #4]
 8008740:	605a      	str	r2, [r3, #4]
 8008742:	4401      	add	r1, r0
 8008744:	6019      	str	r1, [r3, #0]
 8008746:	e7d7      	b.n	80086f8 <_free_r+0x24>
 8008748:	d902      	bls.n	8008750 <_free_r+0x7c>
 800874a:	230c      	movs	r3, #12
 800874c:	602b      	str	r3, [r5, #0]
 800874e:	e7d3      	b.n	80086f8 <_free_r+0x24>
 8008750:	6820      	ldr	r0, [r4, #0]
 8008752:	1821      	adds	r1, r4, r0
 8008754:	428a      	cmp	r2, r1
 8008756:	bf04      	itt	eq
 8008758:	6811      	ldreq	r1, [r2, #0]
 800875a:	6852      	ldreq	r2, [r2, #4]
 800875c:	6062      	str	r2, [r4, #4]
 800875e:	bf04      	itt	eq
 8008760:	1809      	addeq	r1, r1, r0
 8008762:	6021      	streq	r1, [r4, #0]
 8008764:	605c      	str	r4, [r3, #4]
 8008766:	e7c7      	b.n	80086f8 <_free_r+0x24>
 8008768:	bd38      	pop	{r3, r4, r5, pc}
 800876a:	bf00      	nop
 800876c:	20000100 	.word	0x20000100

08008770 <_malloc_r>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	1ccd      	adds	r5, r1, #3
 8008774:	f025 0503 	bic.w	r5, r5, #3
 8008778:	3508      	adds	r5, #8
 800877a:	2d0c      	cmp	r5, #12
 800877c:	bf38      	it	cc
 800877e:	250c      	movcc	r5, #12
 8008780:	2d00      	cmp	r5, #0
 8008782:	4606      	mov	r6, r0
 8008784:	db01      	blt.n	800878a <_malloc_r+0x1a>
 8008786:	42a9      	cmp	r1, r5
 8008788:	d903      	bls.n	8008792 <_malloc_r+0x22>
 800878a:	230c      	movs	r3, #12
 800878c:	6033      	str	r3, [r6, #0]
 800878e:	2000      	movs	r0, #0
 8008790:	bd70      	pop	{r4, r5, r6, pc}
 8008792:	f000 f951 	bl	8008a38 <__malloc_lock>
 8008796:	4a23      	ldr	r2, [pc, #140]	; (8008824 <_malloc_r+0xb4>)
 8008798:	6814      	ldr	r4, [r2, #0]
 800879a:	4621      	mov	r1, r4
 800879c:	b991      	cbnz	r1, 80087c4 <_malloc_r+0x54>
 800879e:	4c22      	ldr	r4, [pc, #136]	; (8008828 <_malloc_r+0xb8>)
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	b91b      	cbnz	r3, 80087ac <_malloc_r+0x3c>
 80087a4:	4630      	mov	r0, r6
 80087a6:	f000 f86d 	bl	8008884 <_sbrk_r>
 80087aa:	6020      	str	r0, [r4, #0]
 80087ac:	4629      	mov	r1, r5
 80087ae:	4630      	mov	r0, r6
 80087b0:	f000 f868 	bl	8008884 <_sbrk_r>
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	d126      	bne.n	8008806 <_malloc_r+0x96>
 80087b8:	230c      	movs	r3, #12
 80087ba:	6033      	str	r3, [r6, #0]
 80087bc:	4630      	mov	r0, r6
 80087be:	f000 f93c 	bl	8008a3a <__malloc_unlock>
 80087c2:	e7e4      	b.n	800878e <_malloc_r+0x1e>
 80087c4:	680b      	ldr	r3, [r1, #0]
 80087c6:	1b5b      	subs	r3, r3, r5
 80087c8:	d41a      	bmi.n	8008800 <_malloc_r+0x90>
 80087ca:	2b0b      	cmp	r3, #11
 80087cc:	d90f      	bls.n	80087ee <_malloc_r+0x7e>
 80087ce:	600b      	str	r3, [r1, #0]
 80087d0:	50cd      	str	r5, [r1, r3]
 80087d2:	18cc      	adds	r4, r1, r3
 80087d4:	4630      	mov	r0, r6
 80087d6:	f000 f930 	bl	8008a3a <__malloc_unlock>
 80087da:	f104 000b 	add.w	r0, r4, #11
 80087de:	1d23      	adds	r3, r4, #4
 80087e0:	f020 0007 	bic.w	r0, r0, #7
 80087e4:	1ac3      	subs	r3, r0, r3
 80087e6:	d01b      	beq.n	8008820 <_malloc_r+0xb0>
 80087e8:	425a      	negs	r2, r3
 80087ea:	50e2      	str	r2, [r4, r3]
 80087ec:	bd70      	pop	{r4, r5, r6, pc}
 80087ee:	428c      	cmp	r4, r1
 80087f0:	bf0d      	iteet	eq
 80087f2:	6863      	ldreq	r3, [r4, #4]
 80087f4:	684b      	ldrne	r3, [r1, #4]
 80087f6:	6063      	strne	r3, [r4, #4]
 80087f8:	6013      	streq	r3, [r2, #0]
 80087fa:	bf18      	it	ne
 80087fc:	460c      	movne	r4, r1
 80087fe:	e7e9      	b.n	80087d4 <_malloc_r+0x64>
 8008800:	460c      	mov	r4, r1
 8008802:	6849      	ldr	r1, [r1, #4]
 8008804:	e7ca      	b.n	800879c <_malloc_r+0x2c>
 8008806:	1cc4      	adds	r4, r0, #3
 8008808:	f024 0403 	bic.w	r4, r4, #3
 800880c:	42a0      	cmp	r0, r4
 800880e:	d005      	beq.n	800881c <_malloc_r+0xac>
 8008810:	1a21      	subs	r1, r4, r0
 8008812:	4630      	mov	r0, r6
 8008814:	f000 f836 	bl	8008884 <_sbrk_r>
 8008818:	3001      	adds	r0, #1
 800881a:	d0cd      	beq.n	80087b8 <_malloc_r+0x48>
 800881c:	6025      	str	r5, [r4, #0]
 800881e:	e7d9      	b.n	80087d4 <_malloc_r+0x64>
 8008820:	bd70      	pop	{r4, r5, r6, pc}
 8008822:	bf00      	nop
 8008824:	20000100 	.word	0x20000100
 8008828:	20000104 	.word	0x20000104

0800882c <iprintf>:
 800882c:	b40f      	push	{r0, r1, r2, r3}
 800882e:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <iprintf+0x2c>)
 8008830:	b513      	push	{r0, r1, r4, lr}
 8008832:	681c      	ldr	r4, [r3, #0]
 8008834:	b124      	cbz	r4, 8008840 <iprintf+0x14>
 8008836:	69a3      	ldr	r3, [r4, #24]
 8008838:	b913      	cbnz	r3, 8008840 <iprintf+0x14>
 800883a:	4620      	mov	r0, r4
 800883c:	f000 f872 	bl	8008924 <__sinit>
 8008840:	ab05      	add	r3, sp, #20
 8008842:	9a04      	ldr	r2, [sp, #16]
 8008844:	68a1      	ldr	r1, [r4, #8]
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	4620      	mov	r0, r4
 800884a:	f000 f921 	bl	8008a90 <_vfiprintf_r>
 800884e:	b002      	add	sp, #8
 8008850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008854:	b004      	add	sp, #16
 8008856:	4770      	bx	lr
 8008858:	2000007c 	.word	0x2000007c

0800885c <putchar>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	4b08      	ldr	r3, [pc, #32]	; (8008880 <putchar+0x24>)
 8008860:	681c      	ldr	r4, [r3, #0]
 8008862:	4605      	mov	r5, r0
 8008864:	b124      	cbz	r4, 8008870 <putchar+0x14>
 8008866:	69a3      	ldr	r3, [r4, #24]
 8008868:	b913      	cbnz	r3, 8008870 <putchar+0x14>
 800886a:	4620      	mov	r0, r4
 800886c:	f000 f85a 	bl	8008924 <__sinit>
 8008870:	68a2      	ldr	r2, [r4, #8]
 8008872:	4629      	mov	r1, r5
 8008874:	4620      	mov	r0, r4
 8008876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800887a:	f000 bbb5 	b.w	8008fe8 <_putc_r>
 800887e:	bf00      	nop
 8008880:	2000007c 	.word	0x2000007c

08008884 <_sbrk_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4c06      	ldr	r4, [pc, #24]	; (80088a0 <_sbrk_r+0x1c>)
 8008888:	2300      	movs	r3, #0
 800888a:	4605      	mov	r5, r0
 800888c:	4608      	mov	r0, r1
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	f000 fe8a 	bl	80095a8 <_sbrk>
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	d102      	bne.n	800889e <_sbrk_r+0x1a>
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	b103      	cbz	r3, 800889e <_sbrk_r+0x1a>
 800889c:	602b      	str	r3, [r5, #0]
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	2000083c 	.word	0x2000083c

080088a4 <_cleanup_r>:
 80088a4:	4901      	ldr	r1, [pc, #4]	; (80088ac <_cleanup_r+0x8>)
 80088a6:	f000 b8a9 	b.w	80089fc <_fwalk_reent>
 80088aa:	bf00      	nop
 80088ac:	080093b1 	.word	0x080093b1

080088b0 <std.isra.0>:
 80088b0:	2300      	movs	r3, #0
 80088b2:	b510      	push	{r4, lr}
 80088b4:	4604      	mov	r4, r0
 80088b6:	6003      	str	r3, [r0, #0]
 80088b8:	6043      	str	r3, [r0, #4]
 80088ba:	6083      	str	r3, [r0, #8]
 80088bc:	8181      	strh	r1, [r0, #12]
 80088be:	6643      	str	r3, [r0, #100]	; 0x64
 80088c0:	81c2      	strh	r2, [r0, #14]
 80088c2:	6103      	str	r3, [r0, #16]
 80088c4:	6143      	str	r3, [r0, #20]
 80088c6:	6183      	str	r3, [r0, #24]
 80088c8:	4619      	mov	r1, r3
 80088ca:	2208      	movs	r2, #8
 80088cc:	305c      	adds	r0, #92	; 0x5c
 80088ce:	f7ff fef9 	bl	80086c4 <memset>
 80088d2:	4b05      	ldr	r3, [pc, #20]	; (80088e8 <std.isra.0+0x38>)
 80088d4:	6263      	str	r3, [r4, #36]	; 0x24
 80088d6:	4b05      	ldr	r3, [pc, #20]	; (80088ec <std.isra.0+0x3c>)
 80088d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80088da:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <std.isra.0+0x40>)
 80088dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088de:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <std.isra.0+0x44>)
 80088e0:	6224      	str	r4, [r4, #32]
 80088e2:	6323      	str	r3, [r4, #48]	; 0x30
 80088e4:	bd10      	pop	{r4, pc}
 80088e6:	bf00      	nop
 80088e8:	08009055 	.word	0x08009055
 80088ec:	08009077 	.word	0x08009077
 80088f0:	080090af 	.word	0x080090af
 80088f4:	080090d3 	.word	0x080090d3

080088f8 <__sfmoreglue>:
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	1e4a      	subs	r2, r1, #1
 80088fc:	2568      	movs	r5, #104	; 0x68
 80088fe:	4355      	muls	r5, r2
 8008900:	460e      	mov	r6, r1
 8008902:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008906:	f7ff ff33 	bl	8008770 <_malloc_r>
 800890a:	4604      	mov	r4, r0
 800890c:	b140      	cbz	r0, 8008920 <__sfmoreglue+0x28>
 800890e:	2100      	movs	r1, #0
 8008910:	e880 0042 	stmia.w	r0, {r1, r6}
 8008914:	300c      	adds	r0, #12
 8008916:	60a0      	str	r0, [r4, #8]
 8008918:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800891c:	f7ff fed2 	bl	80086c4 <memset>
 8008920:	4620      	mov	r0, r4
 8008922:	bd70      	pop	{r4, r5, r6, pc}

08008924 <__sinit>:
 8008924:	6983      	ldr	r3, [r0, #24]
 8008926:	b510      	push	{r4, lr}
 8008928:	4604      	mov	r4, r0
 800892a:	bb33      	cbnz	r3, 800897a <__sinit+0x56>
 800892c:	6483      	str	r3, [r0, #72]	; 0x48
 800892e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008930:	6503      	str	r3, [r0, #80]	; 0x50
 8008932:	4b12      	ldr	r3, [pc, #72]	; (800897c <__sinit+0x58>)
 8008934:	4a12      	ldr	r2, [pc, #72]	; (8008980 <__sinit+0x5c>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6282      	str	r2, [r0, #40]	; 0x28
 800893a:	4298      	cmp	r0, r3
 800893c:	bf04      	itt	eq
 800893e:	2301      	moveq	r3, #1
 8008940:	6183      	streq	r3, [r0, #24]
 8008942:	f000 f81f 	bl	8008984 <__sfp>
 8008946:	6060      	str	r0, [r4, #4]
 8008948:	4620      	mov	r0, r4
 800894a:	f000 f81b 	bl	8008984 <__sfp>
 800894e:	60a0      	str	r0, [r4, #8]
 8008950:	4620      	mov	r0, r4
 8008952:	f000 f817 	bl	8008984 <__sfp>
 8008956:	2200      	movs	r2, #0
 8008958:	60e0      	str	r0, [r4, #12]
 800895a:	2104      	movs	r1, #4
 800895c:	6860      	ldr	r0, [r4, #4]
 800895e:	f7ff ffa7 	bl	80088b0 <std.isra.0>
 8008962:	2201      	movs	r2, #1
 8008964:	2109      	movs	r1, #9
 8008966:	68a0      	ldr	r0, [r4, #8]
 8008968:	f7ff ffa2 	bl	80088b0 <std.isra.0>
 800896c:	2202      	movs	r2, #2
 800896e:	2112      	movs	r1, #18
 8008970:	68e0      	ldr	r0, [r4, #12]
 8008972:	f7ff ff9d 	bl	80088b0 <std.isra.0>
 8008976:	2301      	movs	r3, #1
 8008978:	61a3      	str	r3, [r4, #24]
 800897a:	bd10      	pop	{r4, pc}
 800897c:	08009b30 	.word	0x08009b30
 8008980:	080088a5 	.word	0x080088a5

08008984 <__sfp>:
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008986:	4b1c      	ldr	r3, [pc, #112]	; (80089f8 <__sfp+0x74>)
 8008988:	681e      	ldr	r6, [r3, #0]
 800898a:	69b3      	ldr	r3, [r6, #24]
 800898c:	4607      	mov	r7, r0
 800898e:	b913      	cbnz	r3, 8008996 <__sfp+0x12>
 8008990:	4630      	mov	r0, r6
 8008992:	f7ff ffc7 	bl	8008924 <__sinit>
 8008996:	3648      	adds	r6, #72	; 0x48
 8008998:	68b4      	ldr	r4, [r6, #8]
 800899a:	6873      	ldr	r3, [r6, #4]
 800899c:	3b01      	subs	r3, #1
 800899e:	d503      	bpl.n	80089a8 <__sfp+0x24>
 80089a0:	6833      	ldr	r3, [r6, #0]
 80089a2:	b133      	cbz	r3, 80089b2 <__sfp+0x2e>
 80089a4:	6836      	ldr	r6, [r6, #0]
 80089a6:	e7f7      	b.n	8008998 <__sfp+0x14>
 80089a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089ac:	b16d      	cbz	r5, 80089ca <__sfp+0x46>
 80089ae:	3468      	adds	r4, #104	; 0x68
 80089b0:	e7f4      	b.n	800899c <__sfp+0x18>
 80089b2:	2104      	movs	r1, #4
 80089b4:	4638      	mov	r0, r7
 80089b6:	f7ff ff9f 	bl	80088f8 <__sfmoreglue>
 80089ba:	6030      	str	r0, [r6, #0]
 80089bc:	2800      	cmp	r0, #0
 80089be:	d1f1      	bne.n	80089a4 <__sfp+0x20>
 80089c0:	230c      	movs	r3, #12
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	4604      	mov	r4, r0
 80089c6:	4620      	mov	r0, r4
 80089c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80089ce:	81e3      	strh	r3, [r4, #14]
 80089d0:	2301      	movs	r3, #1
 80089d2:	81a3      	strh	r3, [r4, #12]
 80089d4:	6665      	str	r5, [r4, #100]	; 0x64
 80089d6:	6025      	str	r5, [r4, #0]
 80089d8:	60a5      	str	r5, [r4, #8]
 80089da:	6065      	str	r5, [r4, #4]
 80089dc:	6125      	str	r5, [r4, #16]
 80089de:	6165      	str	r5, [r4, #20]
 80089e0:	61a5      	str	r5, [r4, #24]
 80089e2:	2208      	movs	r2, #8
 80089e4:	4629      	mov	r1, r5
 80089e6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089ea:	f7ff fe6b 	bl	80086c4 <memset>
 80089ee:	6365      	str	r5, [r4, #52]	; 0x34
 80089f0:	63a5      	str	r5, [r4, #56]	; 0x38
 80089f2:	64a5      	str	r5, [r4, #72]	; 0x48
 80089f4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80089f6:	e7e6      	b.n	80089c6 <__sfp+0x42>
 80089f8:	08009b30 	.word	0x08009b30

080089fc <_fwalk_reent>:
 80089fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a00:	4680      	mov	r8, r0
 8008a02:	4689      	mov	r9, r1
 8008a04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a08:	2600      	movs	r6, #0
 8008a0a:	b914      	cbnz	r4, 8008a12 <_fwalk_reent+0x16>
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a12:	68a5      	ldr	r5, [r4, #8]
 8008a14:	6867      	ldr	r7, [r4, #4]
 8008a16:	3f01      	subs	r7, #1
 8008a18:	d501      	bpl.n	8008a1e <_fwalk_reent+0x22>
 8008a1a:	6824      	ldr	r4, [r4, #0]
 8008a1c:	e7f5      	b.n	8008a0a <_fwalk_reent+0xe>
 8008a1e:	89ab      	ldrh	r3, [r5, #12]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d907      	bls.n	8008a34 <_fwalk_reent+0x38>
 8008a24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	d003      	beq.n	8008a34 <_fwalk_reent+0x38>
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4640      	mov	r0, r8
 8008a30:	47c8      	blx	r9
 8008a32:	4306      	orrs	r6, r0
 8008a34:	3568      	adds	r5, #104	; 0x68
 8008a36:	e7ee      	b.n	8008a16 <_fwalk_reent+0x1a>

08008a38 <__malloc_lock>:
 8008a38:	4770      	bx	lr

08008a3a <__malloc_unlock>:
 8008a3a:	4770      	bx	lr

08008a3c <__sfputc_r>:
 8008a3c:	6893      	ldr	r3, [r2, #8]
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	b410      	push	{r4}
 8008a44:	6093      	str	r3, [r2, #8]
 8008a46:	da09      	bge.n	8008a5c <__sfputc_r+0x20>
 8008a48:	6994      	ldr	r4, [r2, #24]
 8008a4a:	42a3      	cmp	r3, r4
 8008a4c:	db02      	blt.n	8008a54 <__sfputc_r+0x18>
 8008a4e:	b2cb      	uxtb	r3, r1
 8008a50:	2b0a      	cmp	r3, #10
 8008a52:	d103      	bne.n	8008a5c <__sfputc_r+0x20>
 8008a54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a58:	f000 bb40 	b.w	80090dc <__swbuf_r>
 8008a5c:	6813      	ldr	r3, [r2, #0]
 8008a5e:	1c58      	adds	r0, r3, #1
 8008a60:	6010      	str	r0, [r2, #0]
 8008a62:	7019      	strb	r1, [r3, #0]
 8008a64:	b2c8      	uxtb	r0, r1
 8008a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <__sfputs_r>:
 8008a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6e:	4606      	mov	r6, r0
 8008a70:	460f      	mov	r7, r1
 8008a72:	4614      	mov	r4, r2
 8008a74:	18d5      	adds	r5, r2, r3
 8008a76:	42ac      	cmp	r4, r5
 8008a78:	d101      	bne.n	8008a7e <__sfputs_r+0x12>
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	e007      	b.n	8008a8e <__sfputs_r+0x22>
 8008a7e:	463a      	mov	r2, r7
 8008a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a84:	4630      	mov	r0, r6
 8008a86:	f7ff ffd9 	bl	8008a3c <__sfputc_r>
 8008a8a:	1c43      	adds	r3, r0, #1
 8008a8c:	d1f3      	bne.n	8008a76 <__sfputs_r+0xa>
 8008a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a90 <_vfiprintf_r>:
 8008a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	b09d      	sub	sp, #116	; 0x74
 8008a96:	460c      	mov	r4, r1
 8008a98:	4617      	mov	r7, r2
 8008a9a:	9303      	str	r3, [sp, #12]
 8008a9c:	4606      	mov	r6, r0
 8008a9e:	b118      	cbz	r0, 8008aa8 <_vfiprintf_r+0x18>
 8008aa0:	6983      	ldr	r3, [r0, #24]
 8008aa2:	b90b      	cbnz	r3, 8008aa8 <_vfiprintf_r+0x18>
 8008aa4:	f7ff ff3e 	bl	8008924 <__sinit>
 8008aa8:	4b7c      	ldr	r3, [pc, #496]	; (8008c9c <_vfiprintf_r+0x20c>)
 8008aaa:	429c      	cmp	r4, r3
 8008aac:	d157      	bne.n	8008b5e <_vfiprintf_r+0xce>
 8008aae:	6874      	ldr	r4, [r6, #4]
 8008ab0:	89a3      	ldrh	r3, [r4, #12]
 8008ab2:	0718      	lsls	r0, r3, #28
 8008ab4:	d55d      	bpl.n	8008b72 <_vfiprintf_r+0xe2>
 8008ab6:	6923      	ldr	r3, [r4, #16]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d05a      	beq.n	8008b72 <_vfiprintf_r+0xe2>
 8008abc:	2300      	movs	r3, #0
 8008abe:	9309      	str	r3, [sp, #36]	; 0x24
 8008ac0:	2320      	movs	r3, #32
 8008ac2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ac6:	2330      	movs	r3, #48	; 0x30
 8008ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008acc:	f04f 0b01 	mov.w	fp, #1
 8008ad0:	46b8      	mov	r8, r7
 8008ad2:	4645      	mov	r5, r8
 8008ad4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d155      	bne.n	8008b88 <_vfiprintf_r+0xf8>
 8008adc:	ebb8 0a07 	subs.w	sl, r8, r7
 8008ae0:	d00b      	beq.n	8008afa <_vfiprintf_r+0x6a>
 8008ae2:	4653      	mov	r3, sl
 8008ae4:	463a      	mov	r2, r7
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f7ff ffbf 	bl	8008a6c <__sfputs_r>
 8008aee:	3001      	adds	r0, #1
 8008af0:	f000 80c4 	beq.w	8008c7c <_vfiprintf_r+0x1ec>
 8008af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af6:	4453      	add	r3, sl
 8008af8:	9309      	str	r3, [sp, #36]	; 0x24
 8008afa:	f898 3000 	ldrb.w	r3, [r8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 80bc 	beq.w	8008c7c <_vfiprintf_r+0x1ec>
 8008b04:	2300      	movs	r3, #0
 8008b06:	f04f 32ff 	mov.w	r2, #4294967295
 8008b0a:	9304      	str	r3, [sp, #16]
 8008b0c:	9307      	str	r3, [sp, #28]
 8008b0e:	9205      	str	r2, [sp, #20]
 8008b10:	9306      	str	r3, [sp, #24]
 8008b12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b16:	931a      	str	r3, [sp, #104]	; 0x68
 8008b18:	2205      	movs	r2, #5
 8008b1a:	7829      	ldrb	r1, [r5, #0]
 8008b1c:	4860      	ldr	r0, [pc, #384]	; (8008ca0 <_vfiprintf_r+0x210>)
 8008b1e:	f7f7 fcc7 	bl	80004b0 <memchr>
 8008b22:	f105 0801 	add.w	r8, r5, #1
 8008b26:	9b04      	ldr	r3, [sp, #16]
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d131      	bne.n	8008b90 <_vfiprintf_r+0x100>
 8008b2c:	06d9      	lsls	r1, r3, #27
 8008b2e:	bf44      	itt	mi
 8008b30:	2220      	movmi	r2, #32
 8008b32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b36:	071a      	lsls	r2, r3, #28
 8008b38:	bf44      	itt	mi
 8008b3a:	222b      	movmi	r2, #43	; 0x2b
 8008b3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b40:	782a      	ldrb	r2, [r5, #0]
 8008b42:	2a2a      	cmp	r2, #42	; 0x2a
 8008b44:	d02c      	beq.n	8008ba0 <_vfiprintf_r+0x110>
 8008b46:	9a07      	ldr	r2, [sp, #28]
 8008b48:	2100      	movs	r1, #0
 8008b4a:	200a      	movs	r0, #10
 8008b4c:	46a8      	mov	r8, r5
 8008b4e:	3501      	adds	r5, #1
 8008b50:	f898 3000 	ldrb.w	r3, [r8]
 8008b54:	3b30      	subs	r3, #48	; 0x30
 8008b56:	2b09      	cmp	r3, #9
 8008b58:	d96d      	bls.n	8008c36 <_vfiprintf_r+0x1a6>
 8008b5a:	b371      	cbz	r1, 8008bba <_vfiprintf_r+0x12a>
 8008b5c:	e026      	b.n	8008bac <_vfiprintf_r+0x11c>
 8008b5e:	4b51      	ldr	r3, [pc, #324]	; (8008ca4 <_vfiprintf_r+0x214>)
 8008b60:	429c      	cmp	r4, r3
 8008b62:	d101      	bne.n	8008b68 <_vfiprintf_r+0xd8>
 8008b64:	68b4      	ldr	r4, [r6, #8]
 8008b66:	e7a3      	b.n	8008ab0 <_vfiprintf_r+0x20>
 8008b68:	4b4f      	ldr	r3, [pc, #316]	; (8008ca8 <_vfiprintf_r+0x218>)
 8008b6a:	429c      	cmp	r4, r3
 8008b6c:	bf08      	it	eq
 8008b6e:	68f4      	ldreq	r4, [r6, #12]
 8008b70:	e79e      	b.n	8008ab0 <_vfiprintf_r+0x20>
 8008b72:	4621      	mov	r1, r4
 8008b74:	4630      	mov	r0, r6
 8008b76:	f000 fb15 	bl	80091a4 <__swsetup_r>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	d09e      	beq.n	8008abc <_vfiprintf_r+0x2c>
 8008b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b82:	b01d      	add	sp, #116	; 0x74
 8008b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b88:	2b25      	cmp	r3, #37	; 0x25
 8008b8a:	d0a7      	beq.n	8008adc <_vfiprintf_r+0x4c>
 8008b8c:	46a8      	mov	r8, r5
 8008b8e:	e7a0      	b.n	8008ad2 <_vfiprintf_r+0x42>
 8008b90:	4a43      	ldr	r2, [pc, #268]	; (8008ca0 <_vfiprintf_r+0x210>)
 8008b92:	1a80      	subs	r0, r0, r2
 8008b94:	fa0b f000 	lsl.w	r0, fp, r0
 8008b98:	4318      	orrs	r0, r3
 8008b9a:	9004      	str	r0, [sp, #16]
 8008b9c:	4645      	mov	r5, r8
 8008b9e:	e7bb      	b.n	8008b18 <_vfiprintf_r+0x88>
 8008ba0:	9a03      	ldr	r2, [sp, #12]
 8008ba2:	1d11      	adds	r1, r2, #4
 8008ba4:	6812      	ldr	r2, [r2, #0]
 8008ba6:	9103      	str	r1, [sp, #12]
 8008ba8:	2a00      	cmp	r2, #0
 8008baa:	db01      	blt.n	8008bb0 <_vfiprintf_r+0x120>
 8008bac:	9207      	str	r2, [sp, #28]
 8008bae:	e004      	b.n	8008bba <_vfiprintf_r+0x12a>
 8008bb0:	4252      	negs	r2, r2
 8008bb2:	f043 0302 	orr.w	r3, r3, #2
 8008bb6:	9207      	str	r2, [sp, #28]
 8008bb8:	9304      	str	r3, [sp, #16]
 8008bba:	f898 3000 	ldrb.w	r3, [r8]
 8008bbe:	2b2e      	cmp	r3, #46	; 0x2e
 8008bc0:	d110      	bne.n	8008be4 <_vfiprintf_r+0x154>
 8008bc2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8008bc8:	f108 0101 	add.w	r1, r8, #1
 8008bcc:	d137      	bne.n	8008c3e <_vfiprintf_r+0x1ae>
 8008bce:	9b03      	ldr	r3, [sp, #12]
 8008bd0:	1d1a      	adds	r2, r3, #4
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	9203      	str	r2, [sp, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	bfb8      	it	lt
 8008bda:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bde:	f108 0802 	add.w	r8, r8, #2
 8008be2:	9305      	str	r3, [sp, #20]
 8008be4:	4d31      	ldr	r5, [pc, #196]	; (8008cac <_vfiprintf_r+0x21c>)
 8008be6:	f898 1000 	ldrb.w	r1, [r8]
 8008bea:	2203      	movs	r2, #3
 8008bec:	4628      	mov	r0, r5
 8008bee:	f7f7 fc5f 	bl	80004b0 <memchr>
 8008bf2:	b140      	cbz	r0, 8008c06 <_vfiprintf_r+0x176>
 8008bf4:	2340      	movs	r3, #64	; 0x40
 8008bf6:	1b40      	subs	r0, r0, r5
 8008bf8:	fa03 f000 	lsl.w	r0, r3, r0
 8008bfc:	9b04      	ldr	r3, [sp, #16]
 8008bfe:	4303      	orrs	r3, r0
 8008c00:	9304      	str	r3, [sp, #16]
 8008c02:	f108 0801 	add.w	r8, r8, #1
 8008c06:	f898 1000 	ldrb.w	r1, [r8]
 8008c0a:	4829      	ldr	r0, [pc, #164]	; (8008cb0 <_vfiprintf_r+0x220>)
 8008c0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c10:	2206      	movs	r2, #6
 8008c12:	f108 0701 	add.w	r7, r8, #1
 8008c16:	f7f7 fc4b 	bl	80004b0 <memchr>
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	d034      	beq.n	8008c88 <_vfiprintf_r+0x1f8>
 8008c1e:	4b25      	ldr	r3, [pc, #148]	; (8008cb4 <_vfiprintf_r+0x224>)
 8008c20:	bb03      	cbnz	r3, 8008c64 <_vfiprintf_r+0x1d4>
 8008c22:	9b03      	ldr	r3, [sp, #12]
 8008c24:	3307      	adds	r3, #7
 8008c26:	f023 0307 	bic.w	r3, r3, #7
 8008c2a:	3308      	adds	r3, #8
 8008c2c:	9303      	str	r3, [sp, #12]
 8008c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c30:	444b      	add	r3, r9
 8008c32:	9309      	str	r3, [sp, #36]	; 0x24
 8008c34:	e74c      	b.n	8008ad0 <_vfiprintf_r+0x40>
 8008c36:	fb00 3202 	mla	r2, r0, r2, r3
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	e786      	b.n	8008b4c <_vfiprintf_r+0xbc>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	9305      	str	r3, [sp, #20]
 8008c42:	4618      	mov	r0, r3
 8008c44:	250a      	movs	r5, #10
 8008c46:	4688      	mov	r8, r1
 8008c48:	3101      	adds	r1, #1
 8008c4a:	f898 2000 	ldrb.w	r2, [r8]
 8008c4e:	3a30      	subs	r2, #48	; 0x30
 8008c50:	2a09      	cmp	r2, #9
 8008c52:	d903      	bls.n	8008c5c <_vfiprintf_r+0x1cc>
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0c5      	beq.n	8008be4 <_vfiprintf_r+0x154>
 8008c58:	9005      	str	r0, [sp, #20]
 8008c5a:	e7c3      	b.n	8008be4 <_vfiprintf_r+0x154>
 8008c5c:	fb05 2000 	mla	r0, r5, r0, r2
 8008c60:	2301      	movs	r3, #1
 8008c62:	e7f0      	b.n	8008c46 <_vfiprintf_r+0x1b6>
 8008c64:	ab03      	add	r3, sp, #12
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	4622      	mov	r2, r4
 8008c6a:	4b13      	ldr	r3, [pc, #76]	; (8008cb8 <_vfiprintf_r+0x228>)
 8008c6c:	a904      	add	r1, sp, #16
 8008c6e:	4630      	mov	r0, r6
 8008c70:	f3af 8000 	nop.w
 8008c74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008c78:	4681      	mov	r9, r0
 8008c7a:	d1d8      	bne.n	8008c2e <_vfiprintf_r+0x19e>
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	065b      	lsls	r3, r3, #25
 8008c80:	f53f af7d 	bmi.w	8008b7e <_vfiprintf_r+0xee>
 8008c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c86:	e77c      	b.n	8008b82 <_vfiprintf_r+0xf2>
 8008c88:	ab03      	add	r3, sp, #12
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	4b0a      	ldr	r3, [pc, #40]	; (8008cb8 <_vfiprintf_r+0x228>)
 8008c90:	a904      	add	r1, sp, #16
 8008c92:	4630      	mov	r0, r6
 8008c94:	f000 f888 	bl	8008da8 <_printf_i>
 8008c98:	e7ec      	b.n	8008c74 <_vfiprintf_r+0x1e4>
 8008c9a:	bf00      	nop
 8008c9c:	08009af0 	.word	0x08009af0
 8008ca0:	08009b34 	.word	0x08009b34
 8008ca4:	08009b10 	.word	0x08009b10
 8008ca8:	08009ad0 	.word	0x08009ad0
 8008cac:	08009b3a 	.word	0x08009b3a
 8008cb0:	08009b3e 	.word	0x08009b3e
 8008cb4:	00000000 	.word	0x00000000
 8008cb8:	08008a6d 	.word	0x08008a6d

08008cbc <_printf_common>:
 8008cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc0:	4691      	mov	r9, r2
 8008cc2:	461f      	mov	r7, r3
 8008cc4:	688a      	ldr	r2, [r1, #8]
 8008cc6:	690b      	ldr	r3, [r1, #16]
 8008cc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	bfb8      	it	lt
 8008cd0:	4613      	movlt	r3, r2
 8008cd2:	f8c9 3000 	str.w	r3, [r9]
 8008cd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cda:	4606      	mov	r6, r0
 8008cdc:	460c      	mov	r4, r1
 8008cde:	b112      	cbz	r2, 8008ce6 <_printf_common+0x2a>
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	f8c9 3000 	str.w	r3, [r9]
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	0699      	lsls	r1, r3, #26
 8008cea:	bf42      	ittt	mi
 8008cec:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008cf0:	3302      	addmi	r3, #2
 8008cf2:	f8c9 3000 	strmi.w	r3, [r9]
 8008cf6:	6825      	ldr	r5, [r4, #0]
 8008cf8:	f015 0506 	ands.w	r5, r5, #6
 8008cfc:	d107      	bne.n	8008d0e <_printf_common+0x52>
 8008cfe:	f104 0a19 	add.w	sl, r4, #25
 8008d02:	68e3      	ldr	r3, [r4, #12]
 8008d04:	f8d9 2000 	ldr.w	r2, [r9]
 8008d08:	1a9b      	subs	r3, r3, r2
 8008d0a:	429d      	cmp	r5, r3
 8008d0c:	db29      	blt.n	8008d62 <_printf_common+0xa6>
 8008d0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008d12:	6822      	ldr	r2, [r4, #0]
 8008d14:	3300      	adds	r3, #0
 8008d16:	bf18      	it	ne
 8008d18:	2301      	movne	r3, #1
 8008d1a:	0692      	lsls	r2, r2, #26
 8008d1c:	d42e      	bmi.n	8008d7c <_printf_common+0xc0>
 8008d1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d22:	4639      	mov	r1, r7
 8008d24:	4630      	mov	r0, r6
 8008d26:	47c0      	blx	r8
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d021      	beq.n	8008d70 <_printf_common+0xb4>
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	68e5      	ldr	r5, [r4, #12]
 8008d30:	f8d9 2000 	ldr.w	r2, [r9]
 8008d34:	f003 0306 	and.w	r3, r3, #6
 8008d38:	2b04      	cmp	r3, #4
 8008d3a:	bf08      	it	eq
 8008d3c:	1aad      	subeq	r5, r5, r2
 8008d3e:	68a3      	ldr	r3, [r4, #8]
 8008d40:	6922      	ldr	r2, [r4, #16]
 8008d42:	bf0c      	ite	eq
 8008d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d48:	2500      	movne	r5, #0
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	bfc4      	itt	gt
 8008d4e:	1a9b      	subgt	r3, r3, r2
 8008d50:	18ed      	addgt	r5, r5, r3
 8008d52:	f04f 0900 	mov.w	r9, #0
 8008d56:	341a      	adds	r4, #26
 8008d58:	454d      	cmp	r5, r9
 8008d5a:	d11b      	bne.n	8008d94 <_printf_common+0xd8>
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d62:	2301      	movs	r3, #1
 8008d64:	4652      	mov	r2, sl
 8008d66:	4639      	mov	r1, r7
 8008d68:	4630      	mov	r0, r6
 8008d6a:	47c0      	blx	r8
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d103      	bne.n	8008d78 <_printf_common+0xbc>
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295
 8008d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d78:	3501      	adds	r5, #1
 8008d7a:	e7c2      	b.n	8008d02 <_printf_common+0x46>
 8008d7c:	18e1      	adds	r1, r4, r3
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	2030      	movs	r0, #48	; 0x30
 8008d82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d86:	4422      	add	r2, r4
 8008d88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d90:	3302      	adds	r3, #2
 8008d92:	e7c4      	b.n	8008d1e <_printf_common+0x62>
 8008d94:	2301      	movs	r3, #1
 8008d96:	4622      	mov	r2, r4
 8008d98:	4639      	mov	r1, r7
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	47c0      	blx	r8
 8008d9e:	3001      	adds	r0, #1
 8008da0:	d0e6      	beq.n	8008d70 <_printf_common+0xb4>
 8008da2:	f109 0901 	add.w	r9, r9, #1
 8008da6:	e7d7      	b.n	8008d58 <_printf_common+0x9c>

08008da8 <_printf_i>:
 8008da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dac:	4617      	mov	r7, r2
 8008dae:	7e0a      	ldrb	r2, [r1, #24]
 8008db0:	b085      	sub	sp, #20
 8008db2:	2a6e      	cmp	r2, #110	; 0x6e
 8008db4:	4698      	mov	r8, r3
 8008db6:	4606      	mov	r6, r0
 8008db8:	460c      	mov	r4, r1
 8008dba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dbc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8008dc0:	f000 80bc 	beq.w	8008f3c <_printf_i+0x194>
 8008dc4:	d81a      	bhi.n	8008dfc <_printf_i+0x54>
 8008dc6:	2a63      	cmp	r2, #99	; 0x63
 8008dc8:	d02e      	beq.n	8008e28 <_printf_i+0x80>
 8008dca:	d80a      	bhi.n	8008de2 <_printf_i+0x3a>
 8008dcc:	2a00      	cmp	r2, #0
 8008dce:	f000 80c8 	beq.w	8008f62 <_printf_i+0x1ba>
 8008dd2:	2a58      	cmp	r2, #88	; 0x58
 8008dd4:	f000 808a 	beq.w	8008eec <_printf_i+0x144>
 8008dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ddc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8008de0:	e02a      	b.n	8008e38 <_printf_i+0x90>
 8008de2:	2a64      	cmp	r2, #100	; 0x64
 8008de4:	d001      	beq.n	8008dea <_printf_i+0x42>
 8008de6:	2a69      	cmp	r2, #105	; 0x69
 8008de8:	d1f6      	bne.n	8008dd8 <_printf_i+0x30>
 8008dea:	6821      	ldr	r1, [r4, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008df2:	d023      	beq.n	8008e3c <_printf_i+0x94>
 8008df4:	1d11      	adds	r1, r2, #4
 8008df6:	6019      	str	r1, [r3, #0]
 8008df8:	6813      	ldr	r3, [r2, #0]
 8008dfa:	e027      	b.n	8008e4c <_printf_i+0xa4>
 8008dfc:	2a73      	cmp	r2, #115	; 0x73
 8008dfe:	f000 80b4 	beq.w	8008f6a <_printf_i+0x1c2>
 8008e02:	d808      	bhi.n	8008e16 <_printf_i+0x6e>
 8008e04:	2a6f      	cmp	r2, #111	; 0x6f
 8008e06:	d02a      	beq.n	8008e5e <_printf_i+0xb6>
 8008e08:	2a70      	cmp	r2, #112	; 0x70
 8008e0a:	d1e5      	bne.n	8008dd8 <_printf_i+0x30>
 8008e0c:	680a      	ldr	r2, [r1, #0]
 8008e0e:	f042 0220 	orr.w	r2, r2, #32
 8008e12:	600a      	str	r2, [r1, #0]
 8008e14:	e003      	b.n	8008e1e <_printf_i+0x76>
 8008e16:	2a75      	cmp	r2, #117	; 0x75
 8008e18:	d021      	beq.n	8008e5e <_printf_i+0xb6>
 8008e1a:	2a78      	cmp	r2, #120	; 0x78
 8008e1c:	d1dc      	bne.n	8008dd8 <_printf_i+0x30>
 8008e1e:	2278      	movs	r2, #120	; 0x78
 8008e20:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8008e24:	496e      	ldr	r1, [pc, #440]	; (8008fe0 <_printf_i+0x238>)
 8008e26:	e064      	b.n	8008ef2 <_printf_i+0x14a>
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8008e2e:	1d11      	adds	r1, r2, #4
 8008e30:	6019      	str	r1, [r3, #0]
 8008e32:	6813      	ldr	r3, [r2, #0]
 8008e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e0a3      	b.n	8008f84 <_printf_i+0x1dc>
 8008e3c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008e40:	f102 0104 	add.w	r1, r2, #4
 8008e44:	6019      	str	r1, [r3, #0]
 8008e46:	d0d7      	beq.n	8008df8 <_printf_i+0x50>
 8008e48:	f9b2 3000 	ldrsh.w	r3, [r2]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	da03      	bge.n	8008e58 <_printf_i+0xb0>
 8008e50:	222d      	movs	r2, #45	; 0x2d
 8008e52:	425b      	negs	r3, r3
 8008e54:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008e58:	4962      	ldr	r1, [pc, #392]	; (8008fe4 <_printf_i+0x23c>)
 8008e5a:	220a      	movs	r2, #10
 8008e5c:	e017      	b.n	8008e8e <_printf_i+0xe6>
 8008e5e:	6820      	ldr	r0, [r4, #0]
 8008e60:	6819      	ldr	r1, [r3, #0]
 8008e62:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008e66:	d003      	beq.n	8008e70 <_printf_i+0xc8>
 8008e68:	1d08      	adds	r0, r1, #4
 8008e6a:	6018      	str	r0, [r3, #0]
 8008e6c:	680b      	ldr	r3, [r1, #0]
 8008e6e:	e006      	b.n	8008e7e <_printf_i+0xd6>
 8008e70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e74:	f101 0004 	add.w	r0, r1, #4
 8008e78:	6018      	str	r0, [r3, #0]
 8008e7a:	d0f7      	beq.n	8008e6c <_printf_i+0xc4>
 8008e7c:	880b      	ldrh	r3, [r1, #0]
 8008e7e:	4959      	ldr	r1, [pc, #356]	; (8008fe4 <_printf_i+0x23c>)
 8008e80:	2a6f      	cmp	r2, #111	; 0x6f
 8008e82:	bf14      	ite	ne
 8008e84:	220a      	movne	r2, #10
 8008e86:	2208      	moveq	r2, #8
 8008e88:	2000      	movs	r0, #0
 8008e8a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8008e8e:	6865      	ldr	r5, [r4, #4]
 8008e90:	60a5      	str	r5, [r4, #8]
 8008e92:	2d00      	cmp	r5, #0
 8008e94:	f2c0 809c 	blt.w	8008fd0 <_printf_i+0x228>
 8008e98:	6820      	ldr	r0, [r4, #0]
 8008e9a:	f020 0004 	bic.w	r0, r0, #4
 8008e9e:	6020      	str	r0, [r4, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d13f      	bne.n	8008f24 <_printf_i+0x17c>
 8008ea4:	2d00      	cmp	r5, #0
 8008ea6:	f040 8095 	bne.w	8008fd4 <_printf_i+0x22c>
 8008eaa:	4675      	mov	r5, lr
 8008eac:	2a08      	cmp	r2, #8
 8008eae:	d10b      	bne.n	8008ec8 <_printf_i+0x120>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	07da      	lsls	r2, r3, #31
 8008eb4:	d508      	bpl.n	8008ec8 <_printf_i+0x120>
 8008eb6:	6923      	ldr	r3, [r4, #16]
 8008eb8:	6862      	ldr	r2, [r4, #4]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	bfde      	ittt	le
 8008ebe:	2330      	movle	r3, #48	; 0x30
 8008ec0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ec4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ec8:	ebae 0305 	sub.w	r3, lr, r5
 8008ecc:	6123      	str	r3, [r4, #16]
 8008ece:	f8cd 8000 	str.w	r8, [sp]
 8008ed2:	463b      	mov	r3, r7
 8008ed4:	aa03      	add	r2, sp, #12
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f7ff feef 	bl	8008cbc <_printf_common>
 8008ede:	3001      	adds	r0, #1
 8008ee0:	d155      	bne.n	8008f8e <_printf_i+0x1e6>
 8008ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee6:	b005      	add	sp, #20
 8008ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eec:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8008ef0:	493c      	ldr	r1, [pc, #240]	; (8008fe4 <_printf_i+0x23c>)
 8008ef2:	6822      	ldr	r2, [r4, #0]
 8008ef4:	6818      	ldr	r0, [r3, #0]
 8008ef6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008efa:	f100 0504 	add.w	r5, r0, #4
 8008efe:	601d      	str	r5, [r3, #0]
 8008f00:	d001      	beq.n	8008f06 <_printf_i+0x15e>
 8008f02:	6803      	ldr	r3, [r0, #0]
 8008f04:	e002      	b.n	8008f0c <_printf_i+0x164>
 8008f06:	0655      	lsls	r5, r2, #25
 8008f08:	d5fb      	bpl.n	8008f02 <_printf_i+0x15a>
 8008f0a:	8803      	ldrh	r3, [r0, #0]
 8008f0c:	07d0      	lsls	r0, r2, #31
 8008f0e:	bf44      	itt	mi
 8008f10:	f042 0220 	orrmi.w	r2, r2, #32
 8008f14:	6022      	strmi	r2, [r4, #0]
 8008f16:	b91b      	cbnz	r3, 8008f20 <_printf_i+0x178>
 8008f18:	6822      	ldr	r2, [r4, #0]
 8008f1a:	f022 0220 	bic.w	r2, r2, #32
 8008f1e:	6022      	str	r2, [r4, #0]
 8008f20:	2210      	movs	r2, #16
 8008f22:	e7b1      	b.n	8008e88 <_printf_i+0xe0>
 8008f24:	4675      	mov	r5, lr
 8008f26:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f2a:	fb02 3310 	mls	r3, r2, r0, r3
 8008f2e:	5ccb      	ldrb	r3, [r1, r3]
 8008f30:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008f34:	4603      	mov	r3, r0
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d1f5      	bne.n	8008f26 <_printf_i+0x17e>
 8008f3a:	e7b7      	b.n	8008eac <_printf_i+0x104>
 8008f3c:	6808      	ldr	r0, [r1, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	6949      	ldr	r1, [r1, #20]
 8008f42:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008f46:	d004      	beq.n	8008f52 <_printf_i+0x1aa>
 8008f48:	1d10      	adds	r0, r2, #4
 8008f4a:	6018      	str	r0, [r3, #0]
 8008f4c:	6813      	ldr	r3, [r2, #0]
 8008f4e:	6019      	str	r1, [r3, #0]
 8008f50:	e007      	b.n	8008f62 <_printf_i+0x1ba>
 8008f52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f56:	f102 0004 	add.w	r0, r2, #4
 8008f5a:	6018      	str	r0, [r3, #0]
 8008f5c:	6813      	ldr	r3, [r2, #0]
 8008f5e:	d0f6      	beq.n	8008f4e <_printf_i+0x1a6>
 8008f60:	8019      	strh	r1, [r3, #0]
 8008f62:	2300      	movs	r3, #0
 8008f64:	6123      	str	r3, [r4, #16]
 8008f66:	4675      	mov	r5, lr
 8008f68:	e7b1      	b.n	8008ece <_printf_i+0x126>
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	1d11      	adds	r1, r2, #4
 8008f6e:	6019      	str	r1, [r3, #0]
 8008f70:	6815      	ldr	r5, [r2, #0]
 8008f72:	6862      	ldr	r2, [r4, #4]
 8008f74:	2100      	movs	r1, #0
 8008f76:	4628      	mov	r0, r5
 8008f78:	f7f7 fa9a 	bl	80004b0 <memchr>
 8008f7c:	b108      	cbz	r0, 8008f82 <_printf_i+0x1da>
 8008f7e:	1b40      	subs	r0, r0, r5
 8008f80:	6060      	str	r0, [r4, #4]
 8008f82:	6863      	ldr	r3, [r4, #4]
 8008f84:	6123      	str	r3, [r4, #16]
 8008f86:	2300      	movs	r3, #0
 8008f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f8c:	e79f      	b.n	8008ece <_printf_i+0x126>
 8008f8e:	6923      	ldr	r3, [r4, #16]
 8008f90:	462a      	mov	r2, r5
 8008f92:	4639      	mov	r1, r7
 8008f94:	4630      	mov	r0, r6
 8008f96:	47c0      	blx	r8
 8008f98:	3001      	adds	r0, #1
 8008f9a:	d0a2      	beq.n	8008ee2 <_printf_i+0x13a>
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	079b      	lsls	r3, r3, #30
 8008fa0:	d507      	bpl.n	8008fb2 <_printf_i+0x20a>
 8008fa2:	2500      	movs	r5, #0
 8008fa4:	f104 0919 	add.w	r9, r4, #25
 8008fa8:	68e3      	ldr	r3, [r4, #12]
 8008faa:	9a03      	ldr	r2, [sp, #12]
 8008fac:	1a9b      	subs	r3, r3, r2
 8008fae:	429d      	cmp	r5, r3
 8008fb0:	db05      	blt.n	8008fbe <_printf_i+0x216>
 8008fb2:	68e0      	ldr	r0, [r4, #12]
 8008fb4:	9b03      	ldr	r3, [sp, #12]
 8008fb6:	4298      	cmp	r0, r3
 8008fb8:	bfb8      	it	lt
 8008fba:	4618      	movlt	r0, r3
 8008fbc:	e793      	b.n	8008ee6 <_printf_i+0x13e>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	464a      	mov	r2, r9
 8008fc2:	4639      	mov	r1, r7
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	47c0      	blx	r8
 8008fc8:	3001      	adds	r0, #1
 8008fca:	d08a      	beq.n	8008ee2 <_printf_i+0x13a>
 8008fcc:	3501      	adds	r5, #1
 8008fce:	e7eb      	b.n	8008fa8 <_printf_i+0x200>
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1a7      	bne.n	8008f24 <_printf_i+0x17c>
 8008fd4:	780b      	ldrb	r3, [r1, #0]
 8008fd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fde:	e765      	b.n	8008eac <_printf_i+0x104>
 8008fe0:	08009b56 	.word	0x08009b56
 8008fe4:	08009b45 	.word	0x08009b45

08008fe8 <_putc_r>:
 8008fe8:	b570      	push	{r4, r5, r6, lr}
 8008fea:	460d      	mov	r5, r1
 8008fec:	4614      	mov	r4, r2
 8008fee:	4606      	mov	r6, r0
 8008ff0:	b118      	cbz	r0, 8008ffa <_putc_r+0x12>
 8008ff2:	6983      	ldr	r3, [r0, #24]
 8008ff4:	b90b      	cbnz	r3, 8008ffa <_putc_r+0x12>
 8008ff6:	f7ff fc95 	bl	8008924 <__sinit>
 8008ffa:	4b13      	ldr	r3, [pc, #76]	; (8009048 <_putc_r+0x60>)
 8008ffc:	429c      	cmp	r4, r3
 8008ffe:	d112      	bne.n	8009026 <_putc_r+0x3e>
 8009000:	6874      	ldr	r4, [r6, #4]
 8009002:	68a3      	ldr	r3, [r4, #8]
 8009004:	3b01      	subs	r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	60a3      	str	r3, [r4, #8]
 800900a:	da16      	bge.n	800903a <_putc_r+0x52>
 800900c:	69a2      	ldr	r2, [r4, #24]
 800900e:	4293      	cmp	r3, r2
 8009010:	db02      	blt.n	8009018 <_putc_r+0x30>
 8009012:	b2eb      	uxtb	r3, r5
 8009014:	2b0a      	cmp	r3, #10
 8009016:	d110      	bne.n	800903a <_putc_r+0x52>
 8009018:	4622      	mov	r2, r4
 800901a:	4629      	mov	r1, r5
 800901c:	4630      	mov	r0, r6
 800901e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009022:	f000 b85b 	b.w	80090dc <__swbuf_r>
 8009026:	4b09      	ldr	r3, [pc, #36]	; (800904c <_putc_r+0x64>)
 8009028:	429c      	cmp	r4, r3
 800902a:	d101      	bne.n	8009030 <_putc_r+0x48>
 800902c:	68b4      	ldr	r4, [r6, #8]
 800902e:	e7e8      	b.n	8009002 <_putc_r+0x1a>
 8009030:	4b07      	ldr	r3, [pc, #28]	; (8009050 <_putc_r+0x68>)
 8009032:	429c      	cmp	r4, r3
 8009034:	bf08      	it	eq
 8009036:	68f4      	ldreq	r4, [r6, #12]
 8009038:	e7e3      	b.n	8009002 <_putc_r+0x1a>
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	6022      	str	r2, [r4, #0]
 8009040:	701d      	strb	r5, [r3, #0]
 8009042:	b2e8      	uxtb	r0, r5
 8009044:	bd70      	pop	{r4, r5, r6, pc}
 8009046:	bf00      	nop
 8009048:	08009af0 	.word	0x08009af0
 800904c:	08009b10 	.word	0x08009b10
 8009050:	08009ad0 	.word	0x08009ad0

08009054 <__sread>:
 8009054:	b510      	push	{r4, lr}
 8009056:	460c      	mov	r4, r1
 8009058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800905c:	f000 fa48 	bl	80094f0 <_read_r>
 8009060:	2800      	cmp	r0, #0
 8009062:	bfab      	itete	ge
 8009064:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009066:	89a3      	ldrhlt	r3, [r4, #12]
 8009068:	181b      	addge	r3, r3, r0
 800906a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800906e:	bfac      	ite	ge
 8009070:	6563      	strge	r3, [r4, #84]	; 0x54
 8009072:	81a3      	strhlt	r3, [r4, #12]
 8009074:	bd10      	pop	{r4, pc}

08009076 <__swrite>:
 8009076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800907a:	461f      	mov	r7, r3
 800907c:	898b      	ldrh	r3, [r1, #12]
 800907e:	05db      	lsls	r3, r3, #23
 8009080:	4605      	mov	r5, r0
 8009082:	460c      	mov	r4, r1
 8009084:	4616      	mov	r6, r2
 8009086:	d505      	bpl.n	8009094 <__swrite+0x1e>
 8009088:	2302      	movs	r3, #2
 800908a:	2200      	movs	r2, #0
 800908c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009090:	f000 f9b8 	bl	8009404 <_lseek_r>
 8009094:	89a3      	ldrh	r3, [r4, #12]
 8009096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800909a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800909e:	81a3      	strh	r3, [r4, #12]
 80090a0:	4632      	mov	r2, r6
 80090a2:	463b      	mov	r3, r7
 80090a4:	4628      	mov	r0, r5
 80090a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090aa:	f000 b869 	b.w	8009180 <_write_r>

080090ae <__sseek>:
 80090ae:	b510      	push	{r4, lr}
 80090b0:	460c      	mov	r4, r1
 80090b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b6:	f000 f9a5 	bl	8009404 <_lseek_r>
 80090ba:	1c43      	adds	r3, r0, #1
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	bf15      	itete	ne
 80090c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80090c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090ca:	81a3      	strheq	r3, [r4, #12]
 80090cc:	bf18      	it	ne
 80090ce:	81a3      	strhne	r3, [r4, #12]
 80090d0:	bd10      	pop	{r4, pc}

080090d2 <__sclose>:
 80090d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d6:	f000 b8d3 	b.w	8009280 <_close_r>
	...

080090dc <__swbuf_r>:
 80090dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090de:	460e      	mov	r6, r1
 80090e0:	4614      	mov	r4, r2
 80090e2:	4605      	mov	r5, r0
 80090e4:	b118      	cbz	r0, 80090ee <__swbuf_r+0x12>
 80090e6:	6983      	ldr	r3, [r0, #24]
 80090e8:	b90b      	cbnz	r3, 80090ee <__swbuf_r+0x12>
 80090ea:	f7ff fc1b 	bl	8008924 <__sinit>
 80090ee:	4b21      	ldr	r3, [pc, #132]	; (8009174 <__swbuf_r+0x98>)
 80090f0:	429c      	cmp	r4, r3
 80090f2:	d12a      	bne.n	800914a <__swbuf_r+0x6e>
 80090f4:	686c      	ldr	r4, [r5, #4]
 80090f6:	69a3      	ldr	r3, [r4, #24]
 80090f8:	60a3      	str	r3, [r4, #8]
 80090fa:	89a3      	ldrh	r3, [r4, #12]
 80090fc:	071a      	lsls	r2, r3, #28
 80090fe:	d52e      	bpl.n	800915e <__swbuf_r+0x82>
 8009100:	6923      	ldr	r3, [r4, #16]
 8009102:	b363      	cbz	r3, 800915e <__swbuf_r+0x82>
 8009104:	6923      	ldr	r3, [r4, #16]
 8009106:	6820      	ldr	r0, [r4, #0]
 8009108:	1ac0      	subs	r0, r0, r3
 800910a:	6963      	ldr	r3, [r4, #20]
 800910c:	b2f6      	uxtb	r6, r6
 800910e:	4298      	cmp	r0, r3
 8009110:	4637      	mov	r7, r6
 8009112:	db04      	blt.n	800911e <__swbuf_r+0x42>
 8009114:	4621      	mov	r1, r4
 8009116:	4628      	mov	r0, r5
 8009118:	f000 f94a 	bl	80093b0 <_fflush_r>
 800911c:	bb28      	cbnz	r0, 800916a <__swbuf_r+0x8e>
 800911e:	68a3      	ldr	r3, [r4, #8]
 8009120:	3b01      	subs	r3, #1
 8009122:	60a3      	str	r3, [r4, #8]
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	1c5a      	adds	r2, r3, #1
 8009128:	6022      	str	r2, [r4, #0]
 800912a:	701e      	strb	r6, [r3, #0]
 800912c:	6963      	ldr	r3, [r4, #20]
 800912e:	3001      	adds	r0, #1
 8009130:	4298      	cmp	r0, r3
 8009132:	d004      	beq.n	800913e <__swbuf_r+0x62>
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	07db      	lsls	r3, r3, #31
 8009138:	d519      	bpl.n	800916e <__swbuf_r+0x92>
 800913a:	2e0a      	cmp	r6, #10
 800913c:	d117      	bne.n	800916e <__swbuf_r+0x92>
 800913e:	4621      	mov	r1, r4
 8009140:	4628      	mov	r0, r5
 8009142:	f000 f935 	bl	80093b0 <_fflush_r>
 8009146:	b190      	cbz	r0, 800916e <__swbuf_r+0x92>
 8009148:	e00f      	b.n	800916a <__swbuf_r+0x8e>
 800914a:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <__swbuf_r+0x9c>)
 800914c:	429c      	cmp	r4, r3
 800914e:	d101      	bne.n	8009154 <__swbuf_r+0x78>
 8009150:	68ac      	ldr	r4, [r5, #8]
 8009152:	e7d0      	b.n	80090f6 <__swbuf_r+0x1a>
 8009154:	4b09      	ldr	r3, [pc, #36]	; (800917c <__swbuf_r+0xa0>)
 8009156:	429c      	cmp	r4, r3
 8009158:	bf08      	it	eq
 800915a:	68ec      	ldreq	r4, [r5, #12]
 800915c:	e7cb      	b.n	80090f6 <__swbuf_r+0x1a>
 800915e:	4621      	mov	r1, r4
 8009160:	4628      	mov	r0, r5
 8009162:	f000 f81f 	bl	80091a4 <__swsetup_r>
 8009166:	2800      	cmp	r0, #0
 8009168:	d0cc      	beq.n	8009104 <__swbuf_r+0x28>
 800916a:	f04f 37ff 	mov.w	r7, #4294967295
 800916e:	4638      	mov	r0, r7
 8009170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009172:	bf00      	nop
 8009174:	08009af0 	.word	0x08009af0
 8009178:	08009b10 	.word	0x08009b10
 800917c:	08009ad0 	.word	0x08009ad0

08009180 <_write_r>:
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	4c07      	ldr	r4, [pc, #28]	; (80091a0 <_write_r+0x20>)
 8009184:	4605      	mov	r5, r0
 8009186:	4608      	mov	r0, r1
 8009188:	4611      	mov	r1, r2
 800918a:	2200      	movs	r2, #0
 800918c:	6022      	str	r2, [r4, #0]
 800918e:	461a      	mov	r2, r3
 8009190:	f000 fa18 	bl	80095c4 <_write>
 8009194:	1c43      	adds	r3, r0, #1
 8009196:	d102      	bne.n	800919e <_write_r+0x1e>
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	b103      	cbz	r3, 800919e <_write_r+0x1e>
 800919c:	602b      	str	r3, [r5, #0]
 800919e:	bd38      	pop	{r3, r4, r5, pc}
 80091a0:	2000083c 	.word	0x2000083c

080091a4 <__swsetup_r>:
 80091a4:	4b32      	ldr	r3, [pc, #200]	; (8009270 <__swsetup_r+0xcc>)
 80091a6:	b570      	push	{r4, r5, r6, lr}
 80091a8:	681d      	ldr	r5, [r3, #0]
 80091aa:	4606      	mov	r6, r0
 80091ac:	460c      	mov	r4, r1
 80091ae:	b125      	cbz	r5, 80091ba <__swsetup_r+0x16>
 80091b0:	69ab      	ldr	r3, [r5, #24]
 80091b2:	b913      	cbnz	r3, 80091ba <__swsetup_r+0x16>
 80091b4:	4628      	mov	r0, r5
 80091b6:	f7ff fbb5 	bl	8008924 <__sinit>
 80091ba:	4b2e      	ldr	r3, [pc, #184]	; (8009274 <__swsetup_r+0xd0>)
 80091bc:	429c      	cmp	r4, r3
 80091be:	d10f      	bne.n	80091e0 <__swsetup_r+0x3c>
 80091c0:	686c      	ldr	r4, [r5, #4]
 80091c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	0715      	lsls	r5, r2, #28
 80091ca:	d42c      	bmi.n	8009226 <__swsetup_r+0x82>
 80091cc:	06d0      	lsls	r0, r2, #27
 80091ce:	d411      	bmi.n	80091f4 <__swsetup_r+0x50>
 80091d0:	2209      	movs	r2, #9
 80091d2:	6032      	str	r2, [r6, #0]
 80091d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091d8:	81a3      	strh	r3, [r4, #12]
 80091da:	f04f 30ff 	mov.w	r0, #4294967295
 80091de:	bd70      	pop	{r4, r5, r6, pc}
 80091e0:	4b25      	ldr	r3, [pc, #148]	; (8009278 <__swsetup_r+0xd4>)
 80091e2:	429c      	cmp	r4, r3
 80091e4:	d101      	bne.n	80091ea <__swsetup_r+0x46>
 80091e6:	68ac      	ldr	r4, [r5, #8]
 80091e8:	e7eb      	b.n	80091c2 <__swsetup_r+0x1e>
 80091ea:	4b24      	ldr	r3, [pc, #144]	; (800927c <__swsetup_r+0xd8>)
 80091ec:	429c      	cmp	r4, r3
 80091ee:	bf08      	it	eq
 80091f0:	68ec      	ldreq	r4, [r5, #12]
 80091f2:	e7e6      	b.n	80091c2 <__swsetup_r+0x1e>
 80091f4:	0751      	lsls	r1, r2, #29
 80091f6:	d512      	bpl.n	800921e <__swsetup_r+0x7a>
 80091f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091fa:	b141      	cbz	r1, 800920e <__swsetup_r+0x6a>
 80091fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009200:	4299      	cmp	r1, r3
 8009202:	d002      	beq.n	800920a <__swsetup_r+0x66>
 8009204:	4630      	mov	r0, r6
 8009206:	f7ff fa65 	bl	80086d4 <_free_r>
 800920a:	2300      	movs	r3, #0
 800920c:	6363      	str	r3, [r4, #52]	; 0x34
 800920e:	89a3      	ldrh	r3, [r4, #12]
 8009210:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009214:	81a3      	strh	r3, [r4, #12]
 8009216:	2300      	movs	r3, #0
 8009218:	6063      	str	r3, [r4, #4]
 800921a:	6923      	ldr	r3, [r4, #16]
 800921c:	6023      	str	r3, [r4, #0]
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	f043 0308 	orr.w	r3, r3, #8
 8009224:	81a3      	strh	r3, [r4, #12]
 8009226:	6923      	ldr	r3, [r4, #16]
 8009228:	b94b      	cbnz	r3, 800923e <__swsetup_r+0x9a>
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009234:	d003      	beq.n	800923e <__swsetup_r+0x9a>
 8009236:	4621      	mov	r1, r4
 8009238:	4630      	mov	r0, r6
 800923a:	f000 f919 	bl	8009470 <__smakebuf_r>
 800923e:	89a2      	ldrh	r2, [r4, #12]
 8009240:	f012 0301 	ands.w	r3, r2, #1
 8009244:	d00c      	beq.n	8009260 <__swsetup_r+0xbc>
 8009246:	2300      	movs	r3, #0
 8009248:	60a3      	str	r3, [r4, #8]
 800924a:	6963      	ldr	r3, [r4, #20]
 800924c:	425b      	negs	r3, r3
 800924e:	61a3      	str	r3, [r4, #24]
 8009250:	6923      	ldr	r3, [r4, #16]
 8009252:	b953      	cbnz	r3, 800926a <__swsetup_r+0xc6>
 8009254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009258:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800925c:	d1ba      	bne.n	80091d4 <__swsetup_r+0x30>
 800925e:	bd70      	pop	{r4, r5, r6, pc}
 8009260:	0792      	lsls	r2, r2, #30
 8009262:	bf58      	it	pl
 8009264:	6963      	ldrpl	r3, [r4, #20]
 8009266:	60a3      	str	r3, [r4, #8]
 8009268:	e7f2      	b.n	8009250 <__swsetup_r+0xac>
 800926a:	2000      	movs	r0, #0
 800926c:	e7f7      	b.n	800925e <__swsetup_r+0xba>
 800926e:	bf00      	nop
 8009270:	2000007c 	.word	0x2000007c
 8009274:	08009af0 	.word	0x08009af0
 8009278:	08009b10 	.word	0x08009b10
 800927c:	08009ad0 	.word	0x08009ad0

08009280 <_close_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4c06      	ldr	r4, [pc, #24]	; (800929c <_close_r+0x1c>)
 8009284:	2300      	movs	r3, #0
 8009286:	4605      	mov	r5, r0
 8009288:	4608      	mov	r0, r1
 800928a:	6023      	str	r3, [r4, #0]
 800928c:	f000 f964 	bl	8009558 <_close>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_close_r+0x1a>
 8009294:	6823      	ldr	r3, [r4, #0]
 8009296:	b103      	cbz	r3, 800929a <_close_r+0x1a>
 8009298:	602b      	str	r3, [r5, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	2000083c 	.word	0x2000083c

080092a0 <__sflush_r>:
 80092a0:	898a      	ldrh	r2, [r1, #12]
 80092a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092a6:	4605      	mov	r5, r0
 80092a8:	0710      	lsls	r0, r2, #28
 80092aa:	460c      	mov	r4, r1
 80092ac:	d45a      	bmi.n	8009364 <__sflush_r+0xc4>
 80092ae:	684b      	ldr	r3, [r1, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	dc05      	bgt.n	80092c0 <__sflush_r+0x20>
 80092b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	dc02      	bgt.n	80092c0 <__sflush_r+0x20>
 80092ba:	2000      	movs	r0, #0
 80092bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092c2:	2e00      	cmp	r6, #0
 80092c4:	d0f9      	beq.n	80092ba <__sflush_r+0x1a>
 80092c6:	2300      	movs	r3, #0
 80092c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092cc:	682f      	ldr	r7, [r5, #0]
 80092ce:	602b      	str	r3, [r5, #0]
 80092d0:	d033      	beq.n	800933a <__sflush_r+0x9a>
 80092d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092d4:	89a3      	ldrh	r3, [r4, #12]
 80092d6:	075a      	lsls	r2, r3, #29
 80092d8:	d505      	bpl.n	80092e6 <__sflush_r+0x46>
 80092da:	6863      	ldr	r3, [r4, #4]
 80092dc:	1ac0      	subs	r0, r0, r3
 80092de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092e0:	b10b      	cbz	r3, 80092e6 <__sflush_r+0x46>
 80092e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092e4:	1ac0      	subs	r0, r0, r3
 80092e6:	2300      	movs	r3, #0
 80092e8:	4602      	mov	r2, r0
 80092ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092ec:	6a21      	ldr	r1, [r4, #32]
 80092ee:	4628      	mov	r0, r5
 80092f0:	47b0      	blx	r6
 80092f2:	1c43      	adds	r3, r0, #1
 80092f4:	89a3      	ldrh	r3, [r4, #12]
 80092f6:	d106      	bne.n	8009306 <__sflush_r+0x66>
 80092f8:	6829      	ldr	r1, [r5, #0]
 80092fa:	291d      	cmp	r1, #29
 80092fc:	d84b      	bhi.n	8009396 <__sflush_r+0xf6>
 80092fe:	4a2b      	ldr	r2, [pc, #172]	; (80093ac <__sflush_r+0x10c>)
 8009300:	40ca      	lsrs	r2, r1
 8009302:	07d6      	lsls	r6, r2, #31
 8009304:	d547      	bpl.n	8009396 <__sflush_r+0xf6>
 8009306:	2200      	movs	r2, #0
 8009308:	6062      	str	r2, [r4, #4]
 800930a:	04d9      	lsls	r1, r3, #19
 800930c:	6922      	ldr	r2, [r4, #16]
 800930e:	6022      	str	r2, [r4, #0]
 8009310:	d504      	bpl.n	800931c <__sflush_r+0x7c>
 8009312:	1c42      	adds	r2, r0, #1
 8009314:	d101      	bne.n	800931a <__sflush_r+0x7a>
 8009316:	682b      	ldr	r3, [r5, #0]
 8009318:	b903      	cbnz	r3, 800931c <__sflush_r+0x7c>
 800931a:	6560      	str	r0, [r4, #84]	; 0x54
 800931c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800931e:	602f      	str	r7, [r5, #0]
 8009320:	2900      	cmp	r1, #0
 8009322:	d0ca      	beq.n	80092ba <__sflush_r+0x1a>
 8009324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009328:	4299      	cmp	r1, r3
 800932a:	d002      	beq.n	8009332 <__sflush_r+0x92>
 800932c:	4628      	mov	r0, r5
 800932e:	f7ff f9d1 	bl	80086d4 <_free_r>
 8009332:	2000      	movs	r0, #0
 8009334:	6360      	str	r0, [r4, #52]	; 0x34
 8009336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800933a:	6a21      	ldr	r1, [r4, #32]
 800933c:	2301      	movs	r3, #1
 800933e:	4628      	mov	r0, r5
 8009340:	47b0      	blx	r6
 8009342:	1c41      	adds	r1, r0, #1
 8009344:	d1c6      	bne.n	80092d4 <__sflush_r+0x34>
 8009346:	682b      	ldr	r3, [r5, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d0c3      	beq.n	80092d4 <__sflush_r+0x34>
 800934c:	2b1d      	cmp	r3, #29
 800934e:	d001      	beq.n	8009354 <__sflush_r+0xb4>
 8009350:	2b16      	cmp	r3, #22
 8009352:	d101      	bne.n	8009358 <__sflush_r+0xb8>
 8009354:	602f      	str	r7, [r5, #0]
 8009356:	e7b0      	b.n	80092ba <__sflush_r+0x1a>
 8009358:	89a3      	ldrh	r3, [r4, #12]
 800935a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009364:	690f      	ldr	r7, [r1, #16]
 8009366:	2f00      	cmp	r7, #0
 8009368:	d0a7      	beq.n	80092ba <__sflush_r+0x1a>
 800936a:	0793      	lsls	r3, r2, #30
 800936c:	680e      	ldr	r6, [r1, #0]
 800936e:	bf08      	it	eq
 8009370:	694b      	ldreq	r3, [r1, #20]
 8009372:	600f      	str	r7, [r1, #0]
 8009374:	bf18      	it	ne
 8009376:	2300      	movne	r3, #0
 8009378:	eba6 0807 	sub.w	r8, r6, r7
 800937c:	608b      	str	r3, [r1, #8]
 800937e:	f1b8 0f00 	cmp.w	r8, #0
 8009382:	dd9a      	ble.n	80092ba <__sflush_r+0x1a>
 8009384:	4643      	mov	r3, r8
 8009386:	463a      	mov	r2, r7
 8009388:	6a21      	ldr	r1, [r4, #32]
 800938a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800938c:	4628      	mov	r0, r5
 800938e:	47b0      	blx	r6
 8009390:	2800      	cmp	r0, #0
 8009392:	dc07      	bgt.n	80093a4 <__sflush_r+0x104>
 8009394:	89a3      	ldrh	r3, [r4, #12]
 8009396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	f04f 30ff 	mov.w	r0, #4294967295
 80093a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a4:	4407      	add	r7, r0
 80093a6:	eba8 0800 	sub.w	r8, r8, r0
 80093aa:	e7e8      	b.n	800937e <__sflush_r+0xde>
 80093ac:	20400001 	.word	0x20400001

080093b0 <_fflush_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	690b      	ldr	r3, [r1, #16]
 80093b4:	4605      	mov	r5, r0
 80093b6:	460c      	mov	r4, r1
 80093b8:	b1db      	cbz	r3, 80093f2 <_fflush_r+0x42>
 80093ba:	b118      	cbz	r0, 80093c4 <_fflush_r+0x14>
 80093bc:	6983      	ldr	r3, [r0, #24]
 80093be:	b90b      	cbnz	r3, 80093c4 <_fflush_r+0x14>
 80093c0:	f7ff fab0 	bl	8008924 <__sinit>
 80093c4:	4b0c      	ldr	r3, [pc, #48]	; (80093f8 <_fflush_r+0x48>)
 80093c6:	429c      	cmp	r4, r3
 80093c8:	d109      	bne.n	80093de <_fflush_r+0x2e>
 80093ca:	686c      	ldr	r4, [r5, #4]
 80093cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093d0:	b17b      	cbz	r3, 80093f2 <_fflush_r+0x42>
 80093d2:	4621      	mov	r1, r4
 80093d4:	4628      	mov	r0, r5
 80093d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093da:	f7ff bf61 	b.w	80092a0 <__sflush_r>
 80093de:	4b07      	ldr	r3, [pc, #28]	; (80093fc <_fflush_r+0x4c>)
 80093e0:	429c      	cmp	r4, r3
 80093e2:	d101      	bne.n	80093e8 <_fflush_r+0x38>
 80093e4:	68ac      	ldr	r4, [r5, #8]
 80093e6:	e7f1      	b.n	80093cc <_fflush_r+0x1c>
 80093e8:	4b05      	ldr	r3, [pc, #20]	; (8009400 <_fflush_r+0x50>)
 80093ea:	429c      	cmp	r4, r3
 80093ec:	bf08      	it	eq
 80093ee:	68ec      	ldreq	r4, [r5, #12]
 80093f0:	e7ec      	b.n	80093cc <_fflush_r+0x1c>
 80093f2:	2000      	movs	r0, #0
 80093f4:	bd38      	pop	{r3, r4, r5, pc}
 80093f6:	bf00      	nop
 80093f8:	08009af0 	.word	0x08009af0
 80093fc:	08009b10 	.word	0x08009b10
 8009400:	08009ad0 	.word	0x08009ad0

08009404 <_lseek_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4c07      	ldr	r4, [pc, #28]	; (8009424 <_lseek_r+0x20>)
 8009408:	4605      	mov	r5, r0
 800940a:	4608      	mov	r0, r1
 800940c:	4611      	mov	r1, r2
 800940e:	2200      	movs	r2, #0
 8009410:	6022      	str	r2, [r4, #0]
 8009412:	461a      	mov	r2, r3
 8009414:	f000 f8b8 	bl	8009588 <_lseek>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_lseek_r+0x1e>
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	b103      	cbz	r3, 8009422 <_lseek_r+0x1e>
 8009420:	602b      	str	r3, [r5, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	2000083c 	.word	0x2000083c

08009428 <__swhatbuf_r>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	460e      	mov	r6, r1
 800942c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009430:	2900      	cmp	r1, #0
 8009432:	b090      	sub	sp, #64	; 0x40
 8009434:	4614      	mov	r4, r2
 8009436:	461d      	mov	r5, r3
 8009438:	da07      	bge.n	800944a <__swhatbuf_r+0x22>
 800943a:	2300      	movs	r3, #0
 800943c:	602b      	str	r3, [r5, #0]
 800943e:	89b3      	ldrh	r3, [r6, #12]
 8009440:	061a      	lsls	r2, r3, #24
 8009442:	d410      	bmi.n	8009466 <__swhatbuf_r+0x3e>
 8009444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009448:	e00e      	b.n	8009468 <__swhatbuf_r+0x40>
 800944a:	aa01      	add	r2, sp, #4
 800944c:	f000 f862 	bl	8009514 <_fstat_r>
 8009450:	2800      	cmp	r0, #0
 8009452:	dbf2      	blt.n	800943a <__swhatbuf_r+0x12>
 8009454:	9a02      	ldr	r2, [sp, #8]
 8009456:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800945a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800945e:	425a      	negs	r2, r3
 8009460:	415a      	adcs	r2, r3
 8009462:	602a      	str	r2, [r5, #0]
 8009464:	e7ee      	b.n	8009444 <__swhatbuf_r+0x1c>
 8009466:	2340      	movs	r3, #64	; 0x40
 8009468:	2000      	movs	r0, #0
 800946a:	6023      	str	r3, [r4, #0]
 800946c:	b010      	add	sp, #64	; 0x40
 800946e:	bd70      	pop	{r4, r5, r6, pc}

08009470 <__smakebuf_r>:
 8009470:	898b      	ldrh	r3, [r1, #12]
 8009472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009474:	079d      	lsls	r5, r3, #30
 8009476:	4606      	mov	r6, r0
 8009478:	460c      	mov	r4, r1
 800947a:	d507      	bpl.n	800948c <__smakebuf_r+0x1c>
 800947c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	6123      	str	r3, [r4, #16]
 8009484:	2301      	movs	r3, #1
 8009486:	6163      	str	r3, [r4, #20]
 8009488:	b002      	add	sp, #8
 800948a:	bd70      	pop	{r4, r5, r6, pc}
 800948c:	ab01      	add	r3, sp, #4
 800948e:	466a      	mov	r2, sp
 8009490:	f7ff ffca 	bl	8009428 <__swhatbuf_r>
 8009494:	9900      	ldr	r1, [sp, #0]
 8009496:	4605      	mov	r5, r0
 8009498:	4630      	mov	r0, r6
 800949a:	f7ff f969 	bl	8008770 <_malloc_r>
 800949e:	b948      	cbnz	r0, 80094b4 <__smakebuf_r+0x44>
 80094a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a4:	059a      	lsls	r2, r3, #22
 80094a6:	d4ef      	bmi.n	8009488 <__smakebuf_r+0x18>
 80094a8:	f023 0303 	bic.w	r3, r3, #3
 80094ac:	f043 0302 	orr.w	r3, r3, #2
 80094b0:	81a3      	strh	r3, [r4, #12]
 80094b2:	e7e3      	b.n	800947c <__smakebuf_r+0xc>
 80094b4:	4b0d      	ldr	r3, [pc, #52]	; (80094ec <__smakebuf_r+0x7c>)
 80094b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	6020      	str	r0, [r4, #0]
 80094bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094c0:	81a3      	strh	r3, [r4, #12]
 80094c2:	9b00      	ldr	r3, [sp, #0]
 80094c4:	6163      	str	r3, [r4, #20]
 80094c6:	9b01      	ldr	r3, [sp, #4]
 80094c8:	6120      	str	r0, [r4, #16]
 80094ca:	b15b      	cbz	r3, 80094e4 <__smakebuf_r+0x74>
 80094cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094d0:	4630      	mov	r0, r6
 80094d2:	f000 f831 	bl	8009538 <_isatty_r>
 80094d6:	b128      	cbz	r0, 80094e4 <__smakebuf_r+0x74>
 80094d8:	89a3      	ldrh	r3, [r4, #12]
 80094da:	f023 0303 	bic.w	r3, r3, #3
 80094de:	f043 0301 	orr.w	r3, r3, #1
 80094e2:	81a3      	strh	r3, [r4, #12]
 80094e4:	89a3      	ldrh	r3, [r4, #12]
 80094e6:	431d      	orrs	r5, r3
 80094e8:	81a5      	strh	r5, [r4, #12]
 80094ea:	e7cd      	b.n	8009488 <__smakebuf_r+0x18>
 80094ec:	080088a5 	.word	0x080088a5

080094f0 <_read_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4c07      	ldr	r4, [pc, #28]	; (8009510 <_read_r+0x20>)
 80094f4:	4605      	mov	r5, r0
 80094f6:	4608      	mov	r0, r1
 80094f8:	4611      	mov	r1, r2
 80094fa:	2200      	movs	r2, #0
 80094fc:	6022      	str	r2, [r4, #0]
 80094fe:	461a      	mov	r2, r3
 8009500:	f000 f84a 	bl	8009598 <_read>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	d102      	bne.n	800950e <_read_r+0x1e>
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	b103      	cbz	r3, 800950e <_read_r+0x1e>
 800950c:	602b      	str	r3, [r5, #0]
 800950e:	bd38      	pop	{r3, r4, r5, pc}
 8009510:	2000083c 	.word	0x2000083c

08009514 <_fstat_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4c07      	ldr	r4, [pc, #28]	; (8009534 <_fstat_r+0x20>)
 8009518:	2300      	movs	r3, #0
 800951a:	4605      	mov	r5, r0
 800951c:	4608      	mov	r0, r1
 800951e:	4611      	mov	r1, r2
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	f000 f821 	bl	8009568 <_fstat>
 8009526:	1c43      	adds	r3, r0, #1
 8009528:	d102      	bne.n	8009530 <_fstat_r+0x1c>
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	b103      	cbz	r3, 8009530 <_fstat_r+0x1c>
 800952e:	602b      	str	r3, [r5, #0]
 8009530:	bd38      	pop	{r3, r4, r5, pc}
 8009532:	bf00      	nop
 8009534:	2000083c 	.word	0x2000083c

08009538 <_isatty_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4c06      	ldr	r4, [pc, #24]	; (8009554 <_isatty_r+0x1c>)
 800953c:	2300      	movs	r3, #0
 800953e:	4605      	mov	r5, r0
 8009540:	4608      	mov	r0, r1
 8009542:	6023      	str	r3, [r4, #0]
 8009544:	f000 f818 	bl	8009578 <_isatty>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d102      	bne.n	8009552 <_isatty_r+0x1a>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	b103      	cbz	r3, 8009552 <_isatty_r+0x1a>
 8009550:	602b      	str	r3, [r5, #0]
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	2000083c 	.word	0x2000083c

08009558 <_close>:
 8009558:	4b02      	ldr	r3, [pc, #8]	; (8009564 <_close+0xc>)
 800955a:	2258      	movs	r2, #88	; 0x58
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	f04f 30ff 	mov.w	r0, #4294967295
 8009562:	4770      	bx	lr
 8009564:	2000083c 	.word	0x2000083c

08009568 <_fstat>:
 8009568:	4b02      	ldr	r3, [pc, #8]	; (8009574 <_fstat+0xc>)
 800956a:	2258      	movs	r2, #88	; 0x58
 800956c:	601a      	str	r2, [r3, #0]
 800956e:	f04f 30ff 	mov.w	r0, #4294967295
 8009572:	4770      	bx	lr
 8009574:	2000083c 	.word	0x2000083c

08009578 <_isatty>:
 8009578:	4b02      	ldr	r3, [pc, #8]	; (8009584 <_isatty+0xc>)
 800957a:	2258      	movs	r2, #88	; 0x58
 800957c:	601a      	str	r2, [r3, #0]
 800957e:	2000      	movs	r0, #0
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	2000083c 	.word	0x2000083c

08009588 <_lseek>:
 8009588:	4b02      	ldr	r3, [pc, #8]	; (8009594 <_lseek+0xc>)
 800958a:	2258      	movs	r2, #88	; 0x58
 800958c:	601a      	str	r2, [r3, #0]
 800958e:	f04f 30ff 	mov.w	r0, #4294967295
 8009592:	4770      	bx	lr
 8009594:	2000083c 	.word	0x2000083c

08009598 <_read>:
 8009598:	4b02      	ldr	r3, [pc, #8]	; (80095a4 <_read+0xc>)
 800959a:	2258      	movs	r2, #88	; 0x58
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	f04f 30ff 	mov.w	r0, #4294967295
 80095a2:	4770      	bx	lr
 80095a4:	2000083c 	.word	0x2000083c

080095a8 <_sbrk>:
 80095a8:	4b04      	ldr	r3, [pc, #16]	; (80095bc <_sbrk+0x14>)
 80095aa:	6819      	ldr	r1, [r3, #0]
 80095ac:	4602      	mov	r2, r0
 80095ae:	b909      	cbnz	r1, 80095b4 <_sbrk+0xc>
 80095b0:	4903      	ldr	r1, [pc, #12]	; (80095c0 <_sbrk+0x18>)
 80095b2:	6019      	str	r1, [r3, #0]
 80095b4:	6818      	ldr	r0, [r3, #0]
 80095b6:	4402      	add	r2, r0
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	4770      	bx	lr
 80095bc:	20000108 	.word	0x20000108
 80095c0:	20000840 	.word	0x20000840

080095c4 <_write>:
 80095c4:	4b02      	ldr	r3, [pc, #8]	; (80095d0 <_write+0xc>)
 80095c6:	2258      	movs	r2, #88	; 0x58
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	f04f 30ff 	mov.w	r0, #4294967295
 80095ce:	4770      	bx	lr
 80095d0:	2000083c 	.word	0x2000083c

080095d4 <_init>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	bf00      	nop
 80095d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095da:	bc08      	pop	{r3}
 80095dc:	469e      	mov	lr, r3
 80095de:	4770      	bx	lr

080095e0 <_fini>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	bf00      	nop
 80095e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e6:	bc08      	pop	{r3}
 80095e8:	469e      	mov	lr, r3
 80095ea:	4770      	bx	lr
