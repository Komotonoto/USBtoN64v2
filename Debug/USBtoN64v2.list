
USBtoN64v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c70  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08008e34  08008e34  00018e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008fc0  08008fc0  00018fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008fc8  08008fc8  00018fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008fcc  08008fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e0  20000000  08008fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007d8  200000e0  080090b0  000200e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200008b8  080090b0  000208b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020d92  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004193  00000000  00000000  00040ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d90  00000000  00000000  00045038  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000be8  00000000  00000000  00045dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007dfe  00000000  00000000  000469b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000050ad  00000000  00000000  0004e7ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005385b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000036c8  00000000  00000000  000538d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000e0 	.word	0x200000e0
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008e1c 	.word	0x08008e1c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000e4 	.word	0x200000e4
 8000200:	08008e1c 	.word	0x08008e1c

08000204 <my_wait_us_asm>:
.globl my_wait_us_asm
.type  my_wait_us_asm, %function

my_wait_us_asm:
WAIT_1_US:
    ADD     R1, R2, #0      // clock cycle 1
 8000204:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000208:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800020c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000210:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000214:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000218:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800021c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000220:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000224:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 10
 8000228:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800022c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000230:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000234:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000238:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800023c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000240:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000244:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000248:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800024c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 20
 8000250:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000254:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000258:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800025c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000260:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000264:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000268:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800026c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000270:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000274:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 30
 8000278:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800027c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000280:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000284:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000288:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800028c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000290:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000294:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000298:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800029c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 40
 80002a0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002a4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002a8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002ac:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002b0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002b4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002b8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002bc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002c0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002c4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 50
 80002c8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002cc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002d0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002d4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002d8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002dc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002e0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002e4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002e8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002ec:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 60
 80002f0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002f4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002f8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002fc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000300:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000304:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000308:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800030c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000310:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000314:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 70
 8000318:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800031c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000320:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000324:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000328:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800032c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000330:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000334:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000338:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800033c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 80
 8000340:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000344:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000348:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800034c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000350:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000354:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000358:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800035c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000360:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000364:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 90
 8000368:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800036c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000370:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000374:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000378:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800037c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000380:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000384:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000388:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800038c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 100
 8000390:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000394:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000398:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800039c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003a0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003a4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003a8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003ac:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003b0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003b4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 110
 80003b8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003bc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003c0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003c4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003c8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003cc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003d0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003d4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003d8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003dc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 120
 80003e0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003e4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003e8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003ec:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003f0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003f4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003f8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003fc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000400:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000404:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 130
 8000408:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800040c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000410:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000414:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000418:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800041c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000420:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000424:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000428:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800042c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 140
 8000430:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000434:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000438:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800043c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000440:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000444:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000448:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800044c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000450:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000454:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 150
 8000458:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800045c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000460:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000464:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000468:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800046c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000470:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000474:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000478:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800047c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 160
 8000480:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000484:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000488:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800048c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000490:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000494:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0		// 166
 8000498:	f102 0100 	add.w	r1, r2, #0

    SUBS    R0, R0, #1      // clock cycle 167
 800049c:	3801      	subs	r0, #1
    BGT     WAIT_1_US       // clock cycle 168
 800049e:	f73f aeb1 	bgt.w	8000204 <my_wait_us_asm>

    BX      LR      // return
 80004a2:	4770      	bx	lr

080004a4 <__aeabi_uldivmod>:
 80004a4:	b953      	cbnz	r3, 80004bc <__aeabi_uldivmod+0x18>
 80004a6:	b94a      	cbnz	r2, 80004bc <__aeabi_uldivmod+0x18>
 80004a8:	2900      	cmp	r1, #0
 80004aa:	bf08      	it	eq
 80004ac:	2800      	cmpeq	r0, #0
 80004ae:	bf1c      	itt	ne
 80004b0:	f04f 31ff 	movne.w	r1, #4294967295
 80004b4:	f04f 30ff 	movne.w	r0, #4294967295
 80004b8:	f000 b97a 	b.w	80007b0 <__aeabi_idiv0>
 80004bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80004c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004c4:	f000 f806 	bl	80004d4 <__udivmoddi4>
 80004c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004d0:	b004      	add	sp, #16
 80004d2:	4770      	bx	lr

080004d4 <__udivmoddi4>:
 80004d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004d8:	468c      	mov	ip, r1
 80004da:	460d      	mov	r5, r1
 80004dc:	4604      	mov	r4, r0
 80004de:	9e08      	ldr	r6, [sp, #32]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d151      	bne.n	8000588 <__udivmoddi4+0xb4>
 80004e4:	428a      	cmp	r2, r1
 80004e6:	4617      	mov	r7, r2
 80004e8:	d96d      	bls.n	80005c6 <__udivmoddi4+0xf2>
 80004ea:	fab2 fe82 	clz	lr, r2
 80004ee:	f1be 0f00 	cmp.w	lr, #0
 80004f2:	d00b      	beq.n	800050c <__udivmoddi4+0x38>
 80004f4:	f1ce 0c20 	rsb	ip, lr, #32
 80004f8:	fa01 f50e 	lsl.w	r5, r1, lr
 80004fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000500:	fa02 f70e 	lsl.w	r7, r2, lr
 8000504:	ea4c 0c05 	orr.w	ip, ip, r5
 8000508:	fa00 f40e 	lsl.w	r4, r0, lr
 800050c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000510:	0c25      	lsrs	r5, r4, #16
 8000512:	fbbc f8fa 	udiv	r8, ip, sl
 8000516:	fa1f f987 	uxth.w	r9, r7
 800051a:	fb0a cc18 	mls	ip, sl, r8, ip
 800051e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000522:	fb08 f309 	mul.w	r3, r8, r9
 8000526:	42ab      	cmp	r3, r5
 8000528:	d90a      	bls.n	8000540 <__udivmoddi4+0x6c>
 800052a:	19ed      	adds	r5, r5, r7
 800052c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000530:	f080 8123 	bcs.w	800077a <__udivmoddi4+0x2a6>
 8000534:	42ab      	cmp	r3, r5
 8000536:	f240 8120 	bls.w	800077a <__udivmoddi4+0x2a6>
 800053a:	f1a8 0802 	sub.w	r8, r8, #2
 800053e:	443d      	add	r5, r7
 8000540:	1aed      	subs	r5, r5, r3
 8000542:	b2a4      	uxth	r4, r4
 8000544:	fbb5 f0fa 	udiv	r0, r5, sl
 8000548:	fb0a 5510 	mls	r5, sl, r0, r5
 800054c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000550:	fb00 f909 	mul.w	r9, r0, r9
 8000554:	45a1      	cmp	r9, r4
 8000556:	d909      	bls.n	800056c <__udivmoddi4+0x98>
 8000558:	19e4      	adds	r4, r4, r7
 800055a:	f100 33ff 	add.w	r3, r0, #4294967295
 800055e:	f080 810a 	bcs.w	8000776 <__udivmoddi4+0x2a2>
 8000562:	45a1      	cmp	r9, r4
 8000564:	f240 8107 	bls.w	8000776 <__udivmoddi4+0x2a2>
 8000568:	3802      	subs	r0, #2
 800056a:	443c      	add	r4, r7
 800056c:	eba4 0409 	sub.w	r4, r4, r9
 8000570:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000574:	2100      	movs	r1, #0
 8000576:	2e00      	cmp	r6, #0
 8000578:	d061      	beq.n	800063e <__udivmoddi4+0x16a>
 800057a:	fa24 f40e 	lsr.w	r4, r4, lr
 800057e:	2300      	movs	r3, #0
 8000580:	6034      	str	r4, [r6, #0]
 8000582:	6073      	str	r3, [r6, #4]
 8000584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000588:	428b      	cmp	r3, r1
 800058a:	d907      	bls.n	800059c <__udivmoddi4+0xc8>
 800058c:	2e00      	cmp	r6, #0
 800058e:	d054      	beq.n	800063a <__udivmoddi4+0x166>
 8000590:	2100      	movs	r1, #0
 8000592:	e886 0021 	stmia.w	r6, {r0, r5}
 8000596:	4608      	mov	r0, r1
 8000598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059c:	fab3 f183 	clz	r1, r3
 80005a0:	2900      	cmp	r1, #0
 80005a2:	f040 808e 	bne.w	80006c2 <__udivmoddi4+0x1ee>
 80005a6:	42ab      	cmp	r3, r5
 80005a8:	d302      	bcc.n	80005b0 <__udivmoddi4+0xdc>
 80005aa:	4282      	cmp	r2, r0
 80005ac:	f200 80fa 	bhi.w	80007a4 <__udivmoddi4+0x2d0>
 80005b0:	1a84      	subs	r4, r0, r2
 80005b2:	eb65 0503 	sbc.w	r5, r5, r3
 80005b6:	2001      	movs	r0, #1
 80005b8:	46ac      	mov	ip, r5
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d03f      	beq.n	800063e <__udivmoddi4+0x16a>
 80005be:	e886 1010 	stmia.w	r6, {r4, ip}
 80005c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c6:	b912      	cbnz	r2, 80005ce <__udivmoddi4+0xfa>
 80005c8:	2701      	movs	r7, #1
 80005ca:	fbb7 f7f2 	udiv	r7, r7, r2
 80005ce:	fab7 fe87 	clz	lr, r7
 80005d2:	f1be 0f00 	cmp.w	lr, #0
 80005d6:	d134      	bne.n	8000642 <__udivmoddi4+0x16e>
 80005d8:	1beb      	subs	r3, r5, r7
 80005da:	0c3a      	lsrs	r2, r7, #16
 80005dc:	fa1f fc87 	uxth.w	ip, r7
 80005e0:	2101      	movs	r1, #1
 80005e2:	fbb3 f8f2 	udiv	r8, r3, r2
 80005e6:	0c25      	lsrs	r5, r4, #16
 80005e8:	fb02 3318 	mls	r3, r2, r8, r3
 80005ec:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80005f0:	fb0c f308 	mul.w	r3, ip, r8
 80005f4:	42ab      	cmp	r3, r5
 80005f6:	d907      	bls.n	8000608 <__udivmoddi4+0x134>
 80005f8:	19ed      	adds	r5, r5, r7
 80005fa:	f108 30ff 	add.w	r0, r8, #4294967295
 80005fe:	d202      	bcs.n	8000606 <__udivmoddi4+0x132>
 8000600:	42ab      	cmp	r3, r5
 8000602:	f200 80d1 	bhi.w	80007a8 <__udivmoddi4+0x2d4>
 8000606:	4680      	mov	r8, r0
 8000608:	1aed      	subs	r5, r5, r3
 800060a:	b2a3      	uxth	r3, r4
 800060c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000610:	fb02 5510 	mls	r5, r2, r0, r5
 8000614:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000618:	fb0c fc00 	mul.w	ip, ip, r0
 800061c:	45a4      	cmp	ip, r4
 800061e:	d907      	bls.n	8000630 <__udivmoddi4+0x15c>
 8000620:	19e4      	adds	r4, r4, r7
 8000622:	f100 33ff 	add.w	r3, r0, #4294967295
 8000626:	d202      	bcs.n	800062e <__udivmoddi4+0x15a>
 8000628:	45a4      	cmp	ip, r4
 800062a:	f200 80b8 	bhi.w	800079e <__udivmoddi4+0x2ca>
 800062e:	4618      	mov	r0, r3
 8000630:	eba4 040c 	sub.w	r4, r4, ip
 8000634:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000638:	e79d      	b.n	8000576 <__udivmoddi4+0xa2>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	f1ce 0420 	rsb	r4, lr, #32
 8000646:	fa05 f30e 	lsl.w	r3, r5, lr
 800064a:	fa07 f70e 	lsl.w	r7, r7, lr
 800064e:	fa20 f804 	lsr.w	r8, r0, r4
 8000652:	0c3a      	lsrs	r2, r7, #16
 8000654:	fa25 f404 	lsr.w	r4, r5, r4
 8000658:	ea48 0803 	orr.w	r8, r8, r3
 800065c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000660:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000664:	fb02 4411 	mls	r4, r2, r1, r4
 8000668:	fa1f fc87 	uxth.w	ip, r7
 800066c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000670:	fb01 f30c 	mul.w	r3, r1, ip
 8000674:	42ab      	cmp	r3, r5
 8000676:	fa00 f40e 	lsl.w	r4, r0, lr
 800067a:	d909      	bls.n	8000690 <__udivmoddi4+0x1bc>
 800067c:	19ed      	adds	r5, r5, r7
 800067e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000682:	f080 808a 	bcs.w	800079a <__udivmoddi4+0x2c6>
 8000686:	42ab      	cmp	r3, r5
 8000688:	f240 8087 	bls.w	800079a <__udivmoddi4+0x2c6>
 800068c:	3902      	subs	r1, #2
 800068e:	443d      	add	r5, r7
 8000690:	1aeb      	subs	r3, r5, r3
 8000692:	fa1f f588 	uxth.w	r5, r8
 8000696:	fbb3 f0f2 	udiv	r0, r3, r2
 800069a:	fb02 3310 	mls	r3, r2, r0, r3
 800069e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80006a2:	fb00 f30c 	mul.w	r3, r0, ip
 80006a6:	42ab      	cmp	r3, r5
 80006a8:	d907      	bls.n	80006ba <__udivmoddi4+0x1e6>
 80006aa:	19ed      	adds	r5, r5, r7
 80006ac:	f100 38ff 	add.w	r8, r0, #4294967295
 80006b0:	d26f      	bcs.n	8000792 <__udivmoddi4+0x2be>
 80006b2:	42ab      	cmp	r3, r5
 80006b4:	d96d      	bls.n	8000792 <__udivmoddi4+0x2be>
 80006b6:	3802      	subs	r0, #2
 80006b8:	443d      	add	r5, r7
 80006ba:	1aeb      	subs	r3, r5, r3
 80006bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006c0:	e78f      	b.n	80005e2 <__udivmoddi4+0x10e>
 80006c2:	f1c1 0720 	rsb	r7, r1, #32
 80006c6:	fa22 f807 	lsr.w	r8, r2, r7
 80006ca:	408b      	lsls	r3, r1
 80006cc:	fa05 f401 	lsl.w	r4, r5, r1
 80006d0:	ea48 0303 	orr.w	r3, r8, r3
 80006d4:	fa20 fe07 	lsr.w	lr, r0, r7
 80006d8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80006dc:	40fd      	lsrs	r5, r7
 80006de:	ea4e 0e04 	orr.w	lr, lr, r4
 80006e2:	fbb5 f9fc 	udiv	r9, r5, ip
 80006e6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80006ea:	fb0c 5519 	mls	r5, ip, r9, r5
 80006ee:	fa1f f883 	uxth.w	r8, r3
 80006f2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80006f6:	fb09 f408 	mul.w	r4, r9, r8
 80006fa:	42ac      	cmp	r4, r5
 80006fc:	fa02 f201 	lsl.w	r2, r2, r1
 8000700:	fa00 fa01 	lsl.w	sl, r0, r1
 8000704:	d908      	bls.n	8000718 <__udivmoddi4+0x244>
 8000706:	18ed      	adds	r5, r5, r3
 8000708:	f109 30ff 	add.w	r0, r9, #4294967295
 800070c:	d243      	bcs.n	8000796 <__udivmoddi4+0x2c2>
 800070e:	42ac      	cmp	r4, r5
 8000710:	d941      	bls.n	8000796 <__udivmoddi4+0x2c2>
 8000712:	f1a9 0902 	sub.w	r9, r9, #2
 8000716:	441d      	add	r5, r3
 8000718:	1b2d      	subs	r5, r5, r4
 800071a:	fa1f fe8e 	uxth.w	lr, lr
 800071e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000722:	fb0c 5510 	mls	r5, ip, r0, r5
 8000726:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800072a:	fb00 f808 	mul.w	r8, r0, r8
 800072e:	45a0      	cmp	r8, r4
 8000730:	d907      	bls.n	8000742 <__udivmoddi4+0x26e>
 8000732:	18e4      	adds	r4, r4, r3
 8000734:	f100 35ff 	add.w	r5, r0, #4294967295
 8000738:	d229      	bcs.n	800078e <__udivmoddi4+0x2ba>
 800073a:	45a0      	cmp	r8, r4
 800073c:	d927      	bls.n	800078e <__udivmoddi4+0x2ba>
 800073e:	3802      	subs	r0, #2
 8000740:	441c      	add	r4, r3
 8000742:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000746:	eba4 0408 	sub.w	r4, r4, r8
 800074a:	fba0 8902 	umull	r8, r9, r0, r2
 800074e:	454c      	cmp	r4, r9
 8000750:	46c6      	mov	lr, r8
 8000752:	464d      	mov	r5, r9
 8000754:	d315      	bcc.n	8000782 <__udivmoddi4+0x2ae>
 8000756:	d012      	beq.n	800077e <__udivmoddi4+0x2aa>
 8000758:	b156      	cbz	r6, 8000770 <__udivmoddi4+0x29c>
 800075a:	ebba 030e 	subs.w	r3, sl, lr
 800075e:	eb64 0405 	sbc.w	r4, r4, r5
 8000762:	fa04 f707 	lsl.w	r7, r4, r7
 8000766:	40cb      	lsrs	r3, r1
 8000768:	431f      	orrs	r7, r3
 800076a:	40cc      	lsrs	r4, r1
 800076c:	6037      	str	r7, [r6, #0]
 800076e:	6074      	str	r4, [r6, #4]
 8000770:	2100      	movs	r1, #0
 8000772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000776:	4618      	mov	r0, r3
 8000778:	e6f8      	b.n	800056c <__udivmoddi4+0x98>
 800077a:	4690      	mov	r8, r2
 800077c:	e6e0      	b.n	8000540 <__udivmoddi4+0x6c>
 800077e:	45c2      	cmp	sl, r8
 8000780:	d2ea      	bcs.n	8000758 <__udivmoddi4+0x284>
 8000782:	ebb8 0e02 	subs.w	lr, r8, r2
 8000786:	eb69 0503 	sbc.w	r5, r9, r3
 800078a:	3801      	subs	r0, #1
 800078c:	e7e4      	b.n	8000758 <__udivmoddi4+0x284>
 800078e:	4628      	mov	r0, r5
 8000790:	e7d7      	b.n	8000742 <__udivmoddi4+0x26e>
 8000792:	4640      	mov	r0, r8
 8000794:	e791      	b.n	80006ba <__udivmoddi4+0x1e6>
 8000796:	4681      	mov	r9, r0
 8000798:	e7be      	b.n	8000718 <__udivmoddi4+0x244>
 800079a:	4601      	mov	r1, r0
 800079c:	e778      	b.n	8000690 <__udivmoddi4+0x1bc>
 800079e:	3802      	subs	r0, #2
 80007a0:	443c      	add	r4, r7
 80007a2:	e745      	b.n	8000630 <__udivmoddi4+0x15c>
 80007a4:	4608      	mov	r0, r1
 80007a6:	e708      	b.n	80005ba <__udivmoddi4+0xe6>
 80007a8:	f1a8 0802 	sub.w	r8, r8, #2
 80007ac:	443d      	add	r5, r7
 80007ae:	e72b      	b.n	8000608 <__udivmoddi4+0x134>

080007b0 <__aeabi_idiv0>:
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop

080007b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007b8:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <HAL_Init+0x40>)
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <HAL_Init+0x40>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007c4:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <HAL_Init+0x40>)
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <HAL_Init+0x40>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d0:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <HAL_Init+0x40>)
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HAL_Init+0x40>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007dc:	2003      	movs	r0, #3
 80007de:	f000 f947 	bl	8000a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e2:	2001      	movs	r0, #1
 80007e4:	f000 f808 	bl	80007f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e8:	f007 fdf8 	bl	80083dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023c00 	.word	0x40023c00

080007f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_InitTick+0x54>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_InitTick+0x58>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000812:	fbb2 f3f3 	udiv	r3, r2, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f95f 	bl	8000ada <HAL_SYSTICK_Config>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e00e      	b.n	8000844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d80a      	bhi.n	8000842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f000 f927 	bl	8000a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <HAL_InitTick+0x5c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800083e:	2300      	movs	r3, #0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000078 	.word	0x20000078
 8000850:	20000004 	.word	0x20000004
 8000854:	20000000 	.word	0x20000000

08000858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_IncTick+0x20>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_IncTick+0x24>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <HAL_IncTick+0x24>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000004 	.word	0x20000004
 800087c:	2000011c 	.word	0x2000011c

08000880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return uwTick;
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <HAL_GetTick+0x14>)
 8000886:	681b      	ldr	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	2000011c 	.word	0x2000011c

08000898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a0:	f7ff ffee 	bl	8000880 <HAL_GetTick>
 80008a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b0:	d005      	beq.n	80008be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_Delay+0x40>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4413      	add	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008be:	bf00      	nop
 80008c0:	f7ff ffde 	bl	8000880 <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	1ad2      	subs	r2, r2, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d3f7      	bcc.n	80008c0 <HAL_Delay+0x28>
  {
  }
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000004 	.word	0x20000004

080008dc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <NVIC_SetPriorityGrouping+0x44>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090e:	4a04      	ldr	r2, [pc, #16]	; (8000920 <NVIC_SetPriorityGrouping+0x44>)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	60d3      	str	r3, [r2, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <NVIC_GetPriorityGrouping+0x18>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	f003 0307 	and.w	r3, r3, #7
}
 8000932:	4618      	mov	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800094a:	4909      	ldr	r1, [pc, #36]	; (8000970 <NVIC_EnableIRQ+0x30>)
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	095b      	lsrs	r3, r3, #5
 8000952:	79fa      	ldrb	r2, [r7, #7]
 8000954:	f002 021f 	and.w	r2, r2, #31
 8000958:	2001      	movs	r0, #1
 800095a:	fa00 f202 	lsl.w	r2, r0, r2
 800095e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100

08000974 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	da0b      	bge.n	80009a0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	490d      	ldr	r1, [pc, #52]	; (80009c0 <NVIC_SetPriority+0x4c>)
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	f003 030f 	and.w	r3, r3, #15
 8000990:	3b04      	subs	r3, #4
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	0112      	lsls	r2, r2, #4
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	440b      	add	r3, r1
 800099c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800099e:	e009      	b.n	80009b4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a0:	4908      	ldr	r1, [pc, #32]	; (80009c4 <NVIC_SetPriority+0x50>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	b2d2      	uxtb	r2, r2
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	440b      	add	r3, r1
 80009b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00
 80009c4:	e000e100 	.word	0xe000e100

080009c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b089      	sub	sp, #36	; 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f1c3 0307 	rsb	r3, r3, #7
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	bf28      	it	cs
 80009e6:	2304      	movcs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d902      	bls.n	80009f8 <NVIC_EncodePriority+0x30>
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3b03      	subs	r3, #3
 80009f6:	e000      	b.n	80009fa <NVIC_EncodePriority+0x32>
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	2201      	movs	r2, #1
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	1e5a      	subs	r2, r3, #1
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	401a      	ands	r2, r3
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0e:	2101      	movs	r1, #1
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	1e59      	subs	r1, r3, #1
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	4313      	orrs	r3, r2
         );
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3724      	adds	r7, #36	; 0x24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a3c:	d301      	bcc.n	8000a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00f      	b.n	8000a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <SysTick_Config+0x40>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f7ff ff90 	bl	8000974 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SysTick_Config+0x40>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <SysTick_Config+0x40>)
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	e000e010 	.word	0xe000e010

08000a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff2f 	bl	80008dc <NVIC_SetPriorityGrouping>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b086      	sub	sp, #24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a98:	f7ff ff44 	bl	8000924 <NVIC_GetPriorityGrouping>
 8000a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	6978      	ldr	r0, [r7, #20]
 8000aa4:	f7ff ff90 	bl	80009c8 <NVIC_EncodePriority>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff5f 	bl	8000974 <NVIC_SetPriority>
}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff37 	bl	8000940 <NVIC_EnableIRQ>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ffa2 	bl	8000a2c <SysTick_Config>
 8000ae8:	4603      	mov	r3, r0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d106      	bne.n	8000b10 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b02:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000b0e:	e005      	b.n	8000b1c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b10:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f023 0304 	bic.w	r3, r3, #4
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000e010 	.word	0xe000e010

08000b2c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b30:	f000 f802 	bl	8000b38 <HAL_SYSTICK_Callback>
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
 8000b62:	e165      	b.n	8000e30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b64:	2201      	movs	r2, #1
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	f040 8154 	bne.w	8000e2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d003      	beq.n	8000b92 <HAL_GPIO_Init+0x4a>
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2b12      	cmp	r3, #18
 8000b90:	d123      	bne.n	8000bda <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	08da      	lsrs	r2, r3, #3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3208      	adds	r2, #8
 8000b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	220f      	movs	r2, #15
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	691a      	ldr	r2, [r3, #16]
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	f003 0307 	and.w	r3, r3, #7
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	08da      	lsrs	r2, r3, #3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3208      	adds	r2, #8
 8000bd4:	69b9      	ldr	r1, [r7, #24]
 8000bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 0203 	and.w	r2, r3, #3
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d00b      	beq.n	8000c2e <HAL_GPIO_Init+0xe6>
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d007      	beq.n	8000c2e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c22:	2b11      	cmp	r3, #17
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	2b12      	cmp	r3, #18
 8000c2c:	d130      	bne.n	8000c90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	2203      	movs	r2, #3
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4013      	ands	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	68da      	ldr	r2, [r3, #12]
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c64:	2201      	movs	r2, #1
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	091b      	lsrs	r3, r3, #4
 8000c7a:	f003 0201 	and.w	r2, r3, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	689a      	ldr	r2, [r3, #8]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f000 80ae 	beq.w	8000e2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4a5c      	ldr	r2, [pc, #368]	; (8000e44 <HAL_GPIO_Init+0x2fc>)
 8000cd4:	4b5b      	ldr	r3, [pc, #364]	; (8000e44 <HAL_GPIO_Init+0x2fc>)
 8000cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b59      	ldr	r3, [pc, #356]	; (8000e44 <HAL_GPIO_Init+0x2fc>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cea:	4a57      	ldr	r2, [pc, #348]	; (8000e48 <HAL_GPIO_Init+0x300>)
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	089b      	lsrs	r3, r3, #2
 8000cf0:	3302      	adds	r3, #2
 8000cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	220f      	movs	r2, #15
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a4e      	ldr	r2, [pc, #312]	; (8000e4c <HAL_GPIO_Init+0x304>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d025      	beq.n	8000d62 <HAL_GPIO_Init+0x21a>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a4d      	ldr	r2, [pc, #308]	; (8000e50 <HAL_GPIO_Init+0x308>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d01f      	beq.n	8000d5e <HAL_GPIO_Init+0x216>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a4c      	ldr	r2, [pc, #304]	; (8000e54 <HAL_GPIO_Init+0x30c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d019      	beq.n	8000d5a <HAL_GPIO_Init+0x212>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a4b      	ldr	r2, [pc, #300]	; (8000e58 <HAL_GPIO_Init+0x310>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d013      	beq.n	8000d56 <HAL_GPIO_Init+0x20e>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a4a      	ldr	r2, [pc, #296]	; (8000e5c <HAL_GPIO_Init+0x314>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d00d      	beq.n	8000d52 <HAL_GPIO_Init+0x20a>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a49      	ldr	r2, [pc, #292]	; (8000e60 <HAL_GPIO_Init+0x318>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d007      	beq.n	8000d4e <HAL_GPIO_Init+0x206>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a48      	ldr	r2, [pc, #288]	; (8000e64 <HAL_GPIO_Init+0x31c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d101      	bne.n	8000d4a <HAL_GPIO_Init+0x202>
 8000d46:	2306      	movs	r3, #6
 8000d48:	e00c      	b.n	8000d64 <HAL_GPIO_Init+0x21c>
 8000d4a:	2307      	movs	r3, #7
 8000d4c:	e00a      	b.n	8000d64 <HAL_GPIO_Init+0x21c>
 8000d4e:	2305      	movs	r3, #5
 8000d50:	e008      	b.n	8000d64 <HAL_GPIO_Init+0x21c>
 8000d52:	2304      	movs	r3, #4
 8000d54:	e006      	b.n	8000d64 <HAL_GPIO_Init+0x21c>
 8000d56:	2303      	movs	r3, #3
 8000d58:	e004      	b.n	8000d64 <HAL_GPIO_Init+0x21c>
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	e002      	b.n	8000d64 <HAL_GPIO_Init+0x21c>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e000      	b.n	8000d64 <HAL_GPIO_Init+0x21c>
 8000d62:	2300      	movs	r3, #0
 8000d64:	69fa      	ldr	r2, [r7, #28]
 8000d66:	f002 0203 	and.w	r2, r2, #3
 8000d6a:	0092      	lsls	r2, r2, #2
 8000d6c:	4093      	lsls	r3, r2
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d74:	4934      	ldr	r1, [pc, #208]	; (8000e48 <HAL_GPIO_Init+0x300>)
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d82:	4b39      	ldr	r3, [pc, #228]	; (8000e68 <HAL_GPIO_Init+0x320>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000da6:	4a30      	ldr	r2, [pc, #192]	; (8000e68 <HAL_GPIO_Init+0x320>)
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dac:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <HAL_GPIO_Init+0x320>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dd0:	4a25      	ldr	r2, [pc, #148]	; (8000e68 <HAL_GPIO_Init+0x320>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <HAL_GPIO_Init+0x320>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dfa:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <HAL_GPIO_Init+0x320>)
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_GPIO_Init+0x320>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e24:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <HAL_GPIO_Init+0x320>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	61fb      	str	r3, [r7, #28]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	2b0f      	cmp	r3, #15
 8000e34:	f67f ae96 	bls.w	8000b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e38:	bf00      	nop
 8000e3a:	3724      	adds	r7, #36	; 0x24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40013800 	.word	0x40013800
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40020400 	.word	0x40020400
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40020c00 	.word	0x40020c00
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40021400 	.word	0x40021400
 8000e64:	40021800 	.word	0x40021800
 8000e68:	40013c00 	.word	0x40013c00

08000e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	807b      	strh	r3, [r7, #2]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e7c:	787b      	ldrb	r3, [r7, #1]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e82:	887a      	ldrh	r2, [r7, #2]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e88:	e003      	b.n	8000e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e8a:	887b      	ldrh	r3, [r7, #2]
 8000e8c:	041a      	lsls	r2, r3, #16
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	619a      	str	r2, [r3, #24]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000eac:	695a      	ldr	r2, [r3, #20]
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d006      	beq.n	8000ec4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f806 	bl	8000ed0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40013c00 	.word	0x40013c00

08000ed0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{ 
 8000ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee8:	b08d      	sub	sp, #52	; 0x34
 8000eea:	af0a      	add	r7, sp, #40	; 0x28
 8000eec:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if(hhcd == NULL)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e03e      	b.n	8000f76 <HAL_HCD_Init+0x90>
  }
  
  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
  
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2203      	movs	r2, #3
 8000efc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_HCD_MspInit(hhcd);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f007 fbb5 	bl	8008670 <HAL_HCD_MspInit>
  
  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f002 feac 	bl	8003c68 <USB_DisableGlobalInt>
  
  /* Init the Core (common init.) */
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	687e      	ldr	r6, [r7, #4]
 8000f18:	466d      	mov	r5, sp
 8000f1a:	f106 0410 	add.w	r4, r6, #16
 8000f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f2e:	1d33      	adds	r3, r6, #4
 8000f30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f32:	6838      	ldr	r0, [r7, #0]
 8000f34:	f002 fe36 	bl	8003ba4 <USB_CoreInit>
  
  /* Force Host Mode*/
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 fea3 	bl	8003c8a <USB_SetCurrentMode>
  
  /* Init Host */
  USB_HostInit(hhcd->Instance, hhcd->Init);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	687e      	ldr	r6, [r7, #4]
 8000f4c:	466d      	mov	r5, sp
 8000f4e:	f106 0410 	add.w	r4, r6, #16
 8000f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f62:	1d33      	adds	r3, r6, #4
 8000f64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f66:	6838      	ldr	r0, [r7, #0]
 8000f68:	f002 ffb2 	bl	8003ed0 <USB_HostInit>
  
  hhcd->State= HAL_HCD_STATE_READY;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f7e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000f7e:	b590      	push	{r4, r7, lr}
 8000f80:	b089      	sub	sp, #36	; 0x24
 8000f82:	af04      	add	r7, sp, #16
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	4608      	mov	r0, r1
 8000f88:	4611      	mov	r1, r2
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	70fb      	strb	r3, [r7, #3]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70bb      	strb	r3, [r7, #2]
 8000f94:	4613      	mov	r3, r2
 8000f96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73fb      	strb	r3, [r7, #15]
  
  __HAL_LOCK(hhcd); 
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d101      	bne.n	8000faa <HAL_HCD_HC_Init+0x2c>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e06c      	b.n	8001084 <HAL_HCD_HC_Init+0x106>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000fb2:	78fa      	ldrb	r2, [r7, #3]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	440b      	add	r3, r1
 8000fc0:	3338      	adds	r3, #56	; 0x38
 8000fc2:	787a      	ldrb	r2, [r7, #1]
 8000fc4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000fc6:	78fa      	ldrb	r2, [r7, #3]
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3340      	adds	r3, #64	; 0x40
 8000fd6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000fd8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000fda:	78fa      	ldrb	r2, [r7, #3]
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	440b      	add	r3, r1
 8000fe8:	3339      	adds	r3, #57	; 0x39
 8000fea:	78fa      	ldrb	r2, [r7, #3]
 8000fec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000fee:	78fa      	ldrb	r2, [r7, #3]
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	440b      	add	r3, r1
 8000ffc:	333f      	adds	r3, #63	; 0x3f
 8000ffe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001002:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8001004:	78fa      	ldrb	r2, [r7, #3]
 8001006:	78bb      	ldrb	r3, [r7, #2]
 8001008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800100c:	b2d8      	uxtb	r0, r3
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	440b      	add	r3, r1
 800101a:	333a      	adds	r3, #58	; 0x3a
 800101c:	4602      	mov	r2, r0
 800101e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8001020:	78fa      	ldrb	r2, [r7, #3]
 8001022:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	09db      	lsrs	r3, r3, #7
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	440b      	add	r3, r1
 800103a:	333b      	adds	r3, #59	; 0x3b
 800103c:	4602      	mov	r2, r0
 800103e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].speed = speed;
 8001040:	78fa      	ldrb	r2, [r7, #3]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	440b      	add	r3, r1
 800104e:	333c      	adds	r3, #60	; 0x3c
 8001050:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001054:	701a      	strb	r2, [r3, #0]
  
  status =  USB_HC_Init(hhcd->Instance, 
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	787c      	ldrb	r4, [r7, #1]
 800105c:	78ba      	ldrb	r2, [r7, #2]
 800105e:	78f9      	ldrb	r1, [r7, #3]
 8001060:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	4623      	mov	r3, r4
 8001072:	f003 f885 	bl	8004180 <USB_HC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  return status;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	bd90      	pop	{r4, r7, pc}

0800108c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
  
  __HAL_LOCK(hhcd);   
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d101      	bne.n	80010aa <HAL_HCD_HC_Halt+0x1e>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e00f      	b.n	80010ca <HAL_HCD_HC_Halt+0x3e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	78fa      	ldrb	r2, [r7, #3]
 80010b8:	4611      	mov	r1, r2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 faa9 	bl	8004612 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  return status;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	4608      	mov	r0, r1
 80010de:	4611      	mov	r1, r2
 80010e0:	461a      	mov	r2, r3
 80010e2:	4603      	mov	r3, r0
 80010e4:	70fb      	strb	r3, [r7, #3]
 80010e6:	460b      	mov	r3, r1
 80010e8:	70bb      	strb	r3, [r7, #2]
 80010ea:	4613      	mov	r3, r2
 80010ec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80010ee:	78fa      	ldrb	r2, [r7, #3]
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	440b      	add	r3, r1
 80010fc:	333b      	adds	r3, #59	; 0x3b
 80010fe:	78ba      	ldrb	r2, [r7, #2]
 8001100:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type; 
 8001102:	78fa      	ldrb	r2, [r7, #3]
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	440b      	add	r3, r1
 8001110:	333f      	adds	r3, #63	; 0x3f
 8001112:	787a      	ldrb	r2, [r7, #1]
 8001114:	701a      	strb	r2, [r3, #0]
  
  if(token == 0)
 8001116:	7c3b      	ldrb	r3, [r7, #16]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10a      	bne.n	8001132 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800111c:	78fa      	ldrb	r2, [r7, #3]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	440b      	add	r3, r1
 800112a:	3342      	adds	r3, #66	; 0x42
 800112c:	2203      	movs	r2, #3
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	e009      	b.n	8001146 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001132:	78fa      	ldrb	r2, [r7, #3]
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	440b      	add	r3, r1
 8001140:	3342      	adds	r3, #66	; 0x42
 8001142:	2202      	movs	r2, #2
 8001144:	701a      	strb	r2, [r3, #0]
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 8001146:	787b      	ldrb	r3, [r7, #1]
 8001148:	2b03      	cmp	r3, #3
 800114a:	f200 8104 	bhi.w	8001356 <HAL_HCD_HC_SubmitRequest+0x282>
 800114e:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001154:	08001165 	.word	0x08001165
 8001158:	0800133b 	.word	0x0800133b
 800115c:	080011fd 	.word	0x080011fd
 8001160:	080012b1 	.word	0x080012b1
  {
  case EP_TYPE_CTRL:
    if((token == 1) && (direction == 0)) /*send data */
 8001164:	7c3b      	ldrb	r3, [r7, #16]
 8001166:	2b01      	cmp	r3, #1
 8001168:	f040 80f2 	bne.w	8001350 <HAL_HCD_HC_SubmitRequest+0x27c>
 800116c:	78bb      	ldrb	r3, [r7, #2]
 800116e:	2b00      	cmp	r3, #0
 8001170:	f040 80ee 	bne.w	8001350 <HAL_HCD_HC_SubmitRequest+0x27c>
    {
      if (length == 0)
 8001174:	8b3b      	ldrh	r3, [r7, #24]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d109      	bne.n	800118e <HAL_HCD_HC_SubmitRequest+0xba>
      { /* For Status OUT stage, Length==0, Status Out PID = 1 */
        hhcd->hc[ch_num].toggle_out = 1;
 800117a:	78fa      	ldrb	r2, [r7, #3]
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	440b      	add	r3, r1
 8001188:	3351      	adds	r3, #81	; 0x51
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
      }
      
      /* Set the Data Toggle bit as per the Flag */
      if (hhcd->hc[ch_num].toggle_out == 0)
 800118e:	78fa      	ldrb	r2, [r7, #3]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	440b      	add	r3, r1
 800119c:	3351      	adds	r3, #81	; 0x51
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10a      	bne.n	80011ba <HAL_HCD_HC_SubmitRequest+0xe6>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 80011a4:	78fa      	ldrb	r2, [r7, #3]
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	440b      	add	r3, r1
 80011b2:	3342      	adds	r3, #66	; 0x42
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
 80011b8:	e009      	b.n	80011ce <HAL_HCD_HC_SubmitRequest+0xfa>
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80011ba:	78fa      	ldrb	r2, [r7, #3]
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	3342      	adds	r3, #66	; 0x42
 80011ca:	2202      	movs	r2, #2
 80011cc:	701a      	strb	r2, [r3, #0]
      }
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 80011ce:	78fa      	ldrb	r2, [r7, #3]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	440b      	add	r3, r1
 80011dc:	335c      	adds	r3, #92	; 0x5c
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	f000 80b5 	beq.w	8001350 <HAL_HCD_HC_SubmitRequest+0x27c>
      {
        hhcd->hc[ch_num].do_ping = do_ping;
 80011e6:	78fa      	ldrb	r2, [r7, #3]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	440b      	add	r3, r1
 80011f4:	333d      	adds	r3, #61	; 0x3d
 80011f6:	7f3a      	ldrb	r2, [r7, #28]
 80011f8:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 80011fa:	e0a9      	b.n	8001350 <HAL_HCD_HC_SubmitRequest+0x27c>
  
  case EP_TYPE_BULK:
    if(direction == 0)
 80011fc:	78bb      	ldrb	r3, [r7, #2]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d135      	bne.n	800126e <HAL_HCD_HC_SubmitRequest+0x19a>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8001202:	78fa      	ldrb	r2, [r7, #3]
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	440b      	add	r3, r1
 8001210:	3351      	adds	r3, #81	; 0x51
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d10a      	bne.n	800122e <HAL_HCD_HC_SubmitRequest+0x15a>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 8001218:	78fa      	ldrb	r2, [r7, #3]
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	440b      	add	r3, r1
 8001226:	3342      	adds	r3, #66	; 0x42
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
 800122c:	e009      	b.n	8001242 <HAL_HCD_HC_SubmitRequest+0x16e>
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800122e:	78fa      	ldrb	r2, [r7, #3]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	440b      	add	r3, r1
 800123c:	3342      	adds	r3, #66	; 0x42
 800123e:	2202      	movs	r2, #2
 8001240:	701a      	strb	r2, [r3, #0]
      }
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8001242:	78fa      	ldrb	r2, [r7, #3]
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	440b      	add	r3, r1
 8001250:	335c      	adds	r3, #92	; 0x5c
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d07d      	beq.n	8001354 <HAL_HCD_HC_SubmitRequest+0x280>
      {
        hhcd->hc[ch_num].do_ping = do_ping;
 8001258:	78fa      	ldrb	r2, [r7, #3]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	440b      	add	r3, r1
 8001266:	333d      	adds	r3, #61	; 0x3d
 8001268:	7f3a      	ldrb	r2, [r7, #28]
 800126a:	701a      	strb	r2, [r3, #0]
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    
    break;
 800126c:	e072      	b.n	8001354 <HAL_HCD_HC_SubmitRequest+0x280>
      if( hhcd->hc[ch_num].toggle_in == 0)
 800126e:	78fa      	ldrb	r2, [r7, #3]
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	440b      	add	r3, r1
 800127c:	3350      	adds	r3, #80	; 0x50
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10a      	bne.n	800129a <HAL_HCD_HC_SubmitRequest+0x1c6>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001284:	78fa      	ldrb	r2, [r7, #3]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	440b      	add	r3, r1
 8001292:	3342      	adds	r3, #66	; 0x42
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
    break;
 8001298:	e05c      	b.n	8001354 <HAL_HCD_HC_SubmitRequest+0x280>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800129a:	78fa      	ldrb	r2, [r7, #3]
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	440b      	add	r3, r1
 80012a8:	3342      	adds	r3, #66	; 0x42
 80012aa:	2202      	movs	r2, #2
 80012ac:	701a      	strb	r2, [r3, #0]
    break;
 80012ae:	e051      	b.n	8001354 <HAL_HCD_HC_SubmitRequest+0x280>
  case EP_TYPE_INTR:
    if(direction == 0)
 80012b0:	78bb      	ldrb	r3, [r7, #2]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d120      	bne.n	80012f8 <HAL_HCD_HC_SubmitRequest+0x224>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 80012b6:	78fa      	ldrb	r2, [r7, #3]
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	440b      	add	r3, r1
 80012c4:	3351      	adds	r3, #81	; 0x51
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10a      	bne.n	80012e2 <HAL_HCD_HC_SubmitRequest+0x20e>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 80012cc:	78fa      	ldrb	r2, [r7, #3]
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	440b      	add	r3, r1
 80012da:	3342      	adds	r3, #66	; 0x42
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
      else
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    break;
 80012e0:	e039      	b.n	8001356 <HAL_HCD_HC_SubmitRequest+0x282>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012e2:	78fa      	ldrb	r2, [r7, #3]
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	440b      	add	r3, r1
 80012f0:	3342      	adds	r3, #66	; 0x42
 80012f2:	2202      	movs	r2, #2
 80012f4:	701a      	strb	r2, [r3, #0]
    break;
 80012f6:	e02e      	b.n	8001356 <HAL_HCD_HC_SubmitRequest+0x282>
      if( hhcd->hc[ch_num].toggle_in == 0)
 80012f8:	78fa      	ldrb	r2, [r7, #3]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	440b      	add	r3, r1
 8001306:	3350      	adds	r3, #80	; 0x50
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10a      	bne.n	8001324 <HAL_HCD_HC_SubmitRequest+0x250>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800130e:	78fa      	ldrb	r2, [r7, #3]
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	440b      	add	r3, r1
 800131c:	3342      	adds	r3, #66	; 0x42
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
    break;
 8001322:	e018      	b.n	8001356 <HAL_HCD_HC_SubmitRequest+0x282>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001324:	78fa      	ldrb	r2, [r7, #3]
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	440b      	add	r3, r1
 8001332:	3342      	adds	r3, #66	; 0x42
 8001334:	2202      	movs	r2, #2
 8001336:	701a      	strb	r2, [r3, #0]
    break;
 8001338:	e00d      	b.n	8001356 <HAL_HCD_HC_SubmitRequest+0x282>
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800133a:	78fa      	ldrb	r2, [r7, #3]
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	440b      	add	r3, r1
 8001348:	3342      	adds	r3, #66	; 0x42
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
    break;  
 800134e:	e002      	b.n	8001356 <HAL_HCD_HC_SubmitRequest+0x282>
    break;
 8001350:	bf00      	nop
 8001352:	e000      	b.n	8001356 <HAL_HCD_HC_SubmitRequest+0x282>
    break;
 8001354:	bf00      	nop
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001356:	78fa      	ldrb	r2, [r7, #3]
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	440b      	add	r3, r1
 8001364:	3344      	adds	r3, #68	; 0x44
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800136a:	78fa      	ldrb	r2, [r7, #3]
 800136c:	8b39      	ldrh	r1, [r7, #24]
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4403      	add	r3, r0
 800137a:	3348      	adds	r3, #72	; 0x48
 800137c:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 800137e:	78fa      	ldrb	r2, [r7, #3]
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	440b      	add	r3, r1
 800138c:	335c      	adds	r3, #92	; 0x5c
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0;
 8001392:	78fa      	ldrb	r2, [r7, #3]
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	440b      	add	r3, r1
 80013a0:	334c      	adds	r3, #76	; 0x4c
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80013a6:	78fa      	ldrb	r2, [r7, #3]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	440b      	add	r3, r1
 80013b4:	3339      	adds	r3, #57	; 0x39
 80013b6:	78fa      	ldrb	r2, [r7, #3]
 80013b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80013ba:	78fa      	ldrb	r2, [r7, #3]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	440b      	add	r3, r1
 80013c8:	335d      	adds	r3, #93	; 0x5d
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	78fa      	ldrb	r2, [r7, #3]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	3338      	adds	r3, #56	; 0x38
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	18d1      	adds	r1, r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	f002 ffc5 	bl	8004378 <USB_HC_StartXfer>
 80013ee:	4603      	mov	r3, r0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	613b      	str	r3, [r7, #16]
  uint32_t i = 0U , interrupt = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f002 fd19 	bl	8003e4a <USB_GetMode>
 8001418:	4603      	mov	r3, r0
 800141a:	2b01      	cmp	r3, #1
 800141c:	f040 80e9 	bne.w	80015f2 <HAL_HCD_IRQHandler+0x1fa>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f002 fcfb 	bl	8003e20 <USB_ReadInterrupts>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80df 	beq.w	80015f0 <HAL_HCD_IRQHandler+0x1f8>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fcf2 	bl	8003e20 <USB_ReadInterrupts>
 800143c:	4603      	mov	r3, r0
 800143e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001446:	d104      	bne.n	8001452 <HAL_HCD_IRQHandler+0x5a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001450:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f002 fce2 	bl	8003e20 <USB_ReadInterrupts>
 800145c:	4603      	mov	r3, r0
 800145e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001466:	d104      	bne.n	8001472 <HAL_HCD_IRQHandler+0x7a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001470:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f002 fcd2 	bl	8003e20 <USB_ReadInterrupts>
 800147c:	4603      	mov	r3, r0
 800147e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001482:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001486:	d104      	bne.n	8001492 <HAL_HCD_IRQHandler+0x9a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001490:	615a      	str	r2, [r3, #20]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f002 fcc2 	bl	8003e20 <USB_ReadInterrupts>
 800149c:	4603      	mov	r3, r0
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d103      	bne.n	80014ae <HAL_HCD_IRQHandler+0xb6>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2202      	movs	r2, #2
 80014ac:	615a      	str	r2, [r3, #20]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 fcb4 	bl	8003e20 <USB_ReadInterrupts>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014c2:	d118      	bne.n	80014f6 <HAL_HCD_IRQHandler+0xfe>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80014ca:	461a      	mov	r2, r3
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80014d8:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f007 f930 	bl	8008740 <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2101      	movs	r1, #1
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 fd92 	bl	8004010 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014f4:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 fc90 	bl	8003e20 <USB_ReadInterrupts>
 8001500:	4603      	mov	r3, r0
 8001502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001506:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800150a:	d102      	bne.n	8001512 <HAL_HCD_IRQHandler+0x11a>
    {
      HCD_Port_IRQHandler (hhcd);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f001 f805 	bl	800251c <HCD_Port_IRQHandler>
    }
    
    /* Handle Host SOF Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f002 fc82 	bl	8003e20 <USB_ReadInterrupts>
 800151c:	4603      	mov	r3, r0
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b08      	cmp	r3, #8
 8001524:	d106      	bne.n	8001534 <HAL_HCD_IRQHandler+0x13c>
    {
      HAL_HCD_SOF_Callback(hhcd);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f007 f8ee 	bl	8008708 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2208      	movs	r2, #8
 8001532:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host channel Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f002 fc71 	bl	8003e20 <USB_ReadInterrupts>
 800153e:	4603      	mov	r3, r0
 8001540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001544:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001548:	d134      	bne.n	80015b4 <HAL_HCD_IRQHandler+0x1bc>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f003 f850 	bl	80045f4 <USB_HC_ReadInterrupt>
 8001554:	60f8      	str	r0, [r7, #12]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	e021      	b.n	80015a0 <HAL_HCD_IRQHandler+0x1a8>
      {
        if (interrupt & (1U << i))
 800155c:	2201      	movs	r2, #1
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	409a      	lsls	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4013      	ands	r3, r2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d017      	beq.n	800159a <HAL_HCD_IRQHandler+0x1a2>
        {
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	015a      	lsls	r2, r3, #5
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4413      	add	r3, r2
 8001572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <HAL_HCD_IRQHandler+0x196>
          {
            HCD_HC_IN_IRQHandler(hhcd, i);
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	4619      	mov	r1, r3
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f8b5 	bl	80016f6 <HCD_HC_IN_IRQHandler>
 800158c:	e005      	b.n	800159a <HAL_HCD_IRQHandler+0x1a2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler (hhcd, i);
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	4619      	mov	r1, r3
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 fbee 	bl	8001d76 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d8d8      	bhi.n	800155c <HAL_HCD_IRQHandler+0x164>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015b2:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Rx Queue Level Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 fc31 	bl	8003e20 <USB_ReadInterrupts>
 80015be:	4603      	mov	r3, r0
 80015c0:	f003 0310 	and.w	r3, r3, #16
 80015c4:	2b10      	cmp	r3, #16
 80015c6:	d114      	bne.n	80015f2 <HAL_HCD_IRQHandler+0x1fa>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	6992      	ldr	r2, [r2, #24]
 80015d2:	f022 0210 	bic.w	r2, r2, #16
 80015d6:	619a      	str	r2, [r3, #24]
      
      HCD_RXQLVL_IRQHandler (hhcd);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 feed 	bl	80023b8 <HCD_RXQLVL_IRQHandler>
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	6992      	ldr	r2, [r2, #24]
 80015e8:	f042 0210 	orr.w	r2, r2, #16
 80015ec:	619a      	str	r2, [r3, #24]
 80015ee:	e000      	b.n	80015f2 <HAL_HCD_IRQHandler+0x1fa>
      return;
 80015f0:	bf00      	nop
    }
  }
}
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{ 
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd); 
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_HCD_Start+0x16>
 800160a:	2302      	movs	r3, #2
 800160c:	e013      	b.n	8001636 <HAL_HCD_Start+0x3e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f002 fb13 	bl	8003c46 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2101      	movs	r1, #1
 8001626:	4618      	mov	r0, r3
 8001628:	f002 fd51 	bl	80040ce <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{ 
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd); 
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_HCD_Stop+0x16>
 8001650:	2302      	movs	r3, #2
 8001652:	e00d      	b.n	8001670 <HAL_HCD_Stop+0x32>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f003 f8fb 	bl	800485c <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f002 fcfd 	bl	8004084 <USB_ResetPort>
 800168a:	4603      	mov	r3, r0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/ 
  *            URB_ERROR/  
  *            URB_STALL      
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80016a0:	78fa      	ldrb	r2, [r7, #3]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	335c      	adds	r3, #92	; 0x5c
 80016b0:	781b      	ldrb	r3, [r3, #0]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 fd49 	bl	8004162 <USB_GetCurrentFrame>
 80016d0:	4603      	mov	r3, r0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 fd28 	bl	800413c <USB_GetHostSpeed>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval None
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80016f6:	b590      	push	{r4, r7, lr}
 80016f8:	b085      	sub	sp, #20
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	460b      	mov	r3, r1
 8001700:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	015a      	lsls	r2, r3, #5
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b00      	cmp	r3, #0
 8001720:	d01a      	beq.n	8001758 <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	015a      	lsls	r2, r3, #5
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4413      	add	r3, r2
 800172a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800172e:	461a      	mov	r2, r3
 8001730:	2304      	movs	r3, #4
 8001732:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	015a      	lsls	r2, r3, #5
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001740:	4619      	mov	r1, r3
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	015a      	lsls	r2, r3, #5
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4413      	add	r3, r2
 800174a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	60cb      	str	r3, [r1, #12]
 8001756:	e094      	b.n	8001882 <HCD_HC_IN_IRQHandler+0x18c>
  }  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	015a      	lsls	r2, r3, #5
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	2b00      	cmp	r3, #0
 800176c:	d009      	beq.n	8001782 <HCD_HC_IN_IRQHandler+0x8c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	015a      	lsls	r2, r3, #5
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4413      	add	r3, r2
 8001776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800177a:	461a      	mov	r2, r3
 800177c:	2320      	movs	r3, #32
 800177e:	6093      	str	r3, [r2, #8]
 8001780:	e07f      	b.n	8001882 <HCD_HC_IN_IRQHandler+0x18c>
  }
  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	015a      	lsls	r2, r3, #5
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4413      	add	r3, r2
 800178a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d034      	beq.n	8001802 <HCD_HC_IN_IRQHandler+0x10c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	015a      	lsls	r2, r3, #5
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a4:	4619      	mov	r1, r3
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	015a      	lsls	r2, r3, #5
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].state = HC_STALL;
 80017ba:	78fa      	ldrb	r2, [r7, #3]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	335d      	adds	r3, #93	; 0x5d
 80017ca:	2205      	movs	r2, #5
 80017cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	015a      	lsls	r2, r3, #5
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017da:	461a      	mov	r2, r3
 80017dc:	2310      	movs	r3, #16
 80017de:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	015a      	lsls	r2, r3, #5
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ec:	461a      	mov	r2, r3
 80017ee:	2308      	movs	r3, #8
 80017f0:	6093      	str	r3, [r2, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 ff09 	bl	8004612 <USB_HC_Halt>
 8001800:	e03f      	b.n	8001882 <HCD_HC_IN_IRQHandler+0x18c>
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	015a      	lsls	r2, r3, #5
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4413      	add	r3, r2
 800180a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001814:	2b00      	cmp	r3, #0
 8001816:	d034      	beq.n	8001882 <HCD_HC_IN_IRQHandler+0x18c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	015a      	lsls	r2, r3, #5
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001824:	4619      	mov	r1, r3
 8001826:	78fb      	ldrb	r3, [r7, #3]
 8001828:	015a      	lsls	r2, r3, #5
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4413      	add	r3, r2
 800182e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f002 fee5 	bl	8004612 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8001848:	78fb      	ldrb	r3, [r7, #3]
 800184a:	015a      	lsls	r2, r3, #5
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001854:	461a      	mov	r2, r3
 8001856:	2310      	movs	r3, #16
 8001858:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800185a:	78fa      	ldrb	r2, [r7, #3]
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	335d      	adds	r3, #93	; 0x5d
 800186a:	2208      	movs	r2, #8
 800186c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	015a      	lsls	r2, r3, #5
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4413      	add	r3, r2
 8001876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800187a:	461a      	mov	r2, r3
 800187c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001880:	6093      	str	r3, [r2, #8]
  }    
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	015a      	lsls	r2, r3, #5
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4413      	add	r3, r2
 800188a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001894:	2b00      	cmp	r3, #0
 8001896:	d022      	beq.n	80018de <HCD_HC_IN_IRQHandler+0x1e8>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	015a      	lsls	r2, r3, #5
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a4:	4619      	mov	r1, r3
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	015a      	lsls	r2, r3, #5
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	4611      	mov	r1, r2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 fea5 	bl	8004612 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	015a      	lsls	r2, r3, #5
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d4:	461a      	mov	r2, r3
 80018d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018da:	6093      	str	r3, [r2, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
      tmpreg |= USB_OTG_HCCHAR_CHENA;
      USBx_HC(chnum)->HCCHAR = tmpreg;
    }
  }
}
 80018dc:	e247      	b.n	8001d6e <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 80c0 	beq.w	8001a76 <HCD_HC_IN_IRQHandler+0x380>
    if (hhcd->Init.dma_enable)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d01b      	beq.n	8001936 <HCD_HC_IN_IRQHandler+0x240>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	78f9      	ldrb	r1, [r7, #3]
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4403      	add	r3, r0
 800190e:	3348      	adds	r3, #72	; 0x48
 8001910:	6819      	ldr	r1, [r3, #0]
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	0158      	lsls	r0, r3, #5
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4403      	add	r3, r0
 800191a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001924:	1ac9      	subs	r1, r1, r3
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4403      	add	r3, r0
 8001932:	334c      	adds	r3, #76	; 0x4c
 8001934:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XFRC;
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	335d      	adds	r3, #93	; 0x5d
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800194a:	78fa      	ldrb	r2, [r7, #3]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	3358      	adds	r3, #88	; 0x58
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	015a      	lsls	r2, r3, #5
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4413      	add	r3, r2
 8001966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800196a:	461a      	mov	r2, r3
 800196c:	2301      	movs	r3, #1
 800196e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001970:	78fa      	ldrb	r2, [r7, #3]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	440b      	add	r3, r1
 800197e:	333f      	adds	r3, #63	; 0x3f
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00a      	beq.n	800199c <HCD_HC_IN_IRQHandler+0x2a6>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	333f      	adds	r3, #63	; 0x3f
 8001996:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001998:	2b02      	cmp	r3, #2
 800199a:	d121      	bne.n	80019e0 <HCD_HC_IN_IRQHandler+0x2ea>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	015a      	lsls	r2, r3, #5
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a8:	4619      	mov	r1, r3
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	78fa      	ldrb	r2, [r7, #3]
 80019c4:	4611      	mov	r1, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 fe23 	bl	8004612 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	015a      	lsls	r2, r3, #5
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d8:	461a      	mov	r2, r3
 80019da:	2310      	movs	r3, #16
 80019dc:	6093      	str	r3, [r2, #8]
 80019de:	e033      	b.n	8001a48 <HCD_HC_IN_IRQHandler+0x352>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	333f      	adds	r3, #63	; 0x3f
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d128      	bne.n	8001a48 <HCD_HC_IN_IRQHandler+0x352>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	015a      	lsls	r2, r3, #5
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a02:	4619      	mov	r1, r3
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	015a      	lsls	r2, r3, #5
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a16:	600b      	str	r3, [r1, #0]
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	335c      	adds	r3, #92	; 0x5c
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	335c      	adds	r3, #92	; 0x5c
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	4619      	mov	r1, r3
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f006 fe8a 	bl	800875c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[chnum].toggle_in ^= 1U;
 8001a48:	78fa      	ldrb	r2, [r7, #3]
 8001a4a:	78f9      	ldrb	r1, [r7, #3]
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4403      	add	r3, r0
 8001a58:	3350      	adds	r3, #80	; 0x50
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	f083 0301 	eor.w	r3, r3, #1
 8001a60:	b2d8      	uxtb	r0, r3
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3350      	adds	r3, #80	; 0x50
 8001a70:	4602      	mov	r2, r0
 8001a72:	701a      	strb	r2, [r3, #0]
}
 8001a74:	e17b      	b.n	8001d6e <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	015a      	lsls	r2, r3, #5
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80b7 	beq.w	8001bfc <HCD_HC_IN_IRQHandler+0x506>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	015a      	lsls	r2, r3, #5
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	015a      	lsls	r2, r3, #5
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f023 0302 	bic.w	r3, r3, #2
 8001aae:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	440b      	add	r3, r1
 8001abe:	335d      	adds	r3, #93	; 0x5d
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d10a      	bne.n	8001adc <HCD_HC_IN_IRQHandler+0x3e6>
      hhcd->hc[chnum].urb_state  = URB_DONE;      
 8001ac6:	78fa      	ldrb	r2, [r7, #3]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	440b      	add	r3, r1
 8001ad4:	335c      	adds	r3, #92	; 0x5c
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	e077      	b.n	8001bcc <HCD_HC_IN_IRQHandler+0x4d6>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	440b      	add	r3, r1
 8001aea:	335d      	adds	r3, #93	; 0x5d
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d10a      	bne.n	8001b08 <HCD_HC_IN_IRQHandler+0x412>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8001af2:	78fa      	ldrb	r2, [r7, #3]
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	440b      	add	r3, r1
 8001b00:	335c      	adds	r3, #92	; 0x5c
 8001b02:	2205      	movs	r2, #5
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	e061      	b.n	8001bcc <HCD_HC_IN_IRQHandler+0x4d6>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	440b      	add	r3, r1
 8001b16:	335d      	adds	r3, #93	; 0x5d
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d00a      	beq.n	8001b34 <HCD_HC_IN_IRQHandler+0x43e>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001b1e:	78fa      	ldrb	r2, [r7, #3]
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	440b      	add	r3, r1
 8001b2c:	335d      	adds	r3, #93	; 0x5d
 8001b2e:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d14b      	bne.n	8001bcc <HCD_HC_IN_IRQHandler+0x4d6>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8001b34:	78fa      	ldrb	r2, [r7, #3]
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	440b      	add	r3, r1
 8001b42:	3358      	adds	r3, #88	; 0x58
 8001b44:	6819      	ldr	r1, [r3, #0]
 8001b46:	1c48      	adds	r0, r1, #1
 8001b48:	687c      	ldr	r4, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4423      	add	r3, r4
 8001b54:	3358      	adds	r3, #88	; 0x58
 8001b56:	6018      	str	r0, [r3, #0]
 8001b58:	2903      	cmp	r1, #3
 8001b5a:	d914      	bls.n	8001b86 <HCD_HC_IN_IRQHandler+0x490>
        hhcd->hc[chnum].ErrCnt = 0U;
 8001b5c:	78fa      	ldrb	r2, [r7, #3]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	3358      	adds	r3, #88	; 0x58
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	440b      	add	r3, r1
 8001b7e:	335c      	adds	r3, #92	; 0x5c
 8001b80:	2204      	movs	r2, #4
 8001b82:	701a      	strb	r2, [r3, #0]
 8001b84:	e009      	b.n	8001b9a <HCD_HC_IN_IRQHandler+0x4a4>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	335c      	adds	r3, #92	; 0x5c
 8001b96:	2202      	movs	r2, #2
 8001b98:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	015a      	lsls	r2, r3, #5
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001bb0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bb8:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	015a      	lsls	r2, r3, #5
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	015a      	lsls	r2, r3, #5
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd8:	461a      	mov	r2, r3
 8001bda:	2302      	movs	r3, #2
 8001bdc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001bde:	78fa      	ldrb	r2, [r7, #3]
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	335c      	adds	r3, #92	; 0x5c
 8001bee:	781a      	ldrb	r2, [r3, #0]
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f006 fdb1 	bl	800875c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001bfa:	e0b8      	b.n	8001d6e <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	015a      	lsls	r2, r3, #5
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d03d      	beq.n	8001c8e <HCD_HC_IN_IRQHandler+0x598>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	015a      	lsls	r2, r3, #5
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1e:	4619      	mov	r1, r3
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	015a      	lsls	r2, r3, #5
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f043 0302 	orr.w	r3, r3, #2
 8001c32:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].ErrCnt++;
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	440b      	add	r3, r1
 8001c42:	3358      	adds	r3, #88	; 0x58
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	1c59      	adds	r1, r3, #1
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4403      	add	r3, r0
 8001c54:	3358      	adds	r3, #88	; 0x58
 8001c56:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001c58:	78fa      	ldrb	r2, [r7, #3]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	440b      	add	r3, r1
 8001c66:	335d      	adds	r3, #93	; 0x5d
 8001c68:	2206      	movs	r2, #6
 8001c6a:	701a      	strb	r2, [r3, #0]
    USB_HC_Halt(hhcd->Instance, chnum);     
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 fccc 	bl	8004612 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	015a      	lsls	r2, r3, #5
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c86:	461a      	mov	r2, r3
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	6093      	str	r3, [r2, #8]
}
 8001c8c:	e06f      	b.n	8001d6e <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	015a      	lsls	r2, r3, #5
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d064      	beq.n	8001d6e <HCD_HC_IN_IRQHandler+0x678>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	333f      	adds	r3, #63	; 0x3f
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d117      	bne.n	8001cea <HCD_HC_IN_IRQHandler+0x5f4>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	015a      	lsls	r2, r3, #5
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	015a      	lsls	r2, r3, #5
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f043 0302 	orr.w	r3, r3, #2
 8001cda:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	78fa      	ldrb	r2, [r7, #3]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 fc94 	bl	8004612 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8001cea:	78fa      	ldrb	r2, [r7, #3]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	440b      	add	r3, r1
 8001cf8:	335d      	adds	r3, #93	; 0x5d
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2310      	movs	r3, #16
 8001d0e:	6093      	str	r3, [r2, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001d10:	78fa      	ldrb	r2, [r7, #3]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	333f      	adds	r3, #63	; 0x3f
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00a      	beq.n	8001d3c <HCD_HC_IN_IRQHandler+0x646>
              (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001d26:	78fa      	ldrb	r2, [r7, #3]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	440b      	add	r3, r1
 8001d34:	333f      	adds	r3, #63	; 0x3f
 8001d36:	781b      	ldrb	r3, [r3, #0]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d118      	bne.n	8001d6e <HCD_HC_IN_IRQHandler+0x678>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	015a      	lsls	r2, r3, #5
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d52:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d5a:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001d5c:	78fb      	ldrb	r3, [r7, #3]
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d68:	461a      	mov	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	6013      	str	r3, [r2, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd90      	pop	{r4, r7, pc}

08001d76 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval None
  */
static void HCD_HC_OUT_IRQHandler  (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d76:	b590      	push	{r4, r7, lr}
 8001d78:	b085      	sub	sp, #20
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	015a      	lsls	r2, r3, #5
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d01a      	beq.n	8001dd4 <HCD_HC_OUT_IRQHandler+0x5e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001daa:	461a      	mov	r2, r3
 8001dac:	2304      	movs	r3, #4
 8001dae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	015a      	lsls	r2, r3, #5
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	60cb      	str	r3, [r1, #12]
    }
    
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
  }
} 
 8001dd2:	e2ed      	b.n	80023b0 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	015a      	lsls	r2, r3, #5
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d041      	beq.n	8001e6e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df6:	461a      	mov	r2, r3
 8001df8:	2320      	movs	r3, #32
 8001dfa:	6093      	str	r3, [r2, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 8001dfc:	78fa      	ldrb	r2, [r7, #3]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	440b      	add	r3, r1
 8001e0a:	333d      	adds	r3, #61	; 0x3d
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	f040 82ce 	bne.w	80023b0 <HCD_HC_OUT_IRQHandler+0x63a>
      hhcd->hc[chnum].state = HC_NYET;     
 8001e14:	78fa      	ldrb	r2, [r7, #3]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	335d      	adds	r3, #93	; 0x5d
 8001e24:	2204      	movs	r2, #4
 8001e26:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	015a      	lsls	r2, r3, #5
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e34:	4619      	mov	r1, r3
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	78fa      	ldrb	r2, [r7, #3]
 8001e50:	4611      	mov	r1, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f002 fbdd 	bl	8004612 <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001e58:	78fa      	ldrb	r2, [r7, #3]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	440b      	add	r3, r1
 8001e66:	335c      	adds	r3, #92	; 0x5c
 8001e68:	2202      	movs	r2, #2
 8001e6a:	701a      	strb	r2, [r3, #0]
} 
 8001e6c:	e2a0      	b.n	80023b0 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d035      	beq.n	8001ef0 <HCD_HC_OUT_IRQHandler+0x17a>
    hhcd->hc[chnum].state = HC_NYET;
 8001e84:	78fa      	ldrb	r2, [r7, #3]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	440b      	add	r3, r1
 8001e92:	335d      	adds	r3, #93	; 0x5d
 8001e94:	2204      	movs	r2, #4
 8001e96:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt= 0U;    
 8001e98:	78fa      	ldrb	r2, [r7, #3]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3358      	adds	r3, #88	; 0x58
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb8:	4619      	mov	r1, r3
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	78fa      	ldrb	r2, [r7, #3]
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f002 fb9b 	bl	8004612 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2340      	movs	r3, #64	; 0x40
 8001eec:	6093      	str	r3, [r2, #8]
} 
 8001eee:	e25f      	b.n	80023b0 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	015a      	lsls	r2, r3, #5
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d022      	beq.n	8001f4c <HCD_HC_OUT_IRQHandler+0x1d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f12:	4619      	mov	r1, r3
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f043 0302 	orr.w	r3, r3, #2
 8001f26:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f002 fb6e 	bl	8004612 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f42:	461a      	mov	r2, r3
 8001f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f48:	6093      	str	r3, [r2, #8]
} 
 8001f4a:	e231      	b.n	80023b0 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d035      	beq.n	8001fce <HCD_HC_OUT_IRQHandler+0x258>
      hhcd->hc[chnum].ErrCnt = 0U;  
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	440b      	add	r3, r1
 8001f70:	3358      	adds	r3, #88	; 0x58
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f82:	4619      	mov	r1, r3
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f043 0302 	orr.w	r3, r3, #2
 8001f96:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	78fa      	ldrb	r2, [r7, #3]
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f002 fb36 	bl	8004612 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	335d      	adds	r3, #93	; 0x5d
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
} 
 8001fcc:	e1f0      	b.n	80023b0 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d02b      	beq.n	800203c <HCD_HC_OUT_IRQHandler+0x2c6>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2308      	movs	r3, #8
 8001ff4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002002:	4619      	mov	r1, r3
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	78fa      	ldrb	r2, [r7, #3]
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f002 faf6 	bl	8004612 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 8002026:	78fa      	ldrb	r2, [r7, #3]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	440b      	add	r3, r1
 8002034:	335d      	adds	r3, #93	; 0x5d
 8002036:	2205      	movs	r2, #5
 8002038:	701a      	strb	r2, [r3, #0]
} 
 800203a:	e1b9      	b.n	80023b0 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	d035      	beq.n	80020be <HCD_HC_OUT_IRQHandler+0x348>
    hhcd->hc[chnum].ErrCnt = 0U;  
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	3358      	adds	r3, #88	; 0x58
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4413      	add	r3, r2
 800206e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002072:	4619      	mov	r1, r3
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f043 0302 	orr.w	r3, r3, #2
 8002086:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f002 fabe 	bl	8004612 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	335d      	adds	r3, #93	; 0x5d
 80020a6:	2203      	movs	r2, #3
 80020a8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b6:	461a      	mov	r2, r3
 80020b8:	2310      	movs	r3, #16
 80020ba:	6093      	str	r3, [r2, #8]
} 
 80020bc:	e178      	b.n	80023b0 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d02b      	beq.n	800212c <HCD_HC_OUT_IRQHandler+0x3b6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	4619      	mov	r1, r3
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	78fa      	ldrb	r2, [r7, #3]
 80020fc:	4611      	mov	r1, r2
 80020fe:	4618      	mov	r0, r3
 8002100:	f002 fa87 	bl	8004612 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	335d      	adds	r3, #93	; 0x5d
 8002114:	2206      	movs	r2, #6
 8002116:	701a      	strb	r2, [r3, #0]
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002124:	461a      	mov	r2, r3
 8002126:	2380      	movs	r3, #128	; 0x80
 8002128:	6093      	str	r3, [r2, #8]
} 
 800212a:	e141      	b.n	80023b0 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213e:	2b00      	cmp	r3, #0
 8002140:	d035      	beq.n	80021ae <HCD_HC_OUT_IRQHandler+0x438>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4413      	add	r3, r2
 800214a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214e:	4619      	mov	r1, r3
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f002 fa50 	bl	8004612 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217e:	461a      	mov	r2, r3
 8002180:	2310      	movs	r3, #16
 8002182:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002190:	461a      	mov	r2, r3
 8002192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002196:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	440b      	add	r3, r1
 80021a6:	335d      	adds	r3, #93	; 0x5d
 80021a8:	2208      	movs	r2, #8
 80021aa:	701a      	strb	r2, [r3, #0]
} 
 80021ac:	e100      	b.n	80023b0 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80f5 	beq.w	80023b0 <HCD_HC_OUT_IRQHandler+0x63a>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d2:	4619      	mov	r1, r3
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f023 0302 	bic.w	r3, r3, #2
 80021e6:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	440b      	add	r3, r1
 80021f6:	335d      	adds	r3, #93	; 0x5d
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d12c      	bne.n	8002258 <HCD_HC_OUT_IRQHandler+0x4e2>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	440b      	add	r3, r1
 800220c:	335c      	adds	r3, #92	; 0x5c
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	333f      	adds	r3, #63	; 0x3f
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b02      	cmp	r3, #2
 8002226:	f040 80ac 	bne.w	8002382 <HCD_HC_OUT_IRQHandler+0x60c>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 800222a:	78fa      	ldrb	r2, [r7, #3]
 800222c:	78f9      	ldrb	r1, [r7, #3]
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4403      	add	r3, r0
 800223a:	3351      	adds	r3, #81	; 0x51
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	f083 0301 	eor.w	r3, r3, #1
 8002242:	b2d8      	uxtb	r0, r3
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	440b      	add	r3, r1
 8002250:	3351      	adds	r3, #81	; 0x51
 8002252:	4602      	mov	r2, r0
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	e094      	b.n	8002382 <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	335d      	adds	r3, #93	; 0x5d
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b03      	cmp	r3, #3
 800226c:	d10a      	bne.n	8002284 <HCD_HC_OUT_IRQHandler+0x50e>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	440b      	add	r3, r1
 800227c:	335c      	adds	r3, #92	; 0x5c
 800227e:	2202      	movs	r2, #2
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	e07e      	b.n	8002382 <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	440b      	add	r3, r1
 8002292:	335d      	adds	r3, #93	; 0x5d
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b04      	cmp	r3, #4
 8002298:	d114      	bne.n	80022c4 <HCD_HC_OUT_IRQHandler+0x54e>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	440b      	add	r3, r1
 80022a8:	335c      	adds	r3, #92	; 0x5c
 80022aa:	2202      	movs	r2, #2
 80022ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].do_ping = 0U;
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	333d      	adds	r3, #61	; 0x3d
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
 80022c2:	e05e      	b.n	8002382 <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	335d      	adds	r3, #93	; 0x5d
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b05      	cmp	r3, #5
 80022d8:	d10a      	bne.n	80022f0 <HCD_HC_OUT_IRQHandler+0x57a>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	335c      	adds	r3, #92	; 0x5c
 80022ea:	2205      	movs	r2, #5
 80022ec:	701a      	strb	r2, [r3, #0]
 80022ee:	e048      	b.n	8002382 <HCD_HC_OUT_IRQHandler+0x60c>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	440b      	add	r3, r1
 80022fe:	335d      	adds	r3, #93	; 0x5d
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b06      	cmp	r3, #6
 8002304:	d00a      	beq.n	800231c <HCD_HC_OUT_IRQHandler+0x5a6>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	440b      	add	r3, r1
 8002314:	335d      	adds	r3, #93	; 0x5d
 8002316:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002318:	2b08      	cmp	r3, #8
 800231a:	d132      	bne.n	8002382 <HCD_HC_OUT_IRQHandler+0x60c>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	440b      	add	r3, r1
 800232a:	3358      	adds	r3, #88	; 0x58
 800232c:	6819      	ldr	r1, [r3, #0]
 800232e:	1c48      	adds	r0, r1, #1
 8002330:	687c      	ldr	r4, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4423      	add	r3, r4
 800233c:	3358      	adds	r3, #88	; 0x58
 800233e:	6018      	str	r0, [r3, #0]
 8002340:	2903      	cmp	r1, #3
 8002342:	d914      	bls.n	800236e <HCD_HC_OUT_IRQHandler+0x5f8>
        hhcd->hc[chnum].ErrCnt = 0U;
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	3358      	adds	r3, #88	; 0x58
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	335c      	adds	r3, #92	; 0x5c
 8002368:	2204      	movs	r2, #4
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	e009      	b.n	8002382 <HCD_HC_OUT_IRQHandler+0x60c>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	440b      	add	r3, r1
 800237c:	335c      	adds	r3, #92	; 0x5c
 800237e:	2202      	movs	r2, #2
 8002380:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4413      	add	r3, r2
 800238a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238e:	461a      	mov	r2, r3
 8002390:	2302      	movs	r3, #2
 8002392:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	335c      	adds	r3, #92	; 0x5c
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	4619      	mov	r1, r3
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f006 f9d6 	bl	800875c <HAL_HCD_HC_NotifyURBChange_Callback>
} 
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd90      	pop	{r4, r7, pc}

080023b8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	61fb      	str	r3, [r7, #28]
  uint8_t  channelnum = 0;  
 80023c6:	2300      	movs	r3, #0
 80023c8:	76fb      	strb	r3, [r7, #27]
  uint32_t pktsts;
  uint32_t pktcnt; 
  uint32_t temp = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
  
  temp = hhcd->Instance->GRXSTSP;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	617b      	str	r3, [r7, #20]
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	76fb      	strb	r3, [r7, #27]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	0c5b      	lsrs	r3, r3, #17
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	60fb      	str	r3, [r7, #12]
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023f6:	60bb      	str	r3, [r7, #8]
  
  switch (pktsts)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d003      	beq.n	8002406 <HCD_RXQLVL_IRQHandler+0x4e>
 80023fe:	2b05      	cmp	r3, #5
 8002400:	f000 8082 	beq.w	8002508 <HCD_RXQLVL_IRQHandler+0x150>
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
    break;
  case GRXSTS_PKTSTS_IN_XFER_COMP:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 8002404:	e083      	b.n	800250e <HCD_RXQLVL_IRQHandler+0x156>
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d07f      	beq.n	800250c <HCD_RXQLVL_IRQHandler+0x154>
 800240c:	7efa      	ldrb	r2, [r7, #27]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	3344      	adds	r3, #68	; 0x44
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d074      	beq.n	800250c <HCD_RXQLVL_IRQHandler+0x154>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	7efa      	ldrb	r2, [r7, #27]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	440b      	add	r3, r1
 8002434:	3344      	adds	r3, #68	; 0x44
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	b292      	uxth	r2, r2
 800243c:	4619      	mov	r1, r3
 800243e:	f001 fcc8 	bl	8003dd2 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8002442:	7efa      	ldrb	r2, [r7, #27]
 8002444:	7ef9      	ldrb	r1, [r7, #27]
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4403      	add	r3, r0
 8002452:	3344      	adds	r3, #68	; 0x44
 8002454:	6819      	ldr	r1, [r3, #0]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4419      	add	r1, r3
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4403      	add	r3, r0
 8002466:	3344      	adds	r3, #68	; 0x44
 8002468:	6019      	str	r1, [r3, #0]
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 800246a:	7efa      	ldrb	r2, [r7, #27]
 800246c:	7ef9      	ldrb	r1, [r7, #27]
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4403      	add	r3, r0
 800247a:	334c      	adds	r3, #76	; 0x4c
 800247c:	6819      	ldr	r1, [r3, #0]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4419      	add	r1, r3
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4403      	add	r3, r0
 800248e:	334c      	adds	r3, #76	; 0x4c
 8002490:	6019      	str	r1, [r3, #0]
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8002492:	7efb      	ldrb	r3, [r7, #27]
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	4413      	add	r3, r2
 800249a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <HCD_RXQLVL_IRQHandler+0x160>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d031      	beq.n	800250c <HCD_RXQLVL_IRQHandler+0x154>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 80024a8:	7efb      	ldrb	r3, [r7, #27]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024be:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024c6:	613b      	str	r3, [r7, #16]
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 80024c8:	7efb      	ldrb	r3, [r7, #27]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d4:	461a      	mov	r2, r3
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	6013      	str	r3, [r2, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 80024da:	7efa      	ldrb	r2, [r7, #27]
 80024dc:	7ef9      	ldrb	r1, [r7, #27]
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4403      	add	r3, r0
 80024ea:	3350      	adds	r3, #80	; 0x50
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	f083 0301 	eor.w	r3, r3, #1
 80024f2:	b2d8      	uxtb	r0, r3
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	440b      	add	r3, r1
 8002500:	3350      	adds	r3, #80	; 0x50
 8002502:	4602      	mov	r2, r0
 8002504:	701a      	strb	r2, [r3, #0]
    break;
 8002506:	e001      	b.n	800250c <HCD_RXQLVL_IRQHandler+0x154>
    break;
 8002508:	bf00      	nop
 800250a:	e000      	b.n	800250e <HCD_RXQLVL_IRQHandler+0x156>
    break;
 800250c:	bf00      	nop
  }
}
 800250e:	bf00      	nop
 8002510:	3720      	adds	r7, #32
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	1ff80000 	.word	0x1ff80000

0800251c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	617b      	str	r3, [r7, #20]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	613b      	str	r3, [r7, #16]
  hprt0_dup = USBx_HPRT0;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60fb      	str	r3, [r7, #12]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002544:	60fb      	str	r3, [r7, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b02      	cmp	r3, #2
 800254e:	d113      	bne.n	8002578 <HCD_Port_IRQHandler+0x5c>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d10a      	bne.n	8002570 <HCD_Port_IRQHandler+0x54>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	6992      	ldr	r2, [r2, #24]
 8002564:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002568:	619a      	str	r2, [r3, #24]
      HAL_HCD_Connect_Callback(hhcd);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f006 f8da 	bl	8008724 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	60fb      	str	r3, [r7, #12]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b08      	cmp	r3, #8
 8002580:	d142      	bne.n	8002608 <HCD_Port_IRQHandler+0xec>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f043 0308 	orr.w	r3, r3, #8
 8002588:	60fb      	str	r3, [r7, #12]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b04      	cmp	r3, #4
 8002592:	d126      	bne.n	80025e2 <HCD_Port_IRQHandler+0xc6>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d113      	bne.n	80025c4 <HCD_Port_IRQHandler+0xa8>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80025a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025a6:	d106      	bne.n	80025b6 <HCD_Port_IRQHandler+0x9a>
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2102      	movs	r1, #2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f001 fd2e 	bl	8004010 <USB_InitFSLSPClkSel>
 80025b4:	e011      	b.n	80025da <HCD_Port_IRQHandler+0xbe>
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2101      	movs	r1, #1
 80025bc:	4618      	mov	r0, r3
 80025be:	f001 fd27 	bl	8004010 <USB_InitFSLSPClkSel>
 80025c2:	e00a      	b.n	80025da <HCD_Port_IRQHandler+0xbe>
        }
      }
      else
      {
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d106      	bne.n	80025da <HCD_Port_IRQHandler+0xbe>
        {
          USBx_HOST->HFIR = 60000U;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025d2:	461a      	mov	r2, r3
 80025d4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80025d8:	6053      	str	r3, [r2, #4]
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f006 f8a2 	bl	8008724 <HAL_HCD_Connect_Callback>
 80025e0:	e012      	b.n	8002608 <HCD_Port_IRQHandler+0xec>
    }
    else
    {
      /* Clean up HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025e8:	461a      	mov	r2, r3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80025f6:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	6992      	ldr	r2, [r2, #24]
 8002602:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002606:	619a      	str	r2, [r3, #24]
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b20      	cmp	r3, #32
 8002610:	d103      	bne.n	800261a <HCD_Port_IRQHandler+0xfe>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f043 0320 	orr.w	r3, r3, #32
 8002618:	60fb      	str	r3, [r7, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002620:	461a      	mov	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6013      	str	r3, [r2, #0]
}
 8002626:	bf00      	nop
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0ca      	b.n	80027da <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002644:	4b67      	ldr	r3, [pc, #412]	; (80027e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 020f 	and.w	r2, r3, #15
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d20c      	bcs.n	800266c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b64      	ldr	r3, [pc, #400]	; (80027e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b62      	ldr	r3, [pc, #392]	; (80027e4 <HAL_RCC_ClockConfig+0x1b4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 020f 	and.w	r2, r3, #15
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0b6      	b.n	80027da <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d020      	beq.n	80026ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002684:	4a58      	ldr	r2, [pc, #352]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002686:	4b58      	ldr	r3, [pc, #352]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800268e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800269c:	4a52      	ldr	r2, [pc, #328]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 800269e:	4b52      	ldr	r3, [pc, #328]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a8:	494f      	ldr	r1, [pc, #316]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 80026aa:	4b4f      	ldr	r3, [pc, #316]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d044      	beq.n	8002750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d119      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e07d      	b.n	80027da <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d003      	beq.n	80026ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ee:	4b3e      	ldr	r3, [pc, #248]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e06d      	b.n	80027da <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fe:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e065      	b.n	80027da <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270e:	4936      	ldr	r1, [pc, #216]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002710:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f023 0203 	bic.w	r2, r3, #3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4313      	orrs	r3, r2
 800271e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002720:	f7fe f8ae 	bl	8000880 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	e00a      	b.n	800273e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002728:	f7fe f8aa 	bl	8000880 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	; 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e04d      	b.n	80027da <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	4b2a      	ldr	r3, [pc, #168]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 020c 	and.w	r2, r3, #12
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	429a      	cmp	r2, r3
 800274e:	d1eb      	bne.n	8002728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002750:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 020f 	and.w	r2, r3, #15
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d90c      	bls.n	8002778 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b1f      	ldr	r3, [pc, #124]	; (80027e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 020f 	and.w	r2, r3, #15
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e030      	b.n	80027da <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002784:	4918      	ldr	r1, [pc, #96]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027a2:	4911      	ldr	r1, [pc, #68]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027b6:	f000 fb7b 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 80027ba:	4601      	mov	r1, r0
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_RCC_ClockConfig+0x1b8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	4a09      	ldr	r2, [pc, #36]	; (80027ec <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	5cd3      	ldrb	r3, [r2, r3]
 80027ca:	fa21 f303 	lsr.w	r3, r1, r3
 80027ce:	4a08      	ldr	r2, [pc, #32]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 80027d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80027d2:	2001      	movs	r0, #1
 80027d4:	f7fe f810 	bl	80007f8 <HAL_InitTick>

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40023c00 	.word	0x40023c00
 80027e8:	40023800 	.word	0x40023800
 80027ec:	08008fa8 	.word	0x08008fa8
 80027f0:	20000078 	.word	0x20000078

080027f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_RCC_GetHCLKFreq+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000078 	.word	0x20000078

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002810:	f7ff fff0 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 8002814:	4601      	mov	r1, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	0a9b      	lsrs	r3, r3, #10
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4a03      	ldr	r2, [pc, #12]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40023800 	.word	0x40023800
 8002830:	08008fb8 	.word	0x08008fb8

08002834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002838:	f7ff ffdc 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 800283c:	4601      	mov	r1, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	0b5b      	lsrs	r3, r3, #13
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4a03      	ldr	r2, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800284a:	5cd3      	ldrb	r3, [r2, r3]
 800284c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	08008fb8 	.word	0x08008fb8

0800285c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08c      	sub	sp, #48	; 0x30
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d010      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002894:	496f      	ldr	r1, [pc, #444]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002896:	4b6f      	ldr	r3, [pc, #444]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800289c:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80028b2:	2301      	movs	r3, #1
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d010      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80028c2:	4964      	ldr	r1, [pc, #400]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028c4:	4b63      	ldr	r3, [pc, #396]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ca:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80028e0:	2301      	movs	r3, #1
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d017      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028f0:	4958      	ldr	r1, [pc, #352]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028f2:	4b58      	ldr	r3, [pc, #352]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800290e:	d101      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002910:	2301      	movs	r3, #1
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800291c:	2301      	movs	r3, #1
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d017      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800292c:	4949      	ldr	r1, [pc, #292]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800292e:	4b49      	ldr	r3, [pc, #292]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002934:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294a:	d101      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800294c:	2301      	movs	r3, #1
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002958:	2301      	movs	r3, #1
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 808a 	beq.w	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	4a39      	ldr	r2, [pc, #228]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002970:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002978:	6413      	str	r3, [r2, #64]	; 0x40
 800297a:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002986:	4a34      	ldr	r2, [pc, #208]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002988:	4b33      	ldr	r3, [pc, #204]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002990:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002992:	f7fd ff75 	bl	8000880 <HAL_GetTick>
 8002996:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800299a:	f7fd ff71 	bl	8000880 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e278      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80029ac:	4b2a      	ldr	r3, [pc, #168]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029b8:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d02f      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d028      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029d6:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029de:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029e6:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80029ec:	4a19      	ldr	r2, [pc, #100]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029f2:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d014      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80029fe:	f7fd ff3f 	bl	8000880 <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fd ff3b 	bl	8000880 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e240      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ee      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a34:	d114      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002a36:	4907      	ldr	r1, [pc, #28]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	608b      	str	r3, [r1, #8]
 8002a50:	e00c      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40007000 	.word	0x40007000
 8002a5c:	42470e40 	.word	0x42470e40
 8002a60:	4a4a      	ldr	r2, [pc, #296]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a62:	4b4a      	ldr	r3, [pc, #296]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a6a:	6093      	str	r3, [r2, #8]
 8002a6c:	4947      	ldr	r1, [pc, #284]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d004      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a8a:	4a41      	ldr	r2, [pc, #260]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a92:	6013      	str	r3, [r2, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002aa0:	493a      	ldr	r1, [pc, #232]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aa2:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ac2:	4932      	ldr	r1, [pc, #200]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ac4:	4b31      	ldr	r3, [pc, #196]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d011      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ae4:	4929      	ldr	r1, [pc, #164]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ae6:	4b29      	ldr	r3, [pc, #164]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b02:	d101      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002b04:	2301      	movs	r3, #1
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002b14:	491d      	ldr	r1, [pc, #116]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d011      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002b36:	4915      	ldr	r1, [pc, #84]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b38:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b3e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b54:	d101      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002b56:	2301      	movs	r3, #1
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b68:	f040 80ff 	bne.w	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b72:	f7fd fe85 	bl	8000880 <HAL_GetTick>
 8002b76:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b78:	e00e      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b7a:	f7fd fe81 	bl	8000880 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d907      	bls.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e188      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	424711e0 	.word	0x424711e0
 8002b94:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b98:	4b7e      	ldr	r3, [pc, #504]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ea      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d009      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d028      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d124      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002bcc:	4b71      	ldr	r3, [pc, #452]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd2:	0c1b      	lsrs	r3, r3, #16
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	3301      	adds	r3, #1
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bde:	4b6d      	ldr	r3, [pc, #436]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be4:	0e1b      	lsrs	r3, r3, #24
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bec:	4969      	ldr	r1, [pc, #420]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	019b      	lsls	r3, r3, #6
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	041b      	lsls	r3, r3, #16
 8002c02:	431a      	orrs	r2, r3
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	061b      	lsls	r3, r3, #24
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	071b      	lsls	r3, r3, #28
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d035      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c40:	d130      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c42:	4b54      	ldr	r3, [pc, #336]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c48:	0c1b      	lsrs	r3, r3, #16
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c54:	4b4f      	ldr	r3, [pc, #316]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c5a:	0f1b      	lsrs	r3, r3, #28
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002c62:	494c      	ldr	r1, [pc, #304]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	019b      	lsls	r3, r3, #6
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	3b01      	subs	r3, #1
 8002c76:	041b      	lsls	r3, r3, #16
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	061b      	lsls	r3, r3, #24
 8002c80:	431a      	orrs	r2, r3
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	071b      	lsls	r3, r3, #28
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c8c:	4941      	ldr	r1, [pc, #260]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c8e:	4b41      	ldr	r3, [pc, #260]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c94:	f023 021f 	bic.w	r2, r3, #31
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d029      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cb8:	d124      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002cba:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ccc:	4b31      	ldr	r3, [pc, #196]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cd2:	0f1b      	lsrs	r3, r3, #28
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002cda:	492e      	ldr	r1, [pc, #184]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	019b      	lsls	r3, r3, #6
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	085b      	lsrs	r3, r3, #1
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	041b      	lsls	r3, r3, #16
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	061b      	lsls	r3, r3, #24
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	071b      	lsls	r3, r3, #28
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d016      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d10:	4920      	ldr	r1, [pc, #128]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	019b      	lsls	r3, r3, #6
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	085b      	lsrs	r3, r3, #1
 8002d24:	3b01      	subs	r3, #1
 8002d26:	041b      	lsls	r3, r3, #16
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	061b      	lsls	r3, r3, #24
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	071b      	lsls	r3, r3, #28
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d3e:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d44:	f7fd fd9c 	bl	8000880 <HAL_GetTick>
 8002d48:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d4c:	f7fd fd98 	bl	8000880 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e09f      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	f040 8095 	bne.w	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d78:	f7fd fd82 	bl	8000880 <HAL_GetTick>
 8002d7c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d7e:	e00f      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d80:	f7fd fd7e 	bl	8000880 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d908      	bls.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e085      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	42470068 	.word	0x42470068
 8002d9c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002da0:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dac:	d0e8      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d02b      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d127      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002dd6:	4b34      	ldr	r3, [pc, #208]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	3301      	adds	r3, #1
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002de8:	492f      	ldr	r1, [pc, #188]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	019b      	lsls	r3, r3, #6
 8002df4:	431a      	orrs	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	085b      	lsrs	r3, r3, #1
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	061b      	lsls	r3, r3, #24
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e0c:	4926      	ldr	r1, [pc, #152]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e0e:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01d      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e3a:	d118      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e42:	0e1b      	lsrs	r3, r3, #24
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002e4a:	4917      	ldr	r1, [pc, #92]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699a      	ldr	r2, [r3, #24]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	019b      	lsls	r3, r3, #6
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	085b      	lsrs	r3, r3, #1
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	041b      	lsls	r3, r3, #16
 8002e62:	431a      	orrs	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	061b      	lsls	r3, r3, #24
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e74:	f7fd fd04 	bl	8000880 <HAL_GetTick>
 8002e78:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002e7c:	f7fd fd00 	bl	8000880 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e007      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e8e:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e9a:	d1ef      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3730      	adds	r7, #48	; 0x30
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	42470070 	.word	0x42470070

08002eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eb4:	b0a1      	sub	sp, #132	; 0x84
 8002eb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ecc:	4ba0      	ldr	r3, [pc, #640]	; (8003150 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b0c      	cmp	r3, #12
 8002ed6:	f200 8193 	bhi.w	8003200 <HAL_RCC_GetSysClockFreq+0x350>
 8002eda:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <HAL_RCC_GetSysClockFreq+0x30>)
 8002edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee0:	08002f15 	.word	0x08002f15
 8002ee4:	08003201 	.word	0x08003201
 8002ee8:	08003201 	.word	0x08003201
 8002eec:	08003201 	.word	0x08003201
 8002ef0:	08002f1b 	.word	0x08002f1b
 8002ef4:	08003201 	.word	0x08003201
 8002ef8:	08003201 	.word	0x08003201
 8002efc:	08003201 	.word	0x08003201
 8002f00:	08002f21 	.word	0x08002f21
 8002f04:	08003201 	.word	0x08003201
 8002f08:	08003201 	.word	0x08003201
 8002f0c:	08003201 	.word	0x08003201
 8002f10:	0800309d 	.word	0x0800309d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f14:	4b8f      	ldr	r3, [pc, #572]	; (8003154 <HAL_RCC_GetSysClockFreq+0x2a4>)
 8002f16:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8002f18:	e175      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f1a:	4b8f      	ldr	r3, [pc, #572]	; (8003158 <HAL_RCC_GetSysClockFreq+0x2a8>)
 8002f1c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8002f1e:	e172      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f20:	4b8b      	ldr	r3, [pc, #556]	; (8003150 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f28:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f2a:	4b89      	ldr	r3, [pc, #548]	; (8003150 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d056      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f36:	4b86      	ldr	r3, [pc, #536]	; (8003150 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	099b      	lsrs	r3, r3, #6
 8002f3c:	f04f 0400 	mov.w	r4, #0
 8002f40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	ea01 0103 	and.w	r1, r1, r3
 8002f4c:	ea02 0204 	and.w	r2, r2, r4
 8002f50:	460b      	mov	r3, r1
 8002f52:	4614      	mov	r4, r2
 8002f54:	0160      	lsls	r0, r4, #5
 8002f56:	6678      	str	r0, [r7, #100]	; 0x64
 8002f58:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002f5a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002f5e:	6678      	str	r0, [r7, #100]	; 0x64
 8002f60:	015b      	lsls	r3, r3, #5
 8002f62:	663b      	str	r3, [r7, #96]	; 0x60
 8002f64:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8002f68:	1a5b      	subs	r3, r3, r1
 8002f6a:	eb64 0402 	sbc.w	r4, r4, r2
 8002f6e:	01a0      	lsls	r0, r4, #6
 8002f70:	65f8      	str	r0, [r7, #92]	; 0x5c
 8002f72:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002f74:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8002f78:	65f8      	str	r0, [r7, #92]	; 0x5c
 8002f7a:	0198      	lsls	r0, r3, #6
 8002f7c:	65b8      	str	r0, [r7, #88]	; 0x58
 8002f7e:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8002f82:	1aed      	subs	r5, r5, r3
 8002f84:	eb66 0604 	sbc.w	r6, r6, r4
 8002f88:	4633      	mov	r3, r6
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	657b      	str	r3, [r7, #84]	; 0x54
 8002f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f90:	4628      	mov	r0, r5
 8002f92:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002f96:	657b      	str	r3, [r7, #84]	; 0x54
 8002f98:	462b      	mov	r3, r5
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	653b      	str	r3, [r7, #80]	; 0x50
 8002f9e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8002fa2:	461d      	mov	r5, r3
 8002fa4:	4626      	mov	r6, r4
 8002fa6:	186b      	adds	r3, r5, r1
 8002fa8:	eb46 0402 	adc.w	r4, r6, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	4621      	mov	r1, r4
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	025b      	lsls	r3, r3, #9
 8002fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb8:	4602      	mov	r2, r0
 8002fba:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 8002fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	025b      	lsls	r3, r3, #9
 8002fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fc6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002fca:	4618      	mov	r0, r3
 8002fcc:	4621      	mov	r1, r4
 8002fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd0:	f04f 0400 	mov.w	r4, #0
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4623      	mov	r3, r4
 8002fd8:	f7fd fa64 	bl	80004a4 <__aeabi_uldivmod>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	460c      	mov	r4, r1
 8002fe0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fe2:	e04d      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe4:	4b5a      	ldr	r3, [pc, #360]	; (8003150 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	f04f 0400 	mov.w	r4, #0
 8002fee:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	ea01 0103 	and.w	r1, r1, r3
 8002ffa:	ea02 0204 	and.w	r2, r2, r4
 8002ffe:	460b      	mov	r3, r1
 8003000:	4614      	mov	r4, r2
 8003002:	0160      	lsls	r0, r4, #5
 8003004:	6478      	str	r0, [r7, #68]	; 0x44
 8003006:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003008:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800300c:	6478      	str	r0, [r7, #68]	; 0x44
 800300e:	015b      	lsls	r3, r3, #5
 8003010:	643b      	str	r3, [r7, #64]	; 0x40
 8003012:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003016:	1a5b      	subs	r3, r3, r1
 8003018:	eb64 0402 	sbc.w	r4, r4, r2
 800301c:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8003020:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8003024:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8003028:	ebba 0a03 	subs.w	sl, sl, r3
 800302c:	eb6b 0b04 	sbc.w	fp, fp, r4
 8003030:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003038:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800303c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800303e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8003042:	63bb      	str	r3, [r7, #56]	; 0x38
 8003044:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8003048:	eb1a 0a01 	adds.w	sl, sl, r1
 800304c:	eb4b 0b02 	adc.w	fp, fp, r2
 8003050:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8003054:	637b      	str	r3, [r7, #52]	; 0x34
 8003056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003058:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 800305c:	637b      	str	r3, [r7, #52]	; 0x34
 800305e:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8003062:	633b      	str	r3, [r7, #48]	; 0x30
 8003064:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003068:	4650      	mov	r0, sl
 800306a:	4659      	mov	r1, fp
 800306c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800306e:	f04f 0400 	mov.w	r4, #0
 8003072:	461a      	mov	r2, r3
 8003074:	4623      	mov	r3, r4
 8003076:	f7fd fa15 	bl	80004a4 <__aeabi_uldivmod>
 800307a:	4603      	mov	r3, r0
 800307c:	460c      	mov	r4, r1
 800307e:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003080:	4b33      	ldr	r3, [pc, #204]	; (8003150 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	3301      	adds	r3, #1
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8003090:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800309a:	e0b4      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800309c:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030a4:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030a6:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d054      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b2:	4b27      	ldr	r3, [pc, #156]	; (8003150 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	099b      	lsrs	r3, r3, #6
 80030b8:	f04f 0400 	mov.w	r4, #0
 80030bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	ea01 0103 	and.w	r1, r1, r3
 80030c8:	ea02 0204 	and.w	r2, r2, r4
 80030cc:	460b      	mov	r3, r1
 80030ce:	4614      	mov	r4, r2
 80030d0:	0160      	lsls	r0, r4, #5
 80030d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80030d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030d6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80030da:	62f8      	str	r0, [r7, #44]	; 0x2c
 80030dc:	015b      	lsls	r3, r3, #5
 80030de:	62bb      	str	r3, [r7, #40]	; 0x28
 80030e0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80030e4:	1a5b      	subs	r3, r3, r1
 80030e6:	eb64 0402 	sbc.w	r4, r4, r2
 80030ea:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80030ee:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80030f2:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80030f6:	ebb8 0803 	subs.w	r8, r8, r3
 80030fa:	eb69 0904 	sbc.w	r9, r9, r4
 80030fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
 800310c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003110:	623b      	str	r3, [r7, #32]
 8003112:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003116:	eb18 0801 	adds.w	r8, r8, r1
 800311a:	eb49 0902 	adc.w	r9, r9, r2
 800311e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003122:	61fb      	str	r3, [r7, #28]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800312a:	61fb      	str	r3, [r7, #28]
 800312c:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003136:	4640      	mov	r0, r8
 8003138:	4649      	mov	r1, r9
 800313a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313c:	f04f 0400 	mov.w	r4, #0
 8003140:	461a      	mov	r2, r3
 8003142:	4623      	mov	r3, r4
 8003144:	f7fd f9ae 	bl	80004a4 <__aeabi_uldivmod>
 8003148:	4603      	mov	r3, r0
 800314a:	460c      	mov	r4, r1
 800314c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800314e:	e04b      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x338>
 8003150:	40023800 	.word	0x40023800
 8003154:	00f42400 	.word	0x00f42400
 8003158:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315c:	4b2d      	ldr	r3, [pc, #180]	; (8003214 <HAL_RCC_GetSysClockFreq+0x364>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	f04f 0400 	mov.w	r4, #0
 8003166:	f240 11ff 	movw	r1, #511	; 0x1ff
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	ea01 0103 	and.w	r1, r1, r3
 8003172:	ea02 0204 	and.w	r2, r2, r4
 8003176:	460b      	mov	r3, r1
 8003178:	4614      	mov	r4, r2
 800317a:	0160      	lsls	r0, r4, #5
 800317c:	6178      	str	r0, [r7, #20]
 800317e:	6978      	ldr	r0, [r7, #20]
 8003180:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003184:	6178      	str	r0, [r7, #20]
 8003186:	015b      	lsls	r3, r3, #5
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800318e:	1a5b      	subs	r3, r3, r1
 8003190:	eb64 0402 	sbc.w	r4, r4, r2
 8003194:	01a6      	lsls	r6, r4, #6
 8003196:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800319a:	019d      	lsls	r5, r3, #6
 800319c:	1aed      	subs	r5, r5, r3
 800319e:	eb66 0604 	sbc.w	r6, r6, r4
 80031a2:	00f3      	lsls	r3, r6, #3
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	00eb      	lsls	r3, r5, #3
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80031b6:	186d      	adds	r5, r5, r1
 80031b8:	eb46 0602 	adc.w	r6, r6, r2
 80031bc:	02b3      	lsls	r3, r6, #10
 80031be:	607b      	str	r3, [r7, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	02ab      	lsls	r3, r5, #10
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	e897 0060 	ldmia.w	r7, {r5, r6}
 80031d0:	4628      	mov	r0, r5
 80031d2:	4631      	mov	r1, r6
 80031d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031d6:	f04f 0400 	mov.w	r4, #0
 80031da:	461a      	mov	r2, r3
 80031dc:	4623      	mov	r3, r4
 80031de:	f7fd f961 	bl	80004a4 <__aeabi_uldivmod>
 80031e2:	4603      	mov	r3, r0
 80031e4:	460c      	mov	r4, r1
 80031e6:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <HAL_RCC_GetSysClockFreq+0x364>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	0f1b      	lsrs	r3, r3, #28
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 80031f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80031f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80031fe:	e002      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCC_GetSysClockFreq+0x368>)
 8003202:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8003204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8003208:	4618      	mov	r0, r3
 800320a:	3784      	adds	r7, #132	; 0x84
 800320c:	46bd      	mov	sp, r7
 800320e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	00f42400 	.word	0x00f42400

0800321c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8083 	beq.w	800333c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003236:	4b95      	ldr	r3, [pc, #596]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b04      	cmp	r3, #4
 8003240:	d019      	beq.n	8003276 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003242:	4b92      	ldr	r3, [pc, #584]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800324a:	2b08      	cmp	r3, #8
 800324c:	d106      	bne.n	800325c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800324e:	4b8f      	ldr	r3, [pc, #572]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800325a:	d00c      	beq.n	8003276 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325c:	4b8b      	ldr	r3, [pc, #556]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003264:	2b0c      	cmp	r3, #12
 8003266:	d112      	bne.n	800328e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003268:	4b88      	ldr	r3, [pc, #544]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003274:	d10b      	bne.n	800328e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003276:	4b85      	ldr	r3, [pc, #532]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d05b      	beq.n	800333a <HAL_RCC_OscConfig+0x11e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d157      	bne.n	800333a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e216      	b.n	80036bc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003296:	d106      	bne.n	80032a6 <HAL_RCC_OscConfig+0x8a>
 8003298:	4a7c      	ldr	r2, [pc, #496]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800329a:	4b7c      	ldr	r3, [pc, #496]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	e01d      	b.n	80032e2 <HAL_RCC_OscConfig+0xc6>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ae:	d10c      	bne.n	80032ca <HAL_RCC_OscConfig+0xae>
 80032b0:	4a76      	ldr	r2, [pc, #472]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80032b2:	4b76      	ldr	r3, [pc, #472]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4a73      	ldr	r2, [pc, #460]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80032be:	4b73      	ldr	r3, [pc, #460]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	e00b      	b.n	80032e2 <HAL_RCC_OscConfig+0xc6>
 80032ca:	4a70      	ldr	r2, [pc, #448]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80032cc:	4b6f      	ldr	r3, [pc, #444]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	4a6d      	ldr	r2, [pc, #436]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80032d8:	4b6c      	ldr	r3, [pc, #432]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d013      	beq.n	8003312 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fd fac9 	bl	8000880 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f2:	f7fd fac5 	bl	8000880 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b64      	cmp	r3, #100	; 0x64
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e1db      	b.n	80036bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003304:	4b61      	ldr	r3, [pc, #388]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0xd6>
 8003310:	e014      	b.n	800333c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003312:	f7fd fab5 	bl	8000880 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800331a:	f7fd fab1 	bl	8000880 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b64      	cmp	r3, #100	; 0x64
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e1c7      	b.n	80036bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332c:	4b57      	ldr	r3, [pc, #348]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f0      	bne.n	800331a <HAL_RCC_OscConfig+0xfe>
 8003338:	e000      	b.n	800333c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d06f      	beq.n	8003428 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003348:	4b50      	ldr	r3, [pc, #320]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b00      	cmp	r3, #0
 8003352:	d017      	beq.n	8003384 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003354:	4b4d      	ldr	r3, [pc, #308]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800335c:	2b08      	cmp	r3, #8
 800335e:	d105      	bne.n	800336c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003360:	4b4a      	ldr	r3, [pc, #296]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00b      	beq.n	8003384 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800336c:	4b47      	ldr	r3, [pc, #284]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003374:	2b0c      	cmp	r3, #12
 8003376:	d11c      	bne.n	80033b2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003378:	4b44      	ldr	r3, [pc, #272]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d116      	bne.n	80033b2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003384:	4b41      	ldr	r3, [pc, #260]	; (800348c <HAL_RCC_OscConfig+0x270>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_OscConfig+0x180>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d001      	beq.n	800339c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e18f      	b.n	80036bc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339c:	493b      	ldr	r1, [pc, #236]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800339e:	4b3b      	ldr	r3, [pc, #236]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4313      	orrs	r3, r2
 80033ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b0:	e03a      	b.n	8003428 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d020      	beq.n	80033fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033ba:	4b35      	ldr	r3, [pc, #212]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fd fa5e 	bl	8000880 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c8:	f7fd fa5a 	bl	8000880 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e170      	b.n	80036bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033da:	4b2c      	ldr	r3, [pc, #176]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e6:	4929      	ldr	r1, [pc, #164]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80033e8:	4b28      	ldr	r3, [pc, #160]	; (800348c <HAL_RCC_OscConfig+0x270>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]
 80033fa:	e015      	b.n	8003428 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fc:	4b24      	ldr	r3, [pc, #144]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7fd fa3d 	bl	8000880 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800340a:	f7fd fa39 	bl	8000880 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e14f      	b.n	80036bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341c:	4b1b      	ldr	r3, [pc, #108]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f0      	bne.n	800340a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d037      	beq.n	80034a4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d016      	beq.n	800346a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800343c:	4b15      	ldr	r3, [pc, #84]	; (8003494 <HAL_RCC_OscConfig+0x278>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003442:	f7fd fa1d 	bl	8000880 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800344a:	f7fd fa19 	bl	8000880 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e12f      	b.n	80036bc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_RCC_OscConfig+0x270>)
 800345e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x22e>
 8003468:	e01c      	b.n	80034a4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_RCC_OscConfig+0x278>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003470:	f7fd fa06 	bl	8000880 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003476:	e00f      	b.n	8003498 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003478:	f7fd fa02 	bl	8000880 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d908      	bls.n	8003498 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e118      	b.n	80036bc <HAL_RCC_OscConfig+0x4a0>
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	42470000 	.word	0x42470000
 8003494:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003498:	4b8a      	ldr	r3, [pc, #552]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 800349a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e9      	bne.n	8003478 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 8097 	beq.w	80035e0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b2:	2300      	movs	r3, #0
 80034b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b6:	4b83      	ldr	r3, [pc, #524]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10f      	bne.n	80034e2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	4a7f      	ldr	r2, [pc, #508]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 80034c8:	4b7e      	ldr	r3, [pc, #504]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d0:	6413      	str	r3, [r2, #64]	; 0x40
 80034d2:	4b7c      	ldr	r3, [pc, #496]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034de:	2301      	movs	r3, #1
 80034e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e2:	4b79      	ldr	r3, [pc, #484]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d118      	bne.n	8003520 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ee:	4a76      	ldr	r2, [pc, #472]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	4b75      	ldr	r3, [pc, #468]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fa:	f7fd f9c1 	bl	8000880 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003502:	f7fd f9bd 	bl	8000880 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e0d3      	b.n	80036bc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003514:	4b6c      	ldr	r3, [pc, #432]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d106      	bne.n	8003536 <HAL_RCC_OscConfig+0x31a>
 8003528:	4a66      	ldr	r2, [pc, #408]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 800352a:	4b66      	ldr	r3, [pc, #408]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6713      	str	r3, [r2, #112]	; 0x70
 8003534:	e01c      	b.n	8003570 <HAL_RCC_OscConfig+0x354>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b05      	cmp	r3, #5
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x33c>
 800353e:	4a61      	ldr	r2, [pc, #388]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 8003540:	4b60      	ldr	r3, [pc, #384]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	f043 0304 	orr.w	r3, r3, #4
 8003548:	6713      	str	r3, [r2, #112]	; 0x70
 800354a:	4a5e      	ldr	r2, [pc, #376]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 800354c:	4b5d      	ldr	r3, [pc, #372]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6713      	str	r3, [r2, #112]	; 0x70
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0x354>
 8003558:	4a5a      	ldr	r2, [pc, #360]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 800355a:	4b5a      	ldr	r3, [pc, #360]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	f023 0301 	bic.w	r3, r3, #1
 8003562:	6713      	str	r3, [r2, #112]	; 0x70
 8003564:	4a57      	ldr	r2, [pc, #348]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 8003566:	4b57      	ldr	r3, [pc, #348]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	f023 0304 	bic.w	r3, r3, #4
 800356e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d015      	beq.n	80035a4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fd f982 	bl	8000880 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357e:	e00a      	b.n	8003596 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003580:	f7fd f97e 	bl	8000880 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e092      	b.n	80036bc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003596:	4b4b      	ldr	r3, [pc, #300]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0ee      	beq.n	8003580 <HAL_RCC_OscConfig+0x364>
 80035a2:	e014      	b.n	80035ce <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a4:	f7fd f96c 	bl	8000880 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035aa:	e00a      	b.n	80035c2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ac:	f7fd f968 	bl	8000880 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e07c      	b.n	80036bc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c2:	4b40      	ldr	r3, [pc, #256]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1ee      	bne.n	80035ac <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d4:	4a3b      	ldr	r2, [pc, #236]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 80035d6:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d068      	beq.n	80036ba <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035e8:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d060      	beq.n	80036b6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d145      	bne.n	8003688 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fc:	4b33      	ldr	r3, [pc, #204]	; (80036cc <HAL_RCC_OscConfig+0x4b0>)
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003602:	f7fd f93d 	bl	8000880 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360a:	f7fd f939 	bl	8000880 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e04f      	b.n	80036bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361c:	4b29      	ldr	r3, [pc, #164]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1f0      	bne.n	800360a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003628:	4926      	ldr	r1, [pc, #152]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69da      	ldr	r2, [r3, #28]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	019b      	lsls	r3, r3, #6
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	3b01      	subs	r3, #1
 8003644:	041b      	lsls	r3, r3, #16
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	061b      	lsls	r3, r3, #24
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	071b      	lsls	r3, r3, #28
 8003656:	4313      	orrs	r3, r2
 8003658:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800365a:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <HAL_RCC_OscConfig+0x4b0>)
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fd f90e 	bl	8000880 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003668:	f7fd f90a 	bl	8000880 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e020      	b.n	80036bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0x44c>
 8003686:	e018      	b.n	80036ba <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003688:	4b10      	ldr	r3, [pc, #64]	; (80036cc <HAL_RCC_OscConfig+0x4b0>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368e:	f7fd f8f7 	bl	8000880 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003696:	f7fd f8f3 	bl	8000880 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e009      	b.n	80036bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a8:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_RCC_OscConfig+0x4a8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f0      	bne.n	8003696 <HAL_RCC_OscConfig+0x47a>
 80036b4:	e001      	b.n	80036ba <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40007000 	.word	0x40007000
 80036cc:	42470060 	.word	0x42470060

080036d0 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e03f      	b.n	8003762 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f004 fec2 	bl	8008480 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2224      	movs	r2, #36	; 0x24
 8003700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	68d2      	ldr	r2, [r2, #12]
 800370e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003712:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f829 	bl	800376c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	6912      	ldr	r2, [r2, #16]
 8003724:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	6952      	ldr	r2, [r2, #20]
 8003734:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003738:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	68d2      	ldr	r2, [r2, #12]
 8003744:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003748:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800376c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003786:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80037a8:	f023 030c 	bic.w	r3, r3, #12
 80037ac:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e0:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037fc:	f040 80e4 	bne.w	80039c8 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4aab      	ldr	r2, [pc, #684]	; (8003ab4 <UART_SetConfig+0x348>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <UART_SetConfig+0xa8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4aaa      	ldr	r2, [pc, #680]	; (8003ab8 <UART_SetConfig+0x34c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d16c      	bne.n	80038ee <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681c      	ldr	r4, [r3, #0]
 8003818:	f7ff f80c 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 800381c:	4602      	mov	r2, r0
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	009a      	lsls	r2, r3, #2
 8003826:	441a      	add	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	4aa2      	ldr	r2, [pc, #648]	; (8003abc <UART_SetConfig+0x350>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	011d      	lsls	r5, r3, #4
 800383c:	f7fe fffa 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8003840:	4602      	mov	r2, r0
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009a      	lsls	r2, r3, #2
 800384a:	441a      	add	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	fbb2 f6f3 	udiv	r6, r2, r3
 8003856:	f7fe ffed 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 800385a:	4602      	mov	r2, r0
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009a      	lsls	r2, r3, #2
 8003864:	441a      	add	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	4a92      	ldr	r2, [pc, #584]	; (8003abc <UART_SetConfig+0x350>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	2264      	movs	r2, #100	; 0x64
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	1af3      	subs	r3, r6, r3
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	3332      	adds	r3, #50	; 0x32
 8003884:	4a8d      	ldr	r2, [pc, #564]	; (8003abc <UART_SetConfig+0x350>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003892:	441d      	add	r5, r3
 8003894:	f7fe ffce 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8003898:	4602      	mov	r2, r0
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	009a      	lsls	r2, r3, #2
 80038a2:	441a      	add	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80038ae:	f7fe ffc1 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 80038b2:	4602      	mov	r2, r0
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	009a      	lsls	r2, r3, #2
 80038bc:	441a      	add	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c8:	4a7c      	ldr	r2, [pc, #496]	; (8003abc <UART_SetConfig+0x350>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2264      	movs	r2, #100	; 0x64
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	1af3      	subs	r3, r6, r3
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	3332      	adds	r3, #50	; 0x32
 80038dc:	4a77      	ldr	r2, [pc, #476]	; (8003abc <UART_SetConfig+0x350>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	442b      	add	r3, r5
 80038ea:	60a3      	str	r3, [r4, #8]
 80038ec:	e154      	b.n	8003b98 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681c      	ldr	r4, [r3, #0]
 80038f2:	f7fe ff8b 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 80038f6:	4602      	mov	r2, r0
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	009a      	lsls	r2, r3, #2
 8003900:	441a      	add	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	4a6b      	ldr	r2, [pc, #428]	; (8003abc <UART_SetConfig+0x350>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	011d      	lsls	r5, r3, #4
 8003916:	f7fe ff79 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 800391a:	4602      	mov	r2, r0
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	009a      	lsls	r2, r3, #2
 8003924:	441a      	add	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003930:	f7fe ff6c 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003934:	4602      	mov	r2, r0
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	009a      	lsls	r2, r3, #2
 800393e:	441a      	add	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	fbb2 f3f3 	udiv	r3, r2, r3
 800394a:	4a5c      	ldr	r2, [pc, #368]	; (8003abc <UART_SetConfig+0x350>)
 800394c:	fba2 2303 	umull	r2, r3, r2, r3
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	2264      	movs	r2, #100	; 0x64
 8003954:	fb02 f303 	mul.w	r3, r2, r3
 8003958:	1af3      	subs	r3, r6, r3
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	3332      	adds	r3, #50	; 0x32
 800395e:	4a57      	ldr	r2, [pc, #348]	; (8003abc <UART_SetConfig+0x350>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800396c:	441d      	add	r5, r3
 800396e:	f7fe ff4d 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003972:	4602      	mov	r2, r0
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009a      	lsls	r2, r3, #2
 800397c:	441a      	add	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fbb2 f6f3 	udiv	r6, r2, r3
 8003988:	f7fe ff40 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 800398c:	4602      	mov	r2, r0
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	009a      	lsls	r2, r3, #2
 8003996:	441a      	add	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a2:	4a46      	ldr	r2, [pc, #280]	; (8003abc <UART_SetConfig+0x350>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	2264      	movs	r2, #100	; 0x64
 80039ac:	fb02 f303 	mul.w	r3, r2, r3
 80039b0:	1af3      	subs	r3, r6, r3
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	3332      	adds	r3, #50	; 0x32
 80039b6:	4a41      	ldr	r2, [pc, #260]	; (8003abc <UART_SetConfig+0x350>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	442b      	add	r3, r5
 80039c4:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80039c6:	e0e7      	b.n	8003b98 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a39      	ldr	r2, [pc, #228]	; (8003ab4 <UART_SetConfig+0x348>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <UART_SetConfig+0x270>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a38      	ldr	r2, [pc, #224]	; (8003ab8 <UART_SetConfig+0x34c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d171      	bne.n	8003ac0 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681c      	ldr	r4, [r3, #0]
 80039e0:	f7fe ff28 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	009a      	lsls	r2, r3, #2
 80039ee:	441a      	add	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fa:	4a30      	ldr	r2, [pc, #192]	; (8003abc <UART_SetConfig+0x350>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	011d      	lsls	r5, r3, #4
 8003a04:	f7fe ff16 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	009a      	lsls	r2, r3, #2
 8003a12:	441a      	add	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a1e:	f7fe ff09 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8003a22:	4602      	mov	r2, r0
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	009a      	lsls	r2, r3, #2
 8003a2c:	441a      	add	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	4a20      	ldr	r2, [pc, #128]	; (8003abc <UART_SetConfig+0x350>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	2264      	movs	r2, #100	; 0x64
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	1af3      	subs	r3, r6, r3
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	3332      	adds	r3, #50	; 0x32
 8003a4c:	4a1b      	ldr	r2, [pc, #108]	; (8003abc <UART_SetConfig+0x350>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a58:	441d      	add	r5, r3
 8003a5a:	f7fe feeb 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	009a      	lsls	r2, r3, #2
 8003a68:	441a      	add	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a74:	f7fe fede 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	009a      	lsls	r2, r3, #2
 8003a82:	441a      	add	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	4a0b      	ldr	r2, [pc, #44]	; (8003abc <UART_SetConfig+0x350>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	2264      	movs	r2, #100	; 0x64
 8003a98:	fb02 f303 	mul.w	r3, r2, r3
 8003a9c:	1af3      	subs	r3, r6, r3
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	3332      	adds	r3, #50	; 0x32
 8003aa2:	4a06      	ldr	r2, [pc, #24]	; (8003abc <UART_SetConfig+0x350>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	442b      	add	r3, r5
 8003ab0:	60a3      	str	r3, [r4, #8]
 8003ab2:	e071      	b.n	8003b98 <UART_SetConfig+0x42c>
 8003ab4:	40011000 	.word	0x40011000
 8003ab8:	40011400 	.word	0x40011400
 8003abc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681c      	ldr	r4, [r3, #0]
 8003ac4:	f7fe fea2 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	009a      	lsls	r2, r3, #2
 8003ad2:	441a      	add	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	4a30      	ldr	r2, [pc, #192]	; (8003ba0 <UART_SetConfig+0x434>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	011d      	lsls	r5, r3, #4
 8003ae8:	f7fe fe90 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009a      	lsls	r2, r3, #2
 8003af6:	441a      	add	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b02:	f7fe fe83 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003b06:	4602      	mov	r2, r0
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009a      	lsls	r2, r3, #2
 8003b10:	441a      	add	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1c:	4a20      	ldr	r2, [pc, #128]	; (8003ba0 <UART_SetConfig+0x434>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2264      	movs	r2, #100	; 0x64
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	1af3      	subs	r3, r6, r3
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	3332      	adds	r3, #50	; 0x32
 8003b30:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <UART_SetConfig+0x434>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b3c:	441d      	add	r5, r3
 8003b3e:	f7fe fe65 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003b42:	4602      	mov	r2, r0
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009a      	lsls	r2, r3, #2
 8003b4c:	441a      	add	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b58:	f7fe fe58 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	009a      	lsls	r2, r3, #2
 8003b66:	441a      	add	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b72:	4a0b      	ldr	r2, [pc, #44]	; (8003ba0 <UART_SetConfig+0x434>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	2264      	movs	r2, #100	; 0x64
 8003b7c:	fb02 f303 	mul.w	r3, r2, r3
 8003b80:	1af3      	subs	r3, r6, r3
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	3332      	adds	r3, #50	; 0x32
 8003b86:	4a06      	ldr	r2, [pc, #24]	; (8003ba0 <UART_SetConfig+0x434>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	442b      	add	r3, r5
 8003b94:	60a3      	str	r3, [r4, #8]
}
 8003b96:	e7ff      	b.n	8003b98 <UART_SetConfig+0x42c>
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba0:	51eb851f 	.word	0x51eb851f

08003ba4 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	f107 0014 	add.w	r0, r7, #20
 8003bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d120      	bne.n	8003bfe <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 8003be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d105      	bne.n	8003bf6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f936 	bl	8003e68 <USB_CoreReset>
 8003bfc:	e00c      	b.n	8003c18 <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f92c 	bl	8003e68 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d10b      	bne.n	8003c36 <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f043 0206 	orr.w	r2, r3, #6
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f043 0220 	orr.w	r2, r3, #32
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c42:	b004      	add	sp, #16
 8003c44:	4770      	bx	lr

08003c46 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f043 0201 	orr.w	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f023 0201 	bic.w	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b082      	sub	sp, #8
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	460b      	mov	r3, r1
 8003c94:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d106      	bne.n	8003cb6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	60da      	str	r2, [r3, #12]
 8003cb4:	e008      	b.n	8003cc8 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d105      	bne.n	8003cc8 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 8003cc8:	2032      	movs	r0, #50	; 0x32
 8003cca:	f7fc fde5 	bl	8000898 <HAL_Delay>
  
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	019b      	lsls	r3, r3, #6
 8003cea:	f043 0220 	orr.w	r2, r3, #32
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <USB_FlushTxFifo+0x48>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e006      	b.n	8003d12 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d0f0      	beq.n	8003cf2 <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	00030d40 	.word	0x00030d40

08003d24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2210      	movs	r2, #16
 8003d34:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4a09      	ldr	r2, [pc, #36]	; (8003d64 <USB_FlushRxFifo+0x40>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d901      	bls.n	8003d48 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e006      	b.n	8003d56 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d0f0      	beq.n	8003d36 <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	00030d40 	.word	0x00030d40

08003d68 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	4611      	mov	r1, r2
 8003d74:	461a      	mov	r2, r3
 8003d76:	460b      	mov	r3, r1
 8003d78:	71fb      	strb	r3, [r7, #7]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 8003d86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d11a      	bne.n	8003dc4 <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 8003d8e:	88bb      	ldrh	r3, [r7, #4]
 8003d90:	3303      	adds	r3, #3
 8003d92:	089b      	lsrs	r3, r3, #2
 8003d94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	e00f      	b.n	8003dbc <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	031a      	lsls	r2, r3, #12
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003da8:	461a      	mov	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	3301      	adds	r3, #1
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	3304      	adds	r3, #4
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d3eb      	bcc.n	8003d9c <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b087      	sub	sp, #28
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 8003de4:	88fb      	ldrh	r3, [r7, #6]
 8003de6:	3303      	adds	r3, #3
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	e00b      	b.n	8003e0a <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	3301      	adds	r3, #1
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	3304      	adds	r3, #4
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d3ef      	bcc.n	8003df2 <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 8003e12:	68bb      	ldr	r3, [r7, #8]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	371c      	adds	r7, #28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
  return v;  
 8003e3c:	68fb      	ldr	r3, [r7, #12]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f003 0301 	and.w	r3, r3, #1
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3301      	adds	r3, #1
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4a13      	ldr	r2, [pc, #76]	; (8003ecc <USB_CoreReset+0x64>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e01b      	b.n	8003ebe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	daf2      	bge.n	8003e74 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f043 0201 	orr.w	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4a09      	ldr	r2, [pc, #36]	; (8003ecc <USB_CoreReset+0x64>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e006      	b.n	8003ebe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d0f0      	beq.n	8003e9e <USB_CoreReset+0x36>
  
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	00030d40 	.word	0x00030d40

08003ed0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	f107 001c 	add.w	r0, r7, #28
 8003ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2300      	movs	r3, #0
 8003eec:	6013      	str	r3, [r2, #0]
  
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d10f      	bne.n	8003f20 <USB_HostInit+0x50>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f06:	d00b      	beq.n	8003f20 <USB_HostInit+0x50>
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f0e:	461a      	mov	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f043 0304 	orr.w	r3, r3, #4
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e00a      	b.n	8003f36 <USB_HostInit+0x66>
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f26:	461a      	mov	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f023 0304 	bic.w	r3, r3, #4
 8003f34:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003f36:	2110      	movs	r1, #16
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff fecd 	bl	8003cd8 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff fef0 	bl	8003d24 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	e015      	b.n	8003f76 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f56:	461a      	mov	r2, r3
 8003f58:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	3301      	adds	r3, #1
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	6a3a      	ldr	r2, [r7, #32]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d8e5      	bhi.n	8003f4a <USB_HostInit+0x7a>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 8003f7e:	2101      	movs	r1, #1
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f8a4 	bl	80040ce <USB_DriveVbus>
  
  HAL_Delay(200U);
 8003f86:	20c8      	movs	r0, #200	; 0xc8
 8003f88:	f7fc fc86 	bl	8000898 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f04f 32ff 	mov.w	r2, #4294967295
 8003f98:	615a      	str	r2, [r3, #20]
  
  if(USBx == USB_OTG_FS)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fa0:	d10a      	bne.n	8003fb8 <USB_HostInit+0xe8>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U; 
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2280      	movs	r2, #128	; 0x80
 8003fa6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a14      	ldr	r2, [pc, #80]	; (8003ffc <USB_HostInit+0x12c>)
 8003fac:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a13      	ldr	r2, [pc, #76]	; (8004000 <USB_HostInit+0x130>)
 8003fb2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003fb6:	e00a      	b.n	8003fce <USB_HostInit+0xfe>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U; 
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a10      	ldr	r2, [pc, #64]	; (8004004 <USB_HostInit+0x134>)
 8003fc4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a0f      	ldr	r2, [pc, #60]	; (8004008 <USB_HostInit+0x138>)
 8003fca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8003fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d105      	bne.n	8003fe0 <USB_HostInit+0x110>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f043 0210 	orr.w	r2, r3, #16
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	4b09      	ldr	r3, [pc, #36]	; (800400c <USB_HostInit+0x13c>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ff8:	b004      	add	sp, #16
 8003ffa:	4770      	bx	lr
 8003ffc:	00600080 	.word	0x00600080
 8004000:	004000e0 	.word	0x004000e0
 8004004:	01000200 	.word	0x01000200
 8004008:	00e00300 	.word	0x00e00300
 800400c:	a3200008 	.word	0xa3200008

08004010 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock 
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	70fb      	strb	r3, [r7, #3]
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004022:	461a      	mov	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f023 0303 	bic.w	r3, r3, #3
 8004030:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004038:	4619      	mov	r1, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	78fb      	ldrb	r3, [r7, #3]
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	4313      	orrs	r3, r2
 800404a:	600b      	str	r3, [r1, #0]
  
  if (freq ==  HCFG_48_MHZ)
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d107      	bne.n	8004062 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004058:	461a      	mov	r2, r3
 800405a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800405e:	6053      	str	r3, [r2, #4]
 8004060:	e009      	b.n	8004076 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq ==  HCFG_6_MHZ)
 8004062:	78fb      	ldrb	r3, [r7, #3]
 8004064:	2b02      	cmp	r3, #2
 8004066:	d106      	bne.n	8004076 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800406e:	461a      	mov	r2, r3
 8004070:	f241 7370 	movw	r3, #6000	; 0x1770
 8004074:	6053      	str	r3, [r2, #4]
  } 
  return HAL_OK;  
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60fb      	str	r3, [r7, #12]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800409c:	60fb      	str	r3, [r7, #12]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040a4:	461a      	mov	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ac:	6013      	str	r3, [r2, #0]
  HAL_Delay (10U);                                /* See Note #1 */
 80040ae:	200a      	movs	r0, #10
 80040b0:	f7fc fbf2 	bl	8000898 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040ba:	461a      	mov	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	460b      	mov	r3, r1
 80040d8:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	60fb      	str	r3, [r7, #12]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80040ea:	60fb      	str	r3, [r7, #12]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <USB_DriveVbus+0x3e>
 80040f6:	78fb      	ldrb	r3, [r7, #3]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d107      	bne.n	800410c <USB_DriveVbus+0x3e>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004102:	461a      	mov	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800410a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004116:	d10a      	bne.n	800412e <USB_DriveVbus+0x60>
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d107      	bne.n	800412e <USB_DriveVbus+0x60>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004124:	461a      	mov	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800412c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK; 
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60fb      	str	r3, [r7, #12]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	0c5b      	lsrs	r3, r3, #17
 8004152:	f003 0303 	and.w	r3, r3, #3
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	b29b      	uxth	r3, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	4608      	mov	r0, r1
 800418a:	4611      	mov	r1, r2
 800418c:	461a      	mov	r2, r3
 800418e:	4603      	mov	r3, r0
 8004190:	70fb      	strb	r3, [r7, #3]
 8004192:	460b      	mov	r3, r1
 8004194:	70bb      	strb	r3, [r7, #2]
 8004196:	4613      	mov	r3, r2
 8004198:	707b      	strb	r3, [r7, #1]
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a6:	461a      	mov	r2, r3
 80041a8:	f04f 33ff 	mov.w	r3, #4294967295
 80041ac:	6093      	str	r3, [r2, #8]
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 80041ae:	7d3b      	ldrb	r3, [r7, #20]
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	f200 8086 	bhi.w	80042c2 <USB_HC_Init+0x142>
 80041b6:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <USB_HC_Init+0x3c>)
 80041b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041bc:	080041cd 	.word	0x080041cd
 80041c0:	08004279 	.word	0x08004279
 80041c4:	080041cd 	.word	0x080041cd
 80041c8:	08004239 	.word	0x08004239
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d8:	461a      	mov	r2, r3
 80041da:	f240 439d 	movw	r3, #1181	; 0x49d
 80041de:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 80041e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	da11      	bge.n	800420c <USB_HC_Init+0x8c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f4:	4619      	mov	r1, r3
 80041f6:	78fb      	ldrb	r3, [r7, #3]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004208:	60cb      	str	r3, [r1, #12]
      if(USBx != USB_OTG_FS)
      {
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
      }
    }
    break;
 800420a:	e055      	b.n	80042b8 <USB_HC_Init+0x138>
      if(USBx != USB_OTG_FS)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004212:	d051      	beq.n	80042b8 <USB_HC_Init+0x138>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4413      	add	r3, r2
 800421c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004220:	4619      	mov	r1, r3
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4413      	add	r3, r2
 800422a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004234:	60cb      	str	r3, [r1, #12]
    break;
 8004236:	e03f      	b.n	80042b8 <USB_HC_Init+0x138>
    
  case EP_TYPE_INTR:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4413      	add	r3, r2
 8004240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004244:	461a      	mov	r2, r3
 8004246:	f240 639d 	movw	r3, #1693	; 0x69d
 800424a:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_NAKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
 800424c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004250:	2b00      	cmp	r3, #0
 8004252:	da33      	bge.n	80042bc <USB_HC_Init+0x13c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4413      	add	r3, r2
 800425c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004260:	4619      	mov	r1, r3
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4413      	add	r3, r2
 800426a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004274:	60cb      	str	r3, [r1, #12]
    }
    
    break;
 8004276:	e021      	b.n	80042bc <USB_HC_Init+0x13c>
  case EP_TYPE_ISOC:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4413      	add	r3, r2
 8004280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004284:	461a      	mov	r2, r3
 8004286:	f240 2325 	movw	r3, #549	; 0x225
 800428a:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_ACKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;   
    
    if (epnum & 0x80U) 
 800428c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004290:	2b00      	cmp	r3, #0
 8004292:	da15      	bge.n	80042c0 <USB_HC_Init+0x140>
    {
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4413      	add	r3, r2
 800429c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a0:	4619      	mov	r1, r3
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80042b4:	60cb      	str	r3, [r1, #12]
    }
    break;
 80042b6:	e003      	b.n	80042c0 <USB_HC_Init+0x140>
    break;
 80042b8:	bf00      	nop
 80042ba:	e002      	b.n	80042c2 <USB_HC_Init+0x142>
    break;
 80042bc:	bf00      	nop
 80042be:	e000      	b.n	80042c2 <USB_HC_Init+0x142>
    break;
 80042c0:	bf00      	nop
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042c8:	4618      	mov	r0, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	78fa      	ldrb	r2, [r7, #3]
 80042d4:	2101      	movs	r1, #1
 80042d6:	fa01 f202 	lsl.w	r2, r1, r2
 80042da:	4313      	orrs	r3, r2
 80042dc:	6183      	str	r3, [r0, #24]
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	619a      	str	r2, [r3, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f6:	4619      	mov	r1, r3
 80042f8:	787b      	ldrb	r3, [r7, #1]
 80042fa:	059b      	lsls	r3, r3, #22
 80042fc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8004300:	78bb      	ldrb	r3, [r7, #2]
 8004302:	02db      	lsls	r3, r3, #11
 8004304:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8004308:	431a      	orrs	r2, r3
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 800430a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800430e:	2b00      	cmp	r3, #0
 8004310:	da02      	bge.n	8004318 <USB_HC_Init+0x198>
 8004312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004316:	e000      	b.n	800431a <USB_HC_Init+0x19a>
 8004318:	2300      	movs	r3, #0
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 800431a:	431a      	orrs	r2, r3
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 800431c:	7c3b      	ldrb	r3, [r7, #16]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d102      	bne.n	8004328 <USB_HC_Init+0x1a8>
 8004322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004326:	e000      	b.n	800432a <USB_HC_Init+0x1aa>
 8004328:	2300      	movs	r3, #0
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 800432a:	431a      	orrs	r2, r3
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 800432c:	7d3b      	ldrb	r3, [r7, #20]
 800432e:	049b      	lsls	r3, r3, #18
 8004330:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8004334:	431a      	orrs	r2, r3
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8004336:	8b3b      	ldrh	r3, [r7, #24]
 8004338:	f3c3 030a 	ubfx	r3, r3, #0, #11
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 800433c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 800433e:	600b      	str	r3, [r1, #0]
    
  if (ep_type == EP_TYPE_INTR)
 8004340:	7d3b      	ldrb	r3, [r7, #20]
 8004342:	2b03      	cmp	r3, #3
 8004344:	d110      	bne.n	8004368 <USB_HC_Init+0x1e8>
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004346:	78fb      	ldrb	r3, [r7, #3]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4413      	add	r3, r2
 800434e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004352:	4619      	mov	r1, r3
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4413      	add	r3, r2
 800435c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004366:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK; 
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop

08004378 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08a      	sub	sp, #40	; 0x28
 800437c:	af02      	add	r7, sp, #8
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	4613      	mov	r3, r2
 8004384:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 8004386:	2300      	movs	r3, #0
 8004388:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 800438a:	2300      	movs	r3, #0
 800438c:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 8004392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004396:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043a2:	d02b      	beq.n	80043fc <USB_HC_StartXfer+0x84>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	791b      	ldrb	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d127      	bne.n	80043fc <USB_HC_StartXfer+0x84>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10b      	bne.n	80043ca <USB_HC_StartXfer+0x52>
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	795b      	ldrb	r3, [r3, #5]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d107      	bne.n	80043ca <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	785b      	ldrb	r3, [r3, #1]
 80043be:	4619      	mov	r1, r3
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fa0f 	bl	80047e4 <USB_DoPing>
      return HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	e10d      	b.n	80045e6 <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1)
 80043ca:	79fb      	ldrb	r3, [r7, #7]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d115      	bne.n	80043fc <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	785b      	ldrb	r3, [r3, #1]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043de:	4619      	mov	r1, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	785b      	ldrb	r3, [r3, #1]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80043f4:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2200      	movs	r2, #0
 80043fa:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d019      	beq.n	8004438 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	8912      	ldrh	r2, [r2, #8]
 800440c:	4413      	add	r3, r2
 800440e:	3b01      	subs	r3, #1
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	8912      	ldrh	r2, [r2, #8]
 8004414:	fbb3 f3f2 	udiv	r3, r3, r2
 8004418:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 800441a:	8bfa      	ldrh	r2, [r7, #30]
 800441c:	8b3b      	ldrh	r3, [r7, #24]
 800441e:	429a      	cmp	r2, r3
 8004420:	d90c      	bls.n	800443c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004422:	8b3b      	ldrh	r3, [r7, #24]
 8004424:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 8004426:	8bfb      	ldrh	r3, [r7, #30]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	8912      	ldrh	r2, [r2, #8]
 800442c:	fb02 f303 	mul.w	r3, r2, r3
 8004430:	461a      	mov	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	611a      	str	r2, [r3, #16]
 8004436:	e001      	b.n	800443c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1;
 8004438:	2301      	movs	r3, #1
 800443a:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	78db      	ldrb	r3, [r3, #3]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d007      	beq.n	8004454 <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 8004444:	8bfb      	ldrh	r3, [r7, #30]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	8912      	ldrh	r2, [r2, #8]
 800444a:	fb02 f303 	mul.w	r3, r2, r3
 800444e:	461a      	mov	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	785b      	ldrb	r3, [r3, #1]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4413      	add	r3, r2
 800445e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004462:	4619      	mov	r1, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 800446c:	8bfb      	ldrh	r3, [r7, #30]
 800446e:	04db      	lsls	r3, r3, #19
 8004470:	4618      	mov	r0, r3
 8004472:	4b5f      	ldr	r3, [pc, #380]	; (80045f0 <USB_HC_StartXfer+0x278>)
 8004474:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004476:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	7a9b      	ldrb	r3, [r3, #10]
 800447c:	075b      	lsls	r3, r3, #29
 800447e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004482:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004484:	610b      	str	r3, [r1, #16]
  
  if (dma)
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	785b      	ldrb	r3, [r3, #1]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4413      	add	r3, r2
 8004496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449a:	461a      	mov	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	bf0c      	ite	eq
 80044b2:	2301      	moveq	r3, #1
 80044b4:	2300      	movne	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	785b      	ldrb	r3, [r3, #1]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c8:	4619      	mov	r1, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	785b      	ldrb	r3, [r3, #1]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80044de:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	785b      	ldrb	r3, [r3, #1]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ee:	4619      	mov	r1, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	785b      	ldrb	r3, [r3, #1]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	7f7a      	ldrb	r2, [r7, #29]
 8004502:	0752      	lsls	r2, r2, #29
 8004504:	4313      	orrs	r3, r2
 8004506:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	785b      	ldrb	r3, [r3, #1]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004520:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004528:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	785b      	ldrb	r3, [r3, #1]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4413      	add	r3, r2
 8004534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004538:	461a      	mov	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d14f      	bne.n	80045e4 <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	78db      	ldrb	r3, [r3, #3]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d14b      	bne.n	80045e4 <USB_HC_StartXfer+0x26c>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d047      	beq.n	80045e4 <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	79db      	ldrb	r3, [r3, #7]
 8004558:	2b03      	cmp	r3, #3
 800455a:	d831      	bhi.n	80045c0 <USB_HC_StartXfer+0x248>
 800455c:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <USB_HC_StartXfer+0x1ec>)
 800455e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004562:	bf00      	nop
 8004564:	08004575 	.word	0x08004575
 8004568:	08004599 	.word	0x08004599
 800456c:	08004575 	.word	0x08004575
 8004570:	08004599 	.word	0x08004599
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	3303      	adds	r3, #3
 800457a:	089b      	lsrs	r3, r3, #2
 800457c:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 800457e:	8b7a      	ldrh	r2, [r7, #26]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	b29b      	uxth	r3, r3
 8004586:	429a      	cmp	r2, r3
 8004588:	d91c      	bls.n	80045c4 <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f043 0220 	orr.w	r2, r3, #32
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	619a      	str	r2, [r3, #24]
        }
        break;
 8004596:	e015      	b.n	80045c4 <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	3303      	adds	r3, #3
 800459e:	089b      	lsrs	r3, r3, #2
 80045a0:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 80045a2:	8b7a      	ldrh	r2, [r7, #26]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d90a      	bls.n	80045c8 <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	619a      	str	r2, [r3, #24]
        }
        break;
 80045be:	e003      	b.n	80045c8 <USB_HC_StartXfer+0x250>
        
      default:
        break;
 80045c0:	bf00      	nop
 80045c2:	e002      	b.n	80045ca <USB_HC_StartXfer+0x252>
        break;
 80045c4:	bf00      	nop
 80045c6:	e000      	b.n	80045ca <USB_HC_StartXfer+0x252>
        break;
 80045c8:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	68d9      	ldr	r1, [r3, #12]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	785a      	ldrb	r2, [r3, #1]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	b298      	uxth	r0, r3
 80045d8:	2300      	movs	r3, #0
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	4603      	mov	r3, r0
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f7ff fbc2 	bl	8003d68 <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	1ff80000 	.word	0x1ff80000

080045f4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	b29b      	uxth	r3, r3
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	460b      	mov	r3, r1
 800461c:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4413      	add	r3, r2
 800462a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	0c9b      	lsrs	r3, r3, #18
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00b      	beq.n	8004652 <USB_HC_Halt+0x40>
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4413      	add	r3, r2
 8004642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004646:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8004648:	0c9b      	lsrs	r3, r3, #18
 800464a:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 800464e:	2b02      	cmp	r3, #2
 8004650:	d160      	bne.n	8004714 <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004652:	78fb      	ldrb	r3, [r7, #3]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4413      	add	r3, r2
 800465a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465e:	4619      	mov	r1, r3
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4413      	add	r3, r2
 8004668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004672:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d135      	bne.n	80046ec <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4413      	add	r3, r2
 8004688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468c:	4619      	mov	r1, r3
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4413      	add	r3, r2
 8004696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046a0:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ae:	4619      	mov	r1, r3
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046c2:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3301      	adds	r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046d0:	d81e      	bhi.n	8004710 <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046e8:	d0ec      	beq.n	80046c4 <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80046ea:	e074      	b.n	80047d6 <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f8:	4619      	mov	r1, r3
 80046fa:	78fb      	ldrb	r3, [r7, #3]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4413      	add	r3, r2
 8004702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800470c:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800470e:	e062      	b.n	80047d6 <USB_HC_Halt+0x1c4>
          break;
 8004710:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004712:	e060      	b.n	80047d6 <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4413      	add	r3, r2
 800471c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004720:	4619      	mov	r1, r3
 8004722:	78fb      	ldrb	r3, [r7, #3]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004734:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d135      	bne.n	80047b0 <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4413      	add	r3, r2
 800474c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004750:	4619      	mov	r1, r3
 8004752:	78fb      	ldrb	r3, [r7, #3]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4413      	add	r3, r2
 800475a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004764:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4413      	add	r3, r2
 800476e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004772:	4619      	mov	r1, r3
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4413      	add	r3, r2
 800477c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004786:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3301      	adds	r3, #1
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004794:	d81e      	bhi.n	80047d4 <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8004796:	78fb      	ldrb	r3, [r7, #3]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4413      	add	r3, r2
 800479e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ac:	d0ec      	beq.n	8004788 <USB_HC_Halt+0x176>
 80047ae:	e012      	b.n	80047d6 <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 80047b0:	78fb      	ldrb	r3, [r7, #3]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047bc:	4619      	mov	r1, r3
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047d0:	600b      	str	r3, [r1, #0]
 80047d2:	e000      	b.n	80047d6 <USB_HC_Halt+0x1c4>
          break;
 80047d4:	bf00      	nop
    }
  }
  
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 80047f0:	2301      	movs	r3, #1
 80047f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004804:	461a      	mov	r2, r3
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	04db      	lsls	r3, r3, #19
 800480a:	4619      	mov	r1, r3
 800480c:	4b12      	ldr	r3, [pc, #72]	; (8004858 <USB_DoPing+0x74>)
 800480e:	400b      	ands	r3, r1
 8004810:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004814:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004816:	78fb      	ldrb	r3, [r7, #3]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4413      	add	r3, r2
 800481e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800482c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004834:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004836:	78fb      	ldrb	r3, [r7, #3]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4413      	add	r3, r2
 800483e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004842:	461a      	mov	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	1ff80000 	.word	0x1ff80000

0800485c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff f9fd 	bl	8003c68 <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 800486e:	2110      	movs	r1, #16
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7ff fa31 	bl	8003cd8 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff fa54 	bl	8003d24 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 800487c:	2300      	movs	r3, #0
 800487e:	75fb      	strb	r3, [r7, #23]
 8004880:	e01f      	b.n	80048c2 <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 8004882:	7dfb      	ldrb	r3, [r7, #23]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4413      	add	r3, r2
 800488a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004898:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048a0:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048a8:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 80048aa:	7dfb      	ldrb	r3, [r7, #23]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b6:	461a      	mov	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 80048bc:	7dfb      	ldrb	r3, [r7, #23]
 80048be:	3301      	adds	r3, #1
 80048c0:	75fb      	strb	r3, [r7, #23]
 80048c2:	7dfb      	ldrb	r3, [r7, #23]
 80048c4:	2b0f      	cmp	r3, #15
 80048c6:	d9dc      	bls.n	8004882 <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 80048c8:	2300      	movs	r3, #0
 80048ca:	75fb      	strb	r3, [r7, #23]
 80048cc:	e034      	b.n	8004938 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048e4:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048ec:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048f4:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004902:	461a      	mov	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	3301      	adds	r3, #1
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004914:	d80c      	bhi.n	8004930 <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004916:	7dfb      	ldrb	r3, [r7, #23]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4413      	add	r3, r2
 800491e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800492c:	d0ec      	beq.n	8004908 <USB_StopHost+0xac>
 800492e:	e000      	b.n	8004932 <USB_StopHost+0xd6>
        break;
 8004930:	bf00      	nop
  for (i = 0; i <= 15; i++)
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	3301      	adds	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	2b0f      	cmp	r3, #15
 800493c:	d9c7      	bls.n	80048ce <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004944:	461a      	mov	r2, r3
 8004946:	f04f 33ff 	mov.w	r3, #4294967295
 800494a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f04f 32ff 	mov.w	r2, #4294967295
 8004952:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff f976 	bl	8003c46 <USB_EnableGlobalInt>
  return HAL_OK;  
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit (USBH_HandleTypeDef *phost)
{	
 8004964:	b590      	push	{r4, r7, lr}
 8004966:	b08b      	sub	sp, #44	; 0x2c
 8004968:	af04      	add	r7, sp, #16
 800496a:	6078      	str	r0, [r7, #4]
  uint8_t max_ep;
  uint8_t num = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;
  
  USBH_StatusTypeDef status = USBH_FAIL ;
 8004970:	2302      	movs	r3, #2
 8004972:	757b      	strb	r3, [r7, #21]
  HID_HandleTypeDef *HID_Handle;
  
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFF);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 800497a:	7919      	ldrb	r1, [r3, #4]
 800497c:	23ff      	movs	r3, #255	; 0xff
 800497e:	2201      	movs	r2, #1
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f002 f93f 	bl	8006c04 <USBH_FindInterface>
 8004986:	4603      	mov	r3, r0
 8004988:	75bb      	strb	r3, [r7, #22]

  if (interface == 0xFF) // did not find KB or mouse
 800498a:	7dbb      	ldrb	r3, [r7, #22]
 800498c:	2bff      	cmp	r3, #255	; 0xff
 800498e:	d10a      	bne.n	80049a6 <USBH_HID_InterfaceInit+0x42>
	  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0, 0xFF); // try looking for ds3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8004996:	7919      	ldrb	r1, [r3, #4]
 8004998:	23ff      	movs	r3, #255	; 0xff
 800499a:	2200      	movs	r2, #0
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f002 f931 	bl	8006c04 <USBH_FindInterface>
 80049a2:	4603      	mov	r3, r0
 80049a4:	75bb      	strb	r3, [r7, #22]
  
  if(interface == 0xFF) /* No Valid Interface */
 80049a6:	7dbb      	ldrb	r3, [r7, #22]
 80049a8:	2bff      	cmp	r3, #255	; 0xff
 80049aa:	d102      	bne.n	80049b2 <USBH_HID_InterfaceInit+0x4e>
  {
    status = USBH_FAIL;  
 80049ac:	2302      	movs	r3, #2
 80049ae:	757b      	strb	r3, [r7, #21]
 80049b0:	e123      	b.n	8004bfa <USBH_HID_InterfaceInit+0x296>
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);         
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80049b2:	7dbb      	ldrb	r3, [r7, #22]
 80049b4:	4619      	mov	r1, r3
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f002 f908 	bl	8006bcc <USBH_SelectInterface>
    phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc (sizeof(HID_HandleTypeDef));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8d3 43ac 	ldr.w	r4, [r3, #940]	; 0x3ac
 80049c2:	2034      	movs	r0, #52	; 0x34
 80049c4:	f004 f946 	bl	8008c54 <malloc>
 80049c8:	4603      	mov	r3, r0
 80049ca:	61e3      	str	r3, [r4, #28]
    HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	613b      	str	r3, [r7, #16]
    HID_Handle->state = HID_ERROR;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2207      	movs	r2, #7
 80049da:	709a      	strb	r2, [r3, #2]
    
    /*Decode Bootclass Protocol: Mouse or Keyboard*/
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80049e2:	4619      	mov	r1, r3
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	231a      	movs	r3, #26
 80049e8:	fb03 f301 	mul.w	r3, r3, r1
 80049ec:	4413      	add	r3, r2
 80049ee:	f203 3343 	addw	r3, r3, #835	; 0x343
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d103      	bne.n	8004a00 <USBH_HID_InterfaceInit+0x9c>
    {
      USBH_UsrLog ("KeyBoard device found!"); 
      HID_Handle->Init =  USBH_HID_KeybdInit;     
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4a82      	ldr	r2, [pc, #520]	; (8004c04 <USBH_HID_InterfaceInit+0x2a0>)
 80049fc:	631a      	str	r2, [r3, #48]	; 0x30
 80049fe:	e025      	b.n	8004a4c <USBH_HID_InterfaceInit+0xe8>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)		  
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004a06:	4619      	mov	r1, r3
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	231a      	movs	r3, #26
 8004a0c:	fb03 f301 	mul.w	r3, r3, r1
 8004a10:	4413      	add	r3, r2
 8004a12:	f203 3343 	addw	r3, r3, #835	; 0x343
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d103      	bne.n	8004a24 <USBH_HID_InterfaceInit+0xc0>
    {
      USBH_UsrLog ("Mouse device found!");         
      HID_Handle->Init =  USBH_HID_MouseInit;     
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	4a7a      	ldr	r2, [pc, #488]	; (8004c08 <USBH_HID_InterfaceInit+0x2a4>)
 8004a20:	631a      	str	r2, [r3, #48]	; 0x30
 8004a22:	e013      	b.n	8004a4c <USBH_HID_InterfaceInit+0xe8>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol  == HID_DS3_BOOT_CODE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	231a      	movs	r3, #26
 8004a30:	fb03 f301 	mul.w	r3, r3, r1
 8004a34:	4413      	add	r3, r2
 8004a36:	f203 3343 	addw	r3, r3, #835	; 0x343
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d103      	bne.n	8004a48 <USBH_HID_InterfaceInit+0xe4>
	{
	  USBH_UsrLog ("DS3 device found!");
	  HID_Handle->Init =  USBH_HID_DS3Init;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	4a72      	ldr	r2, [pc, #456]	; (8004c0c <USBH_HID_InterfaceInit+0x2a8>)
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30
 8004a46:	e001      	b.n	8004a4c <USBH_HID_InterfaceInit+0xe8>
	}
    else
    {
      USBH_UsrLog ("Protocol not supported.");  
      return USBH_FAIL;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e0d7      	b.n	8004bfc <USBH_HID_InterfaceInit+0x298>
    }
    
    HID_Handle->state     = HID_INIT;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	709a      	strb	r2, [r3, #2]
    HID_Handle->ctl_state = HID_REQ_INIT; 
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	2200      	movs	r2, #0
 8004a56:	715a      	strb	r2, [r3, #5]
    HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004a5e:	4619      	mov	r1, r3
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	231a      	movs	r3, #26
 8004a64:	fb03 f301 	mul.w	r3, r3, r1
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8004a6e:	781a      	ldrb	r2, [r3, #0]
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	769a      	strb	r2, [r3, #26]
    HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	231a      	movs	r3, #26
 8004a80:	fb03 f301 	mul.w	r3, r3, r1
 8004a84:	4413      	add	r3, r2
 8004a86:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8004a8a:	881a      	ldrh	r2, [r3, #0]
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	831a      	strh	r2, [r3, #24]
    HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bInterval ;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004a96:	4619      	mov	r1, r3
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	231a      	movs	r3, #26
 8004a9c:	fb03 f301 	mul.w	r3, r3, r1
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	839a      	strh	r2, [r3, #28]
    
    if (HID_Handle->poll  < HID_MIN_POLL) 
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	8b9b      	ldrh	r3, [r3, #28]
 8004ab2:	2b09      	cmp	r3, #9
 8004ab4:	d802      	bhi.n	8004abc <USBH_HID_InterfaceInit+0x158>
    {
      HID_Handle->poll = HID_MIN_POLL;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	220a      	movs	r2, #10
 8004aba:	839a      	strh	r2, [r3, #28]
    
    /* Check for available number of endpoints */
    /* Find the number of EPs in the Interface Descriptor */      
    /* Choose the lower number in order not to overrun the buffer allocated */
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
              phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	231a      	movs	r3, #26
 8004ac8:	fb03 f301 	mul.w	r3, r3, r1
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8004ad2:	781b      	ldrb	r3, [r3, #0]
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	bf28      	it	cs
 8004ad8:	2302      	movcs	r3, #2
 8004ada:	73fb      	strb	r3, [r7, #15]
                  USBH_MAX_NUM_ENDPOINTS); 
    
    
    /* Decode endpoint IN and OUT address from interface descriptor */
    for ( ;num < max_ep; num++)
 8004adc:	e086      	b.n	8004bec <USBH_HID_InterfaceInit+0x288>
    {
      if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress & 0x80)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	7dfb      	ldrb	r3, [r7, #23]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	3301      	adds	r3, #1
 8004aec:	00d9      	lsls	r1, r3, #3
 8004aee:	231a      	movs	r3, #26
 8004af0:	fb03 f300 	mul.w	r3, r3, r0
 8004af4:	440b      	add	r3, r1
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	b25b      	sxtb	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	da38      	bge.n	8004b76 <USBH_HID_InterfaceInit+0x212>
      {
        HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	7dfb      	ldrb	r3, [r7, #23]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	3301      	adds	r3, #1
 8004b12:	00d9      	lsls	r1, r3, #3
 8004b14:	231a      	movs	r3, #26
 8004b16:	fb03 f300 	mul.w	r3, r3, r0
 8004b1a:	440b      	add	r3, r1
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8004b22:	781a      	ldrb	r2, [r3, #0]
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	711a      	strb	r2, [r3, #4]
        HID_Handle->InPipe  =\
          USBH_AllocPipe(phost, HID_Handle->InEp);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	791b      	ldrb	r3, [r3, #4]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f003 f900 	bl	8007d34 <USBH_AllocPipe>
 8004b34:	4603      	mov	r3, r0
 8004b36:	461a      	mov	r2, r3
        HID_Handle->InPipe  =\
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	705a      	strb	r2, [r3, #1]
        
        /* Open pipe for IN endpoint */
        USBH_OpenPipe  (phost,
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	7859      	ldrb	r1, [r3, #1]
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	7918      	ldrb	r0, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	8b12      	ldrh	r2, [r2, #24]
 8004b54:	9202      	str	r2, [sp, #8]
 8004b56:	2203      	movs	r2, #3
 8004b58:	9201      	str	r2, [sp, #4]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	4623      	mov	r3, r4
 8004b5e:	4602      	mov	r2, r0
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f003 f8b8 	bl	8007cd6 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        HID_Handle->length); 
        
        USBH_LL_SetToggle (phost, HID_Handle->InPipe, 0);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	785b      	ldrb	r3, [r3, #1]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f003 ffe3 	bl	8008b3a <USBH_LL_SetToggle>
 8004b74:	e037      	b.n	8004be6 <USBH_HID_InterfaceInit+0x282>
        
      }
      else
      {
        HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	7dfb      	ldrb	r3, [r7, #23]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	3301      	adds	r3, #1
 8004b84:	00d9      	lsls	r1, r3, #3
 8004b86:	231a      	movs	r3, #26
 8004b88:	fb03 f300 	mul.w	r3, r3, r0
 8004b8c:	440b      	add	r3, r1
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8004b94:	781a      	ldrb	r2, [r3, #0]
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	70da      	strb	r2, [r3, #3]
        HID_Handle->OutPipe  =\
          USBH_AllocPipe(phost, HID_Handle->OutEp);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	78db      	ldrb	r3, [r3, #3]
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f003 f8c7 	bl	8007d34 <USBH_AllocPipe>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	461a      	mov	r2, r3
        HID_Handle->OutPipe  =\
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	701a      	strb	r2, [r3, #0]
        
        /* Open pipe for OUT endpoint */
        USBH_OpenPipe  (phost,
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	7819      	ldrb	r1, [r3, #0]
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	78d8      	ldrb	r0, [r3, #3]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	8b12      	ldrh	r2, [r2, #24]
 8004bc6:	9202      	str	r2, [sp, #8]
 8004bc8:	2203      	movs	r2, #3
 8004bca:	9201      	str	r2, [sp, #4]
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	4623      	mov	r3, r4
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f003 f87f 	bl	8007cd6 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        HID_Handle->length); 
        
        USBH_LL_SetToggle (phost, HID_Handle->OutPipe, 0);        
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f003 ffaa 	bl	8008b3a <USBH_LL_SetToggle>
    for ( ;num < max_ep; num++)
 8004be6:	7dfb      	ldrb	r3, [r7, #23]
 8004be8:	3301      	adds	r3, #1
 8004bea:	75fb      	strb	r3, [r7, #23]
 8004bec:	7dfa      	ldrb	r2, [r7, #23]
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	f4ff af74 	bcc.w	8004ade <USBH_HID_InterfaceInit+0x17a>
      }
      
    }  
    status = USBH_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	757b      	strb	r3, [r7, #21]
  }
  return status;
 8004bfa:	7d7b      	ldrb	r3, [r7, #21]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd90      	pop	{r4, r7, pc}
 8004c04:	080059fd 	.word	0x080059fd
 8004c08:	08005be5 	.word	0x08005be5
 8004c0c:	080058ed 	.word	0x080058ed

08004c10 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_InterfaceDeInit (USBH_HandleTypeDef *phost )
{	
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	60fb      	str	r3, [r7, #12]
  
  if(HID_Handle->InPipe != 0x00)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	785b      	ldrb	r3, [r3, #1]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00e      	beq.n	8004c48 <USBH_HID_InterfaceDeInit+0x38>
  {   
    USBH_ClosePipe  (phost, HID_Handle->InPipe);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	785b      	ldrb	r3, [r3, #1]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f003 f86f 	bl	8007d14 <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->InPipe);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	785b      	ldrb	r3, [r3, #1]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f003 f899 	bl	8007d74 <USBH_FreePipe>
    HID_Handle->InPipe = 0;     /* Reset the pipe as Free */  
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	705a      	strb	r2, [r3, #1]
  }
  
  if(HID_Handle->OutPipe != 0x00)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00e      	beq.n	8004c6e <USBH_HID_InterfaceDeInit+0x5e>
  {   
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	4619      	mov	r1, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f003 f85c 	bl	8007d14 <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->OutPipe);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	4619      	mov	r1, r3
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f003 f886 	bl	8007d74 <USBH_FreePipe>
    HID_Handle->OutPipe = 0;     /* Reset the pipe as Free */  
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	701a      	strb	r2, [r3, #0]
  }
  
  if(phost->pActiveClass->pData)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d006      	beq.n	8004c88 <USBH_HID_InterfaceDeInit+0x78>
  {
    USBH_free (phost->pActiveClass->pData);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f003 ffee 	bl	8008c64 <free>
  }

  return USBH_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{   
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b088      	sub	sp, #32
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	6078      	str	r0, [r7, #4]
  uint8_t enable[4] = {0x42, 0x0C, 0x00, 0x00};
 8004c9c:	4b5b      	ldr	r3, [pc, #364]	; (8004e0c <USBH_HID_ClassRequest+0x178>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef status         = USBH_BUSY;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	75bb      	strb	r3, [r7, #22]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	613b      	str	r3, [r7, #16]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	795b      	ldrb	r3, [r3, #5]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	f200 8094 	bhi.w	8004de6 <USBH_HID_ClassRequest+0x152>
 8004cbe:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <USBH_HID_ClassRequest+0x30>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004ce9 	.word	0x08004ce9
 8004cc8:	08004de7 	.word	0x08004de7
 8004ccc:	08004d13 	.word	0x08004d13
 8004cd0:	08004ce9 	.word	0x08004ce9
 8004cd4:	08004d97 	.word	0x08004d97
 8004cd8:	08004dc1 	.word	0x08004dc1
 8004cdc:	08004de7 	.word	0x08004de7
 8004ce0:	08004d4f 	.word	0x08004d4f
 8004ce4:	08004d71 	.word	0x08004d71
  {
  case HID_REQ_INIT:  
  case HID_REQ_GET_HID_DESC:
    
    /* Get HID Desc */ 
    if (USBH_HID_GetHIDDescriptor (phost, USB_HID_DESC_SIZE)== USBH_OK)
 8004ce8:	2109      	movs	r1, #9
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f974 	bl	8004fd8 <USBH_HID_GetHIDDescriptor>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d179      	bne.n	8004dea <USBH_HID_ClassRequest+0x156>
    {
      
      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004d02:	4619      	mov	r1, r3
 8004d04:	4610      	mov	r0, r2
 8004d06:	f000 fa25 	bl	8005154 <USBH_HID_ParseHIDDesc>
      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	715a      	strb	r2, [r3, #5]
    }
    
    break;     
 8004d10:	e06b      	b.n	8004dea <USBH_HID_ClassRequest+0x156>
  case HID_REQ_GET_REPORT_DESC:
    
    
    /* Get Report Desc */ 
    if (USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength) == USBH_OK)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d16:	4619      	mov	r1, r3
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f944 	bl	8004fa6 <USBH_HID_GetHIDReportDescriptor>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d164      	bne.n	8004dee <USBH_HID_ClassRequest+0x15a>
    {
      /* The descriptor is available in phost->device.Data */
    	if(phost->device.DevDesc.idVendor == 0x054C && phost->device.DevDesc.idProduct == 0x0268) // DS3 Sixaxis
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8004d2a:	f240 524c 	movw	r2, #1356	; 0x54c
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d109      	bne.n	8004d46 <USBH_HID_ClassRequest+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8004d38:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8004d3c:	d103      	bne.n	8004d46 <USBH_HID_ClassRequest+0xb2>
    	{
    		HID_Handle->ctl_state = HID_PS3_BOOTCODE;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2207      	movs	r2, #7
 8004d42:	715a      	strb	r2, [r3, #5]
    	}
    	else HID_Handle->ctl_state = HID_REQ_SET_IDLE;
    }
    
    break;
 8004d44:	e053      	b.n	8004dee <USBH_HID_ClassRequest+0x15a>
    	else HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	715a      	strb	r2, [r3, #5]
    break;
 8004d4c:	e04f      	b.n	8004dee <USBH_HID_ClassRequest+0x15a>
    
  case HID_PS3_BOOTCODE:
	  if(USBH_HID_SetReport(phost,0x03,0xF4,enable,4) == USBH_OK)
 8004d4e:	f107 020c 	add.w	r2, r7, #12
 8004d52:	2304      	movs	r3, #4
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	4613      	mov	r3, r2
 8004d58:	22f4      	movs	r2, #244	; 0xf4
 8004d5a:	2103      	movs	r1, #3
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f97c 	bl	800505a <USBH_HID_SetReport>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d144      	bne.n	8004df2 <USBH_HID_ClassRequest+0x15e>
	  {
		  HID_Handle->ctl_state = HID_PS3_LED;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2208      	movs	r2, #8
 8004d6c:	715a      	strb	r2, [r3, #5]
		  //status = USBH_OK;
	  }
	  break;
 8004d6e:	e040      	b.n	8004df2 <USBH_HID_ClassRequest+0x15e>
  case HID_PS3_LED:
	  status = USBH_HID_SetReport(phost,0x02,0x01,led_buffer,sizeof(led_buffer));
 8004d70:	2330      	movs	r3, #48	; 0x30
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	4b26      	ldr	r3, [pc, #152]	; (8004e10 <USBH_HID_ClassRequest+0x17c>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	2102      	movs	r1, #2
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f96d 	bl	800505a <USBH_HID_SetReport>
 8004d80:	4603      	mov	r3, r0
 8004d82:	75fb      	strb	r3, [r7, #23]
  	  if(status == USBH_OK)
 8004d84:	7dfb      	ldrb	r3, [r7, #23]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d135      	bne.n	8004df6 <USBH_HID_ClassRequest+0x162>
  	  {
  		  HID_Handle->ctl_state = HID_REQ_IDLE; // enable ps3 communication
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	715a      	strb	r2, [r3, #5]

  		  status = USBH_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	75fb      	strb	r3, [r7, #23]
  	  }
  	  break;
 8004d94:	e02f      	b.n	8004df6 <USBH_HID_ClassRequest+0x162>

  case HID_REQ_SET_IDLE:
    
    classReqStatus = USBH_HID_SetIdle (phost, 0, 0);
 8004d96:	2200      	movs	r2, #0
 8004d98:	2100      	movs	r1, #0
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f935 	bl	800500a <USBH_HID_SetIdle>
 8004da0:	4603      	mov	r3, r0
 8004da2:	75bb      	strb	r3, [r7, #22]
    
    /* set Idle */
    if (classReqStatus == USBH_OK)
 8004da4:	7dbb      	ldrb	r3, [r7, #22]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d103      	bne.n	8004db2 <USBH_HID_ClassRequest+0x11e>
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;  
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2205      	movs	r2, #5
 8004dae:	715a      	strb	r2, [r3, #5]
    }
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL; // Why if it's not supported would we set it to this state?!
    } 
    break; 
 8004db0:	e023      	b.n	8004dfa <USBH_HID_ClassRequest+0x166>
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
 8004db2:	7dbb      	ldrb	r3, [r7, #22]
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d120      	bne.n	8004dfa <USBH_HID_ClassRequest+0x166>
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL; // Why if it's not supported would we set it to this state?!
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	2205      	movs	r2, #5
 8004dbc:	715a      	strb	r2, [r3, #5]
    break; 
 8004dbe:	e01c      	b.n	8004dfa <USBH_HID_ClassRequest+0x166>
    
  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
    if (USBH_HID_SetProtocol (phost, 0) == USBH_OK)
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f9a1 	bl	800510a <USBH_HID_SetProtocol>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d117      	bne.n	8004dfe <USBH_HID_ClassRequest+0x16a>
    {
      HID_Handle->ctl_state = HID_REQ_IDLE;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	715a      	strb	r2, [r3, #5]
      
      /* all requests performed*/
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE); 
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8004dda:	2102      	movs	r1, #2
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	4798      	blx	r3
      status = USBH_OK; 
 8004de0:	2300      	movs	r3, #0
 8004de2:	75fb      	strb	r3, [r7, #23]
    } 
    break;
 8004de4:	e00b      	b.n	8004dfe <USBH_HID_ClassRequest+0x16a>
    
  case HID_REQ_IDLE:
  default:
    break;
 8004de6:	bf00      	nop
 8004de8:	e00a      	b.n	8004e00 <USBH_HID_ClassRequest+0x16c>
    break;     
 8004dea:	bf00      	nop
 8004dec:	e008      	b.n	8004e00 <USBH_HID_ClassRequest+0x16c>
    break;
 8004dee:	bf00      	nop
 8004df0:	e006      	b.n	8004e00 <USBH_HID_ClassRequest+0x16c>
	  break;
 8004df2:	bf00      	nop
 8004df4:	e004      	b.n	8004e00 <USBH_HID_ClassRequest+0x16c>
  	  break;
 8004df6:	bf00      	nop
 8004df8:	e002      	b.n	8004e00 <USBH_HID_ClassRequest+0x16c>
    break; 
 8004dfa:	bf00      	nop
 8004dfc:	e000      	b.n	8004e00 <USBH_HID_ClassRequest+0x16c>
    break;
 8004dfe:	bf00      	nop
  }
  
  return status; 
 8004e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	08008e38 	.word	0x08008e38
 8004e10:	20000008 	.word	0x20000008

08004e14 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	73fb      	strb	r3, [r7, #15]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	60bb      	str	r3, [r7, #8]
  
  switch (HID_Handle->state)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	789b      	ldrb	r3, [r3, #2]
 8004e2e:	2b06      	cmp	r3, #6
 8004e30:	f200 808b 	bhi.w	8004f4a <USBH_HID_Process+0x136>
 8004e34:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <USBH_HID_Process+0x28>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e59 	.word	0x08004e59
 8004e40:	08004e61 	.word	0x08004e61
 8004e44:	08004f4b 	.word	0x08004f4b
 8004e48:	08004f4b 	.word	0x08004f4b
 8004e4c:	08004eb1 	.word	0x08004eb1
 8004e50:	08004e9b 	.word	0x08004e9b
 8004e54:	08004edf 	.word	0x08004edf
  {
  case HID_INIT:
    HID_Handle->Init(phost); 
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	4798      	blx	r3
  case HID_IDLE:
    if(USBH_HID_GetReport (phost,
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	695a      	ldr	r2, [r3, #20]
                           0x01,
                            0,
                            HID_Handle->pData,
                            HID_Handle->length) == USBH_OK)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	8b1b      	ldrh	r3, [r3, #24]
    if(USBH_HID_GetReport (phost,
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2101      	movs	r1, #1
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f91d 	bl	80050b2 <USBH_HID_GetReport>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d167      	bne.n	8004f4e <USBH_HID_Process+0x13a>
    {
      
      fifo_write(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);  
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f103 0008 	add.w	r0, r3, #8
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	6959      	ldr	r1, [r3, #20]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	8b1b      	ldrh	r3, [r3, #24]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f000 fa45 	bl	800531c <fifo_write>
      HID_Handle->state = HID_SYNC;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2205      	movs	r2, #5
 8004e96:	709a      	strb	r2, [r3, #2]
    }
    
    break;
 8004e98:	e059      	b.n	8004f4e <USBH_HID_Process+0x13a>
    
  case HID_SYNC:

    /* Sync with start of Even Frame */
    if(phost->Timer & 1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d054      	beq.n	8004f52 <USBH_HID_Process+0x13e>
    {
      HID_Handle->state = HID_GET_DATA; 
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2204      	movs	r2, #4
 8004eac:	709a      	strb	r2, [r3, #2]
    }
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif   
    break;
 8004eae:	e050      	b.n	8004f52 <USBH_HID_Process+0x13e>
    
  case HID_GET_DATA:

    USBH_InterruptReceiveData(phost, 
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	6959      	ldr	r1, [r3, #20]
                              HID_Handle->pData,
                              HID_Handle->length,
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	8b1b      	ldrh	r3, [r3, #24]
    USBH_InterruptReceiveData(phost, 
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	785b      	ldrb	r3, [r3, #1]
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f002 fecb 	bl	8007c5a <USBH_InterruptReceiveData>
                              HID_Handle->InPipe);
    
    HID_Handle->state = HID_POLL;
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2206      	movs	r2, #6
 8004ec8:	709a      	strb	r2, [r3, #2]
    HID_Handle->timer = phost->Timer;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	; 0x3f0
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	621a      	str	r2, [r3, #32]
    HID_Handle->DataReady = 0;
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    break;
 8004edc:	e03c      	b.n	8004f58 <USBH_HID_Process+0x144>
    
  case HID_POLL:
    
    if(USBH_LL_GetURBState(phost , HID_Handle->InPipe) == USBH_URB_DONE)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	785b      	ldrb	r3, [r3, #1]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f003 fe07 	bl	8008af8 <USBH_LL_GetURBState>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d116      	bne.n	8004f1e <USBH_HID_Process+0x10a>
    {
      if(HID_Handle->DataReady == 0)
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d12d      	bne.n	8004f56 <USBH_HID_Process+0x142>
      {
        fifo_write(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f103 0008 	add.w	r0, r3, #8
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	6959      	ldr	r1, [r3, #20]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	8b1b      	ldrh	r3, [r3, #24]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	f000 fa07 	bl	800531c <fifo_write>
        HID_Handle->DataReady = 1;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        USBH_HID_EventCallback(phost);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fa54 	bl	80053c4 <USBH_HID_EventCallback>
        HID_Handle->state = HID_GET_DATA;
      }
    } 
    

    break;
 8004f1c:	e01b      	b.n	8004f56 <USBH_HID_Process+0x142>
    else if(USBH_LL_GetURBState(phost , HID_Handle->InPipe) == USBH_URB_STALL) /* IN Endpoint Stalled */
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	785b      	ldrb	r3, [r3, #1]
 8004f22:	4619      	mov	r1, r3
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f003 fde7 	bl	8008af8 <USBH_LL_GetURBState>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b05      	cmp	r3, #5
 8004f2e:	d112      	bne.n	8004f56 <USBH_HID_Process+0x142>
      if(USBH_ClrFeature(phost,
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	7e9b      	ldrb	r3, [r3, #26]
 8004f34:	4619      	mov	r1, r3
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f002 faa7 	bl	800748a <USBH_ClrFeature>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d109      	bne.n	8004f56 <USBH_HID_Process+0x142>
        HID_Handle->state = HID_GET_DATA;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2204      	movs	r2, #4
 8004f46:	709a      	strb	r2, [r3, #2]
    break;
 8004f48:	e005      	b.n	8004f56 <USBH_HID_Process+0x142>
    
  default:
    break;
 8004f4a:	bf00      	nop
 8004f4c:	e004      	b.n	8004f58 <USBH_HID_Process+0x144>
    break;
 8004f4e:	bf00      	nop
 8004f50:	e002      	b.n	8004f58 <USBH_HID_Process+0x144>
    break;
 8004f52:	bf00      	nop
 8004f54:	e000      	b.n	8004f58 <USBH_HID_Process+0x144>
    break;
 8004f56:	bf00      	nop
  }
  return status;
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop

08004f64 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	60fb      	str	r3, [r7, #12]
  
  if(HID_Handle->state == HID_POLL)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	789b      	ldrb	r3, [r3, #2]
 8004f7a:	2b06      	cmp	r3, #6
 8004f7c:	d10c      	bne.n	8004f98 <USBH_HID_SOFProcess+0x34>
  {
    if(( phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	; 0x3f0
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	8b92      	ldrh	r2, [r2, #28]
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d302      	bcc.n	8004f98 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2204      	movs	r2, #4
 8004f96:	709a      	strb	r2, [r3, #2]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
  }
  return USBH_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor (USBH_HandleTypeDef *phost,
                                                         uint16_t length)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b086      	sub	sp, #24
 8004faa:	af02      	add	r7, sp, #8
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  
  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,                                  
                              USB_DESC_HID_REPORT, 
                              phost->device.Data,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8004fb8:	887b      	ldrh	r3, [r7, #2]
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f002 f9e4 	bl	8007392 <USBH_GetDescriptor>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/
  
  
  return status;
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <USBH_HID_GetHIDDescriptor>:
  * @param  Length : HID Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor (USBH_HandleTypeDef *phost,
                                            uint16_t length)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  
  status = USBH_GetDescriptor( phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,                                  
                              USB_DESC_HID,
                              phost->device.Data,
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor( phost,
 8004fea:	887b      	ldrh	r3, [r7, #2]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f002 f9cb 	bl	8007392 <USBH_GetDescriptor>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	73fb      	strb	r3, [r7, #15]
                              length);
 
  return status;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle (USBH_HandleTypeDef *phost,
                                         uint8_t duration,
                                         uint8_t reportId)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	460b      	mov	r3, r1
 8005014:	70fb      	strb	r3, [r7, #3]
 8005016:	4613      	mov	r3, r2
 8005018:	70bb      	strb	r3, [r7, #2]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2221      	movs	r2, #33	; 0x21
 800501e:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	220a      	movs	r2, #10
 8005024:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (duration << 8 ) | reportId;
 8005026:	78fb      	ldrb	r3, [r7, #3]
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	b21a      	sxth	r2, r3
 800502c:	78bb      	ldrb	r3, [r7, #2]
 800502e:	b21b      	sxth	r3, r3
 8005030:	4313      	orrs	r3, r2
 8005032:	b21b      	sxth	r3, r3
 8005034:	b29a      	uxth	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	825a      	strh	r2, [r3, #18]
  
  phost->Control.setup.b.wIndex.w = 0;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );
 8005046:	2200      	movs	r2, #0
 8005048:	2100      	movs	r1, #0
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f002 fc01 	bl	8007852 <USBH_CtlReq>
 8005050:	4603      	mov	r3, r0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <USBH_HID_SetReport>:
USBH_StatusTypeDef USBH_HID_SetReport (USBH_HandleTypeDef *phost,
                                    uint8_t reportType,
                                    uint8_t reportId,
                                    uint8_t* reportBuff,
                                    uint8_t reportLen)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	607b      	str	r3, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	72fb      	strb	r3, [r7, #11]
 8005068:	4613      	mov	r3, r2
 800506a:	72bb      	strb	r3, [r7, #10]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2221      	movs	r2, #33	; 0x21
 8005070:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_REPORT;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2209      	movs	r2, #9
 8005076:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (reportType << 8 ) | reportId;
 8005078:	7afb      	ldrb	r3, [r7, #11]
 800507a:	021b      	lsls	r3, r3, #8
 800507c:	b21a      	sxth	r2, r3
 800507e:	7abb      	ldrb	r3, [r7, #10]
 8005080:	b21b      	sxth	r3, r3
 8005082:	4313      	orrs	r3, r2
 8005084:	b21b      	sxth	r3, r3
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	825a      	strh	r2, [r3, #18]
  
  phost->Control.setup.b.wIndex.w = 0;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8005092:	7e3b      	ldrb	r3, [r7, #24]
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, reportBuff , reportLen );
 800509a:	7e3b      	ldrb	r3, [r7, #24]
 800509c:	b29b      	uxth	r3, r3
 800509e:	461a      	mov	r2, r3
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f002 fbd5 	bl	8007852 <USBH_CtlReq>
 80050a8:	4603      	mov	r3, r0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport (USBH_HandleTypeDef *phost,
                                    uint8_t reportType,
                                    uint8_t reportId,
                                    uint8_t* reportBuff,
                                    uint8_t reportLen)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	607b      	str	r3, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	72fb      	strb	r3, [r7, #11]
 80050c0:	4613      	mov	r3, r2
 80050c2:	72bb      	strb	r3, [r7, #10]
  
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE |\
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	22a1      	movs	r2, #161	; 0xa1
 80050c8:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (reportType << 8 ) | reportId;
 80050d0:	7afb      	ldrb	r3, [r7, #11]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	b21a      	sxth	r2, r3
 80050d6:	7abb      	ldrb	r3, [r7, #10]
 80050d8:	b21b      	sxth	r3, r3
 80050da:	4313      	orrs	r3, r2
 80050dc:	b21b      	sxth	r3, r3
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	825a      	strh	r2, [r3, #18]
  
  phost->Control.setup.b.wIndex.w = 0;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80050ea:	7e3b      	ldrb	r3, [r7, #24]
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, reportBuff , reportLen );
 80050f2:	7e3b      	ldrb	r3, [r7, #24]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f002 fba9 	bl	8007852 <USBH_CtlReq>
 8005100:	4603      	mov	r3, r0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                            uint8_t protocol)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	460b      	mov	r3, r1
 8005114:	70fb      	strb	r3, [r7, #3]
  
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2221      	movs	r2, #33	; 0x21
 800511a:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	220b      	movs	r2, #11
 8005120:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = protocol != 0 ? 0 : 1;
 8005122:	78fb      	ldrb	r3, [r7, #3]
 8005124:	2b00      	cmp	r3, #0
 8005126:	bf0c      	ite	eq
 8005128:	2301      	moveq	r3, #1
 800512a:	2300      	movne	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	b29a      	uxth	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );
 8005140:	2200      	movs	r2, #0
 8005142:	2100      	movs	r1, #0
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f002 fb84 	bl	8007852 <USBH_CtlReq>
 800514a:	4603      	mov	r3, r0
  
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc (HID_DescTypeDef *desc, uint8_t *buf)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  
  desc->bLength                  = *(uint8_t  *) (buf + 0);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781a      	ldrb	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	701a      	strb	r2, [r3, #0]
  desc->bDescriptorType          = *(uint8_t  *) (buf + 1);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	785a      	ldrb	r2, [r3, #1]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	705a      	strb	r2, [r3, #1]
  desc->bcdHID                   =  LE16  (buf + 2);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	3302      	adds	r3, #2
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	b29a      	uxth	r2, r3
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	3303      	adds	r3, #3
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	b29b      	uxth	r3, r3
 800517e:	021b      	lsls	r3, r3, #8
 8005180:	b29b      	uxth	r3, r3
 8005182:	4413      	add	r3, r2
 8005184:	b29a      	uxth	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	805a      	strh	r2, [r3, #2]
  desc->bCountryCode             = *(uint8_t  *) (buf + 4);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	791a      	ldrb	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	711a      	strb	r2, [r3, #4]
  desc->bNumDescriptors          = *(uint8_t  *) (buf + 5);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	795a      	ldrb	r2, [r3, #5]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	715a      	strb	r2, [r3, #5]
  desc->bReportDescriptorType    = *(uint8_t  *) (buf + 6);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	799a      	ldrb	r2, [r3, #6]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	719a      	strb	r2, [r3, #6]
  desc->wItemLength              =  LE16  (buf + 7);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	3307      	adds	r3, #7
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	3308      	adds	r3, #8
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	4413      	add	r3, r2
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	811a      	strh	r2, [r3, #8]
} 
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b085      	sub	sp, #20
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 80051d2:	23ff      	movs	r3, #255	; 0xff
 80051d4:	73fb      	strb	r3, [r7, #15]
  
  if(phost->gState == HOST_CLASS)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b0a      	cmp	r3, #10
 80051de:	d131      	bne.n	8005244 <USBH_HID_GetDeviceType+0x7a>
  {
    
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol \
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80051e6:	4619      	mov	r1, r3
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	231a      	movs	r3, #26
 80051ec:	fb03 f301 	mul.w	r3, r3, r1
 80051f0:	4413      	add	r3, r2
 80051f2:	f203 3343 	addw	r3, r3, #835	; 0x343
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d102      	bne.n	8005202 <USBH_HID_GetDeviceType+0x38>
      == HID_KEYBRD_BOOT_CODE)
    {
      type = HID_KEYBOARD;  
 80051fc:	2302      	movs	r3, #2
 80051fe:	73fb      	strb	r3, [r7, #15]
 8005200:	e020      	b.n	8005244 <USBH_HID_GetDeviceType+0x7a>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol \
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005208:	4619      	mov	r1, r3
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	231a      	movs	r3, #26
 800520e:	fb03 f301 	mul.w	r3, r3, r1
 8005212:	4413      	add	r3, r2
 8005214:	f203 3343 	addw	r3, r3, #835	; 0x343
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d102      	bne.n	8005224 <USBH_HID_GetDeviceType+0x5a>
      == HID_MOUSE_BOOT_CODE)		  
    {
      type=  HID_MOUSE;  
 800521e:	2301      	movs	r3, #1
 8005220:	73fb      	strb	r3, [r7, #15]
 8005222:	e00f      	b.n	8005244 <USBH_HID_GetDeviceType+0x7a>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol \
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800522a:	4619      	mov	r1, r3
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	231a      	movs	r3, #26
 8005230:	fb03 f301 	mul.w	r3, r3, r1
 8005234:	4413      	add	r3, r2
 8005236:	f203 3343 	addw	r3, r3, #835	; 0x343
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <USBH_HID_GetDeviceType+0x7a>
	  == HID_DS3_BOOT_CODE)
	{
	  type=  HID_DS3;
 8005240:	2303      	movs	r3, #3
 8005242:	73fb      	strb	r3, [r7, #15]
	}
  }
  return type;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <fifo_init>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void fifo_init(FIFO_TypeDef * f, uint8_t * buf, uint16_t size)
{
 8005252:	b480      	push	{r7}
 8005254:	b085      	sub	sp, #20
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	4613      	mov	r3, r2
 800525e:	80fb      	strh	r3, [r7, #6]
     f->head = 0;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	809a      	strh	r2, [r3, #4]
     f->tail = 0;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	80da      	strh	r2, [r3, #6]
     f->lock = 0;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	729a      	strb	r2, [r3, #10]
     f->size = size;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	88fa      	ldrh	r2, [r7, #6]
 8005276:	811a      	strh	r2, [r3, #8]
     f->buf = buf;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	601a      	str	r2, [r3, #0]
}
 800527e:	bf00      	nop
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <fifo_read>:
  * @param  buf: read buffer 
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t  fifo_read(FIFO_TypeDef * f, void * buf, uint16_t  nbytes)
{
 800528a:	b480      	push	{r7}
 800528c:	b087      	sub	sp, #28
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	4613      	mov	r3, r2
 8005296:	80fb      	strh	r3, [r7, #6]
  uint16_t  i;
  uint8_t * p;
  p = (uint8_t*) buf;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	613b      	str	r3, [r7, #16]
  
  if(f->lock == 0)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	7a9b      	ldrb	r3, [r3, #10]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d131      	bne.n	8005308 <fifo_read+0x7e>
  {
    f->lock = 1;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	729a      	strb	r2, [r3, #10]
    for(i=0; i < nbytes; i++)
 80052aa:	2300      	movs	r3, #0
 80052ac:	82fb      	strh	r3, [r7, #22]
 80052ae:	e027      	b.n	8005300 <fifo_read+0x76>
    {
      if( f->tail != f->head )
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	88da      	ldrh	r2, [r3, #6]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	889b      	ldrh	r3, [r3, #4]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d019      	beq.n	80052f0 <fifo_read+0x66>
      { 
        *p++ = f->buf[f->tail];  
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	613a      	str	r2, [r7, #16]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	6812      	ldr	r2, [r2, #0]
 80052c6:	68f9      	ldr	r1, [r7, #12]
 80052c8:	88c9      	ldrh	r1, [r1, #6]
 80052ca:	440a      	add	r2, r1
 80052cc:	7812      	ldrb	r2, [r2, #0]
 80052ce:	701a      	strb	r2, [r3, #0]
        f->tail++;  
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	88db      	ldrh	r3, [r3, #6]
 80052d4:	3301      	adds	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	80da      	strh	r2, [r3, #6]
        if( f->tail == f->size )
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	88da      	ldrh	r2, [r3, #6]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	891b      	ldrh	r3, [r3, #8]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d108      	bne.n	80052fa <fifo_read+0x70>
        {  
          f->tail = 0;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	80da      	strh	r2, [r3, #6]
 80052ee:	e004      	b.n	80052fa <fifo_read+0x70>
        }
      } else 
      {
        f->lock = 0;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	729a      	strb	r2, [r3, #10]
        return i; 
 80052f6:	8afb      	ldrh	r3, [r7, #22]
 80052f8:	e00a      	b.n	8005310 <fifo_read+0x86>
    for(i=0; i < nbytes; i++)
 80052fa:	8afb      	ldrh	r3, [r7, #22]
 80052fc:	3301      	adds	r3, #1
 80052fe:	82fb      	strh	r3, [r7, #22]
 8005300:	8afa      	ldrh	r2, [r7, #22]
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	429a      	cmp	r2, r3
 8005306:	d3d3      	bcc.n	80052b0 <fifo_read+0x26>
      }
    }
  }
  f->lock = 0;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	729a      	strb	r2, [r3, #10]
  return nbytes;
 800530e:	88fb      	ldrh	r3, [r7, #6]
}
 8005310:	4618      	mov	r0, r3
 8005312:	371c      	adds	r7, #28
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <fifo_write>:
  * @param  buf: read buffer 
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t  fifo_write(FIFO_TypeDef * f, const void * buf, uint16_t  nbytes)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	4613      	mov	r3, r2
 8005328:	80fb      	strh	r3, [r7, #6]
  uint16_t  i;
  const uint8_t * p;
  p = (const uint8_t*) buf;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	613b      	str	r3, [r7, #16]
  if(f->lock == 0)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	7a9b      	ldrb	r3, [r3, #10]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d13c      	bne.n	80053b0 <fifo_write+0x94>
  {
    f->lock = 1;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2201      	movs	r2, #1
 800533a:	729a      	strb	r2, [r3, #10]
    for(i=0; i < nbytes; i++)
 800533c:	2300      	movs	r3, #0
 800533e:	82fb      	strh	r3, [r7, #22]
 8005340:	e032      	b.n	80053a8 <fifo_write+0x8c>
    {
      if( (f->head + 1 == f->tail) ||
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	889b      	ldrh	r3, [r3, #4]
 8005346:	3301      	adds	r3, #1
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	88d2      	ldrh	r2, [r2, #6]
 800534c:	4293      	cmp	r3, r2
 800534e:	d00a      	beq.n	8005366 <fifo_write+0x4a>
         ( (f->head + 1 == f->size) && (f->tail == 0)) )
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	889b      	ldrh	r3, [r3, #4]
 8005354:	3301      	adds	r3, #1
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	8912      	ldrh	r2, [r2, #8]
      if( (f->head + 1 == f->tail) ||
 800535a:	4293      	cmp	r3, r2
 800535c:	d108      	bne.n	8005370 <fifo_write+0x54>
         ( (f->head + 1 == f->size) && (f->tail == 0)) )
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	88db      	ldrh	r3, [r3, #6]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d104      	bne.n	8005370 <fifo_write+0x54>
      {
        f->lock = 0;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	729a      	strb	r2, [r3, #10]
        return i;
 800536c:	8afb      	ldrh	r3, [r7, #22]
 800536e:	e023      	b.n	80053b8 <fifo_write+0x9c>
      } 
      else 
      {
        f->buf[f->head] = *p++;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	8892      	ldrh	r2, [r2, #4]
 8005378:	441a      	add	r2, r3
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1c59      	adds	r1, r3, #1
 800537e:	6139      	str	r1, [r7, #16]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	7013      	strb	r3, [r2, #0]
        f->head++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	889b      	ldrh	r3, [r3, #4]
 8005388:	3301      	adds	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	809a      	strh	r2, [r3, #4]
        if( f->head == f->size )
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	889a      	ldrh	r2, [r3, #4]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	891b      	ldrh	r3, [r3, #8]
 8005398:	429a      	cmp	r2, r3
 800539a:	d102      	bne.n	80053a2 <fifo_write+0x86>
        {
          f->head = 0;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	809a      	strh	r2, [r3, #4]
    for(i=0; i < nbytes; i++)
 80053a2:	8afb      	ldrh	r3, [r7, #22]
 80053a4:	3301      	adds	r3, #1
 80053a6:	82fb      	strh	r3, [r7, #22]
 80053a8:	8afa      	ldrh	r2, [r7, #22]
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d3c8      	bcc.n	8005342 <fifo_write+0x26>
        }
      }
    }
  }
  f->lock = 0;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	729a      	strb	r2, [r3, #10]
  return nbytes;
 80053b6:	88fb      	ldrh	r3, [r7, #6]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	371c      	adds	r7, #28
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <USBH_HID_EventCallback>:
*  @param  phost: Selected device
* @retval None
*/

__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b090      	sub	sp, #64	; 0x40
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	HID_TypeTypeDef type = HID_UNKNOWN;
 80053cc:	23ff      	movs	r3, #255	; 0xff
 80053ce:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	HID_KEYBD_Info_TypeDef* kb_state = NULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	637b      	str	r3, [r7, #52]	; 0x34
	HID_DS3_Info_TypeDef* ds3_state = NULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	633b      	str	r3, [r7, #48]	; 0x30
	N64ControllerData new_data;

	type = USBH_HID_GetDeviceType(phost);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff fef5 	bl	80051ca <USBH_HID_GetDeviceType>
 80053e0:	4603      	mov	r3, r0
 80053e2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

	switch(type)
 80053e6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d003      	beq.n	80053f6 <USBH_HID_EventCallback+0x32>
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	f000 8098 	beq.w	8005524 <USBH_HID_EventCallback+0x160>
			__disable_irq();
			memcpy(&n64_data, &new_data,4);
			__enable_irq();
			break;
		default:
			break;
 80053f4:	e274      	b.n	80058e0 <USBH_HID_EventCallback+0x51c>
			kb_state = USBH_HID_GetKeybdInfo(phost);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fb50 	bl	8005a9c <USBH_HID_GetKeybdInfo>
 80053fc:	6378      	str	r0, [r7, #52]	; 0x34
			memset(&new_data,0,4);
 80053fe:	f107 030c 	add.w	r3, r7, #12
 8005402:	2204      	movs	r2, #4
 8005404:	2100      	movs	r1, #0
 8005406:	4618      	mov	r0, r3
 8005408:	f003 fc34 	bl	8008c74 <memset>
			for(int index = 0;index < 6;index++)
 800540c:	2300      	movs	r3, #0
 800540e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005410:	e07e      	b.n	8005510 <USBH_HID_EventCallback+0x14c>
				if(kb_state->keys[index] == KEY_A)
 8005412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005416:	4413      	add	r3, r2
 8005418:	3309      	adds	r3, #9
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b04      	cmp	r3, #4
 800541e:	d104      	bne.n	800542a <USBH_HID_EventCallback+0x66>
					new_data.a = 1;
 8005420:	7b3b      	ldrb	r3, [r7, #12]
 8005422:	f043 0301 	orr.w	r3, r3, #1
 8005426:	733b      	strb	r3, [r7, #12]
					continue;
 8005428:	e06f      	b.n	800550a <USBH_HID_EventCallback+0x146>
				if(kb_state->keys[index] == KEY_S)
 800542a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800542c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542e:	4413      	add	r3, r2
 8005430:	3309      	adds	r3, #9
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b16      	cmp	r3, #22
 8005436:	d104      	bne.n	8005442 <USBH_HID_EventCallback+0x7e>
					new_data.b = 1;
 8005438:	7b3b      	ldrb	r3, [r7, #12]
 800543a:	f043 0302 	orr.w	r3, r3, #2
 800543e:	733b      	strb	r3, [r7, #12]
					continue;
 8005440:	e063      	b.n	800550a <USBH_HID_EventCallback+0x146>
				if(kb_state->keys[index] == KEY_D)
 8005442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005446:	4413      	add	r3, r2
 8005448:	3309      	adds	r3, #9
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b07      	cmp	r3, #7
 800544e:	d104      	bne.n	800545a <USBH_HID_EventCallback+0x96>
					new_data.z = 1;
 8005450:	7b3b      	ldrb	r3, [r7, #12]
 8005452:	f043 0304 	orr.w	r3, r3, #4
 8005456:	733b      	strb	r3, [r7, #12]
					continue;
 8005458:	e057      	b.n	800550a <USBH_HID_EventCallback+0x146>
				if(kb_state->keys[index] == KEY_F)
 800545a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800545c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545e:	4413      	add	r3, r2
 8005460:	3309      	adds	r3, #9
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b09      	cmp	r3, #9
 8005466:	d104      	bne.n	8005472 <USBH_HID_EventCallback+0xae>
					new_data.r = 1;
 8005468:	7b7b      	ldrb	r3, [r7, #13]
 800546a:	f043 0308 	orr.w	r3, r3, #8
 800546e:	737b      	strb	r3, [r7, #13]
					continue;
 8005470:	e04b      	b.n	800550a <USBH_HID_EventCallback+0x146>
				if(kb_state->keys[index] == KEY_W)
 8005472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005476:	4413      	add	r3, r2
 8005478:	3309      	adds	r3, #9
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b1a      	cmp	r3, #26
 800547e:	d104      	bne.n	800548a <USBH_HID_EventCallback+0xc6>
					new_data.c_up = 1;
 8005480:	7b7b      	ldrb	r3, [r7, #13]
 8005482:	f043 0310 	orr.w	r3, r3, #16
 8005486:	737b      	strb	r3, [r7, #13]
					continue;
 8005488:	e03f      	b.n	800550a <USBH_HID_EventCallback+0x146>
				if(kb_state->keys[index] == KEY_1_EXCLAMATION_MARK)
 800548a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800548c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548e:	4413      	add	r3, r2
 8005490:	3309      	adds	r3, #9
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b1e      	cmp	r3, #30
 8005496:	d104      	bne.n	80054a2 <USBH_HID_EventCallback+0xde>
					new_data.l = 1;
 8005498:	7b7b      	ldrb	r3, [r7, #13]
 800549a:	f043 0304 	orr.w	r3, r3, #4
 800549e:	737b      	strb	r3, [r7, #13]
					continue;
 80054a0:	e033      	b.n	800550a <USBH_HID_EventCallback+0x146>
				if(kb_state->keys[index] == KEY_ENTER)
 80054a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a6:	4413      	add	r3, r2
 80054a8:	3309      	adds	r3, #9
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b28      	cmp	r3, #40	; 0x28
 80054ae:	d104      	bne.n	80054ba <USBH_HID_EventCallback+0xf6>
					new_data.start = 1;
 80054b0:	7b3b      	ldrb	r3, [r7, #12]
 80054b2:	f043 0308 	orr.w	r3, r3, #8
 80054b6:	733b      	strb	r3, [r7, #12]
					continue;
 80054b8:	e027      	b.n	800550a <USBH_HID_EventCallback+0x146>
				if(kb_state->keys[index] == KEY_UPARROW)
 80054ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054be:	4413      	add	r3, r2
 80054c0:	3309      	adds	r3, #9
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b52      	cmp	r3, #82	; 0x52
 80054c6:	d102      	bne.n	80054ce <USBH_HID_EventCallback+0x10a>
					new_data.y_axis = 0x26;
 80054c8:	2326      	movs	r3, #38	; 0x26
 80054ca:	73fb      	strb	r3, [r7, #15]
					continue;
 80054cc:	e01d      	b.n	800550a <USBH_HID_EventCallback+0x146>
				if(kb_state->keys[index] == KEY_DOWNARROW)
 80054ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d2:	4413      	add	r3, r2
 80054d4:	3309      	adds	r3, #9
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b51      	cmp	r3, #81	; 0x51
 80054da:	d102      	bne.n	80054e2 <USBH_HID_EventCallback+0x11e>
					new_data.y_axis = 0x39;
 80054dc:	2339      	movs	r3, #57	; 0x39
 80054de:	73fb      	strb	r3, [r7, #15]
					continue;
 80054e0:	e013      	b.n	800550a <USBH_HID_EventCallback+0x146>
				if(kb_state->keys[index] == KEY_LEFTARROW)
 80054e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e6:	4413      	add	r3, r2
 80054e8:	3309      	adds	r3, #9
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b50      	cmp	r3, #80	; 0x50
 80054ee:	d102      	bne.n	80054f6 <USBH_HID_EventCallback+0x132>
					new_data.x_axis = 0x39;
 80054f0:	2339      	movs	r3, #57	; 0x39
 80054f2:	73bb      	strb	r3, [r7, #14]
					continue;
 80054f4:	e009      	b.n	800550a <USBH_HID_EventCallback+0x146>
				if(kb_state->keys[index] == KEY_RIGHTARROW)
 80054f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fa:	4413      	add	r3, r2
 80054fc:	3309      	adds	r3, #9
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	2b4f      	cmp	r3, #79	; 0x4f
 8005502:	d102      	bne.n	800550a <USBH_HID_EventCallback+0x146>
					new_data.x_axis = 0x26;
 8005504:	2326      	movs	r3, #38	; 0x26
 8005506:	73bb      	strb	r3, [r7, #14]
					continue;
 8005508:	bf00      	nop
			for(int index = 0;index < 6;index++)
 800550a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550c:	3301      	adds	r3, #1
 800550e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005512:	2b05      	cmp	r3, #5
 8005514:	f77f af7d 	ble.w	8005412 <USBH_HID_EventCallback+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005518:	b672      	cpsid	i
			memcpy(&n64_data, &new_data,4);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4ac8      	ldr	r2, [pc, #800]	; (8005840 <USBH_HID_EventCallback+0x47c>)
 800551e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005520:	b662      	cpsie	i
			break;
 8005522:	e1dd      	b.n	80058e0 <USBH_HID_EventCallback+0x51c>
			ds3_state = USBH_HID_GetDS3Info(phost);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fa55 	bl	80059d4 <USBH_HID_GetDS3Info>
 800552a:	6338      	str	r0, [r7, #48]	; 0x30
			memset(&new_data,0,4);
 800552c:	f107 030c 	add.w	r3, r7, #12
 8005530:	2204      	movs	r2, #4
 8005532:	2100      	movs	r1, #0
 8005534:	4618      	mov	r0, r3
 8005536:	f003 fb9d 	bl	8008c74 <memset>
			if(ds3_state->x)
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	78db      	ldrb	r3, [r3, #3]
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <USBH_HID_EventCallback+0x18c>
				new_data.a = 1;
 8005548:	7b3b      	ldrb	r3, [r7, #12]
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	733b      	strb	r3, [r7, #12]
			if(ds3_state->triangle)
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	78db      	ldrb	r3, [r3, #3]
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <USBH_HID_EventCallback+0x1a2>
				new_data.c_up = 1;
 800555e:	7b7b      	ldrb	r3, [r7, #13]
 8005560:	f043 0310 	orr.w	r3, r3, #16
 8005564:	737b      	strb	r3, [r7, #13]
			if(ds3_state->square)
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	78db      	ldrb	r3, [r3, #3]
 800556a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <USBH_HID_EventCallback+0x1b8>
				new_data.b = 1;
 8005574:	7b3b      	ldrb	r3, [r7, #12]
 8005576:	f043 0302 	orr.w	r3, r3, #2
 800557a:	733b      	strb	r3, [r7, #12]
			if(ds3_state->circle)
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	78db      	ldrb	r3, [r3, #3]
 8005580:	f003 0320 	and.w	r3, r3, #32
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <USBH_HID_EventCallback+0x1ce>
				new_data.c_right = 1;
 800558a:	7b7b      	ldrb	r3, [r7, #13]
 800558c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005590:	737b      	strb	r3, [r7, #13]
			if(ds3_state->L1)
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	78db      	ldrb	r3, [r3, #3]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <USBH_HID_EventCallback+0x1e4>
				new_data.l = 1;
 80055a0:	7b7b      	ldrb	r3, [r7, #13]
 80055a2:	f043 0304 	orr.w	r3, r3, #4
 80055a6:	737b      	strb	r3, [r7, #13]
			if(ds3_state->R1)
 80055a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055aa:	78db      	ldrb	r3, [r3, #3]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <USBH_HID_EventCallback+0x1fa>
				new_data.r = 1;
 80055b6:	7b7b      	ldrb	r3, [r7, #13]
 80055b8:	f043 0308 	orr.w	r3, r3, #8
 80055bc:	737b      	strb	r3, [r7, #13]
			if(ds3_state->R2)
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	78db      	ldrb	r3, [r3, #3]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <USBH_HID_EventCallback+0x210>
				new_data.z = 1;
 80055cc:	7b3b      	ldrb	r3, [r7, #12]
 80055ce:	f043 0304 	orr.w	r3, r3, #4
 80055d2:	733b      	strb	r3, [r7, #12]
			if(ds3_state->L2)
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	78db      	ldrb	r3, [r3, #3]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <USBH_HID_EventCallback+0x226>
				new_data.c_left = 1;
 80055e2:	7b7b      	ldrb	r3, [r7, #13]
 80055e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055e8:	737b      	strb	r3, [r7, #13]
			if(ds3_state->start)
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	789b      	ldrb	r3, [r3, #2]
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <USBH_HID_EventCallback+0x23c>
				new_data.start = 1;
 80055f8:	7b3b      	ldrb	r3, [r7, #12]
 80055fa:	f043 0308 	orr.w	r3, r3, #8
 80055fe:	733b      	strb	r3, [r7, #12]
			if(ds3_state->select)
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	789b      	ldrb	r3, [r3, #2]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <USBH_HID_EventCallback+0x252>
				new_data.c_down = 1;
 800560e:	7b7b      	ldrb	r3, [r7, #13]
 8005610:	f043 0320 	orr.w	r3, r3, #32
 8005614:	737b      	strb	r3, [r7, #13]
			if(ds3_state->d_up)
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	789b      	ldrb	r3, [r3, #2]
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <USBH_HID_EventCallback+0x268>
				new_data.up = 1;
 8005624:	7b3b      	ldrb	r3, [r7, #12]
 8005626:	f043 0310 	orr.w	r3, r3, #16
 800562a:	733b      	strb	r3, [r7, #12]
			if(ds3_state->d_down)
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	789b      	ldrb	r3, [r3, #2]
 8005630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <USBH_HID_EventCallback+0x27e>
				new_data.down = 1;
 800563a:	7b3b      	ldrb	r3, [r7, #12]
 800563c:	f043 0320 	orr.w	r3, r3, #32
 8005640:	733b      	strb	r3, [r7, #12]
			if(ds3_state->d_left)
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	789b      	ldrb	r3, [r3, #2]
 8005646:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <USBH_HID_EventCallback+0x294>
				new_data.left = 1;
 8005650:	7b3b      	ldrb	r3, [r7, #12]
 8005652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005656:	733b      	strb	r3, [r7, #12]
			if(ds3_state->d_right)
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	789b      	ldrb	r3, [r3, #2]
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <USBH_HID_EventCallback+0x2aa>
				new_data.right = 1;
 8005666:	7b3b      	ldrb	r3, [r7, #12]
 8005668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566c:	733b      	strb	r3, [r7, #12]
			const int sensitivity = 85; // Nta Bryte
 800566e:	2355      	movs	r3, #85	; 0x55
 8005670:	62fb      	str	r3, [r7, #44]	; 0x2c
			const int dead_zone = 15;   // Nta Bryte
 8005672:	230f      	movs	r3, #15
 8005674:	62bb      	str	r3, [r7, #40]	; 0x28
			const float DS3_MAX = 128;
 8005676:	f04f 4386 	mov.w	r3, #1124073472	; 0x43000000
 800567a:	627b      	str	r3, [r7, #36]	; 0x24
			const float N64_MAX = (sensitivity > 0) ? 127*(sensitivity/100.0f) : 0;
 800567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567e:	2b00      	cmp	r3, #0
 8005680:	dd0d      	ble.n	800569e <USBH_HID_EventCallback+0x2da>
 8005682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005684:	ee07 3a90 	vmov	s15, r3
 8005688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800568c:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8005844 <USBH_HID_EventCallback+0x480>
 8005690:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005694:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8005848 <USBH_HID_EventCallback+0x484>
 8005698:	ee67 7a87 	vmul.f32	s15, s15, s14
 800569c:	e001      	b.n	80056a2 <USBH_HID_EventCallback+0x2de>
 800569e:	eddf 7a6b 	vldr	s15, [pc, #428]	; 800584c <USBH_HID_EventCallback+0x488>
 80056a2:	edc7 7a08 	vstr	s15, [r7, #32]
			float deadzoneValue = (dead_zone/100.0f) * DS3_MAX;
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	ee07 3a90 	vmov	s15, r3
 80056ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056b0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005844 <USBH_HID_EventCallback+0x480>
 80056b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80056b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80056bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c0:	edc7 7a07 	vstr	s15, [r7, #28]
			float deadzoneRelation = DS3_MAX / (DS3_MAX - deadzoneValue);
 80056c4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80056c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80056cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056d0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80056d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056d8:	edc7 7a06 	vstr	s15, [r7, #24]
			int8_t LSX = 0, LSY = 0; // -128 to +127...
 80056dc:	2300      	movs	r3, #0
 80056de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80056e2:	2300      	movs	r3, #0
 80056e4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			float unscaled_result = 0;
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]
			int8_t stick_lx = ds3_state->LAnalogX - 128;
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	799b      	ldrb	r3, [r3, #6]
 80056f2:	3b80      	subs	r3, #128	; 0x80
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	74fb      	strb	r3, [r7, #19]
			int8_t stick_ly = ds3_state->LAnalogY - 128;
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	79db      	ldrb	r3, [r3, #7]
 80056fc:	3b80      	subs	r3, #128	; 0x80
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	74bb      	strb	r3, [r7, #18]
			if(stick_lx >= deadzoneValue) // positive = right
 8005702:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800570e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005712:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800571a:	db21      	blt.n	8005760 <USBH_HID_EventCallback+0x39c>
				unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 800571c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005720:	ee07 3a90 	vmov	s15, r3
 8005724:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005728:	edd7 7a07 	vldr	s15, [r7, #28]
 800572c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005730:	edd7 7a06 	vldr	s15, [r7, #24]
 8005734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005738:	edc7 7a05 	vstr	s15, [r7, #20]
				LSX = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 800573c:	edd7 6a08 	vldr	s13, [r7, #32]
 8005740:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005748:	edd7 7a05 	vldr	s15, [r7, #20]
 800574c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005754:	edc7 7a00 	vstr	s15, [r7]
 8005758:	783b      	ldrb	r3, [r7, #0]
 800575a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800575e:	e039      	b.n	80057d4 <USBH_HID_EventCallback+0x410>
			else if(stick_lx <= (-deadzoneValue)) // negative = left
 8005760:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005764:	ee07 3a90 	vmov	s15, r3
 8005768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800576c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005770:	eef1 7a67 	vneg.f32	s15, s15
 8005774:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577c:	d82a      	bhi.n	80057d4 <USBH_HID_EventCallback+0x410>
				stick_lx = -stick_lx; // compute as positive, then negate at the end
 800577e:	7cfb      	ldrb	r3, [r7, #19]
 8005780:	425b      	negs	r3, r3
 8005782:	b2db      	uxtb	r3, r3
 8005784:	74fb      	strb	r3, [r7, #19]
				unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 8005786:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005792:	edd7 7a07 	vldr	s15, [r7, #28]
 8005796:	ee37 7a67 	vsub.f32	s14, s14, s15
 800579a:	edd7 7a06 	vldr	s15, [r7, #24]
 800579e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a2:	edc7 7a05 	vstr	s15, [r7, #20]
				LSX = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 80057a6:	edd7 6a08 	vldr	s13, [r7, #32]
 80057aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80057ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80057b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057be:	edc7 7a00 	vstr	s15, [r7]
 80057c2:	783b      	ldrb	r3, [r7, #0]
 80057c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				LSX = -LSX;
 80057c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80057cc:	425b      	negs	r3, r3
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			if(stick_ly >= deadzoneValue) // DS3 positive = down
 80057d4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80057d8:	ee07 3a90 	vmov	s15, r3
 80057dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80057e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ec:	db30      	blt.n	8005850 <USBH_HID_EventCallback+0x48c>
				unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 80057ee:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80057fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005802:	edd7 7a06 	vldr	s15, [r7, #24]
 8005806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580a:	edc7 7a05 	vstr	s15, [r7, #20]
				LSY = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 800580e:	edd7 6a08 	vldr	s13, [r7, #32]
 8005812:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581a:	edd7 7a05 	vldr	s15, [r7, #20]
 800581e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005822:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005826:	edc7 7a00 	vstr	s15, [r7]
 800582a:	783b      	ldrb	r3, [r7, #0]
 800582c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				LSY = -LSY; // for n64 down is negative
 8005830:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005834:	425b      	negs	r3, r3
 8005836:	b2db      	uxtb	r3, r3
 8005838:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800583c:	e03c      	b.n	80058b8 <USBH_HID_EventCallback+0x4f4>
 800583e:	bf00      	nop
 8005840:	200001d8 	.word	0x200001d8
 8005844:	42c80000 	.word	0x42c80000
 8005848:	42fe0000 	.word	0x42fe0000
 800584c:	00000000 	.word	0x00000000
			else if(stick_ly <= (-deadzoneValue)) // DS3 negative = down
 8005850:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005854:	ee07 3a90 	vmov	s15, r3
 8005858:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800585c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005860:	eef1 7a67 	vneg.f32	s15, s15
 8005864:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800586c:	d824      	bhi.n	80058b8 <USBH_HID_EventCallback+0x4f4>
				stick_ly = -stick_ly; // compute as positive
 800586e:	7cbb      	ldrb	r3, [r7, #18]
 8005870:	425b      	negs	r3, r3
 8005872:	b2db      	uxtb	r3, r3
 8005874:	74bb      	strb	r3, [r7, #18]
				unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 8005876:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005882:	edd7 7a07 	vldr	s15, [r7, #28]
 8005886:	ee37 7a67 	vsub.f32	s14, s14, s15
 800588a:	edd7 7a06 	vldr	s15, [r7, #24]
 800588e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005892:	edc7 7a05 	vstr	s15, [r7, #20]
				LSY = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 8005896:	edd7 6a08 	vldr	s13, [r7, #32]
 800589a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800589e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80058a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058ae:	edc7 7a00 	vstr	s15, [r7]
 80058b2:	783b      	ldrb	r3, [r7, #0]
 80058b4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			new_data.x_axis = reverse((uint8_t)LSX);
 80058b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80058bc:	4618      	mov	r0, r3
 80058be:	f002 fa9c 	bl	8007dfa <reverse>
 80058c2:	4603      	mov	r3, r0
 80058c4:	73bb      	strb	r3, [r7, #14]
			new_data.y_axis = reverse((uint8_t)LSY);
 80058c6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80058ca:	4618      	mov	r0, r3
 80058cc:	f002 fa95 	bl	8007dfa <reverse>
 80058d0:	4603      	mov	r3, r0
 80058d2:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 80058d4:	b672      	cpsid	i
			memcpy(&n64_data, &new_data,4);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4a03      	ldr	r2, [pc, #12]	; (80058e8 <USBH_HID_EventCallback+0x524>)
 80058da:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80058dc:	b662      	cpsie	i
			break;
 80058de:	bf00      	nop
	}
}
 80058e0:	bf00      	nop
 80058e2:	3740      	adds	r7, #64	; 0x40
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	200001d8 	.word	0x200001d8

080058ec <USBH_HID_DS3Init>:
  255,   /*max value device can report*/
  1      /*resolution*/
};

USBH_StatusTypeDef USBH_HID_DS3Init(USBH_HandleTypeDef *phost)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
	  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	60fb      	str	r3, [r7, #12]

	  memset(&ds3_data,0,sizeof(HID_DS3_Info_TypeDef));
 80058fe:	2230      	movs	r2, #48	; 0x30
 8005900:	2100      	movs	r1, #0
 8005902:	4811      	ldr	r0, [pc, #68]	; (8005948 <USBH_HID_DS3Init+0x5c>)
 8005904:	f003 f9b6 	bl	8008c74 <memset>
	  memset(ds3_report_data,0,sizeof(uint32_t)*12);
 8005908:	2230      	movs	r2, #48	; 0x30
 800590a:	2100      	movs	r1, #0
 800590c:	480f      	ldr	r0, [pc, #60]	; (800594c <USBH_HID_DS3Init+0x60>)
 800590e:	f003 f9b1 	bl	8008c74 <memset>

	  if(HID_Handle->length > (sizeof(ds3_report_data)/sizeof(uint32_t)))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8b1b      	ldrh	r3, [r3, #24]
 8005916:	2b0c      	cmp	r3, #12
 8005918:	d902      	bls.n	8005920 <USBH_HID_DS3Init+0x34>
	  {
	    HID_Handle->length = (sizeof(ds3_report_data)/sizeof(uint32_t));
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	220c      	movs	r2, #12
 800591e:	831a      	strh	r2, [r3, #24]
	  }
	  HID_Handle->pData = (uint8_t*)ds3_report_data;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4a0a      	ldr	r2, [pc, #40]	; (800594c <USBH_HID_DS3Init+0x60>)
 8005924:	615a      	str	r2, [r3, #20]
	  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(ds3_report_data));
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f103 0008 	add.w	r0, r3, #8
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005932:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005936:	4619      	mov	r1, r3
 8005938:	f7ff fc8b 	bl	8005252 <fifo_init>

	  return USBH_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20000150 	.word	0x20000150
 800594c:	20000120 	.word	0x20000120

08005950 <USBH_HID_DS3Decode>:


static USBH_StatusTypeDef USBH_HID_DS3Decode(USBH_HandleTypeDef *phost)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  int x;

  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	60bb      	str	r3, [r7, #8]
  if(HID_Handle->length == 0)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	8b1b      	ldrh	r3, [r3, #24]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <USBH_HID_DS3Decode+0x1e>
  {
    return USBH_FAIL;
 800596a:	2302      	movs	r3, #2
 800596c:	e027      	b.n	80059be <USBH_HID_DS3Decode+0x6e>
  }
  /*Fill report */
  if(fifo_read(&HID_Handle->fifo, &ds3_report_data, HID_Handle->length) ==  HID_Handle->length)
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f103 0008 	add.w	r0, r3, #8
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	8b1b      	ldrh	r3, [r3, #24]
 8005978:	461a      	mov	r2, r3
 800597a:	4913      	ldr	r1, [pc, #76]	; (80059c8 <USBH_HID_DS3Decode+0x78>)
 800597c:	f7ff fc85 	bl	800528a <fifo_read>
 8005980:	4603      	mov	r3, r0
 8005982:	461a      	mov	r2, r3
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	8b1b      	ldrh	r3, [r3, #24]
 8005988:	429a      	cmp	r2, r3
 800598a:	d117      	bne.n	80059bc <USBH_HID_DS3Decode+0x6c>
  {
	for(x=0; x < sizeof(HID_DS3_Info_TypeDef); x++)
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e00f      	b.n	80059b2 <USBH_HID_DS3Decode+0x62>
	{
		ds3_data.data[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ds3_byte, x);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	4619      	mov	r1, r3
 8005998:	480c      	ldr	r0, [pc, #48]	; (80059cc <USBH_HID_DS3Decode+0x7c>)
 800599a:	f000 f95b 	bl	8005c54 <HID_ReadItem>
 800599e:	4603      	mov	r3, r0
 80059a0:	b2d9      	uxtb	r1, r3
 80059a2:	4a0b      	ldr	r2, [pc, #44]	; (80059d0 <USBH_HID_DS3Decode+0x80>)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	460a      	mov	r2, r1
 80059aa:	701a      	strb	r2, [r3, #0]
	for(x=0; x < sizeof(HID_DS3_Info_TypeDef); x++)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3301      	adds	r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b2f      	cmp	r3, #47	; 0x2f
 80059b6:	d9ec      	bls.n	8005992 <USBH_HID_DS3Decode+0x42>
	}

    return USBH_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	e000      	b.n	80059be <USBH_HID_DS3Decode+0x6e>
  }
  return   USBH_FAIL;
 80059bc:	2302      	movs	r3, #2
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20000120 	.word	0x20000120
 80059cc:	08008e68 	.word	0x08008e68
 80059d0:	20000150 	.word	0x20000150

080059d4 <USBH_HID_GetDS3Info>:

HID_DS3_Info_TypeDef *USBH_HID_GetDS3Info(USBH_HandleTypeDef *phost)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 if(USBH_HID_DS3Decode(phost) == USBH_OK)
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff ffb7 	bl	8005950 <USBH_HID_DS3Decode>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <USBH_HID_GetDS3Info+0x18>
 {
  return &ds3_data;
 80059e8:	4b03      	ldr	r3, [pc, #12]	; (80059f8 <USBH_HID_GetDS3Info+0x24>)
 80059ea:	e000      	b.n	80059ee <USBH_HID_GetDS3Info+0x1a>
 }
 else
 {
  return NULL;
 80059ec:	2300      	movs	r3, #0
 }
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000150 	.word	0x20000150

080059fc <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;  
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	60bb      	str	r3, [r7, #8]
    
  keybd_info.lctrl=keybd_info.lshift= 0;
 8005a0e:	4b21      	ldr	r3, [pc, #132]	; (8005a94 <USBH_HID_KeybdInit+0x98>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	709a      	strb	r2, [r3, #2]
 8005a14:	4b1f      	ldr	r3, [pc, #124]	; (8005a94 <USBH_HID_KeybdInit+0x98>)
 8005a16:	789a      	ldrb	r2, [r3, #2]
 8005a18:	4b1e      	ldr	r3, [pc, #120]	; (8005a94 <USBH_HID_KeybdInit+0x98>)
 8005a1a:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt=keybd_info.lgui= 0;
 8005a1c:	4b1d      	ldr	r3, [pc, #116]	; (8005a94 <USBH_HID_KeybdInit+0x98>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	711a      	strb	r2, [r3, #4]
 8005a22:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <USBH_HID_KeybdInit+0x98>)
 8005a24:	791a      	ldrb	r2, [r3, #4]
 8005a26:	4b1b      	ldr	r3, [pc, #108]	; (8005a94 <USBH_HID_KeybdInit+0x98>)
 8005a28:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl=keybd_info.rshift= 0;
 8005a2a:	4b1a      	ldr	r3, [pc, #104]	; (8005a94 <USBH_HID_KeybdInit+0x98>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	719a      	strb	r2, [r3, #6]
 8005a30:	4b18      	ldr	r3, [pc, #96]	; (8005a94 <USBH_HID_KeybdInit+0x98>)
 8005a32:	799a      	ldrb	r2, [r3, #6]
 8005a34:	4b17      	ldr	r3, [pc, #92]	; (8005a94 <USBH_HID_KeybdInit+0x98>)
 8005a36:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt=keybd_info.rgui=0;
 8005a38:	4b16      	ldr	r3, [pc, #88]	; (8005a94 <USBH_HID_KeybdInit+0x98>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	721a      	strb	r2, [r3, #8]
 8005a3e:	4b15      	ldr	r3, [pc, #84]	; (8005a94 <USBH_HID_KeybdInit+0x98>)
 8005a40:	7a1a      	ldrb	r2, [r3, #8]
 8005a42:	4b14      	ldr	r3, [pc, #80]	; (8005a94 <USBH_HID_KeybdInit+0x98>)
 8005a44:	71da      	strb	r2, [r3, #7]
  
  
  for(x=0; x< (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
 8005a46:	2300      	movs	r3, #0
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	e007      	b.n	8005a5c <USBH_HID_KeybdInit+0x60>
  {
    keybd_report_data[x]=0;
 8005a4c:	4a12      	ldr	r2, [pc, #72]	; (8005a98 <USBH_HID_KeybdInit+0x9c>)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2100      	movs	r1, #0
 8005a52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(x=0; x< (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d9f4      	bls.n	8005a4c <USBH_HID_KeybdInit+0x50>
  }
  
  if(HID_Handle->length > (sizeof(keybd_report_data)/sizeof(uint32_t)))
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	8b1b      	ldrh	r3, [r3, #24]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d902      	bls.n	8005a70 <USBH_HID_KeybdInit+0x74>
  {
    HID_Handle->length = (sizeof(keybd_report_data)/sizeof(uint32_t));
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t*)keybd_report_data;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	4a09      	ldr	r2, [pc, #36]	; (8005a98 <USBH_HID_KeybdInit+0x9c>)
 8005a74:	615a      	str	r2, [r3, #20]
  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f103 0008 	add.w	r0, r3, #8
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005a82:	2250      	movs	r2, #80	; 0x50
 8005a84:	4619      	mov	r1, r3
 8005a86:	f7ff fbe4 	bl	8005252 <fifo_init>
  
  return USBH_OK;    
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20000188 	.word	0x20000188
 8005a98:	20000180 	.word	0x20000180

08005a9c <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  if(USBH_HID_KeybdDecode(phost) == USBH_OK)
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f80d 	bl	8005ac4 <USBH_HID_KeybdDecode>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <USBH_HID_GetKeybdInfo+0x18>
 {
  return &keybd_info;
 8005ab0:	4b03      	ldr	r3, [pc, #12]	; (8005ac0 <USBH_HID_GetKeybdInfo+0x24>)
 8005ab2:	e000      	b.n	8005ab6 <USBH_HID_GetKeybdInfo+0x1a>
 }
 else
 {
  return NULL; 
 8005ab4:	2300      	movs	r3, #0
 }  
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20000188 	.word	0x20000188

08005ac4 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 8005ac4:	b590      	push	{r4, r7, lr}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint8_t x;
  
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	60bb      	str	r3, [r7, #8]
  if(HID_Handle->length == 0)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	8b1b      	ldrh	r3, [r3, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e065      	b.n	8005bae <USBH_HID_KeybdDecode+0xea>
  }
  /*Fill report */
  if(fifo_read(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f103 0008 	add.w	r0, r3, #8
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	8b1b      	ldrh	r3, [r3, #24]
 8005aec:	461a      	mov	r2, r3
 8005aee:	4932      	ldr	r1, [pc, #200]	; (8005bb8 <USBH_HID_KeybdDecode+0xf4>)
 8005af0:	f7ff fbcb 	bl	800528a <fifo_read>
 8005af4:	4603      	mov	r3, r0
 8005af6:	461a      	mov	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	8b1b      	ldrh	r3, [r3, #24]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d155      	bne.n	8005bac <USBH_HID_KeybdDecode+0xe8>
  {
    
    keybd_info.lctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0);
 8005b00:	2100      	movs	r1, #0
 8005b02:	482e      	ldr	r0, [pc, #184]	; (8005bbc <USBH_HID_KeybdDecode+0xf8>)
 8005b04:	f000 f8a6 	bl	8005c54 <HID_ReadItem>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	4b2c      	ldr	r3, [pc, #176]	; (8005bc0 <USBH_HID_KeybdDecode+0xfc>)
 8005b0e:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0);
 8005b10:	2100      	movs	r1, #0
 8005b12:	482c      	ldr	r0, [pc, #176]	; (8005bc4 <USBH_HID_KeybdDecode+0x100>)
 8005b14:	f000 f89e 	bl	8005c54 <HID_ReadItem>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	4b28      	ldr	r3, [pc, #160]	; (8005bc0 <USBH_HID_KeybdDecode+0xfc>)
 8005b1e:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0);
 8005b20:	2100      	movs	r1, #0
 8005b22:	4829      	ldr	r0, [pc, #164]	; (8005bc8 <USBH_HID_KeybdDecode+0x104>)
 8005b24:	f000 f896 	bl	8005c54 <HID_ReadItem>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <USBH_HID_KeybdDecode+0xfc>)
 8005b2e:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0);
 8005b30:	2100      	movs	r1, #0
 8005b32:	4826      	ldr	r0, [pc, #152]	; (8005bcc <USBH_HID_KeybdDecode+0x108>)
 8005b34:	f000 f88e 	bl	8005c54 <HID_ReadItem>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	4b20      	ldr	r3, [pc, #128]	; (8005bc0 <USBH_HID_KeybdDecode+0xfc>)
 8005b3e:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0);
 8005b40:	2100      	movs	r1, #0
 8005b42:	4823      	ldr	r0, [pc, #140]	; (8005bd0 <USBH_HID_KeybdDecode+0x10c>)
 8005b44:	f000 f886 	bl	8005c54 <HID_ReadItem>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	4b1c      	ldr	r3, [pc, #112]	; (8005bc0 <USBH_HID_KeybdDecode+0xfc>)
 8005b4e:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0);
 8005b50:	2100      	movs	r1, #0
 8005b52:	4820      	ldr	r0, [pc, #128]	; (8005bd4 <USBH_HID_KeybdDecode+0x110>)
 8005b54:	f000 f87e 	bl	8005c54 <HID_ReadItem>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	4b18      	ldr	r3, [pc, #96]	; (8005bc0 <USBH_HID_KeybdDecode+0xfc>)
 8005b5e:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0);
 8005b60:	2100      	movs	r1, #0
 8005b62:	481d      	ldr	r0, [pc, #116]	; (8005bd8 <USBH_HID_KeybdDecode+0x114>)
 8005b64:	f000 f876 	bl	8005c54 <HID_ReadItem>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	4b14      	ldr	r3, [pc, #80]	; (8005bc0 <USBH_HID_KeybdDecode+0xfc>)
 8005b6e:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0);
 8005b70:	2100      	movs	r1, #0
 8005b72:	481a      	ldr	r0, [pc, #104]	; (8005bdc <USBH_HID_KeybdDecode+0x118>)
 8005b74:	f000 f86e 	bl	8005c54 <HID_ReadItem>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	4b10      	ldr	r3, [pc, #64]	; (8005bc0 <USBH_HID_KeybdDecode+0xfc>)
 8005b7e:	721a      	strb	r2, [r3, #8]
    
    for(x=0; x < sizeof(keybd_info.keys); x++)
 8005b80:	2300      	movs	r3, #0
 8005b82:	73fb      	strb	r3, [r7, #15]
 8005b84:	e00d      	b.n	8005ba2 <USBH_HID_KeybdDecode+0xde>
    {    
      keybd_info.keys[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 8005b86:	7bfc      	ldrb	r4, [r7, #15]
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4814      	ldr	r0, [pc, #80]	; (8005be0 <USBH_HID_KeybdDecode+0x11c>)
 8005b8e:	f000 f861 	bl	8005c54 <HID_ReadItem>
 8005b92:	4603      	mov	r3, r0
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <USBH_HID_KeybdDecode+0xfc>)
 8005b98:	4423      	add	r3, r4
 8005b9a:	725a      	strb	r2, [r3, #9]
    for(x=0; x < sizeof(keybd_info.keys); x++)
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	73fb      	strb	r3, [r7, #15]
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
 8005ba4:	2b05      	cmp	r3, #5
 8005ba6:	d9ee      	bls.n	8005b86 <USBH_HID_KeybdDecode+0xc2>
    }
    
    return USBH_OK; 
 8005ba8:	2300      	movs	r3, #0
 8005baa:	e000      	b.n	8005bae <USBH_HID_KeybdDecode+0xea>
  }
  return   USBH_FAIL;  
 8005bac:	2302      	movs	r3, #2
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd90      	pop	{r4, r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000180 	.word	0x20000180
 8005bbc:	08008e88 	.word	0x08008e88
 8005bc0:	20000188 	.word	0x20000188
 8005bc4:	08008ea8 	.word	0x08008ea8
 8005bc8:	08008ec8 	.word	0x08008ec8
 8005bcc:	08008ee8 	.word	0x08008ee8
 8005bd0:	08008f08 	.word	0x08008f08
 8005bd4:	08008f28 	.word	0x08008f28
 8005bd8:	08008f48 	.word	0x08008f48
 8005bdc:	08008f68 	.word	0x08008f68
 8005be0:	08008f88 	.word	0x08008f88

08005be4 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	60fb      	str	r3, [r7, #12]

  mouse_info.x=0;
 8005bf6:	4b15      	ldr	r3, [pc, #84]	; (8005c4c <USBH_HID_MouseInit+0x68>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	701a      	strb	r2, [r3, #0]
  mouse_info.y=0;
 8005bfc:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <USBH_HID_MouseInit+0x68>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0]=0;
 8005c02:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <USBH_HID_MouseInit+0x68>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1]=0;
 8005c08:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <USBH_HID_MouseInit+0x68>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2]=0;
 8005c0e:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <USBH_HID_MouseInit+0x68>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	711a      	strb	r2, [r3, #4]
  
  mouse_report_data[0]=0;
 8005c14:	4b0e      	ldr	r3, [pc, #56]	; (8005c50 <USBH_HID_MouseInit+0x6c>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
  
  if(HID_Handle->length > sizeof(mouse_report_data))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8b1b      	ldrh	r3, [r3, #24]
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d902      	bls.n	8005c28 <USBH_HID_MouseInit+0x44>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2204      	movs	r2, #4
 8005c26:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)mouse_report_data;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <USBH_HID_MouseInit+0x6c>)
 8005c2c:	615a      	str	r2, [r3, #20]
  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f103 0008 	add.w	r0, r3, #8
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005c3a:	2228      	movs	r2, #40	; 0x28
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	f7ff fb08 	bl	8005252 <fifo_init>

  return USBH_OK;  
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20000198 	.word	0x20000198
 8005c50:	200001a0 	.word	0x200001a0

08005c54 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b089      	sub	sp, #36	; 0x24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	70fb      	strb	r3, [r7, #3]
  uint32_t val=0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61fb      	str	r3, [r7, #28]
  uint32_t x=0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data=ri->data;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	617b      	str	r3, [r7, #20]
  uint8_t shift=ri->shift;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	7a1b      	ldrb	r3, [r3, #8]
 8005c72:	74fb      	strb	r3, [r7, #19]
  
  /* get the logical value of the item */
  
  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	7a5b      	ldrb	r3, [r3, #9]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01a      	beq.n	8005cb2 <HID_ReadItem+0x5e>
  { 
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	7a5b      	ldrb	r3, [r3, #9]
 8005c80:	78fa      	ldrb	r2, [r7, #3]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d301      	bcc.n	8005c8a <HID_ReadItem+0x36>
    {
      return(0);
 8005c86:	2300      	movs	r3, #0
 8005c88:	e07a      	b.n	8005d80 <HID_ReadItem+0x12c>
    }
    
    /* calculate bit offset */
    bofs = ndx*ri->size;
 8005c8a:	78fb      	ldrb	r3, [r7, #3]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6852      	ldr	r2, [r2, #4]
 8005c90:	fb02 f303 	mul.w	r3, r2, r3
 8005c94:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 8005c96:	7cfb      	ldrb	r3, [r7, #19]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */    
    data+=bofs/8;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	08db      	lsrs	r3, r3, #3
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
    shift=(uint8_t)(bofs%8);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for(x=0; x < ((ri->size & 0x7) ? (ri->size/8)+1 : (ri->size/8)); x++)
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	e00a      	b.n	8005cce <HID_ReadItem+0x7a>
  {
    val=(uint32_t)(*data << (x*8));
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc6:	61fb      	str	r3, [r7, #28]
  for(x=0; x < ((ri->size & 0x7) ? (ri->size/8)+1 : (ri->size/8)); x++)
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	61bb      	str	r3, [r7, #24]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d004      	beq.n	8005ce4 <HID_ReadItem+0x90>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	08db      	lsrs	r3, r3, #3
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	e002      	b.n	8005cea <HID_ReadItem+0x96>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	08db      	lsrs	r3, r3, #3
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d8e3      	bhi.n	8005cb8 <HID_ReadItem+0x64>
  }    
  val=(val >> shift) & ((1<<ri->size)-1);
 8005cf0:	7cfb      	ldrb	r3, [r7, #19]
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6852      	ldr	r2, [r2, #4]
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8005d02:	3a01      	subs	r2, #1
 8005d04:	4013      	ands	r3, r2
 8005d06:	61fb      	str	r3, [r7, #28]
  
  if (val < ri->logical_min || val > ri->logical_max)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d804      	bhi.n	8005d1c <HID_ReadItem+0xc8>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d201      	bcs.n	8005d20 <HID_ReadItem+0xcc>
  {
    return(0);
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e02f      	b.n	8005d80 <HID_ReadItem+0x12c>
  }
  
  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1<<(ri->size-1))))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	7a9b      	ldrb	r3, [r3, #10]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d020      	beq.n	8005d6a <HID_ReadItem+0x116>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	2201      	movs	r2, #1
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d015      	beq.n	8005d6a <HID_ReadItem+0x116>
  {
    /* yes, so sign extend value to 32 bits. */
    int vs=(int)((-1 & ~((1<<(ri->size))-1)) | val);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	425b      	negs	r3, r3
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60bb      	str	r3, [r7, #8]
    
    if(ri->resolution == 1)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d101      	bne.n	8005d5e <HID_ReadItem+0x10a>
    {
      return((uint32_t)vs);
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	e010      	b.n	8005d80 <HID_ReadItem+0x12c>
    }
    return((uint32_t)(vs*ri->resolution));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	fb02 f303 	mul.w	r3, r2, r3
 8005d68:	e00a      	b.n	8005d80 <HID_ReadItem+0x12c>
  }
  else
  {
    if(ri->resolution == 1)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d101      	bne.n	8005d76 <HID_ReadItem+0x122>
    {
      return(val);
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	e004      	b.n	8005d80 <HID_ReadItem+0x12c>
    }
    return(val*ri->resolution);    
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	fb02 f303 	mul.w	r3, r2, r3
  }  
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3724      	adds	r7, #36	; 0x24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <parseMessage>:
/** @defgroup USBH_XPAD_CORE_Private_Functions
* @{
*/

void parseMessage(USBH_HandleTypeDef *phost)
{
 8005d8c:	b590      	push	{r4, r7, lr}
 8005d8e:	b08f      	sub	sp, #60	; 0x3c
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
	XPAD_HandleTypeDef *XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *data = report;
 8005d9e:	4b62      	ldr	r3, [pc, #392]	; (8005f28 <parseMessage+0x19c>)
 8005da0:	637b      	str	r3, [r7, #52]	; 0x34

    switch (XPAD_Handle->xpad_type) {
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	f200 83ca 	bhi.w	8006544 <parseMessage+0x7b8>
 8005db0:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <parseMessage+0x2c>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005dc9 	.word	0x08005dc9
 8005dbc:	08005e93 	.word	0x08005e93
 8005dc0:	08005e99 	.word	0x08005e99
 8005dc4:	08005f49 	.word	0x08005f49
    case XPAD_ORIGINAL:
        buttons = ((uint32_t)report[3] << 8) | report[2];
 8005dc8:	4b57      	ldr	r3, [pc, #348]	; (8005f28 <parseMessage+0x19c>)
 8005dca:	78db      	ldrb	r3, [r3, #3]
 8005dcc:	021b      	lsls	r3, r3, #8
 8005dce:	4a56      	ldr	r2, [pc, #344]	; (8005f28 <parseMessage+0x19c>)
 8005dd0:	7892      	ldrb	r2, [r2, #2]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	4a55      	ldr	r2, [pc, #340]	; (8005f2c <parseMessage+0x1a0>)
 8005dd6:	6013      	str	r3, [r2, #0]
        if (report[4]) buttons |= XPAD_PAD_A;
 8005dd8:	4b53      	ldr	r3, [pc, #332]	; (8005f28 <parseMessage+0x19c>)
 8005dda:	791b      	ldrb	r3, [r3, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d005      	beq.n	8005dec <parseMessage+0x60>
 8005de0:	4b52      	ldr	r3, [pc, #328]	; (8005f2c <parseMessage+0x1a0>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005de8:	4a50      	ldr	r2, [pc, #320]	; (8005f2c <parseMessage+0x1a0>)
 8005dea:	6013      	str	r3, [r2, #0]
        if (report[5]) buttons |= XPAD_PAD_B;
 8005dec:	4b4e      	ldr	r3, [pc, #312]	; (8005f28 <parseMessage+0x19c>)
 8005dee:	795b      	ldrb	r3, [r3, #5]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d005      	beq.n	8005e00 <parseMessage+0x74>
 8005df4:	4b4d      	ldr	r3, [pc, #308]	; (8005f2c <parseMessage+0x1a0>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005dfc:	4a4b      	ldr	r2, [pc, #300]	; (8005f2c <parseMessage+0x1a0>)
 8005dfe:	6013      	str	r3, [r2, #0]
        if (report[6]) buttons |= XPAD_PAD_X;
 8005e00:	4b49      	ldr	r3, [pc, #292]	; (8005f28 <parseMessage+0x19c>)
 8005e02:	799b      	ldrb	r3, [r3, #6]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <parseMessage+0x88>
 8005e08:	4b48      	ldr	r3, [pc, #288]	; (8005f2c <parseMessage+0x1a0>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e10:	4a46      	ldr	r2, [pc, #280]	; (8005f2c <parseMessage+0x1a0>)
 8005e12:	6013      	str	r3, [r2, #0]
        if (report[7]) buttons |= XPAD_PAD_Y;
 8005e14:	4b44      	ldr	r3, [pc, #272]	; (8005f28 <parseMessage+0x19c>)
 8005e16:	79db      	ldrb	r3, [r3, #7]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <parseMessage+0x9c>
 8005e1c:	4b43      	ldr	r3, [pc, #268]	; (8005f2c <parseMessage+0x1a0>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e24:	4a41      	ldr	r2, [pc, #260]	; (8005f2c <parseMessage+0x1a0>)
 8005e26:	6013      	str	r3, [r2, #0]
        trigger_l = data[10];
 8005e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2a:	7a9a      	ldrb	r2, [r3, #10]
 8005e2c:	4b40      	ldr	r3, [pc, #256]	; (8005f30 <parseMessage+0x1a4>)
 8005e2e:	701a      	strb	r2, [r3, #0]
        trigger_r = data[11];
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	7ada      	ldrb	r2, [r3, #11]
 8005e34:	4b3f      	ldr	r3, [pc, #252]	; (8005f34 <parseMessage+0x1a8>)
 8005e36:	701a      	strb	r2, [r3, #0]

        stick_lx = ((int16_t)report[13] << 8) | report[12];
 8005e38:	4b3b      	ldr	r3, [pc, #236]	; (8005f28 <parseMessage+0x19c>)
 8005e3a:	7b5b      	ldrb	r3, [r3, #13]
 8005e3c:	021b      	lsls	r3, r3, #8
 8005e3e:	b21a      	sxth	r2, r3
 8005e40:	4b39      	ldr	r3, [pc, #228]	; (8005f28 <parseMessage+0x19c>)
 8005e42:	7b1b      	ldrb	r3, [r3, #12]
 8005e44:	b21b      	sxth	r3, r3
 8005e46:	4313      	orrs	r3, r2
 8005e48:	b21a      	sxth	r2, r3
 8005e4a:	4b3b      	ldr	r3, [pc, #236]	; (8005f38 <parseMessage+0x1ac>)
 8005e4c:	801a      	strh	r2, [r3, #0]
        stick_ly = ((int16_t)report[15] << 8) | report[14];
 8005e4e:	4b36      	ldr	r3, [pc, #216]	; (8005f28 <parseMessage+0x19c>)
 8005e50:	7bdb      	ldrb	r3, [r3, #15]
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	b21a      	sxth	r2, r3
 8005e56:	4b34      	ldr	r3, [pc, #208]	; (8005f28 <parseMessage+0x19c>)
 8005e58:	7b9b      	ldrb	r3, [r3, #14]
 8005e5a:	b21b      	sxth	r3, r3
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	b21a      	sxth	r2, r3
 8005e60:	4b36      	ldr	r3, [pc, #216]	; (8005f3c <parseMessage+0x1b0>)
 8005e62:	801a      	strh	r2, [r3, #0]
        stick_rx = ((int16_t)report[17] << 8) | report[16];
 8005e64:	4b30      	ldr	r3, [pc, #192]	; (8005f28 <parseMessage+0x19c>)
 8005e66:	7c5b      	ldrb	r3, [r3, #17]
 8005e68:	021b      	lsls	r3, r3, #8
 8005e6a:	b21a      	sxth	r2, r3
 8005e6c:	4b2e      	ldr	r3, [pc, #184]	; (8005f28 <parseMessage+0x19c>)
 8005e6e:	7c1b      	ldrb	r3, [r3, #16]
 8005e70:	b21b      	sxth	r3, r3
 8005e72:	4313      	orrs	r3, r2
 8005e74:	b21a      	sxth	r2, r3
 8005e76:	4b32      	ldr	r3, [pc, #200]	; (8005f40 <parseMessage+0x1b4>)
 8005e78:	801a      	strh	r2, [r3, #0]
        stick_ry = ((int16_t)report[19] << 8) | report[18];
 8005e7a:	4b2b      	ldr	r3, [pc, #172]	; (8005f28 <parseMessage+0x19c>)
 8005e7c:	7cdb      	ldrb	r3, [r3, #19]
 8005e7e:	021b      	lsls	r3, r3, #8
 8005e80:	b21a      	sxth	r2, r3
 8005e82:	4b29      	ldr	r3, [pc, #164]	; (8005f28 <parseMessage+0x19c>)
 8005e84:	7c9b      	ldrb	r3, [r3, #18]
 8005e86:	b21b      	sxth	r3, r3
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	b21a      	sxth	r2, r3
 8005e8c:	4b2d      	ldr	r3, [pc, #180]	; (8005f44 <parseMessage+0x1b8>)
 8005e8e:	801a      	strh	r2, [r3, #0]
        break;
 8005e90:	e0c7      	b.n	8006022 <parseMessage+0x296>
    case XPAD_360_WIRELESS:
        data += 4;
 8005e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e94:	3304      	adds	r3, #4
 8005e96:	637b      	str	r3, [r7, #52]	; 0x34
    case XPAD_360_WIRED:
        buttons = ((uint32_t)data[3] << 8) | data[2];
 8005e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9a:	3303      	adds	r3, #3
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	021b      	lsls	r3, r3, #8
 8005ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ea2:	3202      	adds	r2, #2
 8005ea4:	7812      	ldrb	r2, [r2, #0]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	4a20      	ldr	r2, [pc, #128]	; (8005f2c <parseMessage+0x1a0>)
 8005eaa:	6013      	str	r3, [r2, #0]
        trigger_l = data[4];
 8005eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eae:	791a      	ldrb	r2, [r3, #4]
 8005eb0:	4b1f      	ldr	r3, [pc, #124]	; (8005f30 <parseMessage+0x1a4>)
 8005eb2:	701a      	strb	r2, [r3, #0]
        trigger_r = data[5];
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb6:	795a      	ldrb	r2, [r3, #5]
 8005eb8:	4b1e      	ldr	r3, [pc, #120]	; (8005f34 <parseMessage+0x1a8>)
 8005eba:	701a      	strb	r2, [r3, #0]

        stick_lx = ((int16_t)data[7] << 8) | data[6];
 8005ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebe:	3307      	adds	r3, #7
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	021b      	lsls	r3, r3, #8
 8005ec4:	b21a      	sxth	r2, r3
 8005ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec8:	3306      	adds	r3, #6
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	b21b      	sxth	r3, r3
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	b21a      	sxth	r2, r3
 8005ed2:	4b19      	ldr	r3, [pc, #100]	; (8005f38 <parseMessage+0x1ac>)
 8005ed4:	801a      	strh	r2, [r3, #0]
        stick_ly = ((int16_t)data[9] << 8) | data[8];
 8005ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed8:	3309      	adds	r3, #9
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	021b      	lsls	r3, r3, #8
 8005ede:	b21a      	sxth	r2, r3
 8005ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee2:	3308      	adds	r3, #8
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	b21b      	sxth	r3, r3
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	b21a      	sxth	r2, r3
 8005eec:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <parseMessage+0x1b0>)
 8005eee:	801a      	strh	r2, [r3, #0]
        stick_rx = ((int16_t)data[11] << 8) | data[10];
 8005ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef2:	330b      	adds	r3, #11
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	b21a      	sxth	r2, r3
 8005efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efc:	330a      	adds	r3, #10
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	b21b      	sxth	r3, r3
 8005f02:	4313      	orrs	r3, r2
 8005f04:	b21a      	sxth	r2, r3
 8005f06:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <parseMessage+0x1b4>)
 8005f08:	801a      	strh	r2, [r3, #0]
        stick_ry = ((int16_t)data[13] << 8) | data[12];
 8005f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0c:	330d      	adds	r3, #13
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	021b      	lsls	r3, r3, #8
 8005f12:	b21a      	sxth	r2, r3
 8005f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f16:	330c      	adds	r3, #12
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	b21b      	sxth	r3, r3
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	b21a      	sxth	r2, r3
 8005f20:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <parseMessage+0x1b8>)
 8005f22:	801a      	strh	r2, [r3, #0]
        break;
 8005f24:	e07d      	b.n	8006022 <parseMessage+0x296>
 8005f26:	bf00      	nop
 8005f28:	200001b4 	.word	0x200001b4
 8005f2c:	200001ac 	.word	0x200001ac
 8005f30:	200001a6 	.word	0x200001a6
 8005f34:	200001b0 	.word	0x200001b0
 8005f38:	200001aa 	.word	0x200001aa
 8005f3c:	200001a4 	.word	0x200001a4
 8005f40:	200001d4 	.word	0x200001d4
 8005f44:	200001a8 	.word	0x200001a8
    case XPAD_XBONE:
        buttons = 0;
 8005f48:	4bb2      	ldr	r3, [pc, #712]	; (8006214 <parseMessage+0x488>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
        buttons = (report[4] & 0x0C) << 2; // correctly place start and back
 8005f4e:	4bb2      	ldr	r3, [pc, #712]	; (8006218 <parseMessage+0x48c>)
 8005f50:	791b      	ldrb	r3, [r3, #4]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f58:	4aae      	ldr	r2, [pc, #696]	; (8006214 <parseMessage+0x488>)
 8005f5a:	6013      	str	r3, [r2, #0]
        buttons |= (report[4] & 0xF0) << 8; // correctly place AXYB
 8005f5c:	4bae      	ldr	r3, [pc, #696]	; (8006218 <parseMessage+0x48c>)
 8005f5e:	791b      	ldrb	r3, [r3, #4]
 8005f60:	021b      	lsls	r3, r3, #8
 8005f62:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005f66:	4bab      	ldr	r3, [pc, #684]	; (8006214 <parseMessage+0x488>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	4aa9      	ldr	r2, [pc, #676]	; (8006214 <parseMessage+0x488>)
 8005f6e:	6013      	str	r3, [r2, #0]
        buttons |= report[5] & 0x0F; // correctly place DPad
 8005f70:	4ba9      	ldr	r3, [pc, #676]	; (8006218 <parseMessage+0x48c>)
 8005f72:	795b      	ldrb	r3, [r3, #5]
 8005f74:	f003 020f 	and.w	r2, r3, #15
 8005f78:	4ba6      	ldr	r3, [pc, #664]	; (8006214 <parseMessage+0x488>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	4aa5      	ldr	r2, [pc, #660]	; (8006214 <parseMessage+0x488>)
 8005f80:	6013      	str	r3, [r2, #0]
        buttons |= (report[5] & 0x30) << 4; // correctly place bumpers
 8005f82:	4ba5      	ldr	r3, [pc, #660]	; (8006218 <parseMessage+0x48c>)
 8005f84:	795b      	ldrb	r3, [r3, #5]
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005f8c:	4ba1      	ldr	r3, [pc, #644]	; (8006214 <parseMessage+0x488>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	4aa0      	ldr	r2, [pc, #640]	; (8006214 <parseMessage+0x488>)
 8005f94:	6013      	str	r3, [r2, #0]
        buttons |= (report[5] & 0xC0); // correctly analog stick buttons
 8005f96:	4ba0      	ldr	r3, [pc, #640]	; (8006218 <parseMessage+0x48c>)
 8005f98:	795b      	ldrb	r3, [r3, #5]
 8005f9a:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8005f9e:	4b9d      	ldr	r3, [pc, #628]	; (8006214 <parseMessage+0x488>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	4a9b      	ldr	r2, [pc, #620]	; (8006214 <parseMessage+0x488>)
 8005fa6:	6013      	str	r3, [r2, #0]

        //TODO: FIX TRIGGERS, PROBABLY OVERFLOWING
        trigger_l = ((uint32_t)report[7] << 8) | report[6]; //6 and 7
 8005fa8:	4b9b      	ldr	r3, [pc, #620]	; (8006218 <parseMessage+0x48c>)
 8005faa:	799a      	ldrb	r2, [r3, #6]
 8005fac:	4b9b      	ldr	r3, [pc, #620]	; (800621c <parseMessage+0x490>)
 8005fae:	701a      	strb	r2, [r3, #0]
        trigger_r = ((uint32_t)report[9] << 8) | report[8]; // 8 and 9
 8005fb0:	4b99      	ldr	r3, [pc, #612]	; (8006218 <parseMessage+0x48c>)
 8005fb2:	7a1a      	ldrb	r2, [r3, #8]
 8005fb4:	4b9a      	ldr	r3, [pc, #616]	; (8006220 <parseMessage+0x494>)
 8005fb6:	701a      	strb	r2, [r3, #0]

        stick_lx = ((int16_t)data[11] << 8) | data[10];
 8005fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fba:	330b      	adds	r3, #11
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	b21a      	sxth	r2, r3
 8005fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc4:	330a      	adds	r3, #10
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	b21b      	sxth	r3, r3
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	b21a      	sxth	r2, r3
 8005fce:	4b95      	ldr	r3, [pc, #596]	; (8006224 <parseMessage+0x498>)
 8005fd0:	801a      	strh	r2, [r3, #0]
        stick_ly = ((int16_t)data[13] << 8) | data[12];
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd4:	330d      	adds	r3, #13
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	021b      	lsls	r3, r3, #8
 8005fda:	b21a      	sxth	r2, r3
 8005fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fde:	330c      	adds	r3, #12
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	b21b      	sxth	r3, r3
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	b21a      	sxth	r2, r3
 8005fe8:	4b8f      	ldr	r3, [pc, #572]	; (8006228 <parseMessage+0x49c>)
 8005fea:	801a      	strh	r2, [r3, #0]
        stick_rx = ((int16_t)data[15] << 8) | data[14];
 8005fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fee:	330f      	adds	r3, #15
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	b21a      	sxth	r2, r3
 8005ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff8:	330e      	adds	r3, #14
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	b21b      	sxth	r3, r3
 8005ffe:	4313      	orrs	r3, r2
 8006000:	b21a      	sxth	r2, r3
 8006002:	4b8a      	ldr	r3, [pc, #552]	; (800622c <parseMessage+0x4a0>)
 8006004:	801a      	strh	r2, [r3, #0]
        stick_ry = ((int16_t)data[17] << 8) | data[16];
 8006006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006008:	3311      	adds	r3, #17
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	021b      	lsls	r3, r3, #8
 800600e:	b21a      	sxth	r2, r3
 8006010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006012:	3310      	adds	r3, #16
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	b21b      	sxth	r3, r3
 8006018:	4313      	orrs	r3, r2
 800601a:	b21a      	sxth	r2, r3
 800601c:	4b84      	ldr	r3, [pc, #528]	; (8006230 <parseMessage+0x4a4>)
 800601e:	801a      	strh	r2, [r3, #0]

        break;
 8006020:	bf00      	nop
    default:
        return;
    }

    // NOW UPDATE THE CONTROLLER!
    AXYB=buttons>>12;
 8006022:	4b7c      	ldr	r3, [pc, #496]	; (8006214 <parseMessage+0x488>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	0b1b      	lsrs	r3, r3, #12
 8006028:	b2da      	uxtb	r2, r3
 800602a:	4b82      	ldr	r3, [pc, #520]	; (8006234 <parseMessage+0x4a8>)
 800602c:	701a      	strb	r2, [r3, #0]
    XLBRB=(buttons&0x0f00)>>8;
 800602e:	4b79      	ldr	r3, [pc, #484]	; (8006214 <parseMessage+0x488>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	0a1b      	lsrs	r3, r3, #8
 8006034:	b2db      	uxtb	r3, r3
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	b2da      	uxtb	r2, r3
 800603c:	4b7e      	ldr	r3, [pc, #504]	; (8006238 <parseMessage+0x4ac>)
 800603e:	701a      	strb	r2, [r3, #0]
    bkStrtLCRC=(buttons&0x00f0)>>4;
 8006040:	4b74      	ldr	r3, [pc, #464]	; (8006214 <parseMessage+0x488>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	091b      	lsrs	r3, r3, #4
 8006046:	b2db      	uxtb	r3, r3
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	b2da      	uxtb	r2, r3
 800604e:	4b7b      	ldr	r3, [pc, #492]	; (800623c <parseMessage+0x4b0>)
 8006050:	701a      	strb	r2, [r3, #0]
    DPad=buttons&0x000f;
 8006052:	4b70      	ldr	r3, [pc, #448]	; (8006214 <parseMessage+0x488>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	b2db      	uxtb	r3, r3
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	b2da      	uxtb	r2, r3
 800605e:	4b78      	ldr	r3, [pc, #480]	; (8006240 <parseMessage+0x4b4>)
 8006060:	701a      	strb	r2, [r3, #0]

    // normalize the trigger values to be 10 max
    Lt=trigger_l*tN;
 8006062:	4b6e      	ldr	r3, [pc, #440]	; (800621c <parseMessage+0x490>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800606e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8006244 <parseMessage+0x4b8>
 8006072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006076:	4b74      	ldr	r3, [pc, #464]	; (8006248 <parseMessage+0x4bc>)
 8006078:	edc3 7a00 	vstr	s15, [r3]
    Rt=trigger_r*tN;
 800607c:	4b68      	ldr	r3, [pc, #416]	; (8006220 <parseMessage+0x494>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	ee07 3a90 	vmov	s15, r3
 8006084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006088:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8006244 <parseMessage+0x4b8>
 800608c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006090:	4b6e      	ldr	r3, [pc, #440]	; (800624c <parseMessage+0x4c0>)
 8006092:	edc3 7a00 	vstr	s15, [r3]

    if(1) //used to check state variable for changing controls
    {
    	N64ControllerData new_data;
    	memset(&new_data,0,4); // clear controller state
 8006096:	f107 030c 	add.w	r3, r7, #12
 800609a:	2204      	movs	r2, #4
 800609c:	2100      	movs	r1, #0
 800609e:	4618      	mov	r0, r3
 80060a0:	f002 fde8 	bl	8008c74 <memset>

    	uint64_t buttons_and_triggers = buttons;
 80060a4:	4b5b      	ldr	r3, [pc, #364]	; (8006214 <parseMessage+0x488>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f04f 0400 	mov.w	r4, #0
 80060ac:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

    	if(Lt > TRIGGER_THRESHOLD)
 80060b0:	eddf 7a67 	vldr	s15, [pc, #412]	; 8006250 <parseMessage+0x4c4>
 80060b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060b8:	4b63      	ldr	r3, [pc, #396]	; (8006248 <parseMessage+0x4bc>)
 80060ba:	edd3 7a00 	vldr	s15, [r3]
 80060be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060c6:	d50b      	bpl.n	80060e0 <parseMessage+0x354>
    	{
    		buttons_and_triggers |= LT_MASK;
 80060c8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80060d4:	ea43 0301 	orr.w	r3, r3, r1
 80060d8:	ea44 0402 	orr.w	r4, r4, r2
 80060dc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    	}
    	if(Rt > TRIGGER_THRESHOLD)
 80060e0:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8006250 <parseMessage+0x4c4>
 80060e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060e8:	4b58      	ldr	r3, [pc, #352]	; (800624c <parseMessage+0x4c0>)
 80060ea:	edd3 7a00 	vldr	s15, [r3]
 80060ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f6:	d50b      	bpl.n	8006110 <parseMessage+0x384>
    	{
    		buttons_and_triggers |= RT_MASK;
 80060f8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80060fc:	f04f 0200 	mov.w	r2, #0
 8006100:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8006104:	ea43 0301 	orr.w	r3, r3, r1
 8006108:	ea44 0402 	orr.w	r4, r4, r2
 800610c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    	}

    	if(buttons_and_triggers & DUP_MASK)
 8006110:	f04f 0101 	mov.w	r1, #1
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800611c:	ea03 0301 	and.w	r3, r3, r1
 8006120:	ea04 0402 	and.w	r4, r4, r2
 8006124:	4323      	orrs	r3, r4
 8006126:	d003      	beq.n	8006130 <parseMessage+0x3a4>
    	{
    		new_data.up = 1;
 8006128:	7b3b      	ldrb	r3, [r7, #12]
 800612a:	f043 0310 	orr.w	r3, r3, #16
 800612e:	733b      	strb	r3, [r7, #12]
    	}
    	if(buttons_and_triggers & DDOWN_MASK)
 8006130:	f04f 0102 	mov.w	r1, #2
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800613c:	ea03 0301 	and.w	r3, r3, r1
 8006140:	ea04 0402 	and.w	r4, r4, r2
 8006144:	4323      	orrs	r3, r4
 8006146:	d003      	beq.n	8006150 <parseMessage+0x3c4>
    	{
    		new_data.down = 1;
 8006148:	7b3b      	ldrb	r3, [r7, #12]
 800614a:	f043 0320 	orr.w	r3, r3, #32
 800614e:	733b      	strb	r3, [r7, #12]
    	}
    	if(buttons_and_triggers & DLEFT_MASK)
 8006150:	f04f 0104 	mov.w	r1, #4
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800615c:	ea03 0301 	and.w	r3, r3, r1
 8006160:	ea04 0402 	and.w	r4, r4, r2
 8006164:	4323      	orrs	r3, r4
 8006166:	d003      	beq.n	8006170 <parseMessage+0x3e4>
    	{
    		new_data.left = 1;
 8006168:	7b3b      	ldrb	r3, [r7, #12]
 800616a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800616e:	733b      	strb	r3, [r7, #12]
    	}
    	if(buttons_and_triggers & DRIGHT_MASK)
 8006170:	f04f 0108 	mov.w	r1, #8
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800617c:	ea03 0301 	and.w	r3, r3, r1
 8006180:	ea04 0402 	and.w	r4, r4, r2
 8006184:	4323      	orrs	r3, r4
 8006186:	d003      	beq.n	8006190 <parseMessage+0x404>
    	{
    		new_data.right = 1;
 8006188:	7b3b      	ldrb	r3, [r7, #12]
 800618a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618e:	733b      	strb	r3, [r7, #12]
    	}
    	if(buttons_and_triggers & Y_MASK)
 8006190:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006194:	f04f 0200 	mov.w	r2, #0
 8006198:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800619c:	ea03 0301 	and.w	r3, r3, r1
 80061a0:	ea04 0402 	and.w	r4, r4, r2
 80061a4:	4323      	orrs	r3, r4
 80061a6:	d003      	beq.n	80061b0 <parseMessage+0x424>
    	{
    		new_data.c_up = 1;
 80061a8:	7b7b      	ldrb	r3, [r7, #13]
 80061aa:	f043 0310 	orr.w	r3, r3, #16
 80061ae:	737b      	strb	r3, [r7, #13]
    	}
    	if(buttons_and_triggers & xpc.c_right)
    	{
    		new_data.c_right = 1;
    	}*/
    	if(buttons_and_triggers & LB_MASK)
 80061b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80061bc:	ea03 0301 	and.w	r3, r3, r1
 80061c0:	ea04 0402 	and.w	r4, r4, r2
 80061c4:	4323      	orrs	r3, r4
 80061c6:	d003      	beq.n	80061d0 <parseMessage+0x444>
    	{
    		new_data.l = 1;
 80061c8:	7b7b      	ldrb	r3, [r7, #13]
 80061ca:	f043 0304 	orr.w	r3, r3, #4
 80061ce:	737b      	strb	r3, [r7, #13]
    	}
    	if(buttons_and_triggers & RB_MASK)
 80061d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80061dc:	ea03 0301 	and.w	r3, r3, r1
 80061e0:	ea04 0402 	and.w	r4, r4, r2
 80061e4:	4323      	orrs	r3, r4
 80061e6:	d003      	beq.n	80061f0 <parseMessage+0x464>
    	{
    		new_data.r = 1;
 80061e8:	7b7b      	ldrb	r3, [r7, #13]
 80061ea:	f043 0308 	orr.w	r3, r3, #8
 80061ee:	737b      	strb	r3, [r7, #13]
    	}
    	if(buttons_and_triggers & B_MASK)
 80061f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80061fc:	ea03 0301 	and.w	r3, r3, r1
 8006200:	ea04 0402 	and.w	r4, r4, r2
 8006204:	4323      	orrs	r3, r4
 8006206:	d025      	beq.n	8006254 <parseMessage+0x4c8>
    	{
    		new_data.z = 1;
 8006208:	7b3b      	ldrb	r3, [r7, #12]
 800620a:	f043 0304 	orr.w	r3, r3, #4
 800620e:	733b      	strb	r3, [r7, #12]
 8006210:	e020      	b.n	8006254 <parseMessage+0x4c8>
 8006212:	bf00      	nop
 8006214:	200001ac 	.word	0x200001ac
 8006218:	200001b4 	.word	0x200001b4
 800621c:	200001a6 	.word	0x200001a6
 8006220:	200001b0 	.word	0x200001b0
 8006224:	200001aa 	.word	0x200001aa
 8006228:	200001a4 	.word	0x200001a4
 800622c:	200001d4 	.word	0x200001d4
 8006230:	200001a8 	.word	0x200001a8
 8006234:	200000fc 	.word	0x200000fc
 8006238:	200000fd 	.word	0x200000fd
 800623c:	200000fe 	.word	0x200000fe
 8006240:	200000ff 	.word	0x200000ff
 8006244:	3d20a0a1 	.word	0x3d20a0a1
 8006248:	20000104 	.word	0x20000104
 800624c:	20000108 	.word	0x20000108
 8006250:	00000005 	.word	0x00000005
    	}
    	if(buttons_and_triggers & A_MASK)
 8006254:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8006260:	ea03 0301 	and.w	r3, r3, r1
 8006264:	ea04 0402 	and.w	r4, r4, r2
 8006268:	4323      	orrs	r3, r4
 800626a:	d003      	beq.n	8006274 <parseMessage+0x4e8>
    	{
    		new_data.a = 1;
 800626c:	7b3b      	ldrb	r3, [r7, #12]
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	733b      	strb	r3, [r7, #12]
    	}
    	if(buttons_and_triggers & X_MASK)
 8006274:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006278:	f04f 0200 	mov.w	r2, #0
 800627c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8006280:	ea03 0301 	and.w	r3, r3, r1
 8006284:	ea04 0402 	and.w	r4, r4, r2
 8006288:	4323      	orrs	r3, r4
 800628a:	d003      	beq.n	8006294 <parseMessage+0x508>
    	{
    		new_data.b = 1;
 800628c:	7b3b      	ldrb	r3, [r7, #12]
 800628e:	f043 0302 	orr.w	r3, r3, #2
 8006292:	733b      	strb	r3, [r7, #12]
    	}
    	if(buttons_and_triggers & START_MASK)
 8006294:	f04f 0110 	mov.w	r1, #16
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80062a0:	ea03 0301 	and.w	r3, r3, r1
 80062a4:	ea04 0402 	and.w	r4, r4, r2
 80062a8:	4323      	orrs	r3, r4
 80062aa:	d003      	beq.n	80062b4 <parseMessage+0x528>
    	{
    		new_data.start = 1;
 80062ac:	7b3b      	ldrb	r3, [r7, #12]
 80062ae:	f043 0308 	orr.w	r3, r3, #8
 80062b2:	733b      	strb	r3, [r7, #12]
    	}

    	// ----- begin nrage replication analog code -----
    	const float XPAD_MAX = 32767; // -32768 to +32767...
 80062b4:	4ba5      	ldr	r3, [pc, #660]	; (800654c <parseMessage+0x7c0>)
 80062b6:	623b      	str	r3, [r7, #32]
    	const float N64_MAX = (sensitivity > 0) ? 127*(sensitivity/100.0f) : 0;
 80062b8:	2364      	movs	r3, #100	; 0x64
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	dd0c      	ble.n	80062d8 <parseMessage+0x54c>
 80062be:	eddf 7aa4 	vldr	s15, [pc, #656]	; 8006550 <parseMessage+0x7c4>
 80062c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062c6:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8006554 <parseMessage+0x7c8>
 80062ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062ce:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8006558 <parseMessage+0x7cc>
 80062d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062d6:	e001      	b.n	80062dc <parseMessage+0x550>
 80062d8:	eddf 7aa0 	vldr	s15, [pc, #640]	; 800655c <parseMessage+0x7d0>
 80062dc:	edc7 7a07 	vstr	s15, [r7, #28]
    	float deadzoneValue = (dead_zone/100.0f) * XPAD_MAX;
 80062e0:	eddf 7a9f 	vldr	s15, [pc, #636]	; 8006560 <parseMessage+0x7d4>
 80062e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062e8:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8006554 <parseMessage+0x7c8>
 80062ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80062f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80062f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f8:	edc7 7a06 	vstr	s15, [r7, #24]
    	float deadzoneRelation = XPAD_MAX / (XPAD_MAX - deadzoneValue);
 80062fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8006300:	edd7 7a06 	vldr	s15, [r7, #24]
 8006304:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006308:	edd7 6a08 	vldr	s13, [r7, #32]
 800630c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006310:	edc7 7a05 	vstr	s15, [r7, #20]

    	LSX = LSY = 0; // -128 to +127...
 8006314:	4b93      	ldr	r3, [pc, #588]	; (8006564 <parseMessage+0x7d8>)
 8006316:	2200      	movs	r2, #0
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	4b92      	ldr	r3, [pc, #584]	; (8006564 <parseMessage+0x7d8>)
 800631c:	781a      	ldrb	r2, [r3, #0]
 800631e:	4b92      	ldr	r3, [pc, #584]	; (8006568 <parseMessage+0x7dc>)
 8006320:	701a      	strb	r2, [r3, #0]
    	float unscaled_result = 0;
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	613b      	str	r3, [r7, #16]

    	if(stick_lx >= deadzoneValue) // positive = right
 8006328:	4b90      	ldr	r3, [pc, #576]	; (800656c <parseMessage+0x7e0>)
 800632a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800632e:	ee07 3a90 	vmov	s15, r3
 8006332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006336:	edd7 7a06 	vldr	s15, [r7, #24]
 800633a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800633e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006342:	db23      	blt.n	800638c <parseMessage+0x600>
    	{
    		unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 8006344:	4b89      	ldr	r3, [pc, #548]	; (800656c <parseMessage+0x7e0>)
 8006346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006352:	edd7 7a06 	vldr	s15, [r7, #24]
 8006356:	ee37 7a67 	vsub.f32	s14, s14, s15
 800635a:	edd7 7a05 	vldr	s15, [r7, #20]
 800635e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006362:	edc7 7a04 	vstr	s15, [r7, #16]
    		LSX = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8006366:	edd7 6a07 	vldr	s13, [r7, #28]
 800636a:	edd7 7a08 	vldr	s15, [r7, #32]
 800636e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006372:	edd7 7a04 	vldr	s15, [r7, #16]
 8006376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800637e:	edc7 7a00 	vstr	s15, [r7]
 8006382:	783b      	ldrb	r3, [r7, #0]
 8006384:	b2da      	uxtb	r2, r3
 8006386:	4b78      	ldr	r3, [pc, #480]	; (8006568 <parseMessage+0x7dc>)
 8006388:	701a      	strb	r2, [r3, #0]
 800638a:	e04a      	b.n	8006422 <parseMessage+0x696>
    	}
    	else if(stick_lx <= (-deadzoneValue)) // negative = left
 800638c:	4b77      	ldr	r3, [pc, #476]	; (800656c <parseMessage+0x7e0>)
 800638e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006392:	ee07 3a90 	vmov	s15, r3
 8006396:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800639a:	edd7 7a06 	vldr	s15, [r7, #24]
 800639e:	eef1 7a67 	vneg.f32	s15, s15
 80063a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063aa:	d83a      	bhi.n	8006422 <parseMessage+0x696>
    	{
    		stick_lx++; // just in case it's -32768 it cannot be negated. otherwise the 1 is negligible.
 80063ac:	4b6f      	ldr	r3, [pc, #444]	; (800656c <parseMessage+0x7e0>)
 80063ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3301      	adds	r3, #1
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	b21a      	sxth	r2, r3
 80063ba:	4b6c      	ldr	r3, [pc, #432]	; (800656c <parseMessage+0x7e0>)
 80063bc:	801a      	strh	r2, [r3, #0]
    		stick_lx = -stick_lx; // compute as positive, then negate at the end
 80063be:	4b6b      	ldr	r3, [pc, #428]	; (800656c <parseMessage+0x7e0>)
 80063c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	425b      	negs	r3, r3
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	b21a      	sxth	r2, r3
 80063cc:	4b67      	ldr	r3, [pc, #412]	; (800656c <parseMessage+0x7e0>)
 80063ce:	801a      	strh	r2, [r3, #0]
    		unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 80063d0:	4b66      	ldr	r3, [pc, #408]	; (800656c <parseMessage+0x7e0>)
 80063d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063de:	edd7 7a06 	vldr	s15, [r7, #24]
 80063e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80063ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ee:	edc7 7a04 	vstr	s15, [r7, #16]
    		LSX = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 80063f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80063f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80063fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8006402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800640a:	edc7 7a00 	vstr	s15, [r7]
 800640e:	783b      	ldrb	r3, [r7, #0]
 8006410:	b2da      	uxtb	r2, r3
 8006412:	4b55      	ldr	r3, [pc, #340]	; (8006568 <parseMessage+0x7dc>)
 8006414:	701a      	strb	r2, [r3, #0]
    		LSX = -LSX;
 8006416:	4b54      	ldr	r3, [pc, #336]	; (8006568 <parseMessage+0x7dc>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	425b      	negs	r3, r3
 800641c:	b2da      	uxtb	r2, r3
 800641e:	4b52      	ldr	r3, [pc, #328]	; (8006568 <parseMessage+0x7dc>)
 8006420:	701a      	strb	r2, [r3, #0]
    	}

    	if(stick_ly >= deadzoneValue) // positive = up
 8006422:	4b53      	ldr	r3, [pc, #332]	; (8006570 <parseMessage+0x7e4>)
 8006424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006428:	ee07 3a90 	vmov	s15, r3
 800642c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006430:	edd7 7a06 	vldr	s15, [r7, #24]
 8006434:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800643c:	db23      	blt.n	8006486 <parseMessage+0x6fa>
    	{
    		unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 800643e:	4b4c      	ldr	r3, [pc, #304]	; (8006570 <parseMessage+0x7e4>)
 8006440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006444:	ee07 3a90 	vmov	s15, r3
 8006448:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800644c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006450:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006454:	edd7 7a05 	vldr	s15, [r7, #20]
 8006458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645c:	edc7 7a04 	vstr	s15, [r7, #16]
    		LSY = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8006460:	edd7 6a07 	vldr	s13, [r7, #28]
 8006464:	edd7 7a08 	vldr	s15, [r7, #32]
 8006468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800646c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006478:	edc7 7a00 	vstr	s15, [r7]
 800647c:	783b      	ldrb	r3, [r7, #0]
 800647e:	b2da      	uxtb	r2, r3
 8006480:	4b38      	ldr	r3, [pc, #224]	; (8006564 <parseMessage+0x7d8>)
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	e04a      	b.n	800651c <parseMessage+0x790>
    	}
    	else if(stick_ly <= (-deadzoneValue)) // negative = down
 8006486:	4b3a      	ldr	r3, [pc, #232]	; (8006570 <parseMessage+0x7e4>)
 8006488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800648c:	ee07 3a90 	vmov	s15, r3
 8006490:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006494:	edd7 7a06 	vldr	s15, [r7, #24]
 8006498:	eef1 7a67 	vneg.f32	s15, s15
 800649c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a4:	d83a      	bhi.n	800651c <parseMessage+0x790>
    	{
    		stick_ly++; // just in case it's -32768 it cannot be negated. otherwise the 1 is negligible.
 80064a6:	4b32      	ldr	r3, [pc, #200]	; (8006570 <parseMessage+0x7e4>)
 80064a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3301      	adds	r3, #1
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	b21a      	sxth	r2, r3
 80064b4:	4b2e      	ldr	r3, [pc, #184]	; (8006570 <parseMessage+0x7e4>)
 80064b6:	801a      	strh	r2, [r3, #0]
    		stick_ly = -stick_ly; // compute as positive, then negate at the end
 80064b8:	4b2d      	ldr	r3, [pc, #180]	; (8006570 <parseMessage+0x7e4>)
 80064ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	425b      	negs	r3, r3
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	b21a      	sxth	r2, r3
 80064c6:	4b2a      	ldr	r3, [pc, #168]	; (8006570 <parseMessage+0x7e4>)
 80064c8:	801a      	strh	r2, [r3, #0]
    		unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 80064ca:	4b29      	ldr	r3, [pc, #164]	; (8006570 <parseMessage+0x7e4>)
 80064cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064d0:	ee07 3a90 	vmov	s15, r3
 80064d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80064dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80064e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e8:	edc7 7a04 	vstr	s15, [r7, #16]
    		LSY = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 80064ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80064f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80064f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80064fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006504:	edc7 7a00 	vstr	s15, [r7]
 8006508:	783b      	ldrb	r3, [r7, #0]
 800650a:	b2da      	uxtb	r2, r3
 800650c:	4b15      	ldr	r3, [pc, #84]	; (8006564 <parseMessage+0x7d8>)
 800650e:	701a      	strb	r2, [r3, #0]
    		LSY = -LSY;
 8006510:	4b14      	ldr	r3, [pc, #80]	; (8006564 <parseMessage+0x7d8>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	425b      	negs	r3, r3
 8006516:	b2da      	uxtb	r2, r3
 8006518:	4b12      	ldr	r3, [pc, #72]	; (8006564 <parseMessage+0x7d8>)
 800651a:	701a      	strb	r2, [r3, #0]
    	}
    	new_data.x_axis = reverse(LSX);
 800651c:	4b12      	ldr	r3, [pc, #72]	; (8006568 <parseMessage+0x7dc>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	4618      	mov	r0, r3
 8006522:	f001 fc6a 	bl	8007dfa <reverse>
 8006526:	4603      	mov	r3, r0
 8006528:	73bb      	strb	r3, [r7, #14]
    	new_data.y_axis = reverse(LSY);
 800652a:	4b0e      	ldr	r3, [pc, #56]	; (8006564 <parseMessage+0x7d8>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	4618      	mov	r0, r3
 8006530:	f001 fc63 	bl	8007dfa <reverse>
 8006534:	4603      	mov	r3, r0
 8006536:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8006538:	b672      	cpsid	i

    	// ----- end nrage replication analog code -----

    	__disable_irq();
		memcpy(&n64_data, &new_data,4);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4a0d      	ldr	r2, [pc, #52]	; (8006574 <parseMessage+0x7e8>)
 800653e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006540:	b662      	cpsie	i
 8006542:	e000      	b.n	8006546 <parseMessage+0x7ba>
        return;
 8006544:	bf00      	nop
//    	{
//    		//pc.printf("NADA\r\n",state); // DEBUG
//    		XpadButtonPressed = false;
//    	}
//    }
}
 8006546:	373c      	adds	r7, #60	; 0x3c
 8006548:	46bd      	mov	sp, r7
 800654a:	bd90      	pop	{r4, r7, pc}
 800654c:	46fffe00 	.word	0x46fffe00
 8006550:	00000064 	.word	0x00000064
 8006554:	42c80000 	.word	0x42c80000
 8006558:	42fe0000 	.word	0x42fe0000
 800655c:	00000000 	.word	0x00000000
 8006560:	00000014 	.word	0x00000014
 8006564:	20000100 	.word	0x20000100
 8006568:	20000101 	.word	0x20000101
 800656c:	200001aa 	.word	0x200001aa
 8006570:	200001a4 	.word	0x200001a4
 8006574:	200001d8 	.word	0x200001d8

08006578 <XPAD_360_WIRELESS_ProcessInputData>:

void XPAD_360_WIRELESS_ProcessInputData(USBH_HandleTypeDef *phost)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
	if (report[0] == 0x00)
 8006580:	4b13      	ldr	r3, [pc, #76]	; (80065d0 <XPAD_360_WIRELESS_ProcessInputData+0x58>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d11e      	bne.n	80065c6 <XPAD_360_WIRELESS_ProcessInputData+0x4e>
	{
		if (report[1] == 0x14 ||
 8006588:	4b11      	ldr	r3, [pc, #68]	; (80065d0 <XPAD_360_WIRELESS_ProcessInputData+0x58>)
 800658a:	785b      	ldrb	r3, [r3, #1]
 800658c:	2b14      	cmp	r3, #20
 800658e:	d00b      	beq.n	80065a8 <XPAD_360_WIRELESS_ProcessInputData+0x30>
			(report[1] == 0x01 && report[2] == 0x00 && report[3] == 0xf0))
 8006590:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <XPAD_360_WIRELESS_ProcessInputData+0x58>)
 8006592:	785b      	ldrb	r3, [r3, #1]
		if (report[1] == 0x14 ||
 8006594:	2b01      	cmp	r3, #1
 8006596:	d10b      	bne.n	80065b0 <XPAD_360_WIRELESS_ProcessInputData+0x38>
			(report[1] == 0x01 && report[2] == 0x00 && report[3] == 0xf0))
 8006598:	4b0d      	ldr	r3, [pc, #52]	; (80065d0 <XPAD_360_WIRELESS_ProcessInputData+0x58>)
 800659a:	789b      	ldrb	r3, [r3, #2]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d107      	bne.n	80065b0 <XPAD_360_WIRELESS_ProcessInputData+0x38>
 80065a0:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <XPAD_360_WIRELESS_ProcessInputData+0x58>)
 80065a2:	78db      	ldrb	r3, [r3, #3]
 80065a4:	2bf0      	cmp	r3, #240	; 0xf0
 80065a6:	d103      	bne.n	80065b0 <XPAD_360_WIRELESS_ProcessInputData+0x38>
		{
			// Event data
			parseMessage(phost);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff fbef 	bl	8005d8c <parseMessage>
		{
			USBH_XPAD_Led(phost, LED1_ON);
			USBH_XPAD_Start(phost);
		}
	}
}
 80065ae:	e00a      	b.n	80065c6 <XPAD_360_WIRELESS_ProcessInputData+0x4e>
		else if(report[1] == 0x0F)
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <XPAD_360_WIRELESS_ProcessInputData+0x58>)
 80065b2:	785b      	ldrb	r3, [r3, #1]
 80065b4:	2b0f      	cmp	r3, #15
 80065b6:	d106      	bne.n	80065c6 <XPAD_360_WIRELESS_ProcessInputData+0x4e>
			USBH_XPAD_Led(phost, LED1_ON);
 80065b8:	2106      	movs	r1, #6
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f871 	bl	80066a2 <USBH_XPAD_Led>
			USBH_XPAD_Start(phost);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f847 	bl	8006654 <USBH_XPAD_Start>
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	200001b4 	.word	0x200001b4

080065d4 <XPAD_360_WIRED_ProcessInputData>:

void XPAD_360_WIRED_ProcessInputData(USBH_HandleTypeDef *phost)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	if (report[0] == 0x00)
 80065dc:	4b13      	ldr	r3, [pc, #76]	; (800662c <XPAD_360_WIRED_ProcessInputData+0x58>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d11e      	bne.n	8006622 <XPAD_360_WIRED_ProcessInputData+0x4e>
	{
		if (report[1] == 0x14 ||
 80065e4:	4b11      	ldr	r3, [pc, #68]	; (800662c <XPAD_360_WIRED_ProcessInputData+0x58>)
 80065e6:	785b      	ldrb	r3, [r3, #1]
 80065e8:	2b14      	cmp	r3, #20
 80065ea:	d00b      	beq.n	8006604 <XPAD_360_WIRED_ProcessInputData+0x30>
			(report[1] == 0x01 && report[2] == 0x00 && report[3] == 0xf0))
 80065ec:	4b0f      	ldr	r3, [pc, #60]	; (800662c <XPAD_360_WIRED_ProcessInputData+0x58>)
 80065ee:	785b      	ldrb	r3, [r3, #1]
		if (report[1] == 0x14 ||
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d10b      	bne.n	800660c <XPAD_360_WIRED_ProcessInputData+0x38>
			(report[1] == 0x01 && report[2] == 0x00 && report[3] == 0xf0))
 80065f4:	4b0d      	ldr	r3, [pc, #52]	; (800662c <XPAD_360_WIRED_ProcessInputData+0x58>)
 80065f6:	789b      	ldrb	r3, [r3, #2]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d107      	bne.n	800660c <XPAD_360_WIRED_ProcessInputData+0x38>
 80065fc:	4b0b      	ldr	r3, [pc, #44]	; (800662c <XPAD_360_WIRED_ProcessInputData+0x58>)
 80065fe:	78db      	ldrb	r3, [r3, #3]
 8006600:	2bf0      	cmp	r3, #240	; 0xf0
 8006602:	d103      	bne.n	800660c <XPAD_360_WIRED_ProcessInputData+0x38>
		{
			// Event data
			parseMessage(phost);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7ff fbc1 	bl	8005d8c <parseMessage>
		{
			USBH_XPAD_Led(phost, LED1_ON);
			USBH_XPAD_Start(phost);
		}
	}
}
 800660a:	e00a      	b.n	8006622 <XPAD_360_WIRED_ProcessInputData+0x4e>
		else if(report[1] == 0x0F)
 800660c:	4b07      	ldr	r3, [pc, #28]	; (800662c <XPAD_360_WIRED_ProcessInputData+0x58>)
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b0f      	cmp	r3, #15
 8006612:	d106      	bne.n	8006622 <XPAD_360_WIRED_ProcessInputData+0x4e>
			USBH_XPAD_Led(phost, LED1_ON);
 8006614:	2106      	movs	r1, #6
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f843 	bl	80066a2 <USBH_XPAD_Led>
			USBH_XPAD_Start(phost);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f819 	bl	8006654 <USBH_XPAD_Start>
}
 8006622:	bf00      	nop
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	200001b4 	.word	0x200001b4

08006630 <XPAD_XBONE_ProcessInputData>:

void XPAD_XBONE_ProcessInputData(USBH_HandleTypeDef *phost)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8006638:	b672      	cpsid	i
	__disable_irq();
	memset(&n64_data,0,4);
 800663a:	2204      	movs	r2, #4
 800663c:	2100      	movs	r1, #0
 800663e:	4804      	ldr	r0, [pc, #16]	; (8006650 <XPAD_XBONE_ProcessInputData+0x20>)
 8006640:	f002 fb18 	bl	8008c74 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8006644:	b662      	cpsie	i
	__enable_irq();
}
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	200001d8 	.word	0x200001d8

08006654 <USBH_XPAD_Start>:

static USBH_StatusTypeDef USBH_XPAD_Start(USBH_HandleTypeDef *phost)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08c      	sub	sp, #48	; 0x30
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
	XPAD_HandleTypeDef *XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t odata[32];
	memset(odata, 0, sizeof(odata));
 8006666:	f107 030c 	add.w	r3, r7, #12
 800666a:	2220      	movs	r2, #32
 800666c:	2100      	movs	r1, #0
 800666e:	4618      	mov	r0, r3
 8006670:	f002 fb00 	bl	8008c74 <memset>
	switch(XPAD_Handle->xpad_type)
 8006674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800667a:	2b03      	cmp	r3, #3
 800667c:	d002      	beq.n	8006684 <USBH_XPAD_Start+0x30>
		case XPAD_360_WIRED:
			odata[3] = 0x40;
			return USBH_InterruptSendData(phost,odata,12,XPAD_Handle->OutPipe);
			break;
		default:
			break;
 800667e:	bf00      	nop
	}
	return USBH_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	e00a      	b.n	800669a <USBH_XPAD_Start+0x46>
			odata[3] = 0x40;
 8006684:	2340      	movs	r3, #64	; 0x40
 8006686:	73fb      	strb	r3, [r7, #15]
			return USBH_InterruptSendData(phost,odata,12,XPAD_Handle->OutPipe);
 8006688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	f107 010c 	add.w	r1, r7, #12
 8006690:	220c      	movs	r2, #12
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 fb00 	bl	8007c98 <USBH_InterruptSendData>
 8006698:	4603      	mov	r3, r0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3730      	adds	r7, #48	; 0x30
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <USBH_XPAD_Led>:

static USBH_StatusTypeDef USBH_XPAD_Led(USBH_HandleTypeDef *phost,XPAD_LED cmd)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b08c      	sub	sp, #48	; 0x30
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	460b      	mov	r3, r1
 80066ac:	70fb      	strb	r3, [r7, #3]
	XPAD_HandleTypeDef *XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t odata[32];
	memset(odata, 0, sizeof(odata));
 80066b8:	f107 030c 	add.w	r3, r7, #12
 80066bc:	2220      	movs	r2, #32
 80066be:	2100      	movs	r1, #0
 80066c0:	4618      	mov	r0, r3
 80066c2:	f002 fad7 	bl	8008c74 <memset>
	// clear data structures out
	switch(XPAD_Handle->xpad_type)
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	d002      	beq.n	80066d6 <USBH_XPAD_Led+0x34>
			odata[1] = 0x03;
			odata[2] = cmd;
			return USBH_InterruptSendData(phost,odata,3,XPAD_Handle->OutPipe);
			break;
		default:
			break;
 80066d0:	bf00      	nop
	}
	return USBH_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	e00e      	b.n	80066f4 <USBH_XPAD_Led+0x52>
			odata[0] = 0x01;
 80066d6:	2301      	movs	r3, #1
 80066d8:	733b      	strb	r3, [r7, #12]
			odata[1] = 0x03;
 80066da:	2303      	movs	r3, #3
 80066dc:	737b      	strb	r3, [r7, #13]
			odata[2] = cmd;
 80066de:	78fb      	ldrb	r3, [r7, #3]
 80066e0:	73bb      	strb	r3, [r7, #14]
			return USBH_InterruptSendData(phost,odata,3,XPAD_Handle->OutPipe);
 80066e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	f107 010c 	add.w	r1, r7, #12
 80066ea:	2203      	movs	r2, #3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f001 fad3 	bl	8007c98 <USBH_InterruptSendData>
 80066f2:	4603      	mov	r3, r0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3730      	adds	r7, #48	; 0x30
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <USBH_XPAD_InterfaceInit>:
  *         The function init the XPAD class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_XPAD_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80066fc:	b590      	push	{r4, r7, lr}
 80066fe:	b08b      	sub	sp, #44	; 0x2c
 8006700:	af04      	add	r7, sp, #16
 8006702:	6078      	str	r0, [r7, #4]
	uint8_t max_ep;
	uint8_t num = 0;
 8006704:	2300      	movs	r3, #0
 8006706:	75fb      	strb	r3, [r7, #23]
	uint8_t interface;

	XPAD_HandleTypeDef *XPAD_Handle;
	XPAD_TypeTypeDef ctype = XPAD_UNKNOWN;
 8006708:	23ff      	movs	r3, #255	; 0xff
 800670a:	757b      	strb	r3, [r7, #21]

	// class, subclass, protocol
	interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0x5D, 0x81); // X360 wireless
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8006712:	7919      	ldrb	r1, [r3, #4]
 8006714:	2381      	movs	r3, #129	; 0x81
 8006716:	225d      	movs	r2, #93	; 0x5d
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fa73 	bl	8006c04 <USBH_FindInterface>
 800671e:	4603      	mov	r3, r0
 8006720:	75bb      	strb	r3, [r7, #22]

	if (interface == 0xFF)
 8006722:	7dbb      	ldrb	r3, [r7, #22]
 8006724:	2bff      	cmp	r3, #255	; 0xff
 8006726:	d123      	bne.n	8006770 <USBH_XPAD_InterfaceInit+0x74>
	{
		interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0x5D, 0x01); // X360 wired
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 800672e:	7919      	ldrb	r1, [r3, #4]
 8006730:	2301      	movs	r3, #1
 8006732:	225d      	movs	r2, #93	; 0x5d
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fa65 	bl	8006c04 <USBH_FindInterface>
 800673a:	4603      	mov	r3, r0
 800673c:	75bb      	strb	r3, [r7, #22]

		if (interface == 0xFF)
 800673e:	7dbb      	ldrb	r3, [r7, #22]
 8006740:	2bff      	cmp	r3, #255	; 0xff
 8006742:	d112      	bne.n	800676a <USBH_XPAD_InterfaceInit+0x6e>
		{
			  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0x47, 0xD0); // XBONE wired
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 800674a:	7919      	ldrb	r1, [r3, #4]
 800674c:	23d0      	movs	r3, #208	; 0xd0
 800674e:	2247      	movs	r2, #71	; 0x47
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fa57 	bl	8006c04 <USBH_FindInterface>
 8006756:	4603      	mov	r3, r0
 8006758:	75bb      	strb	r3, [r7, #22]

			  if(interface == 0xFF) /* No Valid Interface */
 800675a:	7dbb      	ldrb	r3, [r7, #22]
 800675c:	2bff      	cmp	r3, #255	; 0xff
 800675e:	d101      	bne.n	8006764 <USBH_XPAD_InterfaceInit+0x68>
			  {
				USBH_DbgLog ("Cannot Find any valid interface for %s class.", phost->pActiveClass->Name);
				return USBH_FAIL;
 8006760:	2302      	movs	r3, #2
 8006762:	e0f0      	b.n	8006946 <USBH_XPAD_InterfaceInit+0x24a>
			  }
			  else
			  {
				  ctype = XPAD_XBONE;
 8006764:	2304      	movs	r3, #4
 8006766:	757b      	strb	r3, [r7, #21]
 8006768:	e004      	b.n	8006774 <USBH_XPAD_InterfaceInit+0x78>
			  }
		}
		else
		{
			ctype = XPAD_360_WIRED;
 800676a:	2303      	movs	r3, #3
 800676c:	757b      	strb	r3, [r7, #21]
 800676e:	e001      	b.n	8006774 <USBH_XPAD_InterfaceInit+0x78>
		}
	}
	else
	{
		ctype = XPAD_360_WIRELESS;
 8006770:	2302      	movs	r3, #2
 8006772:	757b      	strb	r3, [r7, #21]
	}

	// open endpoints and stuff
	USBH_SelectInterface (phost, interface);
 8006774:	7dbb      	ldrb	r3, [r7, #22]
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fa27 	bl	8006bcc <USBH_SelectInterface>
	phost->pActiveClass->pData = (XPAD_HandleTypeDef *)USBH_malloc (sizeof(XPAD_HandleTypeDef));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 43ac 	ldr.w	r4, [r3, #940]	; 0x3ac
 8006784:	2024      	movs	r0, #36	; 0x24
 8006786:	f002 fa65 	bl	8008c54 <malloc>
 800678a:	4603      	mov	r3, r0
 800678c:	61e3      	str	r3, [r4, #28]
	XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	613b      	str	r3, [r7, #16]

	//XPAD_Handle->Init = USBH_XPAD_Init;
	XPAD_Handle->state     = XPAD_INIT;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	2200      	movs	r2, #0
 800679c:	709a      	strb	r2, [r3, #2]
	XPAD_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80067a4:	4619      	mov	r1, r3
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	231a      	movs	r3, #26
 80067aa:	fb03 f301 	mul.w	r3, r3, r1
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80067b4:	781a      	ldrb	r2, [r3, #0]
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	739a      	strb	r2, [r3, #14]
	XPAD_Handle->length    = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80067c0:	4619      	mov	r1, r3
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	231a      	movs	r3, #26
 80067c6:	fb03 f301 	mul.w	r3, r3, r1
 80067ca:	4413      	add	r3, r2
 80067cc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80067d0:	881a      	ldrh	r2, [r3, #0]
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	819a      	strh	r2, [r3, #12]
	XPAD_Handle->poll      = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bInterval ;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80067dc:	4619      	mov	r1, r3
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	231a      	movs	r3, #26
 80067e2:	fb03 f301 	mul.w	r3, r3, r1
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	821a      	strh	r2, [r3, #16]
	XPAD_Handle->xpad_type = ctype;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	7d7a      	ldrb	r2, [r7, #21]
 80067f8:	f883 2020 	strb.w	r2, [r3, #32]

	if (XPAD_Handle->poll  < 10)
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	8a1b      	ldrh	r3, [r3, #16]
 8006800:	2b09      	cmp	r3, #9
 8006802:	d802      	bhi.n	800680a <USBH_XPAD_InterfaceInit+0x10e>
	{
		XPAD_Handle->poll = 10;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	220a      	movs	r2, #10
 8006808:	821a      	strh	r2, [r3, #16]

	/* Check for available number of endpoints */
	/* Find the number of EPs in the Interface Descriptor */
	/* Choose the lower number in order not to overrun the buffer allocated */
	max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
			  phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006810:	4619      	mov	r1, r3
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	231a      	movs	r3, #26
 8006816:	fb03 f301 	mul.w	r3, r3, r1
 800681a:	4413      	add	r3, r2
 800681c:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8006820:	781b      	ldrb	r3, [r3, #0]
	max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8006822:	2b02      	cmp	r3, #2
 8006824:	bf28      	it	cs
 8006826:	2302      	movcs	r3, #2
 8006828:	73fb      	strb	r3, [r7, #15]
				  USBH_MAX_NUM_ENDPOINTS);


	/* Decode endpoint IN and OUT address from interface descriptor */
	for ( ;num < max_ep; num++)
 800682a:	e086      	b.n	800693a <USBH_XPAD_InterfaceInit+0x23e>
	{
	  if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress & 0x80)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006832:	4618      	mov	r0, r3
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	3301      	adds	r3, #1
 800683a:	00d9      	lsls	r1, r3, #3
 800683c:	231a      	movs	r3, #26
 800683e:	fb03 f300 	mul.w	r3, r3, r0
 8006842:	440b      	add	r3, r1
 8006844:	4413      	add	r3, r2
 8006846:	f503 7350 	add.w	r3, r3, #832	; 0x340
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	b25b      	sxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	da38      	bge.n	80068c4 <USBH_XPAD_InterfaceInit+0x1c8>
	  {
		  XPAD_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006858:	4618      	mov	r0, r3
 800685a:	7dfb      	ldrb	r3, [r7, #23]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	3301      	adds	r3, #1
 8006860:	00d9      	lsls	r1, r3, #3
 8006862:	231a      	movs	r3, #26
 8006864:	fb03 f300 	mul.w	r3, r3, r0
 8006868:	440b      	add	r3, r1
 800686a:	4413      	add	r3, r2
 800686c:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8006870:	781a      	ldrb	r2, [r3, #0]
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	711a      	strb	r2, [r3, #4]
		  XPAD_Handle->InPipe  =\
		  USBH_AllocPipe(phost, XPAD_Handle->InEp);
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	791b      	ldrb	r3, [r3, #4]
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f001 fa59 	bl	8007d34 <USBH_AllocPipe>
 8006882:	4603      	mov	r3, r0
 8006884:	461a      	mov	r2, r3
		  XPAD_Handle->InPipe  =\
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	705a      	strb	r2, [r3, #1]

		/* Open pipe for IN endpoint */
		USBH_OpenPipe  (phost,
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	7859      	ldrb	r1, [r3, #1]
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	7918      	ldrb	r0, [r3, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	8992      	ldrh	r2, [r2, #12]
 80068a2:	9202      	str	r2, [sp, #8]
 80068a4:	2203      	movs	r2, #3
 80068a6:	9201      	str	r2, [sp, #4]
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	4623      	mov	r3, r4
 80068ac:	4602      	mov	r2, r0
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f001 fa11 	bl	8007cd6 <USBH_OpenPipe>
						phost->device.address,
						phost->device.speed,
						USB_EP_TYPE_INTR,
						XPAD_Handle->length);

		USBH_LL_SetToggle (phost, XPAD_Handle->InPipe, 0);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	785b      	ldrb	r3, [r3, #1]
 80068b8:	2200      	movs	r2, #0
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f002 f93c 	bl	8008b3a <USBH_LL_SetToggle>
 80068c2:	e037      	b.n	8006934 <USBH_XPAD_InterfaceInit+0x238>

	  }
	  else
	  {
		  XPAD_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80068ca:	4618      	mov	r0, r3
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	3301      	adds	r3, #1
 80068d2:	00d9      	lsls	r1, r3, #3
 80068d4:	231a      	movs	r3, #26
 80068d6:	fb03 f300 	mul.w	r3, r3, r0
 80068da:	440b      	add	r3, r1
 80068dc:	4413      	add	r3, r2
 80068de:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80068e2:	781a      	ldrb	r2, [r3, #0]
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	70da      	strb	r2, [r3, #3]
		  XPAD_Handle->OutPipe  =\
		  USBH_AllocPipe(phost, XPAD_Handle->OutEp);
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	78db      	ldrb	r3, [r3, #3]
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f001 fa20 	bl	8007d34 <USBH_AllocPipe>
 80068f4:	4603      	mov	r3, r0
 80068f6:	461a      	mov	r2, r3
		  XPAD_Handle->OutPipe  =\
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	701a      	strb	r2, [r3, #0]

		/* Open pipe for OUT endpoint */
		USBH_OpenPipe  (phost,
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	7819      	ldrb	r1, [r3, #0]
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	78d8      	ldrb	r0, [r3, #3]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	8992      	ldrh	r2, [r2, #12]
 8006914:	9202      	str	r2, [sp, #8]
 8006916:	2203      	movs	r2, #3
 8006918:	9201      	str	r2, [sp, #4]
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	4623      	mov	r3, r4
 800691e:	4602      	mov	r2, r0
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f001 f9d8 	bl	8007cd6 <USBH_OpenPipe>
						phost->device.address,
						phost->device.speed,
						USB_EP_TYPE_INTR,
						XPAD_Handle->length);

		USBH_LL_SetToggle (phost, XPAD_Handle->OutPipe, 0);
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2200      	movs	r2, #0
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f002 f903 	bl	8008b3a <USBH_LL_SetToggle>
	for ( ;num < max_ep; num++)
 8006934:	7dfb      	ldrb	r3, [r7, #23]
 8006936:	3301      	adds	r3, #1
 8006938:	75fb      	strb	r3, [r7, #23]
 800693a:	7dfa      	ldrb	r2, [r7, #23]
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	429a      	cmp	r2, r3
 8006940:	f4ff af74 	bcc.w	800682c <USBH_XPAD_InterfaceInit+0x130>
	  }

	}

	return USBH_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	371c      	adds	r7, #28
 800694a:	46bd      	mov	sp, r7
 800694c:	bd90      	pop	{r4, r7, pc}

0800694e <USBH_XPAD_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the XPAD class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_XPAD_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  XPAD_HandleTypeDef *XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	60fb      	str	r3, [r7, #12]

  if(XPAD_Handle->InPipe != 0x00)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	785b      	ldrb	r3, [r3, #1]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00e      	beq.n	8006986 <USBH_XPAD_InterfaceDeInit+0x38>
  {
	USBH_ClosePipe  (phost, XPAD_Handle->InPipe);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	785b      	ldrb	r3, [r3, #1]
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 f9d0 	bl	8007d14 <USBH_ClosePipe>
	USBH_FreePipe  (phost, XPAD_Handle->InPipe);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	785b      	ldrb	r3, [r3, #1]
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f001 f9fa 	bl	8007d74 <USBH_FreePipe>
	XPAD_Handle->InPipe = 0;     /* Reset the pipe as Free */
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	705a      	strb	r2, [r3, #1]
  }

  if(XPAD_Handle->OutPipe != 0x00)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00e      	beq.n	80069ac <USBH_XPAD_InterfaceDeInit+0x5e>
  {
	USBH_ClosePipe(phost, XPAD_Handle->OutPipe);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 f9bd 	bl	8007d14 <USBH_ClosePipe>
	USBH_FreePipe  (phost, XPAD_Handle->OutPipe);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 f9e7 	bl	8007d74 <USBH_FreePipe>
	XPAD_Handle->OutPipe = 0;     /* Reset the pipe as Free */
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	701a      	strb	r2, [r3, #0]
  }

  if(phost->pActiveClass->pData)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d006      	beq.n	80069c6 <USBH_XPAD_InterfaceDeInit+0x78>
  {
	USBH_free(phost->pActiveClass->pData);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f002 f94f 	bl	8008c64 <free>
  }

  return USBH_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <USBH_XPAD_ClassRequest>:
  *         for XPAD class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_XPAD_ClassRequest (USBH_HandleTypeDef *phost)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	// should be fine to keep this blank since there are no standard class requests for a custom class!
	return USBH_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
	...

080069e8 <USBH_XPAD_Process>:
  *         The function is for managing state machine for XPAD data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_XPAD_Process (USBH_HandleTypeDef *phost)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
	XPAD_HandleTypeDef *XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	60fb      	str	r3, [r7, #12]

	switch(XPAD_Handle->state)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	789b      	ldrb	r3, [r3, #2]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d002      	beq.n	8006a08 <USBH_XPAD_Process+0x20>
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d012      	beq.n	8006a2c <USBH_XPAD_Process+0x44>
				default:
					break;
			}
			break;
		default:
			break;
 8006a06:	e02f      	b.n	8006a68 <USBH_XPAD_Process+0x80>
			USBH_InterruptReceiveData(phost,report,32,XPAD_Handle->OutPipe);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	4919      	ldr	r1, [pc, #100]	; (8006a74 <USBH_XPAD_Process+0x8c>)
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f001 f922 	bl	8007c5a <USBH_InterruptReceiveData>
			USBH_Delay(100);
 8006a16:	2064      	movs	r0, #100	; 0x64
 8006a18:	f002 f8c2 	bl	8008ba0 <USBH_Delay>
			USBH_XPAD_Led(phost, LED_OFF);
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff fe3f 	bl	80066a2 <USBH_XPAD_Led>
			XPAD_Handle->state = XPAD_IDLE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2201      	movs	r2, #1
 8006a28:	709a      	strb	r2, [r3, #2]
			break;
 8006a2a:	e01d      	b.n	8006a68 <USBH_XPAD_Process+0x80>
			USBH_InterruptReceiveData(phost,report,32,XPAD_Handle->InPipe);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	785b      	ldrb	r3, [r3, #1]
 8006a30:	2220      	movs	r2, #32
 8006a32:	4910      	ldr	r1, [pc, #64]	; (8006a74 <USBH_XPAD_Process+0x8c>)
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 f910 	bl	8007c5a <USBH_InterruptReceiveData>
			switch(XPAD_Handle->xpad_type)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a40:	2b03      	cmp	r3, #3
 8006a42:	d008      	beq.n	8006a56 <USBH_XPAD_Process+0x6e>
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d00a      	beq.n	8006a5e <USBH_XPAD_Process+0x76>
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d000      	beq.n	8006a4e <USBH_XPAD_Process+0x66>
					break;
 8006a4c:	e00b      	b.n	8006a66 <USBH_XPAD_Process+0x7e>
					XPAD_360_WIRELESS_ProcessInputData(phost);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7ff fd92 	bl	8006578 <XPAD_360_WIRELESS_ProcessInputData>
				break;
 8006a54:	e007      	b.n	8006a66 <USBH_XPAD_Process+0x7e>
					XPAD_360_WIRED_ProcessInputData(phost);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff fdbc 	bl	80065d4 <XPAD_360_WIRED_ProcessInputData>
					break;
 8006a5c:	e003      	b.n	8006a66 <USBH_XPAD_Process+0x7e>
					XPAD_XBONE_ProcessInputData(phost);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff fde6 	bl	8006630 <XPAD_XBONE_ProcessInputData>
					break;
 8006a64:	bf00      	nop
			break;
 8006a66:	bf00      	nop
	}
 
	return USBH_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	200001b4 	.word	0x200001b4

08006a78 <USBH_XPAD_SOFProcess>:
  *         XPAD XPAD process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_XPAD_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  
  return USBH_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t ), uint8_t id)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b084      	sub	sp, #16
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL; 
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	e019      	b.n	8006ada <USBH_Init+0x4c>
  }
  
  /* Set DRiver ID */
  phost->id = id;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	79fa      	ldrb	r2, [r7, #7]
 8006aaa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  
  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
  phost->ClassNumber = 0;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
  
  /* Restore default states and prepare EP0 */ 
  DeInitStateMachine(phost);
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 f80f 	bl	8006ae2 <DeInitStateMachine>
  
  /* Assign User process */
  if(pUsrFunc != NULL)
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
#endif  
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
#endif  
  
  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f001 fe50 	bl	8008778 <USBH_LL_Init>
  return USBH_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b085      	sub	sp, #20
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006aee:	e009      	b.n	8006b04 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0;
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	33ec      	adds	r3, #236	; 0xec
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	2200      	movs	r2, #0
 8006afc:	605a      	str	r2, [r3, #4]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	3301      	adds	r3, #1
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b0e      	cmp	r3, #14
 8006b08:	d9f2      	bls.n	8006af0 <DeInitStateMachine+0xe>
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	e009      	b.n	8006b24 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0;
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3301      	adds	r3, #1
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b2a:	d3f1      	bcc.n	8006b10 <DeInitStateMachine+0x2e>
  }
  
  phost->gState = HOST_IDLE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0;  
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
  
  phost->Control.state = CTRL_SETUP;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2240      	movs	r2, #64	; 0x40
 8006b50:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	765a      	strb	r2, [r3, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  
  return USBH_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b085      	sub	sp, #20
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006b80:	2300      	movs	r3, #0
 8006b82:	73fb      	strb	r3, [r7, #15]
  
  if(pclass != 0)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d017      	beq.n	8006bba <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d80f      	bhi.n	8006bb4 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 8006b9a:	1c59      	adds	r1, r3, #1
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	f8c2 13b0 	str.w	r1, [r2, #944]	; 0x3b0
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	33e8      	adds	r3, #232	; 0xe8
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	73fb      	strb	r3, [r7, #15]
 8006bb2:	e004      	b.n	8006bbe <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL; 
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	73fb      	strb	r3, [r7, #15]
 8006bb8:	e001      	b.n	8006bbe <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 8006bba:	2302      	movs	r3, #2
 8006bbc:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	73fb      	strb	r3, [r7, #15]
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006be2:	78fa      	ldrb	r2, [r7, #3]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d204      	bcs.n	8006bf2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	78fa      	ldrb	r2, [r7, #3]
 8006bec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8006bf0:	e001      	b.n	8006bf6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	73fb      	strb	r3, [r7, #15]
  }
  return status;  
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	4608      	mov	r0, r1
 8006c0e:	4611      	mov	r1, r2
 8006c10:	461a      	mov	r2, r3
 8006c12:	4603      	mov	r3, r0
 8006c14:	70fb      	strb	r3, [r7, #3]
 8006c16:	460b      	mov	r3, r1
 8006c18:	70bb      	strb	r3, [r7, #2]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  int8_t                        if_ix = 0;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	75fb      	strb	r3, [r7, #23]
  
  pif = (USBH_InterfaceDescTypeDef *)0;
 8006c22:	2300      	movs	r3, #0
 8006c24:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;  
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f203 3332 	addw	r3, r3, #818	; 0x332
 8006c2c:	60fb      	str	r3, [r7, #12]
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c2e:	e029      	b.n	8006c84 <USBH_FindInterface+0x80>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006c30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c34:	221a      	movs	r2, #26
 8006c36:	fb02 f303 	mul.w	r3, r2, r3
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	3302      	adds	r3, #2
 8006c42:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	795b      	ldrb	r3, [r3, #5]
 8006c48:	78fa      	ldrb	r2, [r7, #3]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d002      	beq.n	8006c54 <USBH_FindInterface+0x50>
 8006c4e:	78fb      	ldrb	r3, [r7, #3]
 8006c50:	2bff      	cmp	r3, #255	; 0xff
 8006c52:	d111      	bne.n	8006c78 <USBH_FindInterface+0x74>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8006c58:	78ba      	ldrb	r2, [r7, #2]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d002      	beq.n	8006c64 <USBH_FindInterface+0x60>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8006c5e:	78bb      	ldrb	r3, [r7, #2]
 8006c60:	2bff      	cmp	r3, #255	; 0xff
 8006c62:	d109      	bne.n	8006c78 <USBH_FindInterface+0x74>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8006c68:	787a      	ldrb	r2, [r7, #1]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d002      	beq.n	8006c74 <USBH_FindInterface+0x70>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8006c6e:	787b      	ldrb	r3, [r7, #1]
 8006c70:	2bff      	cmp	r3, #255	; 0xff
 8006c72:	d101      	bne.n	8006c78 <USBH_FindInterface+0x74>
    {
      return  if_ix;
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
 8006c76:	e00a      	b.n	8006c8e <USBH_FindInterface+0x8a>
    }
    if_ix++;
 8006c78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	3301      	adds	r3, #1
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	ddd1      	ble.n	8006c30 <USBH_FindInterface+0x2c>
  }
  return 0xFF;
 8006c8c:	23ff      	movs	r3, #255	; 0xff
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	371c      	adds	r7, #28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fda8 	bl	80087f8 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 8006ca8:	2101      	movs	r1, #1
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 ff37 	bl	8008b1e <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af04      	add	r7, sp, #16
 8006cc2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->gState)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b0a      	cmp	r3, #10
 8006cd4:	f200 812a 	bhi.w	8006f2c <USBH_Process+0x270>
 8006cd8:	a201      	add	r2, pc, #4	; (adr r2, 8006ce0 <USBH_Process+0x24>)
 8006cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cde:	bf00      	nop
 8006ce0:	08006d0d 	.word	0x08006d0d
 8006ce4:	08006f2d 	.word	0x08006f2d
 8006ce8:	08006d2f 	.word	0x08006d2f
 8006cec:	08006f07 	.word	0x08006f07
 8006cf0:	08006f2d 	.word	0x08006f2d
 8006cf4:	08006dbd 	.word	0x08006dbd
 8006cf8:	08006ebd 	.word	0x08006ebd
 8006cfc:	08006ded 	.word	0x08006ded
 8006d00:	08006e0d 	.word	0x08006e0d
 8006d04:	08006e2d 	.word	0x08006e2d
 8006d08:	08006eef 	.word	0x08006eef
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 810b 	beq.w	8006f30 <USBH_Process+0x274>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200); 
 8006d20:	20c8      	movs	r0, #200	; 0xc8
 8006d22:	f001 ff3d 	bl	8008ba0 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 fdf0 	bl	800890c <USBH_LL_ResetPort>
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif
    }
    break;
 8006d2c:	e100      	b.n	8006f30 <USBH_Process+0x274>
  case HOST_DEV_ATTACHED :
    
    USBH_UsrLog("USB Device Attached");  
      
    /* Wait for 100 ms after Reset */
    USBH_Delay(100); 
 8006d2e:	2064      	movs	r0, #100	; 0x64
 8006d30:	f001 ff36 	bl	8008ba0 <USBH_Delay>
          
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 fdc3 	bl	80088c0 <USBH_LL_GetSpeed>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
    
    phost->gState = HOST_ENUMERATION;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2205      	movs	r2, #5
 8006d48:	701a      	strb	r2, [r3, #0]
    
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fff1 	bl	8007d34 <USBH_AllocPipe>
 8006d52:	4603      	mov	r3, r0
 8006d54:	461a      	mov	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8006d5a:	2180      	movs	r1, #128	; 0x80
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 ffe9 	bl	8007d34 <USBH_AllocPipe>
 8006d62:	4603      	mov	r3, r0
 8006d64:	461a      	mov	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	711a      	strb	r2, [r3, #4]
    
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	7919      	ldrb	r1, [r3, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size); 
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006d7e:	b292      	uxth	r2, r2
 8006d80:	9202      	str	r2, [sp, #8]
 8006d82:	2200      	movs	r2, #0
 8006d84:	9201      	str	r2, [sp, #4]
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2280      	movs	r2, #128	; 0x80
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 ffa2 	bl	8007cd6 <USBH_OpenPipe>
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	7959      	ldrb	r1, [r3, #5]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size);
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006da6:	b292      	uxth	r2, r2
 8006da8:	9202      	str	r2, [sp, #8]
 8006daa:	2200      	movs	r2, #0
 8006dac:	9201      	str	r2, [sp, #4]
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	4603      	mov	r3, r0
 8006db2:	2200      	movs	r2, #0
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 ff8e 	bl	8007cd6 <USBH_OpenPipe>
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif    
    
    break;
 8006dba:	e0c8      	b.n	8006f4e <USBH_Process+0x292>
    
  case HOST_ENUMERATION:     
    /* Check for enumeration status */  
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f8cb 	bl	8006f58 <USBH_HandleEnum>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f040 80b5 	bne.w	8006f34 <USBH_Process+0x278>
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d103      	bne.n	8006de4 <USBH_Process+0x128>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;        
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2208      	movs	r2, #8
 8006de0:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT; 
      }
          
    }
    break;
 8006de2:	e0a7      	b.n	8006f34 <USBH_Process+0x278>
        phost->gState  = HOST_INPUT; 
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2207      	movs	r2, #7
 8006de8:	701a      	strb	r2, [r3, #0]
    break;
 8006dea:	e0a3      	b.n	8006f34 <USBH_Process+0x278>
    
  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 80a0 	beq.w	8006f38 <USBH_Process+0x27c>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006dfe:	2101      	movs	r1, #1
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2208      	movs	r2, #8
 8006e08:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1)
        osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif         
      }
    }
    break;
 8006e0a:	e095      	b.n	8006f38 <USBH_Process+0x27c>
    
  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fb14 	bl	8007444 <USBH_SetCfg>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f040 808c 	bne.w	8006f3c <USBH_Process+0x280>
    {
      phost->gState  = HOST_CHECK_CLASS;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2209      	movs	r2, #9
 8006e28:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
      
    }      
    
    break;
 8006e2a:	e087      	b.n	8006f3c <USBH_Process+0x280>
    
  case HOST_CHECK_CLASS:
    
    if(phost->ClassNumber == 0)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 8084 	beq.w	8006f40 <USBH_Process+0x284>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
      
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 8006e40:	2300      	movs	r3, #0
 8006e42:	73fb      	strb	r3, [r7, #15]
 8006e44:	e017      	b.n	8006e76 <USBH_Process+0x1ba>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	33e8      	adds	r3, #232	; 0xe8
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	791a      	ldrb	r2, [r3, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d108      	bne.n	8006e70 <USBH_Process+0x1b4>
        {
          phost->pActiveClass = phost->pClass[idx];
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	33e8      	adds	r3, #232	; 0xe8
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	3301      	adds	r3, #1
 8006e74:	73fb      	strb	r3, [r7, #15]
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d9e4      	bls.n	8006e46 <USBH_Process+0x18a>
        }
      }
      
      if(phost->pActiveClass != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d016      	beq.n	8006eb4 <USBH_Process+0x1f8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	4798      	blx	r3
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d109      	bne.n	8006eac <USBH_Process+0x1f0>
        {
          phost->gState  = HOST_CLASS_REQUEST; 
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2206      	movs	r2, #6
 8006e9c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
          
          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006ea4:	2103      	movs	r1, #3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
    }
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif 
    break;    
 8006eaa:	e049      	b.n	8006f40 <USBH_Process+0x284>
          phost->gState  = HOST_ABORT_STATE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	220c      	movs	r2, #12
 8006eb0:	701a      	strb	r2, [r3, #0]
    break;    
 8006eb2:	e045      	b.n	8006f40 <USBH_Process+0x284>
        phost->gState  = HOST_ABORT_STATE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	220c      	movs	r2, #12
 8006eb8:	701a      	strb	r2, [r3, #0]
    break;    
 8006eba:	e041      	b.n	8006f40 <USBH_Process+0x284>
    
  case HOST_CLASS_REQUEST:  
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00f      	beq.n	8006ee6 <USBH_Process+0x22a>
    {
      status = phost->pActiveClass->Requests(phost);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	4798      	blx	r3
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	73bb      	strb	r3, [r7, #14]
      
      if(status == USBH_OK)
 8006ed6:	7bbb      	ldrb	r3, [r7, #14]
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d132      	bne.n	8006f44 <USBH_Process+0x288>
      {
        phost->gState  = HOST_CLASS;        
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	220a      	movs	r2, #10
 8006ee2:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    
    break;    
 8006ee4:	e02e      	b.n	8006f44 <USBH_Process+0x288>
      phost->gState  = HOST_ABORT_STATE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	220c      	movs	r2, #12
 8006eea:	701a      	strb	r2, [r3, #0]
    break;    
 8006eec:	e02a      	b.n	8006f44 <USBH_Process+0x288>
  case HOST_CLASS:   
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d027      	beq.n	8006f48 <USBH_Process+0x28c>
    { 
      phost->pActiveClass->BgndProcess(phost);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	4798      	blx	r3
    }
    break;       
 8006f04:	e020      	b.n	8006f48 <USBH_Process+0x28c>

  case HOST_DEV_DISCONNECTED :
    
    DeInitStateMachine(phost);  
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff fdeb 	bl	8006ae2 <DeInitStateMachine>
    
    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d01a      	beq.n	8006f4c <USBH_Process+0x290>
    {
      phost->pActiveClass->DeInit(phost); 
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    }     
    break;
 8006f2a:	e00f      	b.n	8006f4c <USBH_Process+0x290>
    
  case HOST_ABORT_STATE:
  default :
    break;
 8006f2c:	bf00      	nop
 8006f2e:	e00e      	b.n	8006f4e <USBH_Process+0x292>
    break;
 8006f30:	bf00      	nop
 8006f32:	e00c      	b.n	8006f4e <USBH_Process+0x292>
    break;
 8006f34:	bf00      	nop
 8006f36:	e00a      	b.n	8006f4e <USBH_Process+0x292>
    break;
 8006f38:	bf00      	nop
 8006f3a:	e008      	b.n	8006f4e <USBH_Process+0x292>
    break;
 8006f3c:	bf00      	nop
 8006f3e:	e006      	b.n	8006f4e <USBH_Process+0x292>
    break;    
 8006f40:	bf00      	nop
 8006f42:	e004      	b.n	8006f4e <USBH_Process+0x292>
    break;    
 8006f44:	bf00      	nop
 8006f46:	e002      	b.n	8006f4e <USBH_Process+0x292>
    break;       
 8006f48:	bf00      	nop
 8006f4a:	e000      	b.n	8006f4e <USBH_Process+0x292>
    break;
 8006f4c:	bf00      	nop
  }
 return USBH_OK;  
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af04      	add	r7, sp, #16
 8006f5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;  
 8006f60:	2301      	movs	r3, #1
 8006f62:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->EnumState)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	785b      	ldrb	r3, [r3, #1]
 8006f68:	2b07      	cmp	r3, #7
 8006f6a:	f200 80f8 	bhi.w	800715e <USBH_HandleEnum+0x206>
 8006f6e:	a201      	add	r2, pc, #4	; (adr r2, 8006f74 <USBH_HandleEnum+0x1c>)
 8006f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f74:	08006f95 	.word	0x08006f95
 8006f78:	08007007 	.word	0x08007007
 8006f7c:	0800701f 	.word	0x0800701f
 8006f80:	08007095 	.word	0x08007095
 8006f84:	080070ab 	.word	0x080070ab
 8006f88:	080070c7 	.word	0x080070c7
 8006f8c:	080070fb 	.word	0x080070fb
 8006f90:	0800712f 	.word	0x0800712f
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 8006f94:	2108      	movs	r1, #8
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f984 	bl	80072a4 <USBH_Get_DevDesc>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f040 80df 	bne.w	8007162 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	7919      	ldrb	r1, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006fc8:	b292      	uxth	r2, r2
 8006fca:	9202      	str	r2, [sp, #8]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	9201      	str	r2, [sp, #4]
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2280      	movs	r2, #128	; 0x80
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fe7d 	bl	8007cd6 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	7959      	ldrb	r1, [r3, #5]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);           
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006ff0:	b292      	uxth	r2, r2
 8006ff2:	9202      	str	r2, [sp, #8]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	9201      	str	r2, [sp, #4]
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fe69 	bl	8007cd6 <USBH_OpenPipe>
      
    }
    break;
 8007004:	e0ad      	b.n	8007162 <USBH_HandleEnum+0x20a>
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8007006:	2112      	movs	r1, #18
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f94b 	bl	80072a4 <USBH_Get_DevDesc>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	f040 80a8 	bne.w	8007166 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
      
      phost->EnumState = ENUM_SET_ADDR;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2202      	movs	r2, #2
 800701a:	705a      	strb	r2, [r3, #1]
       
    }
    break;
 800701c:	e0a3      	b.n	8007166 <USBH_HandleEnum+0x20e>
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800701e:	2101      	movs	r1, #1
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f9eb 	bl	80073fc <USBH_SetAddress>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	f040 809e 	bne.w	800716a <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2);
 800702e:	2002      	movs	r0, #2
 8007030:	f001 fdb6 	bl	8008ba0 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
      
      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2203      	movs	r2, #3
 8007040:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	7919      	ldrb	r1, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007056:	b292      	uxth	r2, r2
 8007058:	9202      	str	r2, [sp, #8]
 800705a:	2200      	movs	r2, #0
 800705c:	9201      	str	r2, [sp, #4]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	4603      	mov	r3, r0
 8007062:	2280      	movs	r2, #128	; 0x80
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fe36 	bl	8007cd6 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	7959      	ldrb	r1, [r3, #5]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);        
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800707e:	b292      	uxth	r2, r2
 8007080:	9202      	str	r2, [sp, #8]
 8007082:	2200      	movs	r2, #0
 8007084:	9201      	str	r2, [sp, #4]
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	4603      	mov	r3, r0
 800708a:	2200      	movs	r2, #0
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fe22 	bl	8007cd6 <USBH_OpenPipe>
    }
    break;
 8007092:	e06a      	b.n	800716a <USBH_HandleEnum+0x212>
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
 8007094:	2109      	movs	r1, #9
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f92c 	bl	80072f4 <USBH_Get_CfgDesc>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d165      	bne.n	800716e <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2204      	movs	r2, #4
 80070a6:	705a      	strb	r2, [r3, #1]
    }
    break;
 80070a8:	e061      	b.n	800716e <USBH_HandleEnum+0x216>
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f91e 	bl	80072f4 <USBH_Get_CfgDesc>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d159      	bne.n	8007172 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2205      	movs	r2, #5
 80070c2:	705a      	strb	r2, [r3, #1]
    }
    break;
 80070c4:	e055      	b.n	8007172 <USBH_HandleEnum+0x21a>
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d010      	beq.n	80070f2 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 132e 	ldrb.w	r1, [r3, #814]	; 0x32e
                               phost->device.DevDesc.iManufacturer, 
                                phost->device.Data , 
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80070dc:	23ff      	movs	r3, #255	; 0xff
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f92c 	bl	800733c <USBH_Get_StringDesc>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d145      	bne.n	8007176 <USBH_HandleEnum+0x21e>
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2206      	movs	r2, #6
 80070ee:	705a      	strb	r2, [r3, #1]
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    break;
 80070f0:	e041      	b.n	8007176 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2206      	movs	r2, #6
 80070f6:	705a      	strb	r2, [r3, #1]
    break;
 80070f8:	e03d      	b.n	8007176 <USBH_HandleEnum+0x21e>
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 8007100:	2b00      	cmp	r3, #0
 8007102:	d010      	beq.n	8007126 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 132f 	ldrb.w	r1, [r3, #815]	; 0x32f
                               phost->device.DevDesc.iProduct, 
                               phost->device.Data, 
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007110:	23ff      	movs	r3, #255	; 0xff
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f912 	bl	800733c <USBH_Get_StringDesc>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d12d      	bne.n	800717a <USBH_HandleEnum+0x222>
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2207      	movs	r2, #7
 8007122:	705a      	strb	r2, [r3, #1]
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    } 
    break;
 8007124:	e029      	b.n	800717a <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2207      	movs	r2, #7
 800712a:	705a      	strb	r2, [r3, #1]
    break;
 800712c:	e025      	b.n	800717a <USBH_HandleEnum+0x222>
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00f      	beq.n	8007158 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iSerialNumber, 
                               phost->device.Data, 
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007144:	23ff      	movs	r3, #255	; 0xff
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f8f8 	bl	800733c <USBH_Get_StringDesc>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d115      	bne.n	800717e <USBH_HandleEnum+0x226>
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)phost->device.Data);
        Status = USBH_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	73fb      	strb	r3, [r7, #15]
      Status = USBH_OK;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    }  
    break;
 8007156:	e012      	b.n	800717e <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8007158:	2300      	movs	r3, #0
 800715a:	73fb      	strb	r3, [r7, #15]
    break;
 800715c:	e00f      	b.n	800717e <USBH_HandleEnum+0x226>
    
  default:
    break;
 800715e:	bf00      	nop
 8007160:	e00e      	b.n	8007180 <USBH_HandleEnum+0x228>
    break;
 8007162:	bf00      	nop
 8007164:	e00c      	b.n	8007180 <USBH_HandleEnum+0x228>
    break;
 8007166:	bf00      	nop
 8007168:	e00a      	b.n	8007180 <USBH_HandleEnum+0x228>
    break;
 800716a:	bf00      	nop
 800716c:	e008      	b.n	8007180 <USBH_HandleEnum+0x228>
    break;
 800716e:	bf00      	nop
 8007170:	e006      	b.n	8007180 <USBH_HandleEnum+0x228>
    break;
 8007172:	bf00      	nop
 8007174:	e004      	b.n	8007180 <USBH_HandleEnum+0x228>
    break;
 8007176:	bf00      	nop
 8007178:	e002      	b.n	8007180 <USBH_HandleEnum+0x228>
    break;
 800717a:	bf00      	nop
 800717c:	e000      	b.n	8007180 <USBH_HandleEnum+0x228>
    break;
 800717e:	bf00      	nop
  }  
  return Status;
 8007180:	7bfb      	ldrb	r3, [r7, #15]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop

0800718c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
}
 800719e:	bf00      	nop
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b082      	sub	sp, #8
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
  USBH_HandleSof(phost);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f804 	bl	80071ce <USBH_HandleSof>
}
 80071c6:	bf00      	nop
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b0a      	cmp	r3, #10
 80071de:	d10a      	bne.n	80071f6 <USBH_HandleSof+0x28>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
  }
}
 80071f6:	bf00      	nop
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10f      	bne.n	8007230 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
    
    if(phost->pUser != NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00e      	beq.n	8007240 <USBH_LL_Connect+0x42>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007228:	2104      	movs	r1, #4
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	4798      	blx	r3
 800722e:	e007      	b.n	8007240 <USBH_LL_Connect+0x42>
    }
  } 
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b01      	cmp	r3, #1
 8007238:	d102      	bne.n	8007240 <USBH_LL_Connect+0x42>
  {
    phost->gState = HOST_DEV_ATTACHED ;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	701a      	strb	r2, [r3, #0]
  }
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b082      	sub	sp, #8
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f001 fb02 	bl	800885c <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	791b      	ldrb	r3, [r3, #4]
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fd88 	bl	8007d74 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	795b      	ldrb	r3, [r3, #5]
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fd82 	bl	8007d74 <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <USBH_LL_Disconnect+0x44>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007288:	2105      	movs	r1, #5
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 fab2 	bl	80087f8 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2203      	movs	r2, #3
 8007298:	701a      	strb	r2, [r3, #0]
  
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af02      	add	r7, sp, #8
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;
  
  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  phost->device.Data,
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80072b6:	78fb      	ldrb	r3, [r7, #3]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	4613      	mov	r3, r2
 80072be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072c2:	2100      	movs	r1, #0
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f864 	bl	8007392 <USBH_GetDescriptor>
 80072ca:	4603      	mov	r3, r0
 80072cc:	73fb      	strb	r3, [r7, #15]
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10a      	bne.n	80072ea <USBH_Get_DevDesc+0x46>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data, length);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f503 7048 	add.w	r0, r3, #800	; 0x320
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072e0:	78fa      	ldrb	r2, [r7, #3]
 80072e2:	b292      	uxth	r2, r2
 80072e4:	4619      	mov	r1, r3
 80072e6:	f000 f8f4 	bl	80074d2 <USBH_ParseDevDesc>
  }
  return status;      
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,                      
                             uint16_t length)

{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1)  
  pData = phost->device.CfgDesc_Raw;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	331c      	adds	r3, #28
 8007304:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif  
  if((status = USBH_GetDescriptor(phost,
 8007306:	887b      	ldrh	r3, [r7, #2]
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007310:	2100      	movs	r1, #0
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f83d 	bl	8007392 <USBH_GetDescriptor>
 8007318:	4603      	mov	r3, r0
 800731a:	72fb      	strb	r3, [r7, #11]
 800731c:	7afb      	ldrb	r3, [r7, #11]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d107      	bne.n	8007332 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {
    
    /* Commands successfully sent and Response Received  */       
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f203 3332 	addw	r3, r3, #818	; 0x332
 8007328:	887a      	ldrh	r2, [r7, #2]
 800732a:	68f9      	ldr	r1, [r7, #12]
 800732c:	4618      	mov	r0, r3
 800732e:	f000 f940 	bl	80075b2 <USBH_ParseCfgDesc>
                       pData,
                       length); 
    
  }
  return status;
 8007332:	7afb      	ldrb	r3, [r7, #11]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b088      	sub	sp, #32
 8007340:	af02      	add	r7, sp, #8
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	461a      	mov	r2, r3
 8007348:	460b      	mov	r3, r1
 800734a:	72fb      	strb	r3, [r7, #11]
 800734c:	4613      	mov	r3, r2
 800734e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8007350:	7afb      	ldrb	r3, [r7, #11]
 8007352:	b29b      	uxth	r3, r3
 8007354:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007358:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  phost->device.Data,
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007360:	893b      	ldrh	r3, [r7, #8]
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	460b      	mov	r3, r1
 8007366:	2100      	movs	r1, #0
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 f812 	bl	8007392 <USBH_GetDescriptor>
 800736e:	4603      	mov	r3, r0
 8007370:	75fb      	strb	r3, [r7, #23]
 8007372:	7dfb      	ldrb	r3, [r7, #23]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d107      	bne.n	8007388 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(phost->device.Data,buff, length);    
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800737e:	893a      	ldrh	r2, [r7, #8]
 8007380:	6879      	ldr	r1, [r7, #4]
 8007382:	4618      	mov	r0, r3
 8007384:	f000 fa17 	bl	80077b6 <USBH_ParseStringDesc>
  }
  return status;
 8007388:	7dfb      	ldrb	r3, [r7, #23]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,                          
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	607b      	str	r3, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	72fb      	strb	r3, [r7, #11]
 80073a0:	4613      	mov	r3, r2
 80073a2:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	789b      	ldrb	r3, [r3, #2]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d11c      	bne.n	80073e6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80073ac:	7afb      	ldrb	r3, [r7, #11]
 80073ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2206      	movs	r2, #6
 80073bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	893a      	ldrh	r2, [r7, #8]
 80073c2:	825a      	strh	r2, [r3, #18]
    
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 80073c4:	893b      	ldrh	r3, [r7, #8]
 80073c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80073ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073ce:	d104      	bne.n	80073da <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f240 4209 	movw	r2, #1033	; 0x409
 80073d6:	829a      	strh	r2, [r3, #20]
 80073d8:	e002      	b.n	80073e0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length; 
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8b3a      	ldrh	r2, [r7, #24]
 80073e4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff , length );     
 80073e6:	8b3b      	ldrh	r3, [r7, #24]
 80073e8:	461a      	mov	r2, r3
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 fa30 	bl	8007852 <USBH_CtlReq>
 80073f2:	4603      	mov	r3, r0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost, 
                                   uint8_t DeviceAddress)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	789b      	ldrb	r3, [r3, #2]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d10f      	bne.n	8007430 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2205      	movs	r2, #5
 800741a:	745a      	strb	r2, [r3, #17]
    
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	b29a      	uxth	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );
 8007430:	2200      	movs	r2, #0
 8007432:	2100      	movs	r1, #0
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fa0c 	bl	8007852 <USBH_CtlReq>
 800743a:	4603      	mov	r3, r0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBH_SetCfg>:
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, 
                               uint16_t cfg_idx)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	789b      	ldrb	r3, [r3, #2]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d10e      	bne.n	8007476 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2209      	movs	r2, #9
 8007462:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	887a      	ldrh	r2, [r7, #2]
 8007468:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0; 
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	82da      	strh	r2, [r3, #22]
  }
  
  return USBH_CtlReq(phost, 0 , 0 );      
 8007476:	2200      	movs	r2, #0
 8007478:	2100      	movs	r1, #0
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f9e9 	bl	8007852 <USBH_CtlReq>
 8007480:	4603      	mov	r3, r0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBH_ClrFeature>:
  * @param  hc_num: Host channel number 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost,
                                   uint8_t ep_num) 
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	789b      	ldrb	r3, [r3, #2]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d10f      	bne.n	80074be <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2202      	movs	r2, #2
 80074a2:	741a      	strb	r2, [r3, #16]
      USB_REQ_RECIPIENT_ENDPOINT |
        USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80074b0:	78fb      	ldrb	r3, [r7, #3]
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;           
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );   
 80074be:	2200      	movs	r2, #0
 80074c0:	2100      	movs	r1, #0
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f9c5 	bl	8007852 <USBH_CtlReq>
 80074c8:	4603      	mov	r3, r0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b085      	sub	sp, #20
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	4613      	mov	r3, r2
 80074de:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	781a      	ldrb	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	785a      	ldrb	r2, [r3, #1]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	3302      	adds	r3, #2
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	3303      	adds	r3, #3
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	021b      	lsls	r3, r3, #8
 8007502:	b29b      	uxth	r3, r3
 8007504:	4413      	add	r3, r2
 8007506:	b29a      	uxth	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	791a      	ldrb	r2, [r3, #4]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	795a      	ldrb	r2, [r3, #5]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	799a      	ldrb	r2, [r3, #6]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	79da      	ldrb	r2, [r3, #7]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	71da      	strb	r2, [r3, #7]
  
  if (length > 8)
 800752c:	88fb      	ldrh	r3, [r7, #6]
 800752e:	2b08      	cmp	r3, #8
 8007530:	d939      	bls.n	80075a6 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	3308      	adds	r3, #8
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	b29a      	uxth	r2, r3
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	3309      	adds	r3, #9
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	b29b      	uxth	r3, r3
 8007542:	021b      	lsls	r3, r3, #8
 8007544:	b29b      	uxth	r3, r3
 8007546:	4413      	add	r3, r2
 8007548:	b29a      	uxth	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	330a      	adds	r3, #10
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	b29a      	uxth	r2, r3
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	330b      	adds	r3, #11
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	b29b      	uxth	r3, r3
 800755e:	021b      	lsls	r3, r3, #8
 8007560:	b29b      	uxth	r3, r3
 8007562:	4413      	add	r3, r2
 8007564:	b29a      	uxth	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	330c      	adds	r3, #12
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	b29a      	uxth	r2, r3
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	330d      	adds	r3, #13
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	b29b      	uxth	r3, r3
 800757a:	021b      	lsls	r3, r3, #8
 800757c:	b29b      	uxth	r3, r3
 800757e:	4413      	add	r3, r2
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	7b9a      	ldrb	r2, [r3, #14]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	7bda      	ldrb	r2, [r3, #15]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	7c1a      	ldrb	r2, [r3, #16]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	7c5a      	ldrb	r2, [r3, #17]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	745a      	strb	r2, [r3, #17]
  }
}
 80075a6:	bf00      	nop
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <USBH_ParseCfgDesc>:
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc,
                               uint8_t *buf, 
                               uint16_t length)
{  
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b08a      	sub	sp, #40	; 0x28
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	4613      	mov	r3, r2
 80075be:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;  
  USBH_DescHeader_t             *pdesc = (USBH_DescHeader_t *)buf;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                      ptr;
  int8_t                        if_ix = 0;
 80075c4:	2300      	movs	r3, #0
 80075c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  int8_t                        ep_ix = 0;  
 80075ca:	2300      	movs	r3, #0
 80075cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  
  pdesc   = (USBH_DescHeader_t *)buf;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	781a      	ldrb	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	785a      	ldrb	r2, [r3, #1]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	3302      	adds	r3, #2
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	3303      	adds	r3, #3
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	021b      	lsls	r3, r3, #8
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	4413      	add	r3, r2
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	791a      	ldrb	r2, [r3, #4]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	795a      	ldrb	r2, [r3, #5]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	799a      	ldrb	r2, [r3, #6]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	79da      	ldrb	r2, [r3, #7]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	7a1a      	ldrb	r2, [r3, #8]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	721a      	strb	r2, [r3, #8]
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007628:	88fb      	ldrh	r3, [r7, #6]
 800762a:	2b09      	cmp	r3, #9
 800762c:	d963      	bls.n	80076f6 <USBH_ParseCfgDesc+0x144>
  {
    ptr = USB_LEN_CFG_DESC;
 800762e:	2309      	movs	r3, #9
 8007630:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007632:	2300      	movs	r3, #0
 8007634:	61fb      	str	r3, [r7, #28]
    
    
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 8007636:	e055      	b.n	80076e4 <USBH_ParseCfgDesc+0x132>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007638:	f107 0316 	add.w	r3, r7, #22
 800763c:	4619      	mov	r1, r3
 800763e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007640:	f000 f8ec 	bl	800781c <USBH_GetNextDesc>
 8007644:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	2b04      	cmp	r3, #4
 800764c:	d14a      	bne.n	80076e4 <USBH_ParseCfgDesc+0x132>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800764e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8007652:	221a      	movs	r2, #26
 8007654:	fb02 f303 	mul.w	r3, r2, r3
 8007658:	3308      	adds	r3, #8
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4413      	add	r3, r2
 800765e:	3302      	adds	r3, #2
 8007660:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)pdesc);            
 8007662:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007664:	69f8      	ldr	r0, [r7, #28]
 8007666:	f000 f84a 	bl	80076fe <USBH_ParseInterfaceDesc>
        
        ep_ix = 0;
 800766a:	2300      	movs	r3, #0
 800766c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;        
 8007670:	2300      	movs	r3, #0
 8007672:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007674:	e024      	b.n	80076c0 <USBH_ParseCfgDesc+0x10e>
        {
          pdesc = USBH_GetNextDesc((uint8_t*) pdesc, &ptr);
 8007676:	f107 0316 	add.w	r3, r7, #22
 800767a:	4619      	mov	r1, r3
 800767c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800767e:	f000 f8cd 	bl	800781c <USBH_GetNextDesc>
 8007682:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007686:	785b      	ldrb	r3, [r3, #1]
 8007688:	2b05      	cmp	r3, #5
 800768a:	d119      	bne.n	80076c0 <USBH_ParseCfgDesc+0x10e>
          {  
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800768c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8007690:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 8007694:	3201      	adds	r2, #1
 8007696:	00d2      	lsls	r2, r2, #3
 8007698:	211a      	movs	r1, #26
 800769a:	fb01 f303 	mul.w	r3, r1, r3
 800769e:	4413      	add	r3, r2
 80076a0:	3308      	adds	r3, #8
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	4413      	add	r3, r2
 80076a6:	3304      	adds	r3, #4
 80076a8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
 80076aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076ac:	69b8      	ldr	r0, [r7, #24]
 80076ae:	f000 f855 	bl	800775c <USBH_ParseEPDesc>
            ep_ix++;
 80076b2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	3301      	adds	r3, #1
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80076c0:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80076c4:	69fa      	ldr	r2, [r7, #28]
 80076c6:	7912      	ldrb	r2, [r2, #4]
 80076c8:	4293      	cmp	r3, r2
 80076ca:	da04      	bge.n	80076d6 <USBH_ParseCfgDesc+0x124>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	885a      	ldrh	r2, [r3, #2]
 80076d0:	8afb      	ldrh	r3, [r7, #22]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d8cf      	bhi.n	8007676 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80076d6:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	3301      	adds	r3, #1
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 80076e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	dc04      	bgt.n	80076f6 <USBH_ParseCfgDesc+0x144>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	885a      	ldrh	r2, [r3, #2]
 80076f0:	8afb      	ldrh	r3, [r7, #22]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d8a0      	bhi.n	8007638 <USBH_ParseCfgDesc+0x86>
      }
    }
  }  
}
 80076f6:	bf00      	nop
 80076f8:	3728      	adds	r7, #40	; 0x28
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor, 
                                      uint8_t *buf)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	781a      	ldrb	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	785a      	ldrb	r2, [r3, #1]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	789a      	ldrb	r2, [r3, #2]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	78da      	ldrb	r2, [r3, #3]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	791a      	ldrb	r2, [r3, #4]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	795a      	ldrb	r2, [r3, #5]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	799a      	ldrb	r2, [r3, #6]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	79da      	ldrb	r2, [r3, #7]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	7a1a      	ldrb	r2, [r3, #8]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	721a      	strb	r2, [r3, #8]
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	781a      	ldrb	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	785a      	ldrb	r2, [r3, #1]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	789a      	ldrb	r2, [r3, #2]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	78da      	ldrb	r2, [r3, #3]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	3304      	adds	r3, #4
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	b29a      	uxth	r2, r3
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	3305      	adds	r3, #5
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	b29b      	uxth	r3, r3
 8007796:	021b      	lsls	r3, r3, #8
 8007798:	b29b      	uxth	r3, r3
 800779a:	4413      	add	r3, r2
 800779c:	b29a      	uxth	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	799a      	ldrb	r2, [r3, #6]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	719a      	strb	r2, [r3, #6]
}
 80077aa:	bf00      	nop
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <USBH_ParseStringDesc>:
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, 
                                  uint8_t* pdest, 
                                  uint16_t length)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b087      	sub	sp, #28
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	4613      	mov	r3, r2
 80077c2:	80fb      	strh	r3, [r7, #6]
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3301      	adds	r3, #1
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	d120      	bne.n	8007810 <USBH_ParseStringDesc+0x5a>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	1e9a      	subs	r2, r3, #2
 80077d4:	88fb      	ldrh	r3, [r7, #6]
 80077d6:	4293      	cmp	r3, r2
 80077d8:	bfa8      	it	ge
 80077da:	4613      	movge	r3, r2
 80077dc:	82bb      	strh	r3, [r7, #20]
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	3302      	adds	r3, #2
 80077e2:	60fb      	str	r3, [r7, #12]
    
    for (idx = 0; idx < strlength; idx+=2 )
 80077e4:	2300      	movs	r3, #0
 80077e6:	82fb      	strh	r3, [r7, #22]
 80077e8:	e00b      	b.n	8007802 <USBH_ParseStringDesc+0x4c>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80077ea:	8afb      	ldrh	r3, [r7, #22]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	781a      	ldrb	r2, [r3, #0]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	701a      	strb	r2, [r3, #0]
      pdest++;
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	3301      	adds	r3, #1
 80077fa:	60bb      	str	r3, [r7, #8]
    for (idx = 0; idx < strlength; idx+=2 )
 80077fc:	8afb      	ldrh	r3, [r7, #22]
 80077fe:	3302      	adds	r3, #2
 8007800:	82fb      	strh	r3, [r7, #22]
 8007802:	8afa      	ldrh	r2, [r7, #22]
 8007804:	8abb      	ldrh	r3, [r7, #20]
 8007806:	429a      	cmp	r2, r3
 8007808:	d3ef      	bcc.n	80077ea <USBH_ParseStringDesc+0x34>
    }  
    *pdest = 0; /* mark end of string */  
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2200      	movs	r2, #0
 800780e:	701a      	strb	r2, [r3, #0]
  }
}
 8007810:	bf00      	nop
 8007812:	371c      	adds	r7, #28
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	881a      	ldrh	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	b29b      	uxth	r3, r3
 8007830:	4413      	add	r3, r2
 8007832:	b29a      	uxth	r2, r3
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
         ((USBH_DescHeader_t *)pbuf)->bLength);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4413      	add	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
 
  return(pnext);
 8007844:	68fb      	ldr	r3, [r7, #12]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b086      	sub	sp, #24
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	4613      	mov	r3, r2
 800785e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007860:	2301      	movs	r3, #1
 8007862:	75fb      	strb	r3, [r7, #23]
  
  switch (phost->RequestState)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	789b      	ldrb	r3, [r3, #2]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d002      	beq.n	8007872 <USBH_CtlReq+0x20>
 800786c:	2b02      	cmp	r3, #2
 800786e:	d00f      	beq.n	8007890 <USBH_CtlReq+0x3e>
      status = USBH_FAIL;
    }   
    break;
    
  default:
    break; 
 8007870:	e028      	b.n	80078c4 <USBH_CtlReq+0x72>
    phost->Control.buff = buff; 
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	88fa      	ldrh	r2, [r7, #6]
 800787c:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;  
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2201      	movs	r2, #1
 8007882:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2202      	movs	r2, #2
 8007888:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800788a:	2301      	movs	r3, #1
 800788c:	75fb      	strb	r3, [r7, #23]
    break;
 800788e:	e019      	b.n	80078c4 <USBH_CtlReq+0x72>
    status = USBH_HandleControl(phost);
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f81d 	bl	80078d0 <USBH_HandleControl>
 8007896:	4603      	mov	r3, r0
 8007898:	75fb      	strb	r3, [r7, #23]
     if (status == USBH_OK) 
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d108      	bne.n	80078b2 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2201      	movs	r2, #1
 80078a4:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;  
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;      
 80078ac:	2300      	movs	r3, #0
 80078ae:	75fb      	strb	r3, [r7, #23]
    break;
 80078b0:	e007      	b.n	80078c2 <USBH_CtlReq+0x70>
    else if  (status == USBH_FAIL)
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d104      	bne.n	80078c2 <USBH_CtlReq+0x70>
      phost->RequestState = CMD_SEND;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	709a      	strb	r2, [r3, #2]
      status = USBH_FAIL;
 80078be:	2302      	movs	r3, #2
 80078c0:	75fb      	strb	r3, [r7, #23]
    break;
 80078c2:	bf00      	nop
  }
  return status;
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
	...

080078d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 80078d8:	2301      	movs	r3, #1
 80078da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078dc:	2300      	movs	r3, #0
 80078de:	73bb      	strb	r3, [r7, #14]
  
  switch (phost->Control.state)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	7e1b      	ldrb	r3, [r3, #24]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	2b0a      	cmp	r3, #10
 80078e8:	f200 8149 	bhi.w	8007b7e <USBH_HandleControl+0x2ae>
 80078ec:	a201      	add	r2, pc, #4	; (adr r2, 80078f4 <USBH_HandleControl+0x24>)
 80078ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f2:	bf00      	nop
 80078f4:	08007921 	.word	0x08007921
 80078f8:	0800793b 	.word	0x0800793b
 80078fc:	0800799f 	.word	0x0800799f
 8007900:	080079c5 	.word	0x080079c5
 8007904:	080079fd 	.word	0x080079fd
 8007908:	08007a29 	.word	0x08007a29
 800790c:	08007a7b 	.word	0x08007a7b
 8007910:	08007a9d 	.word	0x08007a9d
 8007914:	08007ad9 	.word	0x08007ad9
 8007918:	08007b01 	.word	0x08007b01
 800791c:	08007b3f 	.word	0x08007b3f
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
	                   (uint8_t *)phost->Control.setup.d8 , 
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f103 0110 	add.w	r1, r3, #16
    USBH_CtlSendSetup     (phost, 
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	795b      	ldrb	r3, [r3, #5]
 800792a:	461a      	mov	r2, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f937 	bl	8007ba0 <USBH_CtlSendSetup>
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2202      	movs	r2, #2
 8007936:	761a      	strb	r2, [r3, #24]
    break; 
 8007938:	e12c      	b.n	8007b94 <USBH_HandleControl+0x2c4>
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	795b      	ldrb	r3, [r3, #5]
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f001 f8d9 	bl	8008af8 <USBH_LL_GetURBState>
 8007946:	4603      	mov	r3, r0
 8007948:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d11e      	bne.n	800798e <USBH_HandleControl+0xbe>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	7c1b      	ldrb	r3, [r3, #16]
 8007954:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007958:	737b      	strb	r3, [r7, #13]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	8adb      	ldrh	r3, [r3, #22]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <USBH_HandleControl+0xa8>
      {        
        if (direction == USB_D2H)
 8007962:	7b7b      	ldrb	r3, [r7, #13]
 8007964:	2b80      	cmp	r3, #128	; 0x80
 8007966:	d103      	bne.n	8007970 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2203      	movs	r2, #3
 800796c:	761a      	strb	r2, [r3, #24]
      phost->Control.state = CTRL_ERROR;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }    
    break;
 800796e:	e108      	b.n	8007b82 <USBH_HandleControl+0x2b2>
          phost->Control.state = CTRL_DATA_OUT;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2205      	movs	r2, #5
 8007974:	761a      	strb	r2, [r3, #24]
    break;
 8007976:	e104      	b.n	8007b82 <USBH_HandleControl+0x2b2>
        if (direction == USB_D2H)
 8007978:	7b7b      	ldrb	r3, [r7, #13]
 800797a:	2b80      	cmp	r3, #128	; 0x80
 800797c:	d103      	bne.n	8007986 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2209      	movs	r2, #9
 8007982:	761a      	strb	r2, [r3, #24]
    break;
 8007984:	e0fd      	b.n	8007b82 <USBH_HandleControl+0x2b2>
          phost->Control.state = CTRL_STATUS_IN;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2207      	movs	r2, #7
 800798a:	761a      	strb	r2, [r3, #24]
    break;
 800798c:	e0f9      	b.n	8007b82 <USBH_HandleControl+0x2b2>
    else if(URB_Status == USBH_URB_ERROR)
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	2b04      	cmp	r3, #4
 8007992:	f040 80f6 	bne.w	8007b82 <USBH_HandleControl+0x2b2>
      phost->Control.state = CTRL_ERROR;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	220b      	movs	r2, #11
 800799a:	761a      	strb	r2, [r3, #24]
    break;
 800799c:	e0f1      	b.n	8007b82 <USBH_HandleControl+0x2b2>
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
     phost->Control.timer = phost->Timer;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6899      	ldr	r1, [r3, #8]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	899a      	ldrh	r2, [r3, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	791b      	ldrb	r3, [r3, #4]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f931 	bl	8007c1e <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.pipe_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2204      	movs	r2, #4
 80079c0:	761a      	strb	r2, [r3, #24]
    break;    
 80079c2:	e0e7      	b.n	8007b94 <USBH_HandleControl+0x2c4>
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	791b      	ldrb	r3, [r3, #4]
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f001 f894 	bl	8008af8 <USBH_LL_GetURBState>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73bb      	strb	r3, [r7, #14]
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d102      	bne.n	80079e0 <USBH_HandleControl+0x110>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2209      	movs	r2, #9
 80079de:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	2b05      	cmp	r3, #5
 80079e4:	d102      	bne.n	80079ec <USBH_HandleControl+0x11c>
    { 
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 80079e6:	2303      	movs	r3, #3
 80079e8:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_ERROR;  
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 80079ea:	e0cc      	b.n	8007b86 <USBH_HandleControl+0x2b6>
    else if (URB_Status == USBH_URB_ERROR)
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	f040 80c9 	bne.w	8007b86 <USBH_HandleControl+0x2b6>
      phost->Control.state = CTRL_ERROR;  
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	220b      	movs	r2, #11
 80079f8:	761a      	strb	r2, [r3, #24]
    break;
 80079fa:	e0c4      	b.n	8007b86 <USBH_HandleControl+0x2b6>
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6899      	ldr	r1, [r3, #8]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	899a      	ldrh	r2, [r3, #12]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	7958      	ldrb	r0, [r3, #5]
 8007a08:	2301      	movs	r3, #1
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f8e0 	bl	8007bd4 <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2206      	movs	r2, #6
 8007a24:	761a      	strb	r2, [r3, #24]
    break;
 8007a26:	e0b5      	b.n	8007b94 <USBH_HandleControl+0x2c4>
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	795b      	ldrb	r3, [r3, #5]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 f862 	bl	8008af8 <USBH_LL_GetURBState>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73bb      	strb	r3, [r7, #14]
    
    if  (URB_Status == USBH_URB_DONE)
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d103      	bne.n	8007a46 <USBH_HandleControl+0x176>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2207      	movs	r2, #7
 8007a42:	761a      	strb	r2, [r3, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    } 
    break;
 8007a44:	e0a1      	b.n	8007b8a <USBH_HandleControl+0x2ba>
    else if  (URB_Status == USBH_URB_STALL) 
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	2b05      	cmp	r3, #5
 8007a4a:	d105      	bne.n	8007a58 <USBH_HandleControl+0x188>
      phost->Control.state = CTRL_STALLED; 
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	220c      	movs	r2, #12
 8007a50:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007a52:	2303      	movs	r3, #3
 8007a54:	73fb      	strb	r3, [r7, #15]
    break;
 8007a56:	e098      	b.n	8007b8a <USBH_HandleControl+0x2ba>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d103      	bne.n	8007a66 <USBH_HandleControl+0x196>
      phost->Control.state = CTRL_DATA_OUT;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2205      	movs	r2, #5
 8007a62:	761a      	strb	r2, [r3, #24]
    break;
 8007a64:	e091      	b.n	8007b8a <USBH_HandleControl+0x2ba>
    else if (URB_Status == USBH_URB_ERROR)
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	f040 808e 	bne.w	8007b8a <USBH_HandleControl+0x2ba>
      phost->Control.state = CTRL_ERROR;  
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	220b      	movs	r2, #11
 8007a72:	761a      	strb	r2, [r3, #24]
      status = USBH_FAIL;    
 8007a74:	2302      	movs	r3, #2
 8007a76:	73fb      	strb	r3, [r7, #15]
    break;
 8007a78:	e087      	b.n	8007b8a <USBH_HandleControl+0x2ba>
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	791b      	ldrb	r3, [r3, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2100      	movs	r1, #0
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f8cb 	bl	8007c1e <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.pipe_in);
    phost->Control.timer = phost->Timer;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2208      	movs	r2, #8
 8007a98:	761a      	strb	r2, [r3, #24]
    
    break;
 8007a9a:	e07b      	b.n	8007b94 <USBH_HandleControl+0x2c4>
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	791b      	ldrb	r3, [r3, #4]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 f828 	bl	8008af8 <USBH_LL_GetURBState>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73bb      	strb	r3, [r7, #14]
    
    if  ( URB_Status == USBH_URB_DONE)
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d105      	bne.n	8007abe <USBH_HandleControl+0x1ee>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	220d      	movs	r2, #13
 8007ab6:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73fb      	strb	r3, [r7, #15]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 8007abc:	e067      	b.n	8007b8e <USBH_HandleControl+0x2be>
    else if (URB_Status == USBH_URB_ERROR)
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d103      	bne.n	8007acc <USBH_HandleControl+0x1fc>
      phost->Control.state = CTRL_ERROR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	220b      	movs	r2, #11
 8007ac8:	761a      	strb	r2, [r3, #24]
    break;
 8007aca:	e060      	b.n	8007b8e <USBH_HandleControl+0x2be>
     else if(URB_Status == USBH_URB_STALL)
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	2b05      	cmp	r3, #5
 8007ad0:	d15d      	bne.n	8007b8e <USBH_HandleControl+0x2be>
      status = USBH_NOT_SUPPORTED;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ad6:	e05a      	b.n	8007b8e <USBH_HandleControl+0x2be>
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	795a      	ldrb	r2, [r3, #5]
 8007adc:	2301      	movs	r3, #1
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f874 	bl	8007bd4 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	220a      	movs	r2, #10
 8007afc:	761a      	strb	r2, [r3, #24]
    break;
 8007afe:	e049      	b.n	8007b94 <USBH_HandleControl+0x2c4>
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	795b      	ldrb	r3, [r3, #5]
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fff6 	bl	8008af8 <USBH_LL_GetURBState>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d105      	bne.n	8007b22 <USBH_HandleControl+0x252>
    { 
      status = USBH_OK;      
 8007b16:	2300      	movs	r3, #0
 8007b18:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE; 
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	220d      	movs	r2, #13
 8007b1e:	761a      	strb	r2, [r3, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 8007b20:	e037      	b.n	8007b92 <USBH_HandleControl+0x2c2>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d103      	bne.n	8007b30 <USBH_HandleControl+0x260>
      phost->Control.state = CTRL_STATUS_OUT;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2209      	movs	r2, #9
 8007b2c:	761a      	strb	r2, [r3, #24]
    break;
 8007b2e:	e030      	b.n	8007b92 <USBH_HandleControl+0x2c2>
    else if (URB_Status == USBH_URB_ERROR)
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d12d      	bne.n	8007b92 <USBH_HandleControl+0x2c2>
      phost->Control.state = CTRL_ERROR; 
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	220b      	movs	r2, #11
 8007b3a:	761a      	strb	r2, [r3, #24]
    break;
 8007b3c:	e029      	b.n	8007b92 <USBH_HandleControl+0x2c2>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	7e5b      	ldrb	r3, [r3, #25]
 8007b42:	3301      	adds	r3, #1
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	765a      	strb	r2, [r3, #25]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	7e5b      	ldrb	r3, [r3, #25]
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d809      	bhi.n	8007b66 <USBH_HandleControl+0x296>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fe82 	bl	800885c <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007b64:	e016      	b.n	8007b94 <USBH_HandleControl+0x2c4>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007b6c:	2106      	movs	r1, #6
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	4798      	blx	r3
      phost->Control.errorcount = 0;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8007b78:	2302      	movs	r3, #2
 8007b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b7c:	e00a      	b.n	8007b94 <USBH_HandleControl+0x2c4>
    
  default:
    break;
 8007b7e:	bf00      	nop
 8007b80:	e008      	b.n	8007b94 <USBH_HandleControl+0x2c4>
    break;
 8007b82:	bf00      	nop
 8007b84:	e006      	b.n	8007b94 <USBH_HandleControl+0x2c4>
    break;
 8007b86:	bf00      	nop
 8007b88:	e004      	b.n	8007b94 <USBH_HandleControl+0x2c4>
    break;
 8007b8a:	bf00      	nop
 8007b8c:	e002      	b.n	8007b94 <USBH_HandleControl+0x2c4>
    break;
 8007b8e:	bf00      	nop
 8007b90:	e000      	b.n	8007b94 <USBH_HandleControl+0x2c4>
    break;
 8007b92:	bf00      	nop
  }
  return status;
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop

08007ba0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af04      	add	r7, sp, #16
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	4613      	mov	r3, r2
 8007bac:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007bae:	79f9      	ldrb	r1, [r7, #7]
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	9303      	str	r3, [sp, #12]
 8007bb4:	2308      	movs	r3, #8
 8007bb6:	9302      	str	r3, [sp, #8]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	9301      	str	r3, [sp, #4]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 ff4f 	bl	8008a68 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b088      	sub	sp, #32
 8007bd8:	af04      	add	r7, sp, #16
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	4611      	mov	r1, r2
 8007be0:	461a      	mov	r2, r3
 8007be2:	460b      	mov	r3, r1
 8007be4:	80fb      	strh	r3, [r7, #6]
 8007be6:	4613      	mov	r3, r2
 8007be8:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	763b      	strb	r3, [r7, #24]
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007bf8:	7979      	ldrb	r1, [r7, #5]
 8007bfa:	7e3b      	ldrb	r3, [r7, #24]
 8007bfc:	9303      	str	r3, [sp, #12]
 8007bfe:	88fb      	ldrh	r3, [r7, #6]
 8007c00:	9302      	str	r3, [sp, #8]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	2301      	movs	r3, #1
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 ff2a 	bl	8008a68 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b088      	sub	sp, #32
 8007c22:	af04      	add	r7, sp, #16
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	4611      	mov	r1, r2
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	80fb      	strh	r3, [r7, #6]
 8007c30:	4613      	mov	r3, r2
 8007c32:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007c34:	7979      	ldrb	r1, [r7, #5]
 8007c36:	2300      	movs	r3, #0
 8007c38:	9303      	str	r3, [sp, #12]
 8007c3a:	88fb      	ldrh	r3, [r7, #6]
 8007c3c:	9302      	str	r3, [sp, #8]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	2301      	movs	r3, #1
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	2300      	movs	r3, #0
 8007c48:	2201      	movs	r2, #1
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 ff0c 	bl	8008a68 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
 8007c50:	2300      	movs	r3, #0
  
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t pipe_num)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b088      	sub	sp, #32
 8007c5e:	af04      	add	r7, sp, #16
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	4611      	mov	r1, r2
 8007c66:	461a      	mov	r2, r3
 8007c68:	460b      	mov	r3, r1
 8007c6a:	71fb      	strb	r3, [r7, #7]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007c70:	79fb      	ldrb	r3, [r7, #7]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	79b9      	ldrb	r1, [r7, #6]
 8007c76:	2200      	movs	r2, #0
 8007c78:	9203      	str	r2, [sp, #12]
 8007c7a:	9302      	str	r3, [sp, #8]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	9301      	str	r3, [sp, #4]
 8007c80:	2301      	movs	r3, #1
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	2303      	movs	r3, #3
 8007c86:	2201      	movs	r2, #1
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 feed 	bl	8008a68 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0); 
  
  return USBH_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBH_InterruptSendData>:
  */
USBH_StatusTypeDef USBH_InterruptSendData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t pipe_num)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b088      	sub	sp, #32
 8007c9c:	af04      	add	r7, sp, #16
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	71fb      	strb	r3, [r7, #7]
 8007caa:	4613      	mov	r3, r2
 8007cac:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007cae:	79fb      	ldrb	r3, [r7, #7]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	79b9      	ldrb	r1, [r7, #6]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	9203      	str	r2, [sp, #12]
 8007cb8:	9302      	str	r3, [sp, #8]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	9301      	str	r3, [sp, #4]
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 fece 	bl	8008a68 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);  
  
  return USBH_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b086      	sub	sp, #24
 8007cda:	af04      	add	r7, sp, #16
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	4608      	mov	r0, r1
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	70fb      	strb	r3, [r7, #3]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70bb      	strb	r3, [r7, #2]
 8007cec:	4613      	mov	r3, r2
 8007cee:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007cf0:	7878      	ldrb	r0, [r7, #1]
 8007cf2:	78ba      	ldrb	r2, [r7, #2]
 8007cf4:	78f9      	ldrb	r1, [r7, #3]
 8007cf6:	8b3b      	ldrh	r3, [r7, #24]
 8007cf8:	9302      	str	r3, [sp, #8]
 8007cfa:	7d3b      	ldrb	r3, [r7, #20]
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	7c3b      	ldrb	r3, [r7, #16]
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	4603      	mov	r3, r0
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fe33 	bl	8008970 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  
  return USBH_OK; 
 8007d0a:	2300      	movs	r3, #0

}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fe69 	bl	80089fc <USBH_LL_ClosePipe>
  
  return USBH_OK; 
 8007d2a:	2300      	movs	r3, #0

}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;
  
  pipe =  USBH_GetFreePipe(phost);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f836 	bl	8007db2 <USBH_GetFreePipe>
 8007d46:	4603      	mov	r3, r0
 8007d48:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFF)
 8007d4a:	89fb      	ldrh	r3, [r7, #14]
 8007d4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d009      	beq.n	8007d68 <USBH_AllocPipe+0x34>
  {
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 8007d54:	89fb      	ldrh	r3, [r7, #14]
 8007d56:	78fa      	ldrb	r2, [r7, #3]
 8007d58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	33ec      	adds	r3, #236	; 0xec
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	6059      	str	r1, [r3, #4]
  }
  return pipe;
 8007d68:	89fb      	ldrh	r3, [r7, #14]
 8007d6a:	b2db      	uxtb	r3, r3
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
   if(idx < 11)
 8007d80:	78fb      	ldrb	r3, [r7, #3]
 8007d82:	2b0a      	cmp	r3, #10
 8007d84:	d80e      	bhi.n	8007da4 <USBH_FreePipe+0x30>
   {
	 phost->Pipes[idx] &= 0x7FFF;
 8007d86:	78f8      	ldrb	r0, [r7, #3]
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	33ec      	adds	r3, #236	; 0xec
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007d98:	6879      	ldr	r1, [r7, #4]
 8007d9a:	f100 03ec 	add.w	r3, r0, #236	; 0xec
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	440b      	add	r3, r1
 8007da2:	605a      	str	r2, [r3, #4]
   }
   return USBH_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b085      	sub	sp, #20
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	73fb      	strb	r3, [r7, #15]
  
  for (idx = 0 ; idx < 11 ; idx++)
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
 8007dc2:	e00f      	b.n	8007de4 <USBH_GetFreePipe+0x32>
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	33ec      	adds	r3, #236	; 0xec
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d102      	bne.n	8007dde <USBH_GetFreePipe+0x2c>
	{
	   return idx;
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	e007      	b.n	8007dee <USBH_GetFreePipe+0x3c>
  for (idx = 0 ; idx < 11 ; idx++)
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
 8007de0:	3301      	adds	r3, #1
 8007de2:	73fb      	strb	r3, [r7, #15]
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	2b0a      	cmp	r3, #10
 8007de8:	d9ec      	bls.n	8007dc4 <USBH_GetFreePipe+0x12>
	} 
  }
  return 0xFFFF;
 8007dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <reverse>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

uint8_t reverse(uint8_t b)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	4603      	mov	r3, r0
 8007e02:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 8007e04:	79fb      	ldrb	r3, [r7, #7]
 8007e06:	091b      	lsrs	r3, r3, #4
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	b25a      	sxtb	r2, r3
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
 8007e0e:	011b      	lsls	r3, r3, #4
 8007e10:	b25b      	sxtb	r3, r3
 8007e12:	4313      	orrs	r3, r2
 8007e14:	b25b      	sxtb	r3, r3
 8007e16:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 8007e18:	79fb      	ldrb	r3, [r7, #7]
 8007e1a:	109b      	asrs	r3, r3, #2
 8007e1c:	b25b      	sxtb	r3, r3
 8007e1e:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8007e22:	b25a      	sxtb	r2, r3
 8007e24:	79fb      	ldrb	r3, [r7, #7]
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	b25b      	sxtb	r3, r3
 8007e2a:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8007e2e:	b25b      	sxtb	r3, r3
 8007e30:	4313      	orrs	r3, r2
 8007e32:	b25b      	sxtb	r3, r3
 8007e34:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 8007e36:	79fb      	ldrb	r3, [r7, #7]
 8007e38:	105b      	asrs	r3, r3, #1
 8007e3a:	b25b      	sxtb	r3, r3
 8007e3c:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8007e40:	b25a      	sxtb	r2, r3
 8007e42:	79fb      	ldrb	r3, [r7, #7]
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	b25b      	sxtb	r3, r3
 8007e48:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8007e4c:	b25b      	sxtb	r3, r3
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	b25b      	sxtb	r3, r3
 8007e52:	71fb      	strb	r3, [r7, #7]
   return b;
 8007e54:	79fb      	ldrb	r3, [r7, #7]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
	...

08007e64 <SetN64DataInputMode>:

void SetN64DataInputMode()
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
	// port A8 to input mode
	GPIOA->MODER &= ~(1 << 17);
 8007e68:	4a08      	ldr	r2, [pc, #32]	; (8007e8c <SetN64DataInputMode+0x28>)
 8007e6a:	4b08      	ldr	r3, [pc, #32]	; (8007e8c <SetN64DataInputMode+0x28>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e72:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1 << 16);
 8007e74:	4a05      	ldr	r2, [pc, #20]	; (8007e8c <SetN64DataInputMode+0x28>)
 8007e76:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <SetN64DataInputMode+0x28>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e7e:	6013      	str	r3, [r2, #0]
}
 8007e80:	bf00      	nop
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	40020000 	.word	0x40020000

08007e90 <SetN64DataOutputMode>:

void SetN64DataOutputMode()
{
 8007e90:	b480      	push	{r7}
 8007e92:	af00      	add	r7, sp, #0
	// port A8 to output mode
	GPIOA->MODER &= ~(1 << 17);
 8007e94:	4a08      	ldr	r2, [pc, #32]	; (8007eb8 <SetN64DataOutputMode+0x28>)
 8007e96:	4b08      	ldr	r3, [pc, #32]	; (8007eb8 <SetN64DataOutputMode+0x28>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e9e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1 << 16);
 8007ea0:	4a05      	ldr	r2, [pc, #20]	; (8007eb8 <SetN64DataOutputMode+0x28>)
 8007ea2:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <SetN64DataOutputMode+0x28>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eaa:	6013      	str	r3, [r2, #0]
}
 8007eac:	bf00      	nop
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	40020000 	.word	0x40020000

08007ebc <write_1>:

void write_1()
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	af00      	add	r7, sp, #0
	GPIOA->BSRR = (1 << 24);
 8007ec0:	4b07      	ldr	r3, [pc, #28]	; (8007ee0 <write_1+0x24>)
 8007ec2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ec6:	619a      	str	r2, [r3, #24]
	my_wait_us_asm(1);
 8007ec8:	2001      	movs	r0, #1
 8007eca:	f7f8 f99b 	bl	8000204 <my_wait_us_asm>
	GPIOA->BSRR = (1 << 8);
 8007ece:	4b04      	ldr	r3, [pc, #16]	; (8007ee0 <write_1+0x24>)
 8007ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ed4:	619a      	str	r2, [r3, #24]
    my_wait_us_asm(3);
 8007ed6:	2003      	movs	r0, #3
 8007ed8:	f7f8 f994 	bl	8000204 <my_wait_us_asm>
}
 8007edc:	bf00      	nop
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	40020000 	.word	0x40020000

08007ee4 <write_0>:

void write_0()
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	af00      	add	r7, sp, #0
	GPIOA->BSRR = (1 << 24);
 8007ee8:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <write_0+0x24>)
 8007eea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007eee:	619a      	str	r2, [r3, #24]
	my_wait_us_asm(3);
 8007ef0:	2003      	movs	r0, #3
 8007ef2:	f7f8 f987 	bl	8000204 <my_wait_us_asm>
	GPIOA->BSRR = (1 << 8);
 8007ef6:	4b04      	ldr	r3, [pc, #16]	; (8007f08 <write_0+0x24>)
 8007ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007efc:	619a      	str	r2, [r3, #24]
    my_wait_us_asm(1);
 8007efe:	2001      	movs	r0, #1
 8007f00:	f7f8 f980 	bl	8000204 <my_wait_us_asm>
}
 8007f04:	bf00      	nop
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	40020000 	.word	0x40020000

08007f0c <SendStop>:

void SendStop()
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	af00      	add	r7, sp, #0
	GPIOA->BSRR = (1 << 24);
 8007f10:	4b06      	ldr	r3, [pc, #24]	; (8007f2c <SendStop+0x20>)
 8007f12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f16:	619a      	str	r2, [r3, #24]
	my_wait_us_asm(1);
 8007f18:	2001      	movs	r0, #1
 8007f1a:	f7f8 f973 	bl	8000204 <my_wait_us_asm>
	GPIOA->BSRR = (1 << 8);
 8007f1e:	4b03      	ldr	r3, [pc, #12]	; (8007f2c <SendStop+0x20>)
 8007f20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f24:	619a      	str	r2, [r3, #24]
}
 8007f26:	bf00      	nop
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	40020000 	.word	0x40020000

08007f30 <SendByte>:

// send a byte from LSB to MSB (proper serialization)
void SendByte(unsigned char b)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	4603      	mov	r3, r0
 8007f38:	71fb      	strb	r3, [r7, #7]
    for(int i = 0;i < 8;i++) // send all 8 bits, one at a time
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	60fb      	str	r3, [r7, #12]
 8007f3e:	e00f      	b.n	8007f60 <SendByte+0x30>
    {
        if((b >> i) & 1)
 8007f40:	79fa      	ldrb	r2, [r7, #7]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	fa42 f303 	asr.w	r3, r2, r3
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <SendByte+0x26>
        {
            write_1();
 8007f50:	f7ff ffb4 	bl	8007ebc <write_1>
 8007f54:	e001      	b.n	8007f5a <SendByte+0x2a>
        }
        else
        {
            write_0();
 8007f56:	f7ff ffc5 	bl	8007ee4 <write_0>
    for(int i = 0;i < 8;i++) // send all 8 bits, one at a time
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2b07      	cmp	r3, #7
 8007f64:	ddec      	ble.n	8007f40 <SendByte+0x10>
        }
    }
}
 8007f66:	bf00      	nop
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <SendIdentity>:

void SendIdentity()
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	af00      	add	r7, sp, #0
    // reply 0x05, 0x00, 0x02
    SendByte(0x05);
 8007f72:	2005      	movs	r0, #5
 8007f74:	f7ff ffdc 	bl	8007f30 <SendByte>
    SendByte(0x00);
 8007f78:	2000      	movs	r0, #0
 8007f7a:	f7ff ffd9 	bl	8007f30 <SendByte>
    SendByte(0x02);
 8007f7e:	2002      	movs	r0, #2
 8007f80:	f7ff ffd6 	bl	8007f30 <SendByte>
    SendStop();
 8007f84:	f7ff ffc2 	bl	8007f0c <SendStop>
}
 8007f88:	bf00      	nop
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <SendControllerData>:

void SendControllerData()
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
    unsigned long data = *(unsigned long*)&n64_data;
 8007f92:	4b11      	ldr	r3, [pc, #68]	; (8007fd8 <SendControllerData+0x4c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	60bb      	str	r3, [r7, #8]
    unsigned int size = sizeof(data) * 8; // should be 4 bytes * 8 = 32 bits
 8007f98:	2320      	movs	r3, #32
 8007f9a:	607b      	str	r3, [r7, #4]

    for(unsigned int i = 0;i < size;i++)
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	e00f      	b.n	8007fc2 <SendControllerData+0x36>
    {
        if((data >> i) & 1)
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d002      	beq.n	8007fb8 <SendControllerData+0x2c>
        {
            write_1();
 8007fb2:	f7ff ff83 	bl	8007ebc <write_1>
 8007fb6:	e001      	b.n	8007fbc <SendControllerData+0x30>
        }
        else
        {
            write_0();
 8007fb8:	f7ff ff94 	bl	8007ee4 <write_0>
    for(unsigned int i = 0;i < size;i++)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d3eb      	bcc.n	8007fa2 <SendControllerData+0x16>
        }
    }

    SendStop();
 8007fca:	f7ff ff9f 	bl	8007f0c <SendStop>
}
 8007fce:	bf00      	nop
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	200001d8 	.word	0x200001d8

08007fdc <GetMiddleOfPulse>:

// 0 is 3 microseconds low followed by 1 microsecond high
// 1 is 1 microsecond low followed by 3 microseconds high
unsigned int GetMiddleOfPulse()
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	af00      	add	r7, sp, #0
    // wait for line to go high
    while(1)
    {
        if(GPIOA->IDR & 0x0100) break;
 8007fe0:	4b0d      	ldr	r3, [pc, #52]	; (8008018 <GetMiddleOfPulse+0x3c>)
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0f9      	beq.n	8007fe0 <GetMiddleOfPulse+0x4>
    }

    // wait for line to go low
    while(1)
    {
        if(!(GPIOA->IDR & 0x0100)) break;
 8007fec:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <GetMiddleOfPulse+0x3c>)
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d000      	beq.n	8007ffa <GetMiddleOfPulse+0x1e>
 8007ff8:	e7f8      	b.n	8007fec <GetMiddleOfPulse+0x10>
 8007ffa:	bf00      	nop
    }

    // now we have the falling edge

    // wait 2 microseconds to be in the middle of the pulse, and read. high --> 1.  low --> 0.
    my_wait_us_asm(2);
 8007ffc:	2002      	movs	r0, #2
 8007ffe:	f7f8 f901 	bl	8000204 <my_wait_us_asm>

    return (GPIOA->IDR & 0x0100) ? 1U : 0U;
 8008002:	4b05      	ldr	r3, [pc, #20]	; (8008018 <GetMiddleOfPulse+0x3c>)
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <GetMiddleOfPulse+0x36>
 800800e:	2301      	movs	r3, #1
 8008010:	e000      	b.n	8008014 <GetMiddleOfPulse+0x38>
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	bd80      	pop	{r7, pc}
 8008018:	40020000 	.word	0x40020000

0800801c <readCommand>:

// continuously read bits until at least 9 are read, confirm valid command, return without stop bit
unsigned int readCommand()
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
	// TODO: why does the interrupt sometimes come 1.5 us after falling edge? normally only 0.3us

	// we are already at the first falling edge
	// get middle of first pulse, 2us later
	my_wait_us_asm(2);
 8008022:	2002      	movs	r0, #2
 8008024:	f7f8 f8ee 	bl	8000204 <my_wait_us_asm>
    unsigned int command = (GPIOA->IDR & 0x0100) ? 1U : 0U, bits_read = 1;
 8008028:	4b11      	ldr	r3, [pc, #68]	; (8008070 <readCommand+0x54>)
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <readCommand+0x1c>
 8008034:	2301      	movs	r3, #1
 8008036:	e000      	b.n	800803a <readCommand+0x1e>
 8008038:	2300      	movs	r3, #0
 800803a:	607b      	str	r3, [r7, #4]
 800803c:	2301      	movs	r3, #1
 800803e:	603b      	str	r3, [r7, #0]

    while(1) // read at least 9 bits (2 bytes + stop bit)
    {
        command = command << 1; // make room for the new bit
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	607b      	str	r3, [r7, #4]
        command += GetMiddleOfPulse();
 8008046:	f7ff ffc9 	bl	8007fdc <GetMiddleOfPulse>
 800804a:	4602      	mov	r2, r0
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4413      	add	r3, r2
 8008050:	607b      	str	r3, [r7, #4]

        bits_read++;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	3301      	adds	r3, #1
 8008056:	603b      	str	r3, [r7, #0]

        if(bits_read >= 9) // only consider when at least a whole command's length has been read
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2b08      	cmp	r3, #8
 800805c:	d9f0      	bls.n	8008040 <readCommand+0x24>
        {
        	command = command >> 1; // get rid of the stop bit (which is always a 1)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	085b      	lsrs	r3, r3, #1
 8008062:	607b      	str	r3, [r7, #4]
        	return command;
 8008064:	687b      	ldr	r3, [r7, #4]
        }
    }
}
 8008066:	4618      	mov	r0, r3
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	40020000 	.word	0x40020000

08008074 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  memset(&n64_data,0,4); // clear controller state
 8008078:	2204      	movs	r2, #4
 800807a:	2100      	movs	r1, #0
 800807c:	4807      	ldr	r0, [pc, #28]	; (800809c <main+0x28>)
 800807e:	f000 fdf9 	bl	8008c74 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008082:	f7f8 fb97 	bl	80007b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008086:	f000 f80b 	bl	80080a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800808a:	f000 f8cb 	bl	8008224 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800808e:	f000 f89b 	bl	80081c8 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8008092:	f000 fa99 	bl	80085c8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8008096:	f000 fab3 	bl	8008600 <MX_USB_HOST_Process>
 800809a:	e7fc      	b.n	8008096 <main+0x22>
 800809c:	200001d8 	.word	0x200001d8

080080a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) // 168 MHz
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b0ac      	sub	sp, #176	; 0xb0
 80080a4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80080a6:	2300      	movs	r3, #0
 80080a8:	60bb      	str	r3, [r7, #8]
 80080aa:	4a43      	ldr	r2, [pc, #268]	; (80081b8 <SystemClock_Config+0x118>)
 80080ac:	4b42      	ldr	r3, [pc, #264]	; (80081b8 <SystemClock_Config+0x118>)
 80080ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080b4:	6413      	str	r3, [r2, #64]	; 0x40
 80080b6:	4b40      	ldr	r3, [pc, #256]	; (80081b8 <SystemClock_Config+0x118>)
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080be:	60bb      	str	r3, [r7, #8]
 80080c0:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80080c2:	2300      	movs	r3, #0
 80080c4:	607b      	str	r3, [r7, #4]
 80080c6:	4a3d      	ldr	r2, [pc, #244]	; (80081bc <SystemClock_Config+0x11c>)
 80080c8:	4b3c      	ldr	r3, [pc, #240]	; (80081bc <SystemClock_Config+0x11c>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080d0:	6013      	str	r3, [r2, #0]
 80080d2:	4b3a      	ldr	r3, [pc, #232]	; (80081bc <SystemClock_Config+0x11c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80080da:	607b      	str	r3, [r7, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80080de:	2301      	movs	r3, #1
 80080e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80080e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80080ea:	2302      	movs	r3, #2
 80080ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80080f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80080f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80080f8:	2304      	movs	r3, #4
 80080fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80080fe:	23a8      	movs	r3, #168	; 0xa8
 8008100:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008104:	2302      	movs	r3, #2
 8008106:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800810a:	2307      	movs	r3, #7
 800810c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008110:	2302      	movs	r3, #2
 8008112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008116:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800811a:	4618      	mov	r0, r3
 800811c:	f7fb f87e 	bl	800321c <HAL_RCC_OscConfig>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d004      	beq.n	8008130 <SystemClock_Config+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008126:	f44f 7199 	mov.w	r1, #306	; 0x132
 800812a:	4825      	ldr	r0, [pc, #148]	; (80081c0 <SystemClock_Config+0x120>)
 800812c:	f000 f950 	bl	80083d0 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008130:	230f      	movs	r3, #15
 8008132:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008134:	2302      	movs	r3, #2
 8008136:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008138:	2300      	movs	r3, #0
 800813a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800813c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008140:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008146:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008148:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800814c:	2105      	movs	r1, #5
 800814e:	4618      	mov	r0, r3
 8008150:	f7fa fa6e 	bl	8002630 <HAL_RCC_ClockConfig>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d004      	beq.n	8008164 <SystemClock_Config+0xc4>
  {
    _Error_Handler(__FILE__, __LINE__);
 800815a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800815e:	4818      	ldr	r0, [pc, #96]	; (80081c0 <SystemClock_Config+0x120>)
 8008160:	f000 f936 	bl	80083d0 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008168:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800816a:	2300      	movs	r3, #0
 800816c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800816e:	f107 030c 	add.w	r3, r7, #12
 8008172:	4618      	mov	r0, r3
 8008174:	f7fa fb72 	bl	800285c <HAL_RCCEx_PeriphCLKConfig>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d004      	beq.n	8008188 <SystemClock_Config+0xe8>
  {
    _Error_Handler(__FILE__, __LINE__);
 800817e:	f240 1147 	movw	r1, #327	; 0x147
 8008182:	480f      	ldr	r0, [pc, #60]	; (80081c0 <SystemClock_Config+0x120>)
 8008184:	f000 f924 	bl	80083d0 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8008188:	f7fa fb34 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 800818c:	4602      	mov	r2, r0
 800818e:	4b0d      	ldr	r3, [pc, #52]	; (80081c4 <SystemClock_Config+0x124>)
 8008190:	fba3 2302 	umull	r2, r3, r3, r2
 8008194:	099b      	lsrs	r3, r3, #6
 8008196:	4618      	mov	r0, r3
 8008198:	f7f8 fc9f 	bl	8000ada <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800819c:	2004      	movs	r0, #4
 800819e:	f7f8 fca9 	bl	8000af4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
  HAL_NVIC_SetPriority(SysTick_IRQn, 1, 0);
 80081a2:	2200      	movs	r2, #0
 80081a4:	2101      	movs	r1, #1
 80081a6:	f04f 30ff 	mov.w	r0, #4294967295
 80081aa:	f7f8 fc6c 	bl	8000a86 <HAL_NVIC_SetPriority>
}
 80081ae:	bf00      	nop
 80081b0:	37b0      	adds	r7, #176	; 0xb0
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	40023800 	.word	0x40023800
 80081bc:	40007000 	.word	0x40007000
 80081c0:	08008e44 	.word	0x08008e44
 80081c4:	10624dd3 	.word	0x10624dd3

080081c8 <MX_USART2_UART_Init>:
//  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
//}

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80081cc:	4b12      	ldr	r3, [pc, #72]	; (8008218 <MX_USART2_UART_Init+0x50>)
 80081ce:	4a13      	ldr	r2, [pc, #76]	; (800821c <MX_USART2_UART_Init+0x54>)
 80081d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80081d2:	4b11      	ldr	r3, [pc, #68]	; (8008218 <MX_USART2_UART_Init+0x50>)
 80081d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80081d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80081da:	4b0f      	ldr	r3, [pc, #60]	; (8008218 <MX_USART2_UART_Init+0x50>)
 80081dc:	2200      	movs	r2, #0
 80081de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80081e0:	4b0d      	ldr	r3, [pc, #52]	; (8008218 <MX_USART2_UART_Init+0x50>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80081e6:	4b0c      	ldr	r3, [pc, #48]	; (8008218 <MX_USART2_UART_Init+0x50>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80081ec:	4b0a      	ldr	r3, [pc, #40]	; (8008218 <MX_USART2_UART_Init+0x50>)
 80081ee:	220c      	movs	r2, #12
 80081f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80081f2:	4b09      	ldr	r3, [pc, #36]	; (8008218 <MX_USART2_UART_Init+0x50>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80081f8:	4b07      	ldr	r3, [pc, #28]	; (8008218 <MX_USART2_UART_Init+0x50>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80081fe:	4806      	ldr	r0, [pc, #24]	; (8008218 <MX_USART2_UART_Init+0x50>)
 8008200:	f7fb fa66 	bl	80036d0 <HAL_UART_Init>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d004      	beq.n	8008214 <MX_USART2_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800820a:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800820e:	4804      	ldr	r0, [pc, #16]	; (8008220 <MX_USART2_UART_Init+0x58>)
 8008210:	f000 f8de 	bl	80083d0 <_Error_Handler>
  }

}
 8008214:	bf00      	nop
 8008216:	bd80      	pop	{r7, pc}
 8008218:	200001dc 	.word	0x200001dc
 800821c:	40004400 	.word	0x40004400
 8008220:	08008e44 	.word	0x08008e44

08008224 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
static void MX_GPIO_Init(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b08a      	sub	sp, #40	; 0x28
 8008228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800822a:	2300      	movs	r3, #0
 800822c:	613b      	str	r3, [r7, #16]
 800822e:	4a62      	ldr	r2, [pc, #392]	; (80083b8 <MX_GPIO_Init+0x194>)
 8008230:	4b61      	ldr	r3, [pc, #388]	; (80083b8 <MX_GPIO_Init+0x194>)
 8008232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008234:	f043 0304 	orr.w	r3, r3, #4
 8008238:	6313      	str	r3, [r2, #48]	; 0x30
 800823a:	4b5f      	ldr	r3, [pc, #380]	; (80083b8 <MX_GPIO_Init+0x194>)
 800823c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823e:	f003 0304 	and.w	r3, r3, #4
 8008242:	613b      	str	r3, [r7, #16]
 8008244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008246:	2300      	movs	r3, #0
 8008248:	60fb      	str	r3, [r7, #12]
 800824a:	4a5b      	ldr	r2, [pc, #364]	; (80083b8 <MX_GPIO_Init+0x194>)
 800824c:	4b5a      	ldr	r3, [pc, #360]	; (80083b8 <MX_GPIO_Init+0x194>)
 800824e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008254:	6313      	str	r3, [r2, #48]	; 0x30
 8008256:	4b58      	ldr	r3, [pc, #352]	; (80083b8 <MX_GPIO_Init+0x194>)
 8008258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008262:	2300      	movs	r3, #0
 8008264:	60bb      	str	r3, [r7, #8]
 8008266:	4a54      	ldr	r2, [pc, #336]	; (80083b8 <MX_GPIO_Init+0x194>)
 8008268:	4b53      	ldr	r3, [pc, #332]	; (80083b8 <MX_GPIO_Init+0x194>)
 800826a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826c:	f043 0301 	orr.w	r3, r3, #1
 8008270:	6313      	str	r3, [r2, #48]	; 0x30
 8008272:	4b51      	ldr	r3, [pc, #324]	; (80083b8 <MX_GPIO_Init+0x194>)
 8008274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	60bb      	str	r3, [r7, #8]
 800827c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800827e:	2300      	movs	r3, #0
 8008280:	607b      	str	r3, [r7, #4]
 8008282:	4a4d      	ldr	r2, [pc, #308]	; (80083b8 <MX_GPIO_Init+0x194>)
 8008284:	4b4c      	ldr	r3, [pc, #304]	; (80083b8 <MX_GPIO_Init+0x194>)
 8008286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008288:	f043 0302 	orr.w	r3, r3, #2
 800828c:	6313      	str	r3, [r2, #48]	; 0x30
 800828e:	4b4a      	ldr	r3, [pc, #296]	; (80083b8 <MX_GPIO_Init+0x194>)
 8008290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	607b      	str	r3, [r7, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800829a:	2300      	movs	r3, #0
 800829c:	603b      	str	r3, [r7, #0]
 800829e:	4a46      	ldr	r2, [pc, #280]	; (80083b8 <MX_GPIO_Init+0x194>)
 80082a0:	4b45      	ldr	r3, [pc, #276]	; (80083b8 <MX_GPIO_Init+0x194>)
 80082a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a4:	f043 0308 	orr.w	r3, r3, #8
 80082a8:	6313      	str	r3, [r2, #48]	; 0x30
 80082aa:	4b43      	ldr	r3, [pc, #268]	; (80083b8 <MX_GPIO_Init+0x194>)
 80082ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ae:	f003 0308 	and.w	r3, r3, #8
 80082b2:	603b      	str	r3, [r7, #0]
 80082b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80082b6:	2200      	movs	r2, #0
 80082b8:	2120      	movs	r1, #32
 80082ba:	4840      	ldr	r0, [pc, #256]	; (80083bc <MX_GPIO_Init+0x198>)
 80082bc:	f7f8 fdd6 	bl	8000e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80082c0:	2200      	movs	r2, #0
 80082c2:	2140      	movs	r1, #64	; 0x40
 80082c4:	483e      	ldr	r0, [pc, #248]	; (80083c0 <MX_GPIO_Init+0x19c>)
 80082c6:	f7f8 fdd1 	bl	8000e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80082ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80082d0:	4b3c      	ldr	r3, [pc, #240]	; (80083c4 <MX_GPIO_Init+0x1a0>)
 80082d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082d4:	2300      	movs	r3, #0
 80082d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80082d8:	f107 0314 	add.w	r3, r7, #20
 80082dc:	4619      	mov	r1, r3
 80082de:	4838      	ldr	r0, [pc, #224]	; (80083c0 <MX_GPIO_Init+0x19c>)
 80082e0:	f7f8 fc32 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80082e4:	f641 73bf 	movw	r3, #8127	; 0x1fbf
 80082e8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80082ea:	2303      	movs	r3, #3
 80082ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082f2:	f107 0314 	add.w	r3, r7, #20
 80082f6:	4619      	mov	r1, r3
 80082f8:	4831      	ldr	r0, [pc, #196]	; (80083c0 <MX_GPIO_Init+0x19c>)
 80082fa:	f7f8 fc25 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6 
                           PA7 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 80082fe:	f248 43d3 	movw	r3, #34003	; 0x84d3
 8008302:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008304:	2303      	movs	r3, #3
 8008306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008308:	2300      	movs	r3, #0
 800830a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800830c:	f107 0314 	add.w	r3, r7, #20
 8008310:	4619      	mov	r1, r3
 8008312:	482a      	ldr	r0, [pc, #168]	; (80083bc <MX_GPIO_Init+0x198>)
 8008314:	f7f8 fc18 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8008318:	2320      	movs	r3, #32
 800831a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800831c:	2301      	movs	r3, #1
 800831e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008320:	2300      	movs	r3, #0
 8008322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008324:	2300      	movs	r3, #0
 8008326:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008328:	f107 0314 	add.w	r3, r7, #20
 800832c:	4619      	mov	r1, r3
 800832e:	4823      	ldr	r0, [pc, #140]	; (80083bc <MX_GPIO_Init+0x198>)
 8008330:	f7f8 fc0a 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB12 PB13 PB14 PB15 
                           PB4 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8008334:	f24f 73f7 	movw	r3, #63479	; 0xf7f7
 8008338:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800833a:	2303      	movs	r3, #3
 800833c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800833e:	2300      	movs	r3, #0
 8008340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008342:	f107 0314 	add.w	r3, r7, #20
 8008346:	4619      	mov	r1, r3
 8008348:	481f      	ldr	r0, [pc, #124]	; (80083c8 <MX_GPIO_Init+0x1a4>)
 800834a:	f7f8 fbfd 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800834e:	2340      	movs	r3, #64	; 0x40
 8008350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008352:	2301      	movs	r3, #1
 8008354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008356:	2300      	movs	r3, #0
 8008358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800835a:	2303      	movs	r3, #3
 800835c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800835e:	f107 0314 	add.w	r3, r7, #20
 8008362:	4619      	mov	r1, r3
 8008364:	4816      	ldr	r0, [pc, #88]	; (80083c0 <MX_GPIO_Init+0x19c>)
 8008366:	f7f8 fbef 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : N64_DATA_Pin */
  GPIO_InitStruct.Pin = N64_DATA_Pin;
 800836a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800836e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008370:	4b14      	ldr	r3, [pc, #80]	; (80083c4 <MX_GPIO_Init+0x1a0>)
 8008372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008374:	2300      	movs	r3, #0
 8008376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008378:	2303      	movs	r3, #3
 800837a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(N64_DATA_GPIO_Port, &GPIO_InitStruct);
 800837c:	f107 0314 	add.w	r3, r7, #20
 8008380:	4619      	mov	r1, r3
 8008382:	480e      	ldr	r0, [pc, #56]	; (80083bc <MX_GPIO_Init+0x198>)
 8008384:	f7f8 fbe0 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008388:	2304      	movs	r3, #4
 800838a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800838c:	2303      	movs	r3, #3
 800838e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008390:	2300      	movs	r3, #0
 8008392:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008394:	f107 0314 	add.w	r3, r7, #20
 8008398:	4619      	mov	r1, r3
 800839a:	480c      	ldr	r0, [pc, #48]	; (80083cc <MX_GPIO_Init+0x1a8>)
 800839c:	f7f8 fbd4 	bl	8000b48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80083a0:	2200      	movs	r2, #0
 80083a2:	2100      	movs	r1, #0
 80083a4:	2017      	movs	r0, #23
 80083a6:	f7f8 fb6e 	bl	8000a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80083aa:	2017      	movs	r0, #23
 80083ac:	f7f8 fb87 	bl	8000abe <HAL_NVIC_EnableIRQ>

}
 80083b0:	bf00      	nop
 80083b2:	3728      	adds	r7, #40	; 0x28
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	40023800 	.word	0x40023800
 80083bc:	40020000 	.word	0x40020000
 80083c0:	40020800 	.word	0x40020800
 80083c4:	10210000 	.word	0x10210000
 80083c8:	40020400 	.word	0x40020400
 80083cc:	40020c00 	.word	0x40020c00

080083d0 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80083da:	e7fe      	b.n	80083da <_Error_Handler+0xa>

080083dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083e2:	2300      	movs	r3, #0
 80083e4:	607b      	str	r3, [r7, #4]
 80083e6:	4a25      	ldr	r2, [pc, #148]	; (800847c <HAL_MspInit+0xa0>)
 80083e8:	4b24      	ldr	r3, [pc, #144]	; (800847c <HAL_MspInit+0xa0>)
 80083ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083f0:	6453      	str	r3, [r2, #68]	; 0x44
 80083f2:	4b22      	ldr	r3, [pc, #136]	; (800847c <HAL_MspInit+0xa0>)
 80083f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083fa:	607b      	str	r3, [r7, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80083fe:	2300      	movs	r3, #0
 8008400:	603b      	str	r3, [r7, #0]
 8008402:	4a1e      	ldr	r2, [pc, #120]	; (800847c <HAL_MspInit+0xa0>)
 8008404:	4b1d      	ldr	r3, [pc, #116]	; (800847c <HAL_MspInit+0xa0>)
 8008406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800840c:	6413      	str	r3, [r2, #64]	; 0x40
 800840e:	4b1b      	ldr	r3, [pc, #108]	; (800847c <HAL_MspInit+0xa0>)
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008416:	603b      	str	r3, [r7, #0]
 8008418:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800841a:	2003      	movs	r0, #3
 800841c:	f7f8 fb28 	bl	8000a70 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8008420:	2200      	movs	r2, #0
 8008422:	2101      	movs	r1, #1
 8008424:	f06f 000b 	mvn.w	r0, #11
 8008428:	f7f8 fb2d 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 800842c:	2200      	movs	r2, #0
 800842e:	2101      	movs	r1, #1
 8008430:	f06f 000a 	mvn.w	r0, #10
 8008434:	f7f8 fb27 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8008438:	2200      	movs	r2, #0
 800843a:	2101      	movs	r1, #1
 800843c:	f06f 0009 	mvn.w	r0, #9
 8008440:	f7f8 fb21 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8008444:	2200      	movs	r2, #0
 8008446:	2101      	movs	r1, #1
 8008448:	f06f 0004 	mvn.w	r0, #4
 800844c:	f7f8 fb1b 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8008450:	2200      	movs	r2, #0
 8008452:	2101      	movs	r1, #1
 8008454:	f06f 0003 	mvn.w	r0, #3
 8008458:	f7f8 fb15 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 800845c:	2200      	movs	r2, #0
 800845e:	2101      	movs	r1, #1
 8008460:	f06f 0001 	mvn.w	r0, #1
 8008464:	f7f8 fb0f 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 1, 0);
 8008468:	2200      	movs	r2, #0
 800846a:	2101      	movs	r1, #1
 800846c:	f04f 30ff 	mov.w	r0, #4294967295
 8008470:	f7f8 fb09 	bl	8000a86 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008474:	bf00      	nop
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	40023800 	.word	0x40023800

08008480 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b088      	sub	sp, #32
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a12      	ldr	r2, [pc, #72]	; (80084d8 <HAL_UART_MspInit+0x58>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d11d      	bne.n	80084ce <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008492:	2300      	movs	r3, #0
 8008494:	60bb      	str	r3, [r7, #8]
 8008496:	4a11      	ldr	r2, [pc, #68]	; (80084dc <HAL_UART_MspInit+0x5c>)
 8008498:	4b10      	ldr	r3, [pc, #64]	; (80084dc <HAL_UART_MspInit+0x5c>)
 800849a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084a0:	6413      	str	r3, [r2, #64]	; 0x40
 80084a2:	4b0e      	ldr	r3, [pc, #56]	; (80084dc <HAL_UART_MspInit+0x5c>)
 80084a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084aa:	60bb      	str	r3, [r7, #8]
 80084ac:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80084ae:	230c      	movs	r3, #12
 80084b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084b2:	2302      	movs	r3, #2
 80084b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80084b6:	2301      	movs	r3, #1
 80084b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084ba:	2303      	movs	r3, #3
 80084bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80084be:	2307      	movs	r3, #7
 80084c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084c2:	f107 030c 	add.w	r3, r7, #12
 80084c6:	4619      	mov	r1, r3
 80084c8:	4805      	ldr	r0, [pc, #20]	; (80084e0 <HAL_UART_MspInit+0x60>)
 80084ca:	f7f8 fb3d 	bl	8000b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80084ce:	bf00      	nop
 80084d0:	3720      	adds	r7, #32
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	40004400 	.word	0x40004400
 80084dc:	40023800 	.word	0x40023800
 80084e0:	40020000 	.word	0x40020000

080084e4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80084e8:	f7f8 f9b6 	bl	8000858 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80084ec:	f7f8 fb1e 	bl	8000b2c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80084f0:	bf00      	nop
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
	// A8 is n64 data
	// C6 is debug pin
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Read 64 command
	GPIOC->BSRR = (1 << 6); // debug pin C6 high
 80084fa:	4b12      	ldr	r3, [pc, #72]	; (8008544 <EXTI9_5_IRQHandler+0x50>)
 80084fc:	2240      	movs	r2, #64	; 0x40
 80084fe:	619a      	str	r2, [r3, #24]
	unsigned int cmd = readCommand();
 8008500:	f7ff fd8c 	bl	800801c <readCommand>
 8008504:	6078      	str	r0, [r7, #4]

	//my_wait_us_asm(2); // wait a small amount of time before replying

	//-------- SEND RESPONSE
	SetN64DataOutputMode();
 8008506:	f7ff fcc3 	bl	8007e90 <SetN64DataOutputMode>

	switch(cmd)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d007      	beq.n	8008520 <EXTI9_5_IRQHandler+0x2c>
 8008510:	2b01      	cmp	r3, #1
 8008512:	d302      	bcc.n	800851a <EXTI9_5_IRQHandler+0x26>
 8008514:	2bff      	cmp	r3, #255	; 0xff
 8008516:	d000      	beq.n	800851a <EXTI9_5_IRQHandler+0x26>
	  case 0x01: // poll for state
		  SendControllerData();
		  break;
	  default:
		  // we do not process the read and write commands (memory pack)
		  break;
 8008518:	e005      	b.n	8008526 <EXTI9_5_IRQHandler+0x32>
		  SendIdentity();
 800851a:	f7ff fd28 	bl	8007f6e <SendIdentity>
		  break;
 800851e:	e002      	b.n	8008526 <EXTI9_5_IRQHandler+0x32>
		  SendControllerData();
 8008520:	f7ff fd34 	bl	8007f8c <SendControllerData>
		  break;
 8008524:	bf00      	nop
	}
	//-------- DONE SENDING RESPOSE

	SetN64DataInputMode();
 8008526:	f7ff fc9d 	bl	8007e64 <SetN64DataInputMode>

	GPIOC->BSRR = (1 << 22); // debug pin C6 low
 800852a:	4b06      	ldr	r3, [pc, #24]	; (8008544 <EXTI9_5_IRQHandler+0x50>)
 800852c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008530:	619a      	str	r2, [r3, #24]

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8008532:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008536:	f7f8 fcb3 	bl	8000ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800853a:	bf00      	nop
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	40020800 	.word	0x40020800

08008548 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800854c:	4802      	ldr	r0, [pc, #8]	; (8008558 <OTG_FS_IRQHandler+0x10>)
 800854e:	f7f8 ff53 	bl	80013f8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008552:	bf00      	nop
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	2000061c 	.word	0x2000061c

0800855c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800855c:	b480      	push	{r7}
 800855e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008560:	4a16      	ldr	r2, [pc, #88]	; (80085bc <SystemInit+0x60>)
 8008562:	4b16      	ldr	r3, [pc, #88]	; (80085bc <SystemInit+0x60>)
 8008564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800856c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008570:	4a13      	ldr	r2, [pc, #76]	; (80085c0 <SystemInit+0x64>)
 8008572:	4b13      	ldr	r3, [pc, #76]	; (80085c0 <SystemInit+0x64>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f043 0301 	orr.w	r3, r3, #1
 800857a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800857c:	4b10      	ldr	r3, [pc, #64]	; (80085c0 <SystemInit+0x64>)
 800857e:	2200      	movs	r2, #0
 8008580:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008582:	4a0f      	ldr	r2, [pc, #60]	; (80085c0 <SystemInit+0x64>)
 8008584:	4b0e      	ldr	r3, [pc, #56]	; (80085c0 <SystemInit+0x64>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800858c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008590:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008592:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <SystemInit+0x64>)
 8008594:	4a0b      	ldr	r2, [pc, #44]	; (80085c4 <SystemInit+0x68>)
 8008596:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008598:	4a09      	ldr	r2, [pc, #36]	; (80085c0 <SystemInit+0x64>)
 800859a:	4b09      	ldr	r3, [pc, #36]	; (80085c0 <SystemInit+0x64>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80085a4:	4b06      	ldr	r3, [pc, #24]	; (80085c0 <SystemInit+0x64>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80085aa:	4b04      	ldr	r3, [pc, #16]	; (80085bc <SystemInit+0x60>)
 80085ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80085b0:	609a      	str	r2, [r3, #8]
#endif
}
 80085b2:	bf00      	nop
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	e000ed00 	.word	0xe000ed00
 80085c0:	40023800 	.word	0x40023800
 80085c4:	24003010 	.word	0x24003010

080085c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 80085cc:	2201      	movs	r2, #1
 80085ce:	4908      	ldr	r1, [pc, #32]	; (80085f0 <MX_USB_HOST_Init+0x28>)
 80085d0:	4808      	ldr	r0, [pc, #32]	; (80085f4 <MX_USB_HOST_Init+0x2c>)
 80085d2:	f7fe fa5c 	bl	8006a8e <USBH_Init>

  USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS);
 80085d6:	4908      	ldr	r1, [pc, #32]	; (80085f8 <MX_USB_HOST_Init+0x30>)
 80085d8:	4806      	ldr	r0, [pc, #24]	; (80085f4 <MX_USB_HOST_Init+0x2c>)
 80085da:	f7fe facc 	bl	8006b76 <USBH_RegisterClass>
  USBH_RegisterClass(&hUsbHostFS, USBH_XPAD_CLASS);
 80085de:	4907      	ldr	r1, [pc, #28]	; (80085fc <MX_USB_HOST_Init+0x34>)
 80085e0:	4804      	ldr	r0, [pc, #16]	; (80085f4 <MX_USB_HOST_Init+0x2c>)
 80085e2:	f7fe fac8 	bl	8006b76 <USBH_RegisterClass>

  USBH_Start(&hUsbHostFS);
 80085e6:	4803      	ldr	r0, [pc, #12]	; (80085f4 <MX_USB_HOST_Init+0x2c>)
 80085e8:	f7fe fb57 	bl	8006c9a <USBH_Start>

  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80085ec:	bf00      	nop
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	08008615 	.word	0x08008615
 80085f4:	2000021c 	.word	0x2000021c
 80085f8:	20000038 	.word	0x20000038
 80085fc:	20000058 	.word	0x20000058

08008600 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008604:	4802      	ldr	r0, [pc, #8]	; (8008610 <MX_USB_HOST_Process+0x10>)
 8008606:	f7fe fb59 	bl	8006cbc <USBH_Process>
}
 800860a:	bf00      	nop
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	2000021c 	.word	0x2000021c

08008614 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	3b01      	subs	r3, #1
 8008624:	2b04      	cmp	r3, #4
 8008626:	d819      	bhi.n	800865c <USBH_UserProcess+0x48>
 8008628:	a201      	add	r2, pc, #4	; (adr r2, 8008630 <USBH_UserProcess+0x1c>)
 800862a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862e:	bf00      	nop
 8008630:	0800865d 	.word	0x0800865d
 8008634:	0800864d 	.word	0x0800864d
 8008638:	0800865d 	.word	0x0800865d
 800863c:	08008655 	.word	0x08008655
 8008640:	08008645 	.word	0x08008645
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008644:	4b09      	ldr	r3, [pc, #36]	; (800866c <USBH_UserProcess+0x58>)
 8008646:	2203      	movs	r2, #3
 8008648:	701a      	strb	r2, [r3, #0]
  break;
 800864a:	e008      	b.n	800865e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800864c:	4b07      	ldr	r3, [pc, #28]	; (800866c <USBH_UserProcess+0x58>)
 800864e:	2202      	movs	r2, #2
 8008650:	701a      	strb	r2, [r3, #0]
  break;
 8008652:	e004      	b.n	800865e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008654:	4b05      	ldr	r3, [pc, #20]	; (800866c <USBH_UserProcess+0x58>)
 8008656:	2201      	movs	r2, #1
 8008658:	701a      	strb	r2, [r3, #0]
  break;
 800865a:	e000      	b.n	800865e <USBH_UserProcess+0x4a>

  default:
  break;
 800865c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800865e:	bf00      	nop
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	2000010c 	.word	0x2000010c

08008670 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008680:	d139      	bne.n	80086f6 <HAL_HCD_MspInit+0x86>
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008686:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008688:	2300      	movs	r3, #0
 800868a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800868c:	2300      	movs	r3, #0
 800868e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008690:	f107 030c 	add.w	r3, r7, #12
 8008694:	4619      	mov	r1, r3
 8008696:	481a      	ldr	r0, [pc, #104]	; (8008700 <HAL_HCD_MspInit+0x90>)
 8008698:	f7f8 fa56 	bl	8000b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800869c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80086a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086a2:	2302      	movs	r3, #2
 80086a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086aa:	2303      	movs	r3, #3
 80086ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086ae:	230a      	movs	r3, #10
 80086b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086b2:	f107 030c 	add.w	r3, r7, #12
 80086b6:	4619      	mov	r1, r3
 80086b8:	4811      	ldr	r0, [pc, #68]	; (8008700 <HAL_HCD_MspInit+0x90>)
 80086ba:	f7f8 fa45 	bl	8000b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086be:	4a11      	ldr	r2, [pc, #68]	; (8008704 <HAL_HCD_MspInit+0x94>)
 80086c0:	4b10      	ldr	r3, [pc, #64]	; (8008704 <HAL_HCD_MspInit+0x94>)
 80086c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086c8:	6353      	str	r3, [r2, #52]	; 0x34
 80086ca:	2300      	movs	r3, #0
 80086cc:	60bb      	str	r3, [r7, #8]
 80086ce:	4a0d      	ldr	r2, [pc, #52]	; (8008704 <HAL_HCD_MspInit+0x94>)
 80086d0:	4b0c      	ldr	r3, [pc, #48]	; (8008704 <HAL_HCD_MspInit+0x94>)
 80086d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086d8:	6453      	str	r3, [r2, #68]	; 0x44
 80086da:	4b0a      	ldr	r3, [pc, #40]	; (8008704 <HAL_HCD_MspInit+0x94>)
 80086dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086e2:	60bb      	str	r3, [r7, #8]
 80086e4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 80086e6:	2200      	movs	r2, #0
 80086e8:	2101      	movs	r1, #1
 80086ea:	2043      	movs	r0, #67	; 0x43
 80086ec:	f7f8 f9cb 	bl	8000a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80086f0:	2043      	movs	r0, #67	; 0x43
 80086f2:	f7f8 f9e4 	bl	8000abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80086f6:	bf00      	nop
 80086f8:	3720      	adds	r7, #32
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	40020000 	.word	0x40020000
 8008704:	40023800 	.word	0x40023800

08008708 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe fd47 	bl	80071aa <USBH_LL_IncTimer>
}
 800871c:	bf00      	nop
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008732:	4618      	mov	r0, r3
 8008734:	f7fe fd63 	bl	80071fe <USBH_LL_Connect>
}
 8008738:	bf00      	nop
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fd7b 	bl	800724a <USBH_LL_Disconnect>
}
 8008754:	bf00      	nop
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	460b      	mov	r3, r1
 8008766:	70fb      	strb	r3, [r7, #3]
 8008768:	4613      	mov	r3, r2
 800876a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008786:	2b01      	cmp	r3, #1
 8008788:	d12c      	bne.n	80087e4 <USBH_LL_Init+0x6c>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800878a:	4a19      	ldr	r2, [pc, #100]	; (80087f0 <USBH_LL_Init+0x78>)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  phost->pData = &hhcd_USB_OTG_FS;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a16      	ldr	r2, [pc, #88]	; (80087f0 <USBH_LL_Init+0x78>)
 8008796:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800879a:	4b15      	ldr	r3, [pc, #84]	; (80087f0 <USBH_LL_Init+0x78>)
 800879c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80087a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80087a2:	4b13      	ldr	r3, [pc, #76]	; (80087f0 <USBH_LL_Init+0x78>)
 80087a4:	2208      	movs	r2, #8
 80087a6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80087a8:	4b11      	ldr	r3, [pc, #68]	; (80087f0 <USBH_LL_Init+0x78>)
 80087aa:	2203      	movs	r2, #3
 80087ac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80087ae:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <USBH_LL_Init+0x78>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80087b4:	4b0e      	ldr	r3, [pc, #56]	; (80087f0 <USBH_LL_Init+0x78>)
 80087b6:	2202      	movs	r2, #2
 80087b8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80087ba:	4b0d      	ldr	r3, [pc, #52]	; (80087f0 <USBH_LL_Init+0x78>)
 80087bc:	2200      	movs	r2, #0
 80087be:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80087c0:	480b      	ldr	r0, [pc, #44]	; (80087f0 <USBH_LL_Init+0x78>)
 80087c2:	f7f8 fb90 	bl	8000ee6 <HAL_HCD_Init>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d003      	beq.n	80087d4 <USBH_LL_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80087cc:	21df      	movs	r1, #223	; 0xdf
 80087ce:	4809      	ldr	r0, [pc, #36]	; (80087f4 <USBH_LL_Init+0x7c>)
 80087d0:	f7ff fdfe 	bl	80083d0 <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80087d4:	4806      	ldr	r0, [pc, #24]	; (80087f0 <USBH_LL_Init+0x78>)
 80087d6:	f7f8 ff72 	bl	80016be <HAL_HCD_GetCurrentFrame>
 80087da:	4603      	mov	r3, r0
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7fe fcd4 	bl	800718c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	2000061c 	.word	0x2000061c
 80087f4:	08008e54 	.word	0x08008e54

080087f8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Start(phost->pData);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800880e:	4618      	mov	r0, r3
 8008810:	f7f8 fef2 	bl	80015f8 <HAL_HCD_Start>
 8008814:	4603      	mov	r3, r0
 8008816:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008818:	7bbb      	ldrb	r3, [r7, #14]
 800881a:	2b03      	cmp	r3, #3
 800881c:	d816      	bhi.n	800884c <USBH_LL_Start+0x54>
 800881e:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <USBH_LL_Start+0x2c>)
 8008820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008824:	08008835 	.word	0x08008835
 8008828:	0800883b 	.word	0x0800883b
 800882c:	08008841 	.word	0x08008841
 8008830:	08008847 	.word	0x08008847
    case HAL_OK :
      usb_status = USBH_OK;
 8008834:	2300      	movs	r3, #0
 8008836:	73fb      	strb	r3, [r7, #15]
    break;
 8008838:	e00b      	b.n	8008852 <USBH_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800883a:	2302      	movs	r3, #2
 800883c:	73fb      	strb	r3, [r7, #15]
    break;
 800883e:	e008      	b.n	8008852 <USBH_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008840:	2301      	movs	r3, #1
 8008842:	73fb      	strb	r3, [r7, #15]
    break;
 8008844:	e005      	b.n	8008852 <USBH_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008846:	2302      	movs	r3, #2
 8008848:	73fb      	strb	r3, [r7, #15]
    break;
 800884a:	e002      	b.n	8008852 <USBH_LL_Start+0x5a>
    default :
      usb_status = USBH_FAIL;
 800884c:	2302      	movs	r3, #2
 800884e:	73fb      	strb	r3, [r7, #15]
    break;
 8008850:	bf00      	nop
  }
  return usb_status;
 8008852:	7bfb      	ldrb	r3, [r7, #15]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Stop(phost->pData);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8008872:	4618      	mov	r0, r3
 8008874:	f7f8 fee3 	bl	800163e <HAL_HCD_Stop>
 8008878:	4603      	mov	r3, r0
 800887a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800887c:	7bbb      	ldrb	r3, [r7, #14]
 800887e:	2b03      	cmp	r3, #3
 8008880:	d816      	bhi.n	80088b0 <USBH_LL_Stop+0x54>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <USBH_LL_Stop+0x2c>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	08008899 	.word	0x08008899
 800888c:	0800889f 	.word	0x0800889f
 8008890:	080088a5 	.word	0x080088a5
 8008894:	080088ab 	.word	0x080088ab
    case HAL_OK :
      usb_status = USBH_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]
    break;
 800889c:	e00b      	b.n	80088b6 <USBH_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800889e:	2302      	movs	r3, #2
 80088a0:	73fb      	strb	r3, [r7, #15]
    break;
 80088a2:	e008      	b.n	80088b6 <USBH_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80088a4:	2301      	movs	r3, #1
 80088a6:	73fb      	strb	r3, [r7, #15]
    break;
 80088a8:	e005      	b.n	80088b6 <USBH_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80088aa:	2302      	movs	r3, #2
 80088ac:	73fb      	strb	r3, [r7, #15]
    break;
 80088ae:	e002      	b.n	80088b6 <USBH_LL_Stop+0x5a>
    default :
      usb_status = USBH_FAIL;
 80088b0:	2302      	movs	r3, #2
 80088b2:	73fb      	strb	r3, [r7, #15]
    break;
 80088b4:	bf00      	nop
  }
  return usb_status;
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80088c8:	2301      	movs	r3, #1
 80088ca:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7f8 ff01 	bl	80016da <HAL_HCD_GetCurrentSpeed>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d007      	beq.n	80088ee <USBH_LL_GetSpeed+0x2e>
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d302      	bcc.n	80088e8 <USBH_LL_GetSpeed+0x28>
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d006      	beq.n	80088f4 <USBH_LL_GetSpeed+0x34>
 80088e6:	e008      	b.n	80088fa <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73fb      	strb	r3, [r7, #15]
    break;
 80088ec:	e008      	b.n	8008900 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80088ee:	2301      	movs	r3, #1
 80088f0:	73fb      	strb	r3, [r7, #15]
    break;
 80088f2:	e005      	b.n	8008900 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80088f4:	2302      	movs	r3, #2
 80088f6:	73fb      	strb	r3, [r7, #15]
    break;
 80088f8:	e002      	b.n	8008900 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80088fa:	2301      	movs	r3, #1
 80088fc:	73fb      	strb	r3, [r7, #15]
    break;
 80088fe:	bf00      	nop
  }
  return  speed;
 8008900:	7bfb      	ldrb	r3, [r7, #15]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
	...

0800890c <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8008922:	4618      	mov	r0, r3
 8008924:	f7f8 fea8 	bl	8001678 <HAL_HCD_ResetPort>
 8008928:	4603      	mov	r3, r0
 800892a:	73bb      	strb	r3, [r7, #14]
  switch (hal_status) {
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	2b03      	cmp	r3, #3
 8008930:	d816      	bhi.n	8008960 <USBH_LL_ResetPort+0x54>
 8008932:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <USBH_LL_ResetPort+0x2c>)
 8008934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008938:	08008949 	.word	0x08008949
 800893c:	0800894f 	.word	0x0800894f
 8008940:	08008955 	.word	0x08008955
 8008944:	0800895b 	.word	0x0800895b
    case HAL_OK :
      usb_status = USBH_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]
    break;
 800894c:	e00b      	b.n	8008966 <USBH_LL_ResetPort+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800894e:	2302      	movs	r3, #2
 8008950:	73fb      	strb	r3, [r7, #15]
    break;
 8008952:	e008      	b.n	8008966 <USBH_LL_ResetPort+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008954:	2301      	movs	r3, #1
 8008956:	73fb      	strb	r3, [r7, #15]
    break;
 8008958:	e005      	b.n	8008966 <USBH_LL_ResetPort+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800895a:	2302      	movs	r3, #2
 800895c:	73fb      	strb	r3, [r7, #15]
    break;
 800895e:	e002      	b.n	8008966 <USBH_LL_ResetPort+0x5a>
    default :
      usb_status = USBH_FAIL;
 8008960:	2302      	movs	r3, #2
 8008962:	73fb      	strb	r3, [r7, #15]
    break;
 8008964:	bf00      	nop
  }
  return usb_status;
 8008966:	7bfb      	ldrb	r3, [r7, #15]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008970:	b590      	push	{r4, r7, lr}
 8008972:	b089      	sub	sp, #36	; 0x24
 8008974:	af04      	add	r7, sp, #16
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	4608      	mov	r0, r1
 800897a:	4611      	mov	r1, r2
 800897c:	461a      	mov	r2, r3
 800897e:	4603      	mov	r3, r0
 8008980:	70fb      	strb	r3, [r7, #3]
 8008982:	460b      	mov	r3, r1
 8008984:	70bb      	strb	r3, [r7, #2]
 8008986:	4613      	mov	r3, r2
 8008988:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	; 0x3f8
 8008998:	787c      	ldrb	r4, [r7, #1]
 800899a:	78ba      	ldrb	r2, [r7, #2]
 800899c:	78f9      	ldrb	r1, [r7, #3]
 800899e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089a0:	9302      	str	r3, [sp, #8]
 80089a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80089a6:	9301      	str	r3, [sp, #4]
 80089a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	4623      	mov	r3, r4
 80089b0:	f7f8 fae5 	bl	8000f7e <HAL_HCD_HC_Init>
 80089b4:	4603      	mov	r3, r0
 80089b6:	73bb      	strb	r3, [r7, #14]
                               dev_address, speed, ep_type, mps);

  switch (hal_status) {
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	d816      	bhi.n	80089ec <USBH_LL_OpenPipe+0x7c>
 80089be:	a201      	add	r2, pc, #4	; (adr r2, 80089c4 <USBH_LL_OpenPipe+0x54>)
 80089c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c4:	080089d5 	.word	0x080089d5
 80089c8:	080089db 	.word	0x080089db
 80089cc:	080089e1 	.word	0x080089e1
 80089d0:	080089e7 	.word	0x080089e7
    case HAL_OK :
      usb_status = USBH_OK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	73fb      	strb	r3, [r7, #15]
    break;
 80089d8:	e00b      	b.n	80089f2 <USBH_LL_OpenPipe+0x82>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80089da:	2302      	movs	r3, #2
 80089dc:	73fb      	strb	r3, [r7, #15]
    break;
 80089de:	e008      	b.n	80089f2 <USBH_LL_OpenPipe+0x82>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80089e0:	2301      	movs	r3, #1
 80089e2:	73fb      	strb	r3, [r7, #15]
    break;
 80089e4:	e005      	b.n	80089f2 <USBH_LL_OpenPipe+0x82>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80089e6:	2302      	movs	r3, #2
 80089e8:	73fb      	strb	r3, [r7, #15]
    break;
 80089ea:	e002      	b.n	80089f2 <USBH_LL_OpenPipe+0x82>
    default :
      usb_status = USBH_FAIL;
 80089ec:	2302      	movs	r3, #2
 80089ee:	73fb      	strb	r3, [r7, #15]
    break;
 80089f0:	bf00      	nop
  }
  return usb_status;
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd90      	pop	{r4, r7, pc}

080089fc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8008a16:	78fa      	ldrb	r2, [r7, #3]
 8008a18:	4611      	mov	r1, r2
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7f8 fb36 	bl	800108c <HAL_HCD_HC_Halt>
 8008a20:	4603      	mov	r3, r0
 8008a22:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008a24:	7bbb      	ldrb	r3, [r7, #14]
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d816      	bhi.n	8008a58 <USBH_LL_ClosePipe+0x5c>
 8008a2a:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <USBH_LL_ClosePipe+0x34>)
 8008a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a30:	08008a41 	.word	0x08008a41
 8008a34:	08008a47 	.word	0x08008a47
 8008a38:	08008a4d 	.word	0x08008a4d
 8008a3c:	08008a53 	.word	0x08008a53
    case HAL_OK :
      usb_status = USBH_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]
    break;
 8008a44:	e00b      	b.n	8008a5e <USBH_LL_ClosePipe+0x62>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008a46:	2302      	movs	r3, #2
 8008a48:	73fb      	strb	r3, [r7, #15]
    break;
 8008a4a:	e008      	b.n	8008a5e <USBH_LL_ClosePipe+0x62>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a50:	e005      	b.n	8008a5e <USBH_LL_ClosePipe+0x62>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008a52:	2302      	movs	r3, #2
 8008a54:	73fb      	strb	r3, [r7, #15]
    break;
 8008a56:	e002      	b.n	8008a5e <USBH_LL_ClosePipe+0x62>
    default :
      usb_status = USBH_FAIL;
 8008a58:	2302      	movs	r3, #2
 8008a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a5c:	bf00      	nop
  }
  return usb_status;
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008a68:	b590      	push	{r4, r7, lr}
 8008a6a:	b089      	sub	sp, #36	; 0x24
 8008a6c:	af04      	add	r7, sp, #16
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	4608      	mov	r0, r1
 8008a72:	4611      	mov	r1, r2
 8008a74:	461a      	mov	r2, r3
 8008a76:	4603      	mov	r3, r0
 8008a78:	70fb      	strb	r3, [r7, #3]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	70bb      	strb	r3, [r7, #2]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	; 0x3f8
 8008a90:	787c      	ldrb	r4, [r7, #1]
 8008a92:	78ba      	ldrb	r2, [r7, #2]
 8008a94:	78f9      	ldrb	r1, [r7, #3]
 8008a96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a9a:	9303      	str	r3, [sp, #12]
 8008a9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a9e:	9302      	str	r3, [sp, #8]
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	4623      	mov	r3, r4
 8008aac:	f7f8 fb12 	bl	80010d4 <HAL_HCD_HC_SubmitRequest>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73bb      	strb	r3, [r7, #14]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  switch (hal_status) {
 8008ab4:	7bbb      	ldrb	r3, [r7, #14]
 8008ab6:	2b03      	cmp	r3, #3
 8008ab8:	d816      	bhi.n	8008ae8 <USBH_LL_SubmitURB+0x80>
 8008aba:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <USBH_LL_SubmitURB+0x58>)
 8008abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac0:	08008ad1 	.word	0x08008ad1
 8008ac4:	08008ad7 	.word	0x08008ad7
 8008ac8:	08008add 	.word	0x08008add
 8008acc:	08008ae3 	.word	0x08008ae3
    case HAL_OK :
      usb_status = USBH_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad4:	e00b      	b.n	8008aee <USBH_LL_SubmitURB+0x86>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8008ada:	e008      	b.n	8008aee <USBH_LL_SubmitURB+0x86>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008adc:	2301      	movs	r3, #1
 8008ade:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae0:	e005      	b.n	8008aee <USBH_LL_SubmitURB+0x86>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae6:	e002      	b.n	8008aee <USBH_LL_SubmitURB+0x86>
    default :
      usb_status = USBH_FAIL;
 8008ae8:	2302      	movs	r3, #2
 8008aea:	73fb      	strb	r3, [r7, #15]
    break;
 8008aec:	bf00      	nop
  }
  return usb_status;
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd90      	pop	{r4, r7, pc}

08008af8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	460b      	mov	r3, r1
 8008b02:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8008b0a:	78fa      	ldrb	r2, [r7, #3]
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7f8 fdc0 	bl	8001694 <HAL_HCD_HC_GetURBState>
 8008b14:	4603      	mov	r3, r0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b082      	sub	sp, #8
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	460b      	mov	r3, r1
 8008b28:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8008b2a:	20c8      	movs	r0, #200	; 0xc8
 8008b2c:	f7f7 feb4 	bl	8000898 <HAL_Delay>
  return USBH_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b085      	sub	sp, #20
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	460b      	mov	r3, r1
 8008b44:	70fb      	strb	r3, [r7, #3]
 8008b46:	4613      	mov	r3, r2
 8008b48:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8008b50:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008b52:	78fa      	ldrb	r2, [r7, #3]
 8008b54:	68f9      	ldr	r1, [r7, #12]
 8008b56:	4613      	mov	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	440b      	add	r3, r1
 8008b60:	333b      	adds	r3, #59	; 0x3b
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00a      	beq.n	8008b7e <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008b68:	78fa      	ldrb	r2, [r7, #3]
 8008b6a:	68f9      	ldr	r1, [r7, #12]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	00db      	lsls	r3, r3, #3
 8008b74:	440b      	add	r3, r1
 8008b76:	3350      	adds	r3, #80	; 0x50
 8008b78:	78ba      	ldrb	r2, [r7, #2]
 8008b7a:	701a      	strb	r2, [r3, #0]
 8008b7c:	e009      	b.n	8008b92 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008b7e:	78fa      	ldrb	r2, [r7, #3]
 8008b80:	68f9      	ldr	r1, [r7, #12]
 8008b82:	4613      	mov	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4413      	add	r3, r2
 8008b88:	00db      	lsls	r3, r3, #3
 8008b8a:	440b      	add	r3, r1
 8008b8c:	3351      	adds	r3, #81	; 0x51
 8008b8e:	78ba      	ldrb	r2, [r7, #2]
 8008b90:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7f7 fe75 	bl	8000898 <HAL_Delay>
}
 8008bae:	bf00      	nop
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008bf0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008bbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008bbe:	e003      	b.n	8008bc8 <LoopCopyDataInit>

08008bc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008bc0:	4b0c      	ldr	r3, [pc, #48]	; (8008bf4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008bc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008bc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008bc6:	3104      	adds	r1, #4

08008bc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008bc8:	480b      	ldr	r0, [pc, #44]	; (8008bf8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008bca:	4b0c      	ldr	r3, [pc, #48]	; (8008bfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008bcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008bce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008bd0:	d3f6      	bcc.n	8008bc0 <CopyDataInit>
  ldr  r2, =_sbss
 8008bd2:	4a0b      	ldr	r2, [pc, #44]	; (8008c00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008bd4:	e002      	b.n	8008bdc <LoopFillZerobss>

08008bd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008bd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008bd8:	f842 3b04 	str.w	r3, [r2], #4

08008bdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008bdc:	4b09      	ldr	r3, [pc, #36]	; (8008c04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008bde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008be0:	d3f9      	bcc.n	8008bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008be2:	f7ff fcbb 	bl	800855c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008be6:	f000 f811 	bl	8008c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008bea:	f7ff fa43 	bl	8008074 <main>
  bx  lr    
 8008bee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008bf0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008bf4:	08008fd0 	.word	0x08008fd0
  ldr  r0, =_sdata
 8008bf8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008bfc:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 8008c00:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 8008c04:	200008b8 	.word	0x200008b8

08008c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008c08:	e7fe      	b.n	8008c08 <ADC_IRQHandler>
	...

08008c0c <__libc_init_array>:
 8008c0c:	b570      	push	{r4, r5, r6, lr}
 8008c0e:	4e0d      	ldr	r6, [pc, #52]	; (8008c44 <__libc_init_array+0x38>)
 8008c10:	4c0d      	ldr	r4, [pc, #52]	; (8008c48 <__libc_init_array+0x3c>)
 8008c12:	1ba4      	subs	r4, r4, r6
 8008c14:	10a4      	asrs	r4, r4, #2
 8008c16:	2500      	movs	r5, #0
 8008c18:	42a5      	cmp	r5, r4
 8008c1a:	d109      	bne.n	8008c30 <__libc_init_array+0x24>
 8008c1c:	4e0b      	ldr	r6, [pc, #44]	; (8008c4c <__libc_init_array+0x40>)
 8008c1e:	4c0c      	ldr	r4, [pc, #48]	; (8008c50 <__libc_init_array+0x44>)
 8008c20:	f000 f8fc 	bl	8008e1c <_init>
 8008c24:	1ba4      	subs	r4, r4, r6
 8008c26:	10a4      	asrs	r4, r4, #2
 8008c28:	2500      	movs	r5, #0
 8008c2a:	42a5      	cmp	r5, r4
 8008c2c:	d105      	bne.n	8008c3a <__libc_init_array+0x2e>
 8008c2e:	bd70      	pop	{r4, r5, r6, pc}
 8008c30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c34:	4798      	blx	r3
 8008c36:	3501      	adds	r5, #1
 8008c38:	e7ee      	b.n	8008c18 <__libc_init_array+0xc>
 8008c3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c3e:	4798      	blx	r3
 8008c40:	3501      	adds	r5, #1
 8008c42:	e7f2      	b.n	8008c2a <__libc_init_array+0x1e>
 8008c44:	08008fc8 	.word	0x08008fc8
 8008c48:	08008fc8 	.word	0x08008fc8
 8008c4c:	08008fc8 	.word	0x08008fc8
 8008c50:	08008fcc 	.word	0x08008fcc

08008c54 <malloc>:
 8008c54:	4b02      	ldr	r3, [pc, #8]	; (8008c60 <malloc+0xc>)
 8008c56:	4601      	mov	r1, r0
 8008c58:	6818      	ldr	r0, [r3, #0]
 8008c5a:	f000 b861 	b.w	8008d20 <_malloc_r>
 8008c5e:	bf00      	nop
 8008c60:	2000007c 	.word	0x2000007c

08008c64 <free>:
 8008c64:	4b02      	ldr	r3, [pc, #8]	; (8008c70 <free+0xc>)
 8008c66:	4601      	mov	r1, r0
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	f000 b80b 	b.w	8008c84 <_free_r>
 8008c6e:	bf00      	nop
 8008c70:	2000007c 	.word	0x2000007c

08008c74 <memset>:
 8008c74:	4402      	add	r2, r0
 8008c76:	4603      	mov	r3, r0
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d100      	bne.n	8008c7e <memset+0xa>
 8008c7c:	4770      	bx	lr
 8008c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c82:	e7f9      	b.n	8008c78 <memset+0x4>

08008c84 <_free_r>:
 8008c84:	b538      	push	{r3, r4, r5, lr}
 8008c86:	4605      	mov	r5, r0
 8008c88:	2900      	cmp	r1, #0
 8008c8a:	d045      	beq.n	8008d18 <_free_r+0x94>
 8008c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c90:	1f0c      	subs	r4, r1, #4
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	bfb8      	it	lt
 8008c96:	18e4      	addlt	r4, r4, r3
 8008c98:	f000 f8b0 	bl	8008dfc <__malloc_lock>
 8008c9c:	4a1f      	ldr	r2, [pc, #124]	; (8008d1c <_free_r+0x98>)
 8008c9e:	6813      	ldr	r3, [r2, #0]
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	b933      	cbnz	r3, 8008cb2 <_free_r+0x2e>
 8008ca4:	6063      	str	r3, [r4, #4]
 8008ca6:	6014      	str	r4, [r2, #0]
 8008ca8:	4628      	mov	r0, r5
 8008caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cae:	f000 b8a6 	b.w	8008dfe <__malloc_unlock>
 8008cb2:	42a3      	cmp	r3, r4
 8008cb4:	d90c      	bls.n	8008cd0 <_free_r+0x4c>
 8008cb6:	6821      	ldr	r1, [r4, #0]
 8008cb8:	1862      	adds	r2, r4, r1
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	bf04      	itt	eq
 8008cbe:	681a      	ldreq	r2, [r3, #0]
 8008cc0:	685b      	ldreq	r3, [r3, #4]
 8008cc2:	6063      	str	r3, [r4, #4]
 8008cc4:	bf04      	itt	eq
 8008cc6:	1852      	addeq	r2, r2, r1
 8008cc8:	6022      	streq	r2, [r4, #0]
 8008cca:	6004      	str	r4, [r0, #0]
 8008ccc:	e7ec      	b.n	8008ca8 <_free_r+0x24>
 8008cce:	4613      	mov	r3, r2
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	b10a      	cbz	r2, 8008cd8 <_free_r+0x54>
 8008cd4:	42a2      	cmp	r2, r4
 8008cd6:	d9fa      	bls.n	8008cce <_free_r+0x4a>
 8008cd8:	6819      	ldr	r1, [r3, #0]
 8008cda:	1858      	adds	r0, r3, r1
 8008cdc:	42a0      	cmp	r0, r4
 8008cde:	d10b      	bne.n	8008cf8 <_free_r+0x74>
 8008ce0:	6820      	ldr	r0, [r4, #0]
 8008ce2:	4401      	add	r1, r0
 8008ce4:	1858      	adds	r0, r3, r1
 8008ce6:	4282      	cmp	r2, r0
 8008ce8:	6019      	str	r1, [r3, #0]
 8008cea:	d1dd      	bne.n	8008ca8 <_free_r+0x24>
 8008cec:	6810      	ldr	r0, [r2, #0]
 8008cee:	6852      	ldr	r2, [r2, #4]
 8008cf0:	605a      	str	r2, [r3, #4]
 8008cf2:	4401      	add	r1, r0
 8008cf4:	6019      	str	r1, [r3, #0]
 8008cf6:	e7d7      	b.n	8008ca8 <_free_r+0x24>
 8008cf8:	d902      	bls.n	8008d00 <_free_r+0x7c>
 8008cfa:	230c      	movs	r3, #12
 8008cfc:	602b      	str	r3, [r5, #0]
 8008cfe:	e7d3      	b.n	8008ca8 <_free_r+0x24>
 8008d00:	6820      	ldr	r0, [r4, #0]
 8008d02:	1821      	adds	r1, r4, r0
 8008d04:	428a      	cmp	r2, r1
 8008d06:	bf04      	itt	eq
 8008d08:	6811      	ldreq	r1, [r2, #0]
 8008d0a:	6852      	ldreq	r2, [r2, #4]
 8008d0c:	6062      	str	r2, [r4, #4]
 8008d0e:	bf04      	itt	eq
 8008d10:	1809      	addeq	r1, r1, r0
 8008d12:	6021      	streq	r1, [r4, #0]
 8008d14:	605c      	str	r4, [r3, #4]
 8008d16:	e7c7      	b.n	8008ca8 <_free_r+0x24>
 8008d18:	bd38      	pop	{r3, r4, r5, pc}
 8008d1a:	bf00      	nop
 8008d1c:	20000110 	.word	0x20000110

08008d20 <_malloc_r>:
 8008d20:	b570      	push	{r4, r5, r6, lr}
 8008d22:	1ccd      	adds	r5, r1, #3
 8008d24:	f025 0503 	bic.w	r5, r5, #3
 8008d28:	3508      	adds	r5, #8
 8008d2a:	2d0c      	cmp	r5, #12
 8008d2c:	bf38      	it	cc
 8008d2e:	250c      	movcc	r5, #12
 8008d30:	2d00      	cmp	r5, #0
 8008d32:	4606      	mov	r6, r0
 8008d34:	db01      	blt.n	8008d3a <_malloc_r+0x1a>
 8008d36:	42a9      	cmp	r1, r5
 8008d38:	d903      	bls.n	8008d42 <_malloc_r+0x22>
 8008d3a:	230c      	movs	r3, #12
 8008d3c:	6033      	str	r3, [r6, #0]
 8008d3e:	2000      	movs	r0, #0
 8008d40:	bd70      	pop	{r4, r5, r6, pc}
 8008d42:	f000 f85b 	bl	8008dfc <__malloc_lock>
 8008d46:	4a23      	ldr	r2, [pc, #140]	; (8008dd4 <_malloc_r+0xb4>)
 8008d48:	6814      	ldr	r4, [r2, #0]
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	b991      	cbnz	r1, 8008d74 <_malloc_r+0x54>
 8008d4e:	4c22      	ldr	r4, [pc, #136]	; (8008dd8 <_malloc_r+0xb8>)
 8008d50:	6823      	ldr	r3, [r4, #0]
 8008d52:	b91b      	cbnz	r3, 8008d5c <_malloc_r+0x3c>
 8008d54:	4630      	mov	r0, r6
 8008d56:	f000 f841 	bl	8008ddc <_sbrk_r>
 8008d5a:	6020      	str	r0, [r4, #0]
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f000 f83c 	bl	8008ddc <_sbrk_r>
 8008d64:	1c43      	adds	r3, r0, #1
 8008d66:	d126      	bne.n	8008db6 <_malloc_r+0x96>
 8008d68:	230c      	movs	r3, #12
 8008d6a:	6033      	str	r3, [r6, #0]
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f000 f846 	bl	8008dfe <__malloc_unlock>
 8008d72:	e7e4      	b.n	8008d3e <_malloc_r+0x1e>
 8008d74:	680b      	ldr	r3, [r1, #0]
 8008d76:	1b5b      	subs	r3, r3, r5
 8008d78:	d41a      	bmi.n	8008db0 <_malloc_r+0x90>
 8008d7a:	2b0b      	cmp	r3, #11
 8008d7c:	d90f      	bls.n	8008d9e <_malloc_r+0x7e>
 8008d7e:	600b      	str	r3, [r1, #0]
 8008d80:	50cd      	str	r5, [r1, r3]
 8008d82:	18cc      	adds	r4, r1, r3
 8008d84:	4630      	mov	r0, r6
 8008d86:	f000 f83a 	bl	8008dfe <__malloc_unlock>
 8008d8a:	f104 000b 	add.w	r0, r4, #11
 8008d8e:	1d23      	adds	r3, r4, #4
 8008d90:	f020 0007 	bic.w	r0, r0, #7
 8008d94:	1ac3      	subs	r3, r0, r3
 8008d96:	d01b      	beq.n	8008dd0 <_malloc_r+0xb0>
 8008d98:	425a      	negs	r2, r3
 8008d9a:	50e2      	str	r2, [r4, r3]
 8008d9c:	bd70      	pop	{r4, r5, r6, pc}
 8008d9e:	428c      	cmp	r4, r1
 8008da0:	bf0d      	iteet	eq
 8008da2:	6863      	ldreq	r3, [r4, #4]
 8008da4:	684b      	ldrne	r3, [r1, #4]
 8008da6:	6063      	strne	r3, [r4, #4]
 8008da8:	6013      	streq	r3, [r2, #0]
 8008daa:	bf18      	it	ne
 8008dac:	460c      	movne	r4, r1
 8008dae:	e7e9      	b.n	8008d84 <_malloc_r+0x64>
 8008db0:	460c      	mov	r4, r1
 8008db2:	6849      	ldr	r1, [r1, #4]
 8008db4:	e7ca      	b.n	8008d4c <_malloc_r+0x2c>
 8008db6:	1cc4      	adds	r4, r0, #3
 8008db8:	f024 0403 	bic.w	r4, r4, #3
 8008dbc:	42a0      	cmp	r0, r4
 8008dbe:	d005      	beq.n	8008dcc <_malloc_r+0xac>
 8008dc0:	1a21      	subs	r1, r4, r0
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f000 f80a 	bl	8008ddc <_sbrk_r>
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d0cd      	beq.n	8008d68 <_malloc_r+0x48>
 8008dcc:	6025      	str	r5, [r4, #0]
 8008dce:	e7d9      	b.n	8008d84 <_malloc_r+0x64>
 8008dd0:	bd70      	pop	{r4, r5, r6, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000110 	.word	0x20000110
 8008dd8:	20000114 	.word	0x20000114

08008ddc <_sbrk_r>:
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	4c06      	ldr	r4, [pc, #24]	; (8008df8 <_sbrk_r+0x1c>)
 8008de0:	2300      	movs	r3, #0
 8008de2:	4605      	mov	r5, r0
 8008de4:	4608      	mov	r0, r1
 8008de6:	6023      	str	r3, [r4, #0]
 8008de8:	f000 f80a 	bl	8008e00 <_sbrk>
 8008dec:	1c43      	adds	r3, r0, #1
 8008dee:	d102      	bne.n	8008df6 <_sbrk_r+0x1a>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	b103      	cbz	r3, 8008df6 <_sbrk_r+0x1a>
 8008df4:	602b      	str	r3, [r5, #0]
 8008df6:	bd38      	pop	{r3, r4, r5, pc}
 8008df8:	200008b4 	.word	0x200008b4

08008dfc <__malloc_lock>:
 8008dfc:	4770      	bx	lr

08008dfe <__malloc_unlock>:
 8008dfe:	4770      	bx	lr

08008e00 <_sbrk>:
 8008e00:	4b04      	ldr	r3, [pc, #16]	; (8008e14 <_sbrk+0x14>)
 8008e02:	6819      	ldr	r1, [r3, #0]
 8008e04:	4602      	mov	r2, r0
 8008e06:	b909      	cbnz	r1, 8008e0c <_sbrk+0xc>
 8008e08:	4903      	ldr	r1, [pc, #12]	; (8008e18 <_sbrk+0x18>)
 8008e0a:	6019      	str	r1, [r3, #0]
 8008e0c:	6818      	ldr	r0, [r3, #0]
 8008e0e:	4402      	add	r2, r0
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	4770      	bx	lr
 8008e14:	20000118 	.word	0x20000118
 8008e18:	200008b8 	.word	0x200008b8

08008e1c <_init>:
 8008e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1e:	bf00      	nop
 8008e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e22:	bc08      	pop	{r3}
 8008e24:	469e      	mov	lr, r3
 8008e26:	4770      	bx	lr

08008e28 <_fini>:
 8008e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2a:	bf00      	nop
 8008e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2e:	bc08      	pop	{r3}
 8008e30:	469e      	mov	lr, r3
 8008e32:	4770      	bx	lr
