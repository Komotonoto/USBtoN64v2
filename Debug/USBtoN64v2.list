
USBtoN64v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800902c  0800902c  0001902c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009564  08009564  00019564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800956c  0800956c  0001956c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009570  08009570  00019570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  08009574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000760  20000090  08009604  00020090  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200007f0  08009604  000207f0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f1f8  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003dff  00000000  00000000  0003f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d28  00000000  00000000  000430b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b90  00000000  00000000  00043de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007782  00000000  00000000  00044970  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004bf1  00000000  00000000  0004c0f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00050ce3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003c48  00000000  00000000  00050d60  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000009c  00000000  00000000  000549a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  00054a44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009014 	.word	0x08009014

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08009014 	.word	0x08009014

08000210 <my_wait_us_asm>:
.globl my_wait_us_asm
.type  my_wait_us_asm, %function

my_wait_us_asm:
WAIT_1_US:
    ADD     R1, R2, #0      // clock cycle 1
 8000210:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000214:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000218:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800021c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000220:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000224:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000228:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800022c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000230:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 10
 8000234:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000238:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800023c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000240:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000244:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000248:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800024c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000250:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000254:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000258:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 20
 800025c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000260:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000264:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000268:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800026c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000270:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000274:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000278:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800027c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000280:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 30
 8000284:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000288:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800028c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000290:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000294:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000298:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800029c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002a0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002a4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002a8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 40
 80002ac:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002b0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002b4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002b8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002bc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002c0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002c4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002c8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002cc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002d0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 50
 80002d4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002d8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002dc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002e0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002e4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002e8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002ec:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002f0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002f4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002f8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 60
 80002fc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000300:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000304:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000308:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800030c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000310:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000314:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000318:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800031c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000320:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 70
 8000324:	f102 0100 	add.w	r1, r2, #0

    SUBS    R0, R0, #1      // clock cycle 71
 8000328:	3801      	subs	r0, #1
    BGT     WAIT_1_US       // clock cycle 72
 800032a:	f73f af71 	bgt.w	8000210 <my_wait_us_asm>

    BX      LR      // return
 800032e:	4770      	bx	lr

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_uldivmod>:
 80003d0:	b953      	cbnz	r3, 80003e8 <__aeabi_uldivmod+0x18>
 80003d2:	b94a      	cbnz	r2, 80003e8 <__aeabi_uldivmod+0x18>
 80003d4:	2900      	cmp	r1, #0
 80003d6:	bf08      	it	eq
 80003d8:	2800      	cmpeq	r0, #0
 80003da:	bf1c      	itt	ne
 80003dc:	f04f 31ff 	movne.w	r1, #4294967295
 80003e0:	f04f 30ff 	movne.w	r0, #4294967295
 80003e4:	f000 b97a 	b.w	80006dc <__aeabi_idiv0>
 80003e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f0:	f000 f806 	bl	8000400 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4770      	bx	lr

08000400 <__udivmoddi4>:
 8000400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000404:	468c      	mov	ip, r1
 8000406:	460d      	mov	r5, r1
 8000408:	4604      	mov	r4, r0
 800040a:	9e08      	ldr	r6, [sp, #32]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d151      	bne.n	80004b4 <__udivmoddi4+0xb4>
 8000410:	428a      	cmp	r2, r1
 8000412:	4617      	mov	r7, r2
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0xf2>
 8000416:	fab2 fe82 	clz	lr, r2
 800041a:	f1be 0f00 	cmp.w	lr, #0
 800041e:	d00b      	beq.n	8000438 <__udivmoddi4+0x38>
 8000420:	f1ce 0c20 	rsb	ip, lr, #32
 8000424:	fa01 f50e 	lsl.w	r5, r1, lr
 8000428:	fa20 fc0c 	lsr.w	ip, r0, ip
 800042c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000430:	ea4c 0c05 	orr.w	ip, ip, r5
 8000434:	fa00 f40e 	lsl.w	r4, r0, lr
 8000438:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800043c:	0c25      	lsrs	r5, r4, #16
 800043e:	fbbc f8fa 	udiv	r8, ip, sl
 8000442:	fa1f f987 	uxth.w	r9, r7
 8000446:	fb0a cc18 	mls	ip, sl, r8, ip
 800044a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800044e:	fb08 f309 	mul.w	r3, r8, r9
 8000452:	42ab      	cmp	r3, r5
 8000454:	d90a      	bls.n	800046c <__udivmoddi4+0x6c>
 8000456:	19ed      	adds	r5, r5, r7
 8000458:	f108 32ff 	add.w	r2, r8, #4294967295
 800045c:	f080 8123 	bcs.w	80006a6 <__udivmoddi4+0x2a6>
 8000460:	42ab      	cmp	r3, r5
 8000462:	f240 8120 	bls.w	80006a6 <__udivmoddi4+0x2a6>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aed      	subs	r5, r5, r3
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb5 f0fa 	udiv	r0, r5, sl
 8000474:	fb0a 5510 	mls	r5, sl, r0, r5
 8000478:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800047c:	fb00 f909 	mul.w	r9, r0, r9
 8000480:	45a1      	cmp	r9, r4
 8000482:	d909      	bls.n	8000498 <__udivmoddi4+0x98>
 8000484:	19e4      	adds	r4, r4, r7
 8000486:	f100 33ff 	add.w	r3, r0, #4294967295
 800048a:	f080 810a 	bcs.w	80006a2 <__udivmoddi4+0x2a2>
 800048e:	45a1      	cmp	r9, r4
 8000490:	f240 8107 	bls.w	80006a2 <__udivmoddi4+0x2a2>
 8000494:	3802      	subs	r0, #2
 8000496:	443c      	add	r4, r7
 8000498:	eba4 0409 	sub.w	r4, r4, r9
 800049c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a0:	2100      	movs	r1, #0
 80004a2:	2e00      	cmp	r6, #0
 80004a4:	d061      	beq.n	800056a <__udivmoddi4+0x16a>
 80004a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80004aa:	2300      	movs	r3, #0
 80004ac:	6034      	str	r4, [r6, #0]
 80004ae:	6073      	str	r3, [r6, #4]
 80004b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d907      	bls.n	80004c8 <__udivmoddi4+0xc8>
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d054      	beq.n	8000566 <__udivmoddi4+0x166>
 80004bc:	2100      	movs	r1, #0
 80004be:	e886 0021 	stmia.w	r6, {r0, r5}
 80004c2:	4608      	mov	r0, r1
 80004c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c8:	fab3 f183 	clz	r1, r3
 80004cc:	2900      	cmp	r1, #0
 80004ce:	f040 808e 	bne.w	80005ee <__udivmoddi4+0x1ee>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d302      	bcc.n	80004dc <__udivmoddi4+0xdc>
 80004d6:	4282      	cmp	r2, r0
 80004d8:	f200 80fa 	bhi.w	80006d0 <__udivmoddi4+0x2d0>
 80004dc:	1a84      	subs	r4, r0, r2
 80004de:	eb65 0503 	sbc.w	r5, r5, r3
 80004e2:	2001      	movs	r0, #1
 80004e4:	46ac      	mov	ip, r5
 80004e6:	2e00      	cmp	r6, #0
 80004e8:	d03f      	beq.n	800056a <__udivmoddi4+0x16a>
 80004ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	b912      	cbnz	r2, 80004fa <__udivmoddi4+0xfa>
 80004f4:	2701      	movs	r7, #1
 80004f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80004fa:	fab7 fe87 	clz	lr, r7
 80004fe:	f1be 0f00 	cmp.w	lr, #0
 8000502:	d134      	bne.n	800056e <__udivmoddi4+0x16e>
 8000504:	1beb      	subs	r3, r5, r7
 8000506:	0c3a      	lsrs	r2, r7, #16
 8000508:	fa1f fc87 	uxth.w	ip, r7
 800050c:	2101      	movs	r1, #1
 800050e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000512:	0c25      	lsrs	r5, r4, #16
 8000514:	fb02 3318 	mls	r3, r2, r8, r3
 8000518:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800051c:	fb0c f308 	mul.w	r3, ip, r8
 8000520:	42ab      	cmp	r3, r5
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x134>
 8000524:	19ed      	adds	r5, r5, r7
 8000526:	f108 30ff 	add.w	r0, r8, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x132>
 800052c:	42ab      	cmp	r3, r5
 800052e:	f200 80d1 	bhi.w	80006d4 <__udivmoddi4+0x2d4>
 8000532:	4680      	mov	r8, r0
 8000534:	1aed      	subs	r5, r5, r3
 8000536:	b2a3      	uxth	r3, r4
 8000538:	fbb5 f0f2 	udiv	r0, r5, r2
 800053c:	fb02 5510 	mls	r5, r2, r0, r5
 8000540:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000544:	fb0c fc00 	mul.w	ip, ip, r0
 8000548:	45a4      	cmp	ip, r4
 800054a:	d907      	bls.n	800055c <__udivmoddi4+0x15c>
 800054c:	19e4      	adds	r4, r4, r7
 800054e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000552:	d202      	bcs.n	800055a <__udivmoddi4+0x15a>
 8000554:	45a4      	cmp	ip, r4
 8000556:	f200 80b8 	bhi.w	80006ca <__udivmoddi4+0x2ca>
 800055a:	4618      	mov	r0, r3
 800055c:	eba4 040c 	sub.w	r4, r4, ip
 8000560:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000564:	e79d      	b.n	80004a2 <__udivmoddi4+0xa2>
 8000566:	4631      	mov	r1, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056e:	f1ce 0420 	rsb	r4, lr, #32
 8000572:	fa05 f30e 	lsl.w	r3, r5, lr
 8000576:	fa07 f70e 	lsl.w	r7, r7, lr
 800057a:	fa20 f804 	lsr.w	r8, r0, r4
 800057e:	0c3a      	lsrs	r2, r7, #16
 8000580:	fa25 f404 	lsr.w	r4, r5, r4
 8000584:	ea48 0803 	orr.w	r8, r8, r3
 8000588:	fbb4 f1f2 	udiv	r1, r4, r2
 800058c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000590:	fb02 4411 	mls	r4, r2, r1, r4
 8000594:	fa1f fc87 	uxth.w	ip, r7
 8000598:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800059c:	fb01 f30c 	mul.w	r3, r1, ip
 80005a0:	42ab      	cmp	r3, r5
 80005a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80005a6:	d909      	bls.n	80005bc <__udivmoddi4+0x1bc>
 80005a8:	19ed      	adds	r5, r5, r7
 80005aa:	f101 30ff 	add.w	r0, r1, #4294967295
 80005ae:	f080 808a 	bcs.w	80006c6 <__udivmoddi4+0x2c6>
 80005b2:	42ab      	cmp	r3, r5
 80005b4:	f240 8087 	bls.w	80006c6 <__udivmoddi4+0x2c6>
 80005b8:	3902      	subs	r1, #2
 80005ba:	443d      	add	r5, r7
 80005bc:	1aeb      	subs	r3, r5, r3
 80005be:	fa1f f588 	uxth.w	r5, r8
 80005c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80005c6:	fb02 3310 	mls	r3, r2, r0, r3
 80005ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80005ce:	fb00 f30c 	mul.w	r3, r0, ip
 80005d2:	42ab      	cmp	r3, r5
 80005d4:	d907      	bls.n	80005e6 <__udivmoddi4+0x1e6>
 80005d6:	19ed      	adds	r5, r5, r7
 80005d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80005dc:	d26f      	bcs.n	80006be <__udivmoddi4+0x2be>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d96d      	bls.n	80006be <__udivmoddi4+0x2be>
 80005e2:	3802      	subs	r0, #2
 80005e4:	443d      	add	r5, r7
 80005e6:	1aeb      	subs	r3, r5, r3
 80005e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005ec:	e78f      	b.n	800050e <__udivmoddi4+0x10e>
 80005ee:	f1c1 0720 	rsb	r7, r1, #32
 80005f2:	fa22 f807 	lsr.w	r8, r2, r7
 80005f6:	408b      	lsls	r3, r1
 80005f8:	fa05 f401 	lsl.w	r4, r5, r1
 80005fc:	ea48 0303 	orr.w	r3, r8, r3
 8000600:	fa20 fe07 	lsr.w	lr, r0, r7
 8000604:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000608:	40fd      	lsrs	r5, r7
 800060a:	ea4e 0e04 	orr.w	lr, lr, r4
 800060e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000612:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000616:	fb0c 5519 	mls	r5, ip, r9, r5
 800061a:	fa1f f883 	uxth.w	r8, r3
 800061e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000622:	fb09 f408 	mul.w	r4, r9, r8
 8000626:	42ac      	cmp	r4, r5
 8000628:	fa02 f201 	lsl.w	r2, r2, r1
 800062c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000630:	d908      	bls.n	8000644 <__udivmoddi4+0x244>
 8000632:	18ed      	adds	r5, r5, r3
 8000634:	f109 30ff 	add.w	r0, r9, #4294967295
 8000638:	d243      	bcs.n	80006c2 <__udivmoddi4+0x2c2>
 800063a:	42ac      	cmp	r4, r5
 800063c:	d941      	bls.n	80006c2 <__udivmoddi4+0x2c2>
 800063e:	f1a9 0902 	sub.w	r9, r9, #2
 8000642:	441d      	add	r5, r3
 8000644:	1b2d      	subs	r5, r5, r4
 8000646:	fa1f fe8e 	uxth.w	lr, lr
 800064a:	fbb5 f0fc 	udiv	r0, r5, ip
 800064e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000652:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000656:	fb00 f808 	mul.w	r8, r0, r8
 800065a:	45a0      	cmp	r8, r4
 800065c:	d907      	bls.n	800066e <__udivmoddi4+0x26e>
 800065e:	18e4      	adds	r4, r4, r3
 8000660:	f100 35ff 	add.w	r5, r0, #4294967295
 8000664:	d229      	bcs.n	80006ba <__udivmoddi4+0x2ba>
 8000666:	45a0      	cmp	r8, r4
 8000668:	d927      	bls.n	80006ba <__udivmoddi4+0x2ba>
 800066a:	3802      	subs	r0, #2
 800066c:	441c      	add	r4, r3
 800066e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000672:	eba4 0408 	sub.w	r4, r4, r8
 8000676:	fba0 8902 	umull	r8, r9, r0, r2
 800067a:	454c      	cmp	r4, r9
 800067c:	46c6      	mov	lr, r8
 800067e:	464d      	mov	r5, r9
 8000680:	d315      	bcc.n	80006ae <__udivmoddi4+0x2ae>
 8000682:	d012      	beq.n	80006aa <__udivmoddi4+0x2aa>
 8000684:	b156      	cbz	r6, 800069c <__udivmoddi4+0x29c>
 8000686:	ebba 030e 	subs.w	r3, sl, lr
 800068a:	eb64 0405 	sbc.w	r4, r4, r5
 800068e:	fa04 f707 	lsl.w	r7, r4, r7
 8000692:	40cb      	lsrs	r3, r1
 8000694:	431f      	orrs	r7, r3
 8000696:	40cc      	lsrs	r4, r1
 8000698:	6037      	str	r7, [r6, #0]
 800069a:	6074      	str	r4, [r6, #4]
 800069c:	2100      	movs	r1, #0
 800069e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a2:	4618      	mov	r0, r3
 80006a4:	e6f8      	b.n	8000498 <__udivmoddi4+0x98>
 80006a6:	4690      	mov	r8, r2
 80006a8:	e6e0      	b.n	800046c <__udivmoddi4+0x6c>
 80006aa:	45c2      	cmp	sl, r8
 80006ac:	d2ea      	bcs.n	8000684 <__udivmoddi4+0x284>
 80006ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80006b2:	eb69 0503 	sbc.w	r5, r9, r3
 80006b6:	3801      	subs	r0, #1
 80006b8:	e7e4      	b.n	8000684 <__udivmoddi4+0x284>
 80006ba:	4628      	mov	r0, r5
 80006bc:	e7d7      	b.n	800066e <__udivmoddi4+0x26e>
 80006be:	4640      	mov	r0, r8
 80006c0:	e791      	b.n	80005e6 <__udivmoddi4+0x1e6>
 80006c2:	4681      	mov	r9, r0
 80006c4:	e7be      	b.n	8000644 <__udivmoddi4+0x244>
 80006c6:	4601      	mov	r1, r0
 80006c8:	e778      	b.n	80005bc <__udivmoddi4+0x1bc>
 80006ca:	3802      	subs	r0, #2
 80006cc:	443c      	add	r4, r7
 80006ce:	e745      	b.n	800055c <__udivmoddi4+0x15c>
 80006d0:	4608      	mov	r0, r1
 80006d2:	e708      	b.n	80004e6 <__udivmoddi4+0xe6>
 80006d4:	f1a8 0802 	sub.w	r8, r8, #2
 80006d8:	443d      	add	r5, r7
 80006da:	e72b      	b.n	8000534 <__udivmoddi4+0x134>

080006dc <__aeabi_idiv0>:
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop

080006e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006e4:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_Init+0x40>)
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <HAL_Init+0x40>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006f0:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <HAL_Init+0x40>)
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <HAL_Init+0x40>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006fc:	4a08      	ldr	r2, [pc, #32]	; (8000720 <HAL_Init+0x40>)
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <HAL_Init+0x40>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000708:	2003      	movs	r0, #3
 800070a:	f000 f947 	bl	800099c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800070e:	2000      	movs	r0, #0
 8000710:	f000 f808 	bl	8000724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000714:	f007 f8b4 	bl	8007880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023c00 	.word	0x40023c00

08000724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_InitTick+0x54>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_InitTick+0x58>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4619      	mov	r1, r3
 8000736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073a:	fbb3 f3f1 	udiv	r3, r3, r1
 800073e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000742:	4618      	mov	r0, r3
 8000744:	f000 f95f 	bl	8000a06 <HAL_SYSTICK_Config>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e00e      	b.n	8000770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b0f      	cmp	r3, #15
 8000756:	d80a      	bhi.n	800076e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000758:	2200      	movs	r2, #0
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	f000 f927 	bl	80009b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <HAL_InitTick+0x5c>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800076a:	2300      	movs	r3, #0
 800076c:	e000      	b.n	8000770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000028 	.word	0x20000028
 800077c:	20000004 	.word	0x20000004
 8000780:	20000000 	.word	0x20000000

08000784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_IncTick+0x20>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_IncTick+0x24>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_IncTick+0x24>)
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000004 	.word	0x20000004
 80007a8:	200000bc 	.word	0x200000bc

080007ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return uwTick;
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <HAL_GetTick+0x14>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	200000bc 	.word	0x200000bc

080007c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007cc:	f7ff ffee 	bl	80007ac <HAL_GetTick>
 80007d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007dc:	d005      	beq.n	80007ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_Delay+0x40>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	4413      	add	r3, r2
 80007e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80007ea:	bf00      	nop
 80007ec:	f7ff ffde 	bl	80007ac <HAL_GetTick>
 80007f0:	4602      	mov	r2, r0
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	1ad2      	subs	r2, r2, r3
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d3f7      	bcc.n	80007ec <HAL_Delay+0x28>
  {
  }
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000004 	.word	0x20000004

08000808 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <NVIC_SetPriorityGrouping+0x44>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000824:	4013      	ands	r3, r2
 8000826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083a:	4a04      	ldr	r2, [pc, #16]	; (800084c <NVIC_SetPriorityGrouping+0x44>)
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	60d3      	str	r3, [r2, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <NVIC_GetPriorityGrouping+0x18>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	f003 0307 	and.w	r3, r3, #7
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000876:	4909      	ldr	r1, [pc, #36]	; (800089c <NVIC_EnableIRQ+0x30>)
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	095b      	lsrs	r3, r3, #5
 800087e:	79fa      	ldrb	r2, [r7, #7]
 8000880:	f002 021f 	and.w	r2, r2, #31
 8000884:	2001      	movs	r0, #1
 8000886:	fa00 f202 	lsl.w	r2, r0, r2
 800088a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000e100 	.word	0xe000e100

080008a0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	da0b      	bge.n	80008cc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b4:	490d      	ldr	r1, [pc, #52]	; (80008ec <NVIC_SetPriority+0x4c>)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	f003 030f 	and.w	r3, r3, #15
 80008bc:	3b04      	subs	r3, #4
 80008be:	683a      	ldr	r2, [r7, #0]
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	0112      	lsls	r2, r2, #4
 80008c4:	b2d2      	uxtb	r2, r2
 80008c6:	440b      	add	r3, r1
 80008c8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ca:	e009      	b.n	80008e0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008cc:	4908      	ldr	r1, [pc, #32]	; (80008f0 <NVIC_SetPriority+0x50>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	b2d2      	uxtb	r2, r2
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	b2d2      	uxtb	r2, r2
 80008da:	440b      	add	r3, r1
 80008dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00
 80008f0:	e000e100 	.word	0xe000e100

080008f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b089      	sub	sp, #36	; 0x24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	f1c3 0307 	rsb	r3, r3, #7
 800090e:	2b04      	cmp	r3, #4
 8000910:	bf28      	it	cs
 8000912:	2304      	movcs	r3, #4
 8000914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3304      	adds	r3, #4
 800091a:	2b06      	cmp	r3, #6
 800091c:	d902      	bls.n	8000924 <NVIC_EncodePriority+0x30>
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3b03      	subs	r3, #3
 8000922:	e000      	b.n	8000926 <NVIC_EncodePriority+0x32>
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000928:	2201      	movs	r2, #1
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	1e5a      	subs	r2, r3, #1
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	401a      	ands	r2, r3
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800093a:	2101      	movs	r1, #1
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	1e59      	subs	r1, r3, #1
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	4313      	orrs	r3, r2
         );
}
 800094a:	4618      	mov	r0, r3
 800094c:	3724      	adds	r7, #36	; 0x24
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000968:	d301      	bcc.n	800096e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096a:	2301      	movs	r3, #1
 800096c:	e00f      	b.n	800098e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <SysTick_Config+0x40>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000976:	210f      	movs	r1, #15
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f7ff ff90 	bl	80008a0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SysTick_Config+0x40>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <SysTick_Config+0x40>)
 8000988:	2207      	movs	r2, #7
 800098a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	e000e010 	.word	0xe000e010

0800099c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff2f 	bl	8000808 <NVIC_SetPriorityGrouping>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b086      	sub	sp, #24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c4:	f7ff ff44 	bl	8000850 <NVIC_GetPriorityGrouping>
 80009c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	6978      	ldr	r0, [r7, #20]
 80009d0:	f7ff ff90 	bl	80008f4 <NVIC_EncodePriority>
 80009d4:	4602      	mov	r2, r0
 80009d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff5f 	bl	80008a0 <NVIC_SetPriority>
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff37 	bl	800086c <NVIC_EnableIRQ>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ffa2 	bl	8000958 <SysTick_Config>
 8000a14:	4603      	mov	r3, r0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	d106      	bne.n	8000a3c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a2e:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000a3a:	e005      	b.n	8000a48 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a3c:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f023 0304 	bic.w	r3, r3, #4
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000e010 	.word	0xe000e010

08000a58 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a5c:	f000 f802 	bl	8000a64 <HAL_SYSTICK_Callback>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
 8000a8e:	e165      	b.n	8000d5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a90:	2201      	movs	r2, #1
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	f040 8154 	bne.w	8000d56 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_Init+0x4a>
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	2b12      	cmp	r3, #18
 8000abc:	d123      	bne.n	8000b06 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	08da      	lsrs	r2, r3, #3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3208      	adds	r2, #8
 8000ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	220f      	movs	r2, #15
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43db      	mvns	r3, r3
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	691a      	ldr	r2, [r3, #16]
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	f003 0307 	and.w	r3, r3, #7
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	08da      	lsrs	r2, r3, #3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3208      	adds	r2, #8
 8000b00:	69b9      	ldr	r1, [r7, #24]
 8000b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	2203      	movs	r2, #3
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f003 0203 	and.w	r2, r3, #3
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d00b      	beq.n	8000b5a <HAL_GPIO_Init+0xe6>
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d007      	beq.n	8000b5a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b4e:	2b11      	cmp	r3, #17
 8000b50:	d003      	beq.n	8000b5a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2b12      	cmp	r3, #18
 8000b58:	d130      	bne.n	8000bbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2203      	movs	r2, #3
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b90:	2201      	movs	r2, #1
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	091b      	lsrs	r3, r3, #4
 8000ba6:	f003 0201 	and.w	r2, r3, #1
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	689a      	ldr	r2, [r3, #8]
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f000 80ae 	beq.w	8000d56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4a5c      	ldr	r2, [pc, #368]	; (8000d70 <HAL_GPIO_Init+0x2fc>)
 8000c00:	4b5b      	ldr	r3, [pc, #364]	; (8000d70 <HAL_GPIO_Init+0x2fc>)
 8000c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b59      	ldr	r3, [pc, #356]	; (8000d70 <HAL_GPIO_Init+0x2fc>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c16:	4a57      	ldr	r2, [pc, #348]	; (8000d74 <HAL_GPIO_Init+0x300>)
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f003 0303 	and.w	r3, r3, #3
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	220f      	movs	r2, #15
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4013      	ands	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a4e      	ldr	r2, [pc, #312]	; (8000d78 <HAL_GPIO_Init+0x304>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d025      	beq.n	8000c8e <HAL_GPIO_Init+0x21a>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a4d      	ldr	r2, [pc, #308]	; (8000d7c <HAL_GPIO_Init+0x308>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d01f      	beq.n	8000c8a <HAL_GPIO_Init+0x216>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a4c      	ldr	r2, [pc, #304]	; (8000d80 <HAL_GPIO_Init+0x30c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d019      	beq.n	8000c86 <HAL_GPIO_Init+0x212>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a4b      	ldr	r2, [pc, #300]	; (8000d84 <HAL_GPIO_Init+0x310>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d013      	beq.n	8000c82 <HAL_GPIO_Init+0x20e>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a4a      	ldr	r2, [pc, #296]	; (8000d88 <HAL_GPIO_Init+0x314>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d00d      	beq.n	8000c7e <HAL_GPIO_Init+0x20a>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a49      	ldr	r2, [pc, #292]	; (8000d8c <HAL_GPIO_Init+0x318>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d007      	beq.n	8000c7a <HAL_GPIO_Init+0x206>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a48      	ldr	r2, [pc, #288]	; (8000d90 <HAL_GPIO_Init+0x31c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d101      	bne.n	8000c76 <HAL_GPIO_Init+0x202>
 8000c72:	2306      	movs	r3, #6
 8000c74:	e00c      	b.n	8000c90 <HAL_GPIO_Init+0x21c>
 8000c76:	2307      	movs	r3, #7
 8000c78:	e00a      	b.n	8000c90 <HAL_GPIO_Init+0x21c>
 8000c7a:	2305      	movs	r3, #5
 8000c7c:	e008      	b.n	8000c90 <HAL_GPIO_Init+0x21c>
 8000c7e:	2304      	movs	r3, #4
 8000c80:	e006      	b.n	8000c90 <HAL_GPIO_Init+0x21c>
 8000c82:	2303      	movs	r3, #3
 8000c84:	e004      	b.n	8000c90 <HAL_GPIO_Init+0x21c>
 8000c86:	2302      	movs	r3, #2
 8000c88:	e002      	b.n	8000c90 <HAL_GPIO_Init+0x21c>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <HAL_GPIO_Init+0x21c>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	69fa      	ldr	r2, [r7, #28]
 8000c92:	f002 0203 	and.w	r2, r2, #3
 8000c96:	0092      	lsls	r2, r2, #2
 8000c98:	4093      	lsls	r3, r2
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ca0:	4934      	ldr	r1, [pc, #208]	; (8000d74 <HAL_GPIO_Init+0x300>)
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	089b      	lsrs	r3, r3, #2
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cae:	4b39      	ldr	r3, [pc, #228]	; (8000d94 <HAL_GPIO_Init+0x320>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d003      	beq.n	8000cd2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000cd2:	4a30      	ldr	r2, [pc, #192]	; (8000d94 <HAL_GPIO_Init+0x320>)
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <HAL_GPIO_Init+0x320>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000cfc:	4a25      	ldr	r2, [pc, #148]	; (8000d94 <HAL_GPIO_Init+0x320>)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d02:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <HAL_GPIO_Init+0x320>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d26:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <HAL_GPIO_Init+0x320>)
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d2c:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <HAL_GPIO_Init+0x320>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d50:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <HAL_GPIO_Init+0x320>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	61fb      	str	r3, [r7, #28]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	2b0f      	cmp	r3, #15
 8000d60:	f67f ae96 	bls.w	8000a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d64:	bf00      	nop
 8000d66:	3724      	adds	r7, #36	; 0x24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40013800 	.word	0x40013800
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	40020400 	.word	0x40020400
 8000d80:	40020800 	.word	0x40020800
 8000d84:	40020c00 	.word	0x40020c00
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40021400 	.word	0x40021400
 8000d90:	40021800 	.word	0x40021800
 8000d94:	40013c00 	.word	0x40013c00

08000d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	807b      	strh	r3, [r7, #2]
 8000da4:	4613      	mov	r3, r2
 8000da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000da8:	787b      	ldrb	r3, [r7, #1]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dae:	887a      	ldrh	r2, [r7, #2]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000db4:	e003      	b.n	8000dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000db6:	887b      	ldrh	r3, [r7, #2]
 8000db8:	041a      	lsls	r2, r3, #16
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	619a      	str	r2, [r3, #24]
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dd8:	695a      	ldr	r2, [r3, #20]
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d006      	beq.n	8000df0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f806 	bl	8000dfc <HAL_GPIO_EXTI_Callback>
  }
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40013c00 	.word	0x40013c00

08000dfc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{ 
 8000e12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e14:	b08d      	sub	sp, #52	; 0x34
 8000e16:	af0a      	add	r7, sp, #40	; 0x28
 8000e18:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if(hhcd == NULL)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d101      	bne.n	8000e24 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e03e      	b.n	8000ea2 <HAL_HCD_Init+0x90>
  }
  
  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
  
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2203      	movs	r2, #3
 8000e28:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_HCD_MspInit(hhcd);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f006 fe67 	bl	8007b00 <HAL_HCD_MspInit>
  
  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 feac 	bl	8003b94 <USB_DisableGlobalInt>
  
  /* Init the Core (common init.) */
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	687e      	ldr	r6, [r7, #4]
 8000e44:	466d      	mov	r5, sp
 8000e46:	f106 0410 	add.w	r4, r6, #16
 8000e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e56:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e5a:	1d33      	adds	r3, r6, #4
 8000e5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e5e:	6838      	ldr	r0, [r7, #0]
 8000e60:	f002 fe36 	bl	8003ad0 <USB_CoreInit>
  
  /* Force Host Mode*/
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2101      	movs	r1, #1
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 fea3 	bl	8003bb6 <USB_SetCurrentMode>
  
  /* Init Host */
  USB_HostInit(hhcd->Instance, hhcd->Init);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	687e      	ldr	r6, [r7, #4]
 8000e78:	466d      	mov	r5, sp
 8000e7a:	f106 0410 	add.w	r4, r6, #16
 8000e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e8e:	1d33      	adds	r3, r6, #4
 8000e90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e92:	6838      	ldr	r0, [r7, #0]
 8000e94:	f002 ffb2 	bl	8003dfc <USB_HostInit>
  
  hhcd->State= HAL_HCD_STATE_READY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000eaa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000eaa:	b590      	push	{r4, r7, lr}
 8000eac:	b089      	sub	sp, #36	; 0x24
 8000eae:	af04      	add	r7, sp, #16
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	4608      	mov	r0, r1
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4603      	mov	r3, r0
 8000eba:	70fb      	strb	r3, [r7, #3]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	70bb      	strb	r3, [r7, #2]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
  
  __HAL_LOCK(hhcd); 
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d101      	bne.n	8000ed6 <HAL_HCD_HC_Init+0x2c>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e06c      	b.n	8000fb0 <HAL_HCD_HC_Init+0x106>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000ede:	78fa      	ldrb	r2, [r7, #3]
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	3338      	adds	r3, #56	; 0x38
 8000eee:	787a      	ldrb	r2, [r7, #1]
 8000ef0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000ef2:	78fa      	ldrb	r2, [r7, #3]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	440b      	add	r3, r1
 8000f00:	3340      	adds	r3, #64	; 0x40
 8000f02:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000f04:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000f06:	78fa      	ldrb	r2, [r7, #3]
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	440b      	add	r3, r1
 8000f14:	3339      	adds	r3, #57	; 0x39
 8000f16:	78fa      	ldrb	r2, [r7, #3]
 8000f18:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000f1a:	78fa      	ldrb	r2, [r7, #3]
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	440b      	add	r3, r1
 8000f28:	333f      	adds	r3, #63	; 0x3f
 8000f2a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000f2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8000f30:	78fa      	ldrb	r2, [r7, #3]
 8000f32:	78bb      	ldrb	r3, [r7, #2]
 8000f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f38:	b2d8      	uxtb	r0, r3
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	440b      	add	r3, r1
 8000f46:	333a      	adds	r3, #58	; 0x3a
 8000f48:	4602      	mov	r2, r0
 8000f4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8000f4c:	78fa      	ldrb	r2, [r7, #3]
 8000f4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	09db      	lsrs	r3, r3, #7
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	440b      	add	r3, r1
 8000f66:	333b      	adds	r3, #59	; 0x3b
 8000f68:	4602      	mov	r2, r0
 8000f6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].speed = speed;
 8000f6c:	78fa      	ldrb	r2, [r7, #3]
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	440b      	add	r3, r1
 8000f7a:	333c      	adds	r3, #60	; 0x3c
 8000f7c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f80:	701a      	strb	r2, [r3, #0]
  
  status =  USB_HC_Init(hhcd->Instance, 
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6818      	ldr	r0, [r3, #0]
 8000f86:	787c      	ldrb	r4, [r7, #1]
 8000f88:	78ba      	ldrb	r2, [r7, #2]
 8000f8a:	78f9      	ldrb	r1, [r7, #3]
 8000f8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f8e:	9302      	str	r3, [sp, #8]
 8000f90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	4623      	mov	r3, r4
 8000f9e:	f003 f885 	bl	80040ac <USB_HC_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  return status;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd90      	pop	{r4, r7, pc}

08000fb8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
  
  __HAL_LOCK(hhcd);   
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <HAL_HCD_HC_Halt+0x1e>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e00f      	b.n	8000ff6 <HAL_HCD_HC_Halt+0x3e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	78fa      	ldrb	r2, [r7, #3]
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f003 faa9 	bl	800453e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  return status;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	4608      	mov	r0, r1
 800100a:	4611      	mov	r1, r2
 800100c:	461a      	mov	r2, r3
 800100e:	4603      	mov	r3, r0
 8001010:	70fb      	strb	r3, [r7, #3]
 8001012:	460b      	mov	r3, r1
 8001014:	70bb      	strb	r3, [r7, #2]
 8001016:	4613      	mov	r3, r2
 8001018:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800101a:	78fa      	ldrb	r2, [r7, #3]
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	440b      	add	r3, r1
 8001028:	333b      	adds	r3, #59	; 0x3b
 800102a:	78ba      	ldrb	r2, [r7, #2]
 800102c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type; 
 800102e:	78fa      	ldrb	r2, [r7, #3]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	440b      	add	r3, r1
 800103c:	333f      	adds	r3, #63	; 0x3f
 800103e:	787a      	ldrb	r2, [r7, #1]
 8001040:	701a      	strb	r2, [r3, #0]
  
  if(token == 0)
 8001042:	7c3b      	ldrb	r3, [r7, #16]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10a      	bne.n	800105e <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001048:	78fa      	ldrb	r2, [r7, #3]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	440b      	add	r3, r1
 8001056:	3342      	adds	r3, #66	; 0x42
 8001058:	2203      	movs	r2, #3
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	e009      	b.n	8001072 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800105e:	78fa      	ldrb	r2, [r7, #3]
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	3342      	adds	r3, #66	; 0x42
 800106e:	2202      	movs	r2, #2
 8001070:	701a      	strb	r2, [r3, #0]
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 8001072:	787b      	ldrb	r3, [r7, #1]
 8001074:	2b03      	cmp	r3, #3
 8001076:	f200 8104 	bhi.w	8001282 <HAL_HCD_HC_SubmitRequest+0x282>
 800107a:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <HAL_HCD_HC_SubmitRequest+0x80>)
 800107c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001080:	08001091 	.word	0x08001091
 8001084:	08001267 	.word	0x08001267
 8001088:	08001129 	.word	0x08001129
 800108c:	080011dd 	.word	0x080011dd
  {
  case EP_TYPE_CTRL:
    if((token == 1) && (direction == 0)) /*send data */
 8001090:	7c3b      	ldrb	r3, [r7, #16]
 8001092:	2b01      	cmp	r3, #1
 8001094:	f040 80f2 	bne.w	800127c <HAL_HCD_HC_SubmitRequest+0x27c>
 8001098:	78bb      	ldrb	r3, [r7, #2]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f040 80ee 	bne.w	800127c <HAL_HCD_HC_SubmitRequest+0x27c>
    {
      if (length == 0)
 80010a0:	8b3b      	ldrh	r3, [r7, #24]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d109      	bne.n	80010ba <HAL_HCD_HC_SubmitRequest+0xba>
      { /* For Status OUT stage, Length==0, Status Out PID = 1 */
        hhcd->hc[ch_num].toggle_out = 1;
 80010a6:	78fa      	ldrb	r2, [r7, #3]
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	440b      	add	r3, r1
 80010b4:	3351      	adds	r3, #81	; 0x51
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
      }
      
      /* Set the Data Toggle bit as per the Flag */
      if (hhcd->hc[ch_num].toggle_out == 0)
 80010ba:	78fa      	ldrb	r2, [r7, #3]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	440b      	add	r3, r1
 80010c8:	3351      	adds	r3, #81	; 0x51
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10a      	bne.n	80010e6 <HAL_HCD_HC_SubmitRequest+0xe6>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 80010d0:	78fa      	ldrb	r2, [r7, #3]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	440b      	add	r3, r1
 80010de:	3342      	adds	r3, #66	; 0x42
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e009      	b.n	80010fa <HAL_HCD_HC_SubmitRequest+0xfa>
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80010e6:	78fa      	ldrb	r2, [r7, #3]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	440b      	add	r3, r1
 80010f4:	3342      	adds	r3, #66	; 0x42
 80010f6:	2202      	movs	r2, #2
 80010f8:	701a      	strb	r2, [r3, #0]
      }
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 80010fa:	78fa      	ldrb	r2, [r7, #3]
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	440b      	add	r3, r1
 8001108:	335c      	adds	r3, #92	; 0x5c
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b02      	cmp	r3, #2
 800110e:	f000 80b5 	beq.w	800127c <HAL_HCD_HC_SubmitRequest+0x27c>
      {
        hhcd->hc[ch_num].do_ping = do_ping;
 8001112:	78fa      	ldrb	r2, [r7, #3]
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	440b      	add	r3, r1
 8001120:	333d      	adds	r3, #61	; 0x3d
 8001122:	7f3a      	ldrb	r2, [r7, #28]
 8001124:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 8001126:	e0a9      	b.n	800127c <HAL_HCD_HC_SubmitRequest+0x27c>
  
  case EP_TYPE_BULK:
    if(direction == 0)
 8001128:	78bb      	ldrb	r3, [r7, #2]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d135      	bne.n	800119a <HAL_HCD_HC_SubmitRequest+0x19a>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 800112e:	78fa      	ldrb	r2, [r7, #3]
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	3351      	adds	r3, #81	; 0x51
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10a      	bne.n	800115a <HAL_HCD_HC_SubmitRequest+0x15a>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 8001144:	78fa      	ldrb	r2, [r7, #3]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	440b      	add	r3, r1
 8001152:	3342      	adds	r3, #66	; 0x42
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	e009      	b.n	800116e <HAL_HCD_HC_SubmitRequest+0x16e>
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800115a:	78fa      	ldrb	r2, [r7, #3]
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	440b      	add	r3, r1
 8001168:	3342      	adds	r3, #66	; 0x42
 800116a:	2202      	movs	r2, #2
 800116c:	701a      	strb	r2, [r3, #0]
      }
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 800116e:	78fa      	ldrb	r2, [r7, #3]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	440b      	add	r3, r1
 800117c:	335c      	adds	r3, #92	; 0x5c
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d07d      	beq.n	8001280 <HAL_HCD_HC_SubmitRequest+0x280>
      {
        hhcd->hc[ch_num].do_ping = do_ping;
 8001184:	78fa      	ldrb	r2, [r7, #3]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	440b      	add	r3, r1
 8001192:	333d      	adds	r3, #61	; 0x3d
 8001194:	7f3a      	ldrb	r2, [r7, #28]
 8001196:	701a      	strb	r2, [r3, #0]
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    
    break;
 8001198:	e072      	b.n	8001280 <HAL_HCD_HC_SubmitRequest+0x280>
      if( hhcd->hc[ch_num].toggle_in == 0)
 800119a:	78fa      	ldrb	r2, [r7, #3]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	440b      	add	r3, r1
 80011a8:	3350      	adds	r3, #80	; 0x50
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10a      	bne.n	80011c6 <HAL_HCD_HC_SubmitRequest+0x1c6>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80011b0:	78fa      	ldrb	r2, [r7, #3]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	440b      	add	r3, r1
 80011be:	3342      	adds	r3, #66	; 0x42
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
    break;
 80011c4:	e05c      	b.n	8001280 <HAL_HCD_HC_SubmitRequest+0x280>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80011c6:	78fa      	ldrb	r2, [r7, #3]
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	440b      	add	r3, r1
 80011d4:	3342      	adds	r3, #66	; 0x42
 80011d6:	2202      	movs	r2, #2
 80011d8:	701a      	strb	r2, [r3, #0]
    break;
 80011da:	e051      	b.n	8001280 <HAL_HCD_HC_SubmitRequest+0x280>
  case EP_TYPE_INTR:
    if(direction == 0)
 80011dc:	78bb      	ldrb	r3, [r7, #2]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d120      	bne.n	8001224 <HAL_HCD_HC_SubmitRequest+0x224>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 80011e2:	78fa      	ldrb	r2, [r7, #3]
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	440b      	add	r3, r1
 80011f0:	3351      	adds	r3, #81	; 0x51
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10a      	bne.n	800120e <HAL_HCD_HC_SubmitRequest+0x20e>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 80011f8:	78fa      	ldrb	r2, [r7, #3]
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	440b      	add	r3, r1
 8001206:	3342      	adds	r3, #66	; 0x42
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
      else
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    break;
 800120c:	e039      	b.n	8001282 <HAL_HCD_HC_SubmitRequest+0x282>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800120e:	78fa      	ldrb	r2, [r7, #3]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	440b      	add	r3, r1
 800121c:	3342      	adds	r3, #66	; 0x42
 800121e:	2202      	movs	r2, #2
 8001220:	701a      	strb	r2, [r3, #0]
    break;
 8001222:	e02e      	b.n	8001282 <HAL_HCD_HC_SubmitRequest+0x282>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8001224:	78fa      	ldrb	r2, [r7, #3]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	440b      	add	r3, r1
 8001232:	3350      	adds	r3, #80	; 0x50
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10a      	bne.n	8001250 <HAL_HCD_HC_SubmitRequest+0x250>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	440b      	add	r3, r1
 8001248:	3342      	adds	r3, #66	; 0x42
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
    break;
 800124e:	e018      	b.n	8001282 <HAL_HCD_HC_SubmitRequest+0x282>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001250:	78fa      	ldrb	r2, [r7, #3]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	440b      	add	r3, r1
 800125e:	3342      	adds	r3, #66	; 0x42
 8001260:	2202      	movs	r2, #2
 8001262:	701a      	strb	r2, [r3, #0]
    break;
 8001264:	e00d      	b.n	8001282 <HAL_HCD_HC_SubmitRequest+0x282>
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001266:	78fa      	ldrb	r2, [r7, #3]
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	440b      	add	r3, r1
 8001274:	3342      	adds	r3, #66	; 0x42
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
    break;  
 800127a:	e002      	b.n	8001282 <HAL_HCD_HC_SubmitRequest+0x282>
    break;
 800127c:	bf00      	nop
 800127e:	e000      	b.n	8001282 <HAL_HCD_HC_SubmitRequest+0x282>
    break;
 8001280:	bf00      	nop
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001282:	78fa      	ldrb	r2, [r7, #3]
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	440b      	add	r3, r1
 8001290:	3344      	adds	r3, #68	; 0x44
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001296:	78fa      	ldrb	r2, [r7, #3]
 8001298:	8b39      	ldrh	r1, [r7, #24]
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4403      	add	r3, r0
 80012a6:	3348      	adds	r3, #72	; 0x48
 80012a8:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 80012aa:	78fa      	ldrb	r2, [r7, #3]
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	335c      	adds	r3, #92	; 0x5c
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0;
 80012be:	78fa      	ldrb	r2, [r7, #3]
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	440b      	add	r3, r1
 80012cc:	334c      	adds	r3, #76	; 0x4c
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80012d2:	78fa      	ldrb	r2, [r7, #3]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	440b      	add	r3, r1
 80012e0:	3339      	adds	r3, #57	; 0x39
 80012e2:	78fa      	ldrb	r2, [r7, #3]
 80012e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80012e6:	78fa      	ldrb	r2, [r7, #3]
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	440b      	add	r3, r1
 80012f4:	335d      	adds	r3, #93	; 0x5d
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	78fa      	ldrb	r2, [r7, #3]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	3338      	adds	r3, #56	; 0x38
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	18d1      	adds	r1, r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	461a      	mov	r2, r3
 8001316:	f002 ffc5 	bl	80042a4 <USB_HC_StartXfer>
 800131a:	4603      	mov	r3, r0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	613b      	str	r3, [r7, #16]
  uint32_t i = 0U , interrupt = 0U;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f002 fd19 	bl	8003d76 <USB_GetMode>
 8001344:	4603      	mov	r3, r0
 8001346:	2b01      	cmp	r3, #1
 8001348:	f040 80e9 	bne.w	800151e <HAL_HCD_IRQHandler+0x1fa>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f002 fcfb 	bl	8003d4c <USB_ReadInterrupts>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80df 	beq.w	800151c <HAL_HCD_IRQHandler+0x1f8>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f002 fcf2 	bl	8003d4c <USB_ReadInterrupts>
 8001368:	4603      	mov	r3, r0
 800136a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001372:	d104      	bne.n	800137e <HAL_HCD_IRQHandler+0x5a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800137c:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f002 fce2 	bl	8003d4c <USB_ReadInterrupts>
 8001388:	4603      	mov	r3, r0
 800138a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001392:	d104      	bne.n	800139e <HAL_HCD_IRQHandler+0x7a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800139c:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 fcd2 	bl	8003d4c <USB_ReadInterrupts>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80013b2:	d104      	bne.n	80013be <HAL_HCD_IRQHandler+0x9a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013bc:	615a      	str	r2, [r3, #20]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f002 fcc2 	bl	8003d4c <USB_ReadInterrupts>
 80013c8:	4603      	mov	r3, r0
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d103      	bne.n	80013da <HAL_HCD_IRQHandler+0xb6>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2202      	movs	r2, #2
 80013d8:	615a      	str	r2, [r3, #20]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fcb4 	bl	8003d4c <USB_ReadInterrupts>
 80013e4:	4603      	mov	r3, r0
 80013e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013ee:	d118      	bne.n	8001422 <HAL_HCD_IRQHandler+0xfe>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80013f6:	461a      	mov	r2, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001404:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f006 fbe2 	bl	8007bd0 <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2101      	movs	r1, #1
 8001412:	4618      	mov	r0, r3
 8001414:	f002 fd92 	bl	8003f3c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001420:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f002 fc90 	bl	8003d4c <USB_ReadInterrupts>
 800142c:	4603      	mov	r3, r0
 800142e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001432:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001436:	d102      	bne.n	800143e <HAL_HCD_IRQHandler+0x11a>
    {
      HCD_Port_IRQHandler (hhcd);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f001 f805 	bl	8002448 <HCD_Port_IRQHandler>
    }
    
    /* Handle Host SOF Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fc82 	bl	8003d4c <USB_ReadInterrupts>
 8001448:	4603      	mov	r3, r0
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b08      	cmp	r3, #8
 8001450:	d106      	bne.n	8001460 <HAL_HCD_IRQHandler+0x13c>
    {
      HAL_HCD_SOF_Callback(hhcd);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f006 fba0 	bl	8007b98 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2208      	movs	r2, #8
 800145e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host channel Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f002 fc71 	bl	8003d4c <USB_ReadInterrupts>
 800146a:	4603      	mov	r3, r0
 800146c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001470:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001474:	d134      	bne.n	80014e0 <HAL_HCD_IRQHandler+0x1bc>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f003 f850 	bl	8004520 <USB_HC_ReadInterrupt>
 8001480:	60f8      	str	r0, [r7, #12]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e021      	b.n	80014cc <HAL_HCD_IRQHandler+0x1a8>
      {
        if (interrupt & (1U << i))
 8001488:	2201      	movs	r2, #1
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	409a      	lsls	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d017      	beq.n	80014c6 <HAL_HCD_IRQHandler+0x1a2>
        {
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	015a      	lsls	r2, r3, #5
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4413      	add	r3, r2
 800149e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <HAL_HCD_IRQHandler+0x196>
          {
            HCD_HC_IN_IRQHandler(hhcd, i);
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f8b5 	bl	8001622 <HCD_HC_IN_IRQHandler>
 80014b8:	e005      	b.n	80014c6 <HAL_HCD_IRQHandler+0x1a2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler (hhcd, i);
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4619      	mov	r1, r3
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 fbee 	bl	8001ca2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d8d8      	bhi.n	8001488 <HAL_HCD_IRQHandler+0x164>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014de:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Rx Queue Level Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f002 fc31 	bl	8003d4c <USB_ReadInterrupts>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f003 0310 	and.w	r3, r3, #16
 80014f0:	2b10      	cmp	r3, #16
 80014f2:	d114      	bne.n	800151e <HAL_HCD_IRQHandler+0x1fa>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	6992      	ldr	r2, [r2, #24]
 80014fe:	f022 0210 	bic.w	r2, r2, #16
 8001502:	619a      	str	r2, [r3, #24]
      
      HCD_RXQLVL_IRQHandler (hhcd);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 feed 	bl	80022e4 <HCD_RXQLVL_IRQHandler>
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	6992      	ldr	r2, [r2, #24]
 8001514:	f042 0210 	orr.w	r2, r2, #16
 8001518:	619a      	str	r2, [r3, #24]
 800151a:	e000      	b.n	800151e <HAL_HCD_IRQHandler+0x1fa>
      return;
 800151c:	bf00      	nop
    }
  }
}
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{ 
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd); 
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001532:	2b01      	cmp	r3, #1
 8001534:	d101      	bne.n	800153a <HAL_HCD_Start+0x16>
 8001536:	2302      	movs	r3, #2
 8001538:	e013      	b.n	8001562 <HAL_HCD_Start+0x3e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f002 fb13 	bl	8003b72 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2101      	movs	r1, #1
 8001552:	4618      	mov	r0, r3
 8001554:	f002 fd51 	bl	8003ffa <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{ 
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd); 
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_HCD_Stop+0x16>
 800157c:	2302      	movs	r3, #2
 800157e:	e00d      	b.n	800159c <HAL_HCD_Stop+0x32>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f003 f8fb 	bl	8004788 <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 fcfd 	bl	8003fb0 <USB_ResetPort>
 80015b6:	4603      	mov	r3, r0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/ 
  *            URB_ERROR/  
  *            URB_STALL      
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80015cc:	78fa      	ldrb	r2, [r7, #3]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	335c      	adds	r3, #92	; 0x5c
 80015dc:	781b      	ldrb	r3, [r3, #0]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 fd49 	bl	800408e <USB_GetCurrentFrame>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f002 fd28 	bl	8004068 <USB_GetHostSpeed>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval None
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001622:	b590      	push	{r4, r7, lr}
 8001624:	b085      	sub	sp, #20
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	460b      	mov	r3, r1
 800162c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	015a      	lsls	r2, r3, #5
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	2b00      	cmp	r3, #0
 800164c:	d01a      	beq.n	8001684 <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	015a      	lsls	r2, r3, #5
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4413      	add	r3, r2
 8001656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800165a:	461a      	mov	r2, r3
 800165c:	2304      	movs	r3, #4
 800165e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	015a      	lsls	r2, r3, #5
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800166c:	4619      	mov	r1, r3
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	015a      	lsls	r2, r3, #5
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4413      	add	r3, r2
 8001676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	60cb      	str	r3, [r1, #12]
 8001682:	e094      	b.n	80017ae <HCD_HC_IN_IRQHandler+0x18c>
  }  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	015a      	lsls	r2, r3, #5
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 0320 	and.w	r3, r3, #32
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <HCD_HC_IN_IRQHandler+0x8c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	015a      	lsls	r2, r3, #5
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016a6:	461a      	mov	r2, r3
 80016a8:	2320      	movs	r3, #32
 80016aa:	6093      	str	r3, [r2, #8]
 80016ac:	e07f      	b.n	80017ae <HCD_HC_IN_IRQHandler+0x18c>
  }
  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	015a      	lsls	r2, r3, #5
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d034      	beq.n	800172e <HCD_HC_IN_IRQHandler+0x10c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016d0:	4619      	mov	r1, r3
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	015a      	lsls	r2, r3, #5
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4413      	add	r3, r2
 80016da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].state = HC_STALL;
 80016e6:	78fa      	ldrb	r2, [r7, #3]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	440b      	add	r3, r1
 80016f4:	335d      	adds	r3, #93	; 0x5d
 80016f6:	2205      	movs	r2, #5
 80016f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	015a      	lsls	r2, r3, #5
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4413      	add	r3, r2
 8001702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001706:	461a      	mov	r2, r3
 8001708:	2310      	movs	r3, #16
 800170a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	015a      	lsls	r2, r3, #5
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001718:	461a      	mov	r2, r3
 800171a:	2308      	movs	r3, #8
 800171c:	6093      	str	r3, [r2, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f002 ff09 	bl	800453e <USB_HC_Halt>
 800172c:	e03f      	b.n	80017ae <HCD_HC_IN_IRQHandler+0x18c>
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	015a      	lsls	r2, r3, #5
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4413      	add	r3, r2
 8001736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001740:	2b00      	cmp	r3, #0
 8001742:	d034      	beq.n	80017ae <HCD_HC_IN_IRQHandler+0x18c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	015a      	lsls	r2, r3, #5
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001750:	4619      	mov	r1, r3
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	015a      	lsls	r2, r3, #5
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4413      	add	r3, r2
 800175a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	4611      	mov	r1, r2
 800176e:	4618      	mov	r0, r3
 8001770:	f002 fee5 	bl	800453e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	015a      	lsls	r2, r3, #5
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001780:	461a      	mov	r2, r3
 8001782:	2310      	movs	r3, #16
 8001784:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001786:	78fa      	ldrb	r2, [r7, #3]
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	440b      	add	r3, r1
 8001794:	335d      	adds	r3, #93	; 0x5d
 8001796:	2208      	movs	r2, #8
 8001798:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	015a      	lsls	r2, r3, #5
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a6:	461a      	mov	r2, r3
 80017a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ac:	6093      	str	r3, [r2, #8]
  }    
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	015a      	lsls	r2, r3, #5
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d022      	beq.n	800180a <HCD_HC_IN_IRQHandler+0x1e8>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	015a      	lsls	r2, r3, #5
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017d0:	4619      	mov	r1, r3
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	015a      	lsls	r2, r3, #5
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4413      	add	r3, r2
 80017da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	78fa      	ldrb	r2, [r7, #3]
 80017ec:	4611      	mov	r1, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f002 fea5 	bl	800453e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	015a      	lsls	r2, r3, #5
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001800:	461a      	mov	r2, r3
 8001802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001806:	6093      	str	r3, [r2, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
      tmpreg |= USB_OTG_HCCHAR_CHENA;
      USBx_HC(chnum)->HCCHAR = tmpreg;
    }
  }
}
 8001808:	e247      	b.n	8001c9a <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4413      	add	r3, r2
 8001812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80c0 	beq.w	80019a2 <HCD_HC_IN_IRQHandler+0x380>
    if (hhcd->Init.dma_enable)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d01b      	beq.n	8001862 <HCD_HC_IN_IRQHandler+0x240>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	78f9      	ldrb	r1, [r7, #3]
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4403      	add	r3, r0
 800183a:	3348      	adds	r3, #72	; 0x48
 800183c:	6819      	ldr	r1, [r3, #0]
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	0158      	lsls	r0, r3, #5
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4403      	add	r3, r0
 8001846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001850:	1ac9      	subs	r1, r1, r3
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4403      	add	r3, r0
 800185e:	334c      	adds	r3, #76	; 0x4c
 8001860:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XFRC;
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	335d      	adds	r3, #93	; 0x5d
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001876:	78fa      	ldrb	r2, [r7, #3]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	3358      	adds	r3, #88	; 0x58
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	015a      	lsls	r2, r3, #5
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4413      	add	r3, r2
 8001892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001896:	461a      	mov	r2, r3
 8001898:	2301      	movs	r3, #1
 800189a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	333f      	adds	r3, #63	; 0x3f
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00a      	beq.n	80018c8 <HCD_HC_IN_IRQHandler+0x2a6>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	333f      	adds	r3, #63	; 0x3f
 80018c2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d121      	bne.n	800190c <HCD_HC_IN_IRQHandler+0x2ea>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	015a      	lsls	r2, r3, #5
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d4:	4619      	mov	r1, r3
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	015a      	lsls	r2, r3, #5
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4413      	add	r3, r2
 80018de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	78fa      	ldrb	r2, [r7, #3]
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 fe23 	bl	800453e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	015a      	lsls	r2, r3, #5
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001904:	461a      	mov	r2, r3
 8001906:	2310      	movs	r3, #16
 8001908:	6093      	str	r3, [r2, #8]
 800190a:	e033      	b.n	8001974 <HCD_HC_IN_IRQHandler+0x352>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	333f      	adds	r3, #63	; 0x3f
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d128      	bne.n	8001974 <HCD_HC_IN_IRQHandler+0x352>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	015a      	lsls	r2, r3, #5
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800192e:	4619      	mov	r1, r3
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	015a      	lsls	r2, r3, #5
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001942:	600b      	str	r3, [r1, #0]
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	335c      	adds	r3, #92	; 0x5c
 8001954:	2201      	movs	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	440b      	add	r3, r1
 8001966:	335c      	adds	r3, #92	; 0x5c
 8001968:	781a      	ldrb	r2, [r3, #0]
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	4619      	mov	r1, r3
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f006 f93c 	bl	8007bec <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[chnum].toggle_in ^= 1U;
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	78f9      	ldrb	r1, [r7, #3]
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4403      	add	r3, r0
 8001984:	3350      	adds	r3, #80	; 0x50
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	f083 0301 	eor.w	r3, r3, #1
 800198c:	b2d8      	uxtb	r0, r3
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	440b      	add	r3, r1
 800199a:	3350      	adds	r3, #80	; 0x50
 800199c:	4602      	mov	r2, r0
 800199e:	701a      	strb	r2, [r3, #0]
}
 80019a0:	e17b      	b.n	8001c9a <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80b7 	beq.w	8001b28 <HCD_HC_IN_IRQHandler+0x506>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c6:	4619      	mov	r1, r3
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	015a      	lsls	r2, r3, #5
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f023 0302 	bic.w	r3, r3, #2
 80019da:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80019dc:	78fa      	ldrb	r2, [r7, #3]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	335d      	adds	r3, #93	; 0x5d
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d10a      	bne.n	8001a08 <HCD_HC_IN_IRQHandler+0x3e6>
      hhcd->hc[chnum].urb_state  = URB_DONE;      
 80019f2:	78fa      	ldrb	r2, [r7, #3]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	440b      	add	r3, r1
 8001a00:	335c      	adds	r3, #92	; 0x5c
 8001a02:	2201      	movs	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]
 8001a06:	e077      	b.n	8001af8 <HCD_HC_IN_IRQHandler+0x4d6>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	440b      	add	r3, r1
 8001a16:	335d      	adds	r3, #93	; 0x5d
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d10a      	bne.n	8001a34 <HCD_HC_IN_IRQHandler+0x412>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8001a1e:	78fa      	ldrb	r2, [r7, #3]
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	440b      	add	r3, r1
 8001a2c:	335c      	adds	r3, #92	; 0x5c
 8001a2e:	2205      	movs	r2, #5
 8001a30:	701a      	strb	r2, [r3, #0]
 8001a32:	e061      	b.n	8001af8 <HCD_HC_IN_IRQHandler+0x4d6>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	440b      	add	r3, r1
 8001a42:	335d      	adds	r3, #93	; 0x5d
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d00a      	beq.n	8001a60 <HCD_HC_IN_IRQHandler+0x43e>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001a4a:	78fa      	ldrb	r2, [r7, #3]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	440b      	add	r3, r1
 8001a58:	335d      	adds	r3, #93	; 0x5d
 8001a5a:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d14b      	bne.n	8001af8 <HCD_HC_IN_IRQHandler+0x4d6>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3358      	adds	r3, #88	; 0x58
 8001a70:	6819      	ldr	r1, [r3, #0]
 8001a72:	1c48      	adds	r0, r1, #1
 8001a74:	687c      	ldr	r4, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4423      	add	r3, r4
 8001a80:	3358      	adds	r3, #88	; 0x58
 8001a82:	6018      	str	r0, [r3, #0]
 8001a84:	2903      	cmp	r1, #3
 8001a86:	d914      	bls.n	8001ab2 <HCD_HC_IN_IRQHandler+0x490>
        hhcd->hc[chnum].ErrCnt = 0U;
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	3358      	adds	r3, #88	; 0x58
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001a9c:	78fa      	ldrb	r2, [r7, #3]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	335c      	adds	r3, #92	; 0x5c
 8001aac:	2204      	movs	r2, #4
 8001aae:	701a      	strb	r2, [r3, #0]
 8001ab0:	e009      	b.n	8001ac6 <HCD_HC_IN_IRQHandler+0x4a4>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001ab2:	78fa      	ldrb	r2, [r7, #3]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	440b      	add	r3, r1
 8001ac0:	335c      	adds	r3, #92	; 0x5c
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	015a      	lsls	r2, r3, #5
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001adc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ae4:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	015a      	lsls	r2, r3, #5
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af2:	461a      	mov	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	015a      	lsls	r2, r3, #5
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b04:	461a      	mov	r2, r3
 8001b06:	2302      	movs	r3, #2
 8001b08:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001b0a:	78fa      	ldrb	r2, [r7, #3]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	440b      	add	r3, r1
 8001b18:	335c      	adds	r3, #92	; 0x5c
 8001b1a:	781a      	ldrb	r2, [r3, #0]
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f006 f863 	bl	8007bec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001b26:	e0b8      	b.n	8001c9a <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	015a      	lsls	r2, r3, #5
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d03d      	beq.n	8001bba <HCD_HC_IN_IRQHandler+0x598>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	015a      	lsls	r2, r3, #5
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4413      	add	r3, r2
 8001b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	015a      	lsls	r2, r3, #5
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f043 0302 	orr.w	r3, r3, #2
 8001b5e:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].ErrCnt++;
 8001b60:	78fa      	ldrb	r2, [r7, #3]
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	440b      	add	r3, r1
 8001b6e:	3358      	adds	r3, #88	; 0x58
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	1c59      	adds	r1, r3, #1
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4403      	add	r3, r0
 8001b80:	3358      	adds	r3, #88	; 0x58
 8001b82:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001b84:	78fa      	ldrb	r2, [r7, #3]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	440b      	add	r3, r1
 8001b92:	335d      	adds	r3, #93	; 0x5d
 8001b94:	2206      	movs	r2, #6
 8001b96:	701a      	strb	r2, [r3, #0]
    USB_HC_Halt(hhcd->Instance, chnum);     
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 fccc 	bl	800453e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	015a      	lsls	r2, r3, #5
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	6093      	str	r3, [r2, #8]
}
 8001bb8:	e06f      	b.n	8001c9a <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	015a      	lsls	r2, r3, #5
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d064      	beq.n	8001c9a <HCD_HC_IN_IRQHandler+0x678>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	333f      	adds	r3, #63	; 0x3f
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d117      	bne.n	8001c16 <HCD_HC_IN_IRQHandler+0x5f4>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	015a      	lsls	r2, r3, #5
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f043 0302 	orr.w	r3, r3, #2
 8001c06:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	78fa      	ldrb	r2, [r7, #3]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 fc94 	bl	800453e <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	440b      	add	r3, r1
 8001c24:	335d      	adds	r3, #93	; 0x5d
 8001c26:	2203      	movs	r2, #3
 8001c28:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c36:	461a      	mov	r2, r3
 8001c38:	2310      	movs	r3, #16
 8001c3a:	6093      	str	r3, [r2, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001c3c:	78fa      	ldrb	r2, [r7, #3]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	333f      	adds	r3, #63	; 0x3f
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <HCD_HC_IN_IRQHandler+0x646>
              (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001c52:	78fa      	ldrb	r2, [r7, #3]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	333f      	adds	r3, #63	; 0x3f
 8001c62:	781b      	ldrb	r3, [r3, #0]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d118      	bne.n	8001c9a <HCD_HC_IN_IRQHandler+0x678>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c7e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c86:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	015a      	lsls	r2, r3, #5
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c94:	461a      	mov	r2, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	6013      	str	r3, [r2, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd90      	pop	{r4, r7, pc}

08001ca2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval None
  */
static void HCD_HC_OUT_IRQHandler  (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ca2:	b590      	push	{r4, r7, lr}
 8001ca4:	b085      	sub	sp, #20
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	60fb      	str	r3, [r7, #12]
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	015a      	lsls	r2, r3, #5
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d01a      	beq.n	8001d00 <HCD_HC_OUT_IRQHandler+0x5e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2304      	movs	r3, #4
 8001cda:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	015a      	lsls	r2, r3, #5
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce8:	4619      	mov	r1, r3
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	60cb      	str	r3, [r1, #12]
    }
    
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
  }
} 
 8001cfe:	e2ed      	b.n	80022dc <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	015a      	lsls	r2, r3, #5
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0320 	and.w	r3, r3, #32
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d041      	beq.n	8001d9a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	015a      	lsls	r2, r3, #5
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d22:	461a      	mov	r2, r3
 8001d24:	2320      	movs	r3, #32
 8001d26:	6093      	str	r3, [r2, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	333d      	adds	r3, #61	; 0x3d
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	f040 82ce 	bne.w	80022dc <HCD_HC_OUT_IRQHandler+0x63a>
      hhcd->hc[chnum].state = HC_NYET;     
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	440b      	add	r3, r1
 8001d4e:	335d      	adds	r3, #93	; 0x5d
 8001d50:	2204      	movs	r2, #4
 8001d52:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	4619      	mov	r1, r3
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	015a      	lsls	r2, r3, #5
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	78fa      	ldrb	r2, [r7, #3]
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f002 fbdd 	bl	800453e <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001d84:	78fa      	ldrb	r2, [r7, #3]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	335c      	adds	r3, #92	; 0x5c
 8001d94:	2202      	movs	r2, #2
 8001d96:	701a      	strb	r2, [r3, #0]
} 
 8001d98:	e2a0      	b.n	80022dc <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d035      	beq.n	8001e1c <HCD_HC_OUT_IRQHandler+0x17a>
    hhcd->hc[chnum].state = HC_NYET;
 8001db0:	78fa      	ldrb	r2, [r7, #3]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	440b      	add	r3, r1
 8001dbe:	335d      	adds	r3, #93	; 0x5d
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt= 0U;    
 8001dc4:	78fa      	ldrb	r2, [r7, #3]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3358      	adds	r3, #88	; 0x58
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	015a      	lsls	r2, r3, #5
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de4:	4619      	mov	r1, r3
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	78fa      	ldrb	r2, [r7, #3]
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 fb9b 	bl	800453e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e14:	461a      	mov	r2, r3
 8001e16:	2340      	movs	r3, #64	; 0x40
 8001e18:	6093      	str	r3, [r2, #8]
} 
 8001e1a:	e25f      	b.n	80022dc <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	015a      	lsls	r2, r3, #5
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d022      	beq.n	8001e78 <HCD_HC_OUT_IRQHandler+0x1d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3e:	4619      	mov	r1, r3
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f043 0302 	orr.w	r3, r3, #2
 8001e52:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	78fa      	ldrb	r2, [r7, #3]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f002 fb6e 	bl	800453e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6e:	461a      	mov	r2, r3
 8001e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e74:	6093      	str	r3, [r2, #8]
} 
 8001e76:	e231      	b.n	80022dc <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d035      	beq.n	8001efa <HCD_HC_OUT_IRQHandler+0x258>
      hhcd->hc[chnum].ErrCnt = 0U;  
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3358      	adds	r3, #88	; 0x58
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eae:	4619      	mov	r1, r3
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f002 fb36 	bl	800453e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	440b      	add	r3, r1
 8001ef2:	335d      	adds	r3, #93	; 0x5d
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
} 
 8001ef8:	e1f0      	b.n	80022dc <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d02b      	beq.n	8001f68 <HCD_HC_OUT_IRQHandler+0x2c6>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	2308      	movs	r3, #8
 8001f20:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	4619      	mov	r1, r3
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f043 0302 	orr.w	r3, r3, #2
 8001f42:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 faf6 	bl	800453e <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 8001f52:	78fa      	ldrb	r2, [r7, #3]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	335d      	adds	r3, #93	; 0x5d
 8001f62:	2205      	movs	r2, #5
 8001f64:	701a      	strb	r2, [r3, #0]
} 
 8001f66:	e1b9      	b.n	80022dc <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d035      	beq.n	8001fea <HCD_HC_OUT_IRQHandler+0x348>
    hhcd->hc[chnum].ErrCnt = 0U;  
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3358      	adds	r3, #88	; 0x58
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f002 fabe 	bl	800453e <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	440b      	add	r3, r1
 8001fd0:	335d      	adds	r3, #93	; 0x5d
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	2310      	movs	r3, #16
 8001fe6:	6093      	str	r3, [r2, #8]
} 
 8001fe8:	e178      	b.n	80022dc <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d02b      	beq.n	8002058 <HCD_HC_OUT_IRQHandler+0x3b6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	4619      	mov	r1, r3
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4413      	add	r3, r2
 8002016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	78fa      	ldrb	r2, [r7, #3]
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f002 fa87 	bl	800453e <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	440b      	add	r3, r1
 800203e:	335d      	adds	r3, #93	; 0x5d
 8002040:	2206      	movs	r2, #6
 8002042:	701a      	strb	r2, [r3, #0]
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002050:	461a      	mov	r2, r3
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	6093      	str	r3, [r2, #8]
} 
 8002056:	e141      	b.n	80022dc <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	015a      	lsls	r2, r3, #5
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206a:	2b00      	cmp	r3, #0
 800206c:	d035      	beq.n	80020da <HCD_HC_OUT_IRQHandler+0x438>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	015a      	lsls	r2, r3, #5
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4413      	add	r3, r2
 8002076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207a:	4619      	mov	r1, r3
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f043 0302 	orr.w	r3, r3, #2
 800208e:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f002 fa50 	bl	800453e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020aa:	461a      	mov	r2, r3
 80020ac:	2310      	movs	r3, #16
 80020ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020bc:	461a      	mov	r2, r3
 80020be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	440b      	add	r3, r1
 80020d2:	335d      	adds	r3, #93	; 0x5d
 80020d4:	2208      	movs	r2, #8
 80020d6:	701a      	strb	r2, [r3, #0]
} 
 80020d8:	e100      	b.n	80022dc <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	015a      	lsls	r2, r3, #5
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4413      	add	r3, r2
 80020e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80f5 	beq.w	80022dc <HCD_HC_OUT_IRQHandler+0x63a>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fe:	4619      	mov	r1, r3
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4413      	add	r3, r2
 8002108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f023 0302 	bic.w	r3, r3, #2
 8002112:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	335d      	adds	r3, #93	; 0x5d
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d12c      	bne.n	8002184 <HCD_HC_OUT_IRQHandler+0x4e2>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	335c      	adds	r3, #92	; 0x5c
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	333f      	adds	r3, #63	; 0x3f
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b02      	cmp	r3, #2
 8002152:	f040 80ac 	bne.w	80022ae <HCD_HC_OUT_IRQHandler+0x60c>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	78f9      	ldrb	r1, [r7, #3]
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4403      	add	r3, r0
 8002166:	3351      	adds	r3, #81	; 0x51
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	f083 0301 	eor.w	r3, r3, #1
 800216e:	b2d8      	uxtb	r0, r3
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	3351      	adds	r3, #81	; 0x51
 800217e:	4602      	mov	r2, r0
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	e094      	b.n	80022ae <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	440b      	add	r3, r1
 8002192:	335d      	adds	r3, #93	; 0x5d
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d10a      	bne.n	80021b0 <HCD_HC_OUT_IRQHandler+0x50e>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	335c      	adds	r3, #92	; 0x5c
 80021aa:	2202      	movs	r2, #2
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	e07e      	b.n	80022ae <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	440b      	add	r3, r1
 80021be:	335d      	adds	r3, #93	; 0x5d
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d114      	bne.n	80021f0 <HCD_HC_OUT_IRQHandler+0x54e>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80021c6:	78fa      	ldrb	r2, [r7, #3]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	440b      	add	r3, r1
 80021d4:	335c      	adds	r3, #92	; 0x5c
 80021d6:	2202      	movs	r2, #2
 80021d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].do_ping = 0U;
 80021da:	78fa      	ldrb	r2, [r7, #3]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	440b      	add	r3, r1
 80021e8:	333d      	adds	r3, #61	; 0x3d
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	e05e      	b.n	80022ae <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	335d      	adds	r3, #93	; 0x5d
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b05      	cmp	r3, #5
 8002204:	d10a      	bne.n	800221c <HCD_HC_OUT_IRQHandler+0x57a>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	335c      	adds	r3, #92	; 0x5c
 8002216:	2205      	movs	r2, #5
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	e048      	b.n	80022ae <HCD_HC_OUT_IRQHandler+0x60c>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 800221c:	78fa      	ldrb	r2, [r7, #3]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	335d      	adds	r3, #93	; 0x5d
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b06      	cmp	r3, #6
 8002230:	d00a      	beq.n	8002248 <HCD_HC_OUT_IRQHandler+0x5a6>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002232:	78fa      	ldrb	r2, [r7, #3]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	440b      	add	r3, r1
 8002240:	335d      	adds	r3, #93	; 0x5d
 8002242:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002244:	2b08      	cmp	r3, #8
 8002246:	d132      	bne.n	80022ae <HCD_HC_OUT_IRQHandler+0x60c>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8002248:	78fa      	ldrb	r2, [r7, #3]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	3358      	adds	r3, #88	; 0x58
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	1c48      	adds	r0, r1, #1
 800225c:	687c      	ldr	r4, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4423      	add	r3, r4
 8002268:	3358      	adds	r3, #88	; 0x58
 800226a:	6018      	str	r0, [r3, #0]
 800226c:	2903      	cmp	r1, #3
 800226e:	d914      	bls.n	800229a <HCD_HC_OUT_IRQHandler+0x5f8>
        hhcd->hc[chnum].ErrCnt = 0U;
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	3358      	adds	r3, #88	; 0x58
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	440b      	add	r3, r1
 8002292:	335c      	adds	r3, #92	; 0x5c
 8002294:	2204      	movs	r2, #4
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	e009      	b.n	80022ae <HCD_HC_OUT_IRQHandler+0x60c>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	440b      	add	r3, r1
 80022a8:	335c      	adds	r3, #92	; 0x5c
 80022aa:	2202      	movs	r2, #2
 80022ac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ba:	461a      	mov	r2, r3
 80022bc:	2302      	movs	r3, #2
 80022be:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	440b      	add	r3, r1
 80022ce:	335c      	adds	r3, #92	; 0x5c
 80022d0:	781a      	ldrb	r2, [r3, #0]
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	4619      	mov	r1, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f005 fc88 	bl	8007bec <HAL_HCD_HC_NotifyURBChange_Callback>
} 
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd90      	pop	{r4, r7, pc}

080022e4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	61fb      	str	r3, [r7, #28]
  uint8_t  channelnum = 0;  
 80022f2:	2300      	movs	r3, #0
 80022f4:	76fb      	strb	r3, [r7, #27]
  uint32_t pktsts;
  uint32_t pktcnt; 
  uint32_t temp = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
  
  temp = hhcd->Instance->GRXSTSP;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	617b      	str	r3, [r7, #20]
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	76fb      	strb	r3, [r7, #27]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	0c5b      	lsrs	r3, r3, #17
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	60fb      	str	r3, [r7, #12]
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002322:	60bb      	str	r3, [r7, #8]
  
  switch (pktsts)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d003      	beq.n	8002332 <HCD_RXQLVL_IRQHandler+0x4e>
 800232a:	2b05      	cmp	r3, #5
 800232c:	f000 8082 	beq.w	8002434 <HCD_RXQLVL_IRQHandler+0x150>
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
    break;
  case GRXSTS_PKTSTS_IN_XFER_COMP:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 8002330:	e083      	b.n	800243a <HCD_RXQLVL_IRQHandler+0x156>
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d07f      	beq.n	8002438 <HCD_RXQLVL_IRQHandler+0x154>
 8002338:	7efa      	ldrb	r2, [r7, #27]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	3344      	adds	r3, #68	; 0x44
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d074      	beq.n	8002438 <HCD_RXQLVL_IRQHandler+0x154>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	7efa      	ldrb	r2, [r7, #27]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	3344      	adds	r3, #68	; 0x44
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	b292      	uxth	r2, r2
 8002368:	4619      	mov	r1, r3
 800236a:	f001 fcc8 	bl	8003cfe <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 800236e:	7efa      	ldrb	r2, [r7, #27]
 8002370:	7ef9      	ldrb	r1, [r7, #27]
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4403      	add	r3, r0
 800237e:	3344      	adds	r3, #68	; 0x44
 8002380:	6819      	ldr	r1, [r3, #0]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	4419      	add	r1, r3
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4403      	add	r3, r0
 8002392:	3344      	adds	r3, #68	; 0x44
 8002394:	6019      	str	r1, [r3, #0]
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8002396:	7efa      	ldrb	r2, [r7, #27]
 8002398:	7ef9      	ldrb	r1, [r7, #27]
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4403      	add	r3, r0
 80023a6:	334c      	adds	r3, #76	; 0x4c
 80023a8:	6819      	ldr	r1, [r3, #0]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	4419      	add	r1, r3
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4403      	add	r3, r0
 80023ba:	334c      	adds	r3, #76	; 0x4c
 80023bc:	6019      	str	r1, [r3, #0]
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 80023be:	7efb      	ldrb	r3, [r7, #27]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HCD_RXQLVL_IRQHandler+0x160>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d031      	beq.n	8002438 <HCD_RXQLVL_IRQHandler+0x154>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 80023d4:	7efb      	ldrb	r3, [r7, #27]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023ea:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023f2:	613b      	str	r3, [r7, #16]
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 80023f4:	7efb      	ldrb	r3, [r7, #27]
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002400:	461a      	mov	r2, r3
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	6013      	str	r3, [r2, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8002406:	7efa      	ldrb	r2, [r7, #27]
 8002408:	7ef9      	ldrb	r1, [r7, #27]
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4403      	add	r3, r0
 8002416:	3350      	adds	r3, #80	; 0x50
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	f083 0301 	eor.w	r3, r3, #1
 800241e:	b2d8      	uxtb	r0, r3
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	440b      	add	r3, r1
 800242c:	3350      	adds	r3, #80	; 0x50
 800242e:	4602      	mov	r2, r0
 8002430:	701a      	strb	r2, [r3, #0]
    break;
 8002432:	e001      	b.n	8002438 <HCD_RXQLVL_IRQHandler+0x154>
    break;
 8002434:	bf00      	nop
 8002436:	e000      	b.n	800243a <HCD_RXQLVL_IRQHandler+0x156>
    break;
 8002438:	bf00      	nop
  }
}
 800243a:	bf00      	nop
 800243c:	3720      	adds	r7, #32
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	1ff80000 	.word	0x1ff80000

08002448 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	617b      	str	r3, [r7, #20]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	613b      	str	r3, [r7, #16]
  hprt0_dup = USBx_HPRT0;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60fb      	str	r3, [r7, #12]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002470:	60fb      	str	r3, [r7, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b02      	cmp	r3, #2
 800247a:	d113      	bne.n	80024a4 <HCD_Port_IRQHandler+0x5c>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b01      	cmp	r3, #1
 8002484:	d10a      	bne.n	800249c <HCD_Port_IRQHandler+0x54>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	6992      	ldr	r2, [r2, #24]
 8002490:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002494:	619a      	str	r2, [r3, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f005 fb8c 	bl	8007bb4 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	60fb      	str	r3, [r7, #12]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d142      	bne.n	8002534 <HCD_Port_IRQHandler+0xec>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f043 0308 	orr.w	r3, r3, #8
 80024b4:	60fb      	str	r3, [r7, #12]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d126      	bne.n	800250e <HCD_Port_IRQHandler+0xc6>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d113      	bne.n	80024f0 <HCD_Port_IRQHandler+0xa8>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80024ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024d2:	d106      	bne.n	80024e2 <HCD_Port_IRQHandler+0x9a>
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2102      	movs	r1, #2
 80024da:	4618      	mov	r0, r3
 80024dc:	f001 fd2e 	bl	8003f3c <USB_InitFSLSPClkSel>
 80024e0:	e011      	b.n	8002506 <HCD_Port_IRQHandler+0xbe>
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2101      	movs	r1, #1
 80024e8:	4618      	mov	r0, r3
 80024ea:	f001 fd27 	bl	8003f3c <USB_InitFSLSPClkSel>
 80024ee:	e00a      	b.n	8002506 <HCD_Port_IRQHandler+0xbe>
        }
      }
      else
      {
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d106      	bne.n	8002506 <HCD_Port_IRQHandler+0xbe>
        {
          USBx_HOST->HFIR = 60000U;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024fe:	461a      	mov	r2, r3
 8002500:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002504:	6053      	str	r3, [r2, #4]
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f005 fb54 	bl	8007bb4 <HAL_HCD_Connect_Callback>
 800250c:	e012      	b.n	8002534 <HCD_Port_IRQHandler+0xec>
    }
    else
    {
      /* Clean up HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002514:	461a      	mov	r2, r3
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002522:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	6992      	ldr	r2, [r2, #24]
 800252e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002532:	619a      	str	r2, [r3, #24]
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b20      	cmp	r3, #32
 800253c:	d103      	bne.n	8002546 <HCD_Port_IRQHandler+0xfe>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f043 0320 	orr.w	r3, r3, #32
 8002544:	60fb      	str	r3, [r7, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800254c:	461a      	mov	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6013      	str	r3, [r2, #0]
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0ca      	b.n	8002706 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b67      	ldr	r3, [pc, #412]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 020f 	and.w	r2, r3, #15
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d20c      	bcs.n	8002598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b64      	ldr	r3, [pc, #400]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b62      	ldr	r3, [pc, #392]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 020f 	and.w	r2, r3, #15
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0b6      	b.n	8002706 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b0:	4a58      	ldr	r2, [pc, #352]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 80025b2:	4b58      	ldr	r3, [pc, #352]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c8:	4a52      	ldr	r2, [pc, #328]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 80025ca:	4b52      	ldr	r3, [pc, #328]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	494f      	ldr	r1, [pc, #316]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 80025d6:	4b4f      	ldr	r3, [pc, #316]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d044      	beq.n	800267c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b46      	ldr	r3, [pc, #280]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d119      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e07d      	b.n	8002706 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d003      	beq.n	800261a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002616:	2b03      	cmp	r3, #3
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261a:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e06d      	b.n	8002706 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e065      	b.n	8002706 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263a:	4936      	ldr	r1, [pc, #216]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	4b35      	ldr	r3, [pc, #212]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f023 0203 	bic.w	r2, r3, #3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4313      	orrs	r3, r2
 800264a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800264c:	f7fe f8ae 	bl	80007ac <HAL_GetTick>
 8002650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	e00a      	b.n	800266a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002654:	f7fe f8aa 	bl	80007ac <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e04d      	b.n	8002706 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 020c 	and.w	r2, r3, #12
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	429a      	cmp	r2, r3
 800267a:	d1eb      	bne.n	8002654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800267c:	4b24      	ldr	r3, [pc, #144]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 020f 	and.w	r2, r3, #15
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d90c      	bls.n	80026a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b21      	ldr	r3, [pc, #132]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <HAL_RCC_ClockConfig+0x1b4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 020f 	and.w	r2, r3, #15
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e030      	b.n	8002706 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	4918      	ldr	r1, [pc, #96]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 80026b2:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ce:	4911      	ldr	r1, [pc, #68]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026e2:	f000 fb7b 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 80026e6:	4601      	mov	r1, r0
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	4a09      	ldr	r2, [pc, #36]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	5cd3      	ldrb	r3, [r2, r3]
 80026f6:	fa21 f303 	lsr.w	r3, r1, r3
 80026fa:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80026fe:	2000      	movs	r0, #0
 8002700:	f7fe f810 	bl	8000724 <HAL_InitTick>

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023c00 	.word	0x40023c00
 8002714:	40023800 	.word	0x40023800
 8002718:	080094b4 	.word	0x080094b4
 800271c:	20000028 	.word	0x20000028

08002720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_RCC_GetHCLKFreq+0x14>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000028 	.word	0x20000028

08002738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800273c:	f7ff fff0 	bl	8002720 <HAL_RCC_GetHCLKFreq>
 8002740:	4601      	mov	r1, r0
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	0a9b      	lsrs	r3, r3, #10
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	4a03      	ldr	r2, [pc, #12]	; (800275c <HAL_RCC_GetPCLK1Freq+0x24>)
 800274e:	5cd3      	ldrb	r3, [r2, r3]
 8002750:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40023800 	.word	0x40023800
 800275c:	080094c4 	.word	0x080094c4

08002760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002764:	f7ff ffdc 	bl	8002720 <HAL_RCC_GetHCLKFreq>
 8002768:	4601      	mov	r1, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	0b5b      	lsrs	r3, r3, #13
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4a03      	ldr	r2, [pc, #12]	; (8002784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002776:	5cd3      	ldrb	r3, [r2, r3]
 8002778:	fa21 f303 	lsr.w	r3, r1, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	080094c4 	.word	0x080094c4

08002788 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08c      	sub	sp, #48	; 0x30
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d010      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80027c0:	496f      	ldr	r1, [pc, #444]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027c2:	4b6f      	ldr	r3, [pc, #444]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027c8:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80027de:	2301      	movs	r3, #1
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d010      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80027ee:	4964      	ldr	r1, [pc, #400]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027f0:	4b63      	ldr	r3, [pc, #396]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f6:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800280c:	2301      	movs	r3, #1
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d017      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800281c:	4958      	ldr	r1, [pc, #352]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800281e:	4b58      	ldr	r3, [pc, #352]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002824:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800283a:	d101      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800283c:	2301      	movs	r3, #1
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002848:	2301      	movs	r3, #1
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d017      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002858:	4949      	ldr	r1, [pc, #292]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800285a:	4b49      	ldr	r3, [pc, #292]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800285c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002860:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002876:	d101      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002878:	2301      	movs	r3, #1
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002884:	2301      	movs	r3, #1
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0320 	and.w	r3, r3, #32
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 808a 	beq.w	80029aa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	4a39      	ldr	r2, [pc, #228]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800289c:	4b38      	ldr	r3, [pc, #224]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a4:	6413      	str	r3, [r2, #64]	; 0x40
 80028a6:	4b36      	ldr	r3, [pc, #216]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80028b2:	4a34      	ldr	r2, [pc, #208]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80028b4:	4b33      	ldr	r3, [pc, #204]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028be:	f7fd ff75 	bl	80007ac <HAL_GetTick>
 80028c2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80028c6:	f7fd ff71 	bl	80007ac <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e278      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028d8:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028e4:	4b26      	ldr	r3, [pc, #152]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ec:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d02f      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d028      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002902:	4b1f      	ldr	r3, [pc, #124]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800290c:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002918:	4a19      	ldr	r2, [pc, #100]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800291e:	4b18      	ldr	r3, [pc, #96]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d014      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800292a:	f7fd ff3f 	bl	80007ac <HAL_GetTick>
 800292e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002930:	e00a      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002932:	f7fd ff3b 	bl	80007ac <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002940:	4293      	cmp	r3, r2
 8002942:	d901      	bls.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e240      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002948:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0ee      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002960:	d114      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002962:	4907      	ldr	r1, [pc, #28]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002978:	4313      	orrs	r3, r2
 800297a:	608b      	str	r3, [r1, #8]
 800297c:	e00c      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	40007000 	.word	0x40007000
 8002988:	42470e40 	.word	0x42470e40
 800298c:	4a4a      	ldr	r2, [pc, #296]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800298e:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002996:	6093      	str	r3, [r2, #8]
 8002998:	4947      	ldr	r1, [pc, #284]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800299c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a6:	4313      	orrs	r3, r2
 80029a8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d004      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029b6:	4a41      	ldr	r2, [pc, #260]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80029be:	6013      	str	r3, [r2, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80029cc:	493a      	ldr	r1, [pc, #232]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029ce:	4b3a      	ldr	r3, [pc, #232]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029ee:	4932      	ldr	r1, [pc, #200]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029f0:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d011      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a10:	4929      	ldr	r1, [pc, #164]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a12:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a18:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002a30:	2301      	movs	r3, #1
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002a40:	491d      	ldr	r1, [pc, #116]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a42:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a48:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d011      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002a62:	4915      	ldr	r1, [pc, #84]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a80:	d101      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002a82:	2301      	movs	r3, #1
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a94:	f040 80ff 	bne.w	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a9e:	f7fd fe85 	bl	80007ac <HAL_GetTick>
 8002aa2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aa4:	e00e      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002aa6:	f7fd fe81 	bl	80007ac <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d907      	bls.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e188      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	424711e0 	.word	0x424711e0
 8002ac0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ac4:	4b7e      	ldr	r3, [pc, #504]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1ea      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d009      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d028      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d124      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002af8:	4b71      	ldr	r3, [pc, #452]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002afe:	0c1b      	lsrs	r3, r3, #16
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	3301      	adds	r3, #1
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b0a:	4b6d      	ldr	r3, [pc, #436]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b10:	0e1b      	lsrs	r3, r3, #24
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b18:	4969      	ldr	r1, [pc, #420]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	019b      	lsls	r3, r3, #6
 8002b24:	431a      	orrs	r2, r3
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	085b      	lsrs	r3, r3, #1
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	061b      	lsls	r3, r3, #24
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	071b      	lsls	r3, r3, #28
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d004      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d035      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b6c:	d130      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b6e:	4b54      	ldr	r3, [pc, #336]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b80:	4b4f      	ldr	r3, [pc, #316]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b86:	0f1b      	lsrs	r3, r3, #28
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002b8e:	494c      	ldr	r1, [pc, #304]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	019b      	lsls	r3, r3, #6
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	041b      	lsls	r3, r3, #16
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	061b      	lsls	r3, r3, #24
 8002bac:	431a      	orrs	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	071b      	lsls	r3, r3, #28
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bb8:	4941      	ldr	r1, [pc, #260]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bba:	4b41      	ldr	r3, [pc, #260]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc0:	f023 021f 	bic.w	r2, r3, #31
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d029      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002be4:	d124      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002be6:	4b36      	ldr	r3, [pc, #216]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bec:	0c1b      	lsrs	r3, r3, #16
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bf8:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bfe:	0f1b      	lsrs	r3, r3, #28
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002c06:	492e      	ldr	r1, [pc, #184]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	019b      	lsls	r3, r3, #6
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	061b      	lsls	r3, r3, #24
 8002c24:	431a      	orrs	r2, r3
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	071b      	lsls	r3, r3, #28
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d016      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c3c:	4920      	ldr	r1, [pc, #128]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	019b      	lsls	r3, r3, #6
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	3b01      	subs	r3, #1
 8002c52:	041b      	lsls	r3, r3, #16
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	061b      	lsls	r3, r3, #24
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	071b      	lsls	r3, r3, #28
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c6a:	4b16      	ldr	r3, [pc, #88]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c70:	f7fd fd9c 	bl	80007ac <HAL_GetTick>
 8002c74:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c78:	f7fd fd98 	bl	80007ac <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e09f      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	f040 8095 	bne.w	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ca4:	f7fd fd82 	bl	80007ac <HAL_GetTick>
 8002ca8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002caa:	e00f      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002cac:	f7fd fd7e 	bl	80007ac <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d908      	bls.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e085      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	42470068 	.word	0x42470068
 8002cc8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ccc:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd8:	d0e8      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d02b      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d127      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002d02:	4b34      	ldr	r3, [pc, #208]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d08:	0c1b      	lsrs	r3, r3, #16
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002d14:	492f      	ldr	r1, [pc, #188]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	019b      	lsls	r3, r3, #6
 8002d20:	431a      	orrs	r2, r3
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	085b      	lsrs	r3, r3, #1
 8002d26:	3b01      	subs	r3, #1
 8002d28:	041b      	lsls	r3, r3, #16
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	061b      	lsls	r3, r3, #24
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d38:	4926      	ldr	r1, [pc, #152]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d3a:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d40:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01d      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d66:	d118      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d68:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	0e1b      	lsrs	r3, r3, #24
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002d76:	4917      	ldr	r1, [pc, #92]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699a      	ldr	r2, [r3, #24]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	019b      	lsls	r3, r3, #6
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	041b      	lsls	r3, r3, #16
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	061b      	lsls	r3, r3, #24
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d9a:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002da0:	f7fd fd04 	bl	80007ac <HAL_GetTick>
 8002da4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002da8:	f7fd fd00 	bl	80007ac <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e007      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc6:	d1ef      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3730      	adds	r7, #48	; 0x30
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	42470070 	.word	0x42470070

08002ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002de0:	b0a1      	sub	sp, #132	; 0x84
 8002de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002df8:	4ba0      	ldr	r3, [pc, #640]	; (800307c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 030c 	and.w	r3, r3, #12
 8002e00:	2b0c      	cmp	r3, #12
 8002e02:	f200 8193 	bhi.w	800312c <HAL_RCC_GetSysClockFreq+0x350>
 8002e06:	a201      	add	r2, pc, #4	; (adr r2, 8002e0c <HAL_RCC_GetSysClockFreq+0x30>)
 8002e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0c:	08002e41 	.word	0x08002e41
 8002e10:	0800312d 	.word	0x0800312d
 8002e14:	0800312d 	.word	0x0800312d
 8002e18:	0800312d 	.word	0x0800312d
 8002e1c:	08002e47 	.word	0x08002e47
 8002e20:	0800312d 	.word	0x0800312d
 8002e24:	0800312d 	.word	0x0800312d
 8002e28:	0800312d 	.word	0x0800312d
 8002e2c:	08002e4d 	.word	0x08002e4d
 8002e30:	0800312d 	.word	0x0800312d
 8002e34:	0800312d 	.word	0x0800312d
 8002e38:	0800312d 	.word	0x0800312d
 8002e3c:	08002fc9 	.word	0x08002fc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e40:	4b8f      	ldr	r3, [pc, #572]	; (8003080 <HAL_RCC_GetSysClockFreq+0x2a4>)
 8002e42:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8002e44:	e175      	b.n	8003132 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e46:	4b8f      	ldr	r3, [pc, #572]	; (8003084 <HAL_RCC_GetSysClockFreq+0x2a8>)
 8002e48:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8002e4a:	e172      	b.n	8003132 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e4c:	4b8b      	ldr	r3, [pc, #556]	; (800307c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e54:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e56:	4b89      	ldr	r3, [pc, #548]	; (800307c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d056      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e62:	4b86      	ldr	r3, [pc, #536]	; (800307c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	099b      	lsrs	r3, r3, #6
 8002e68:	f04f 0400 	mov.w	r4, #0
 8002e6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	ea01 0103 	and.w	r1, r1, r3
 8002e78:	ea02 0204 	and.w	r2, r2, r4
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4614      	mov	r4, r2
 8002e80:	0160      	lsls	r0, r4, #5
 8002e82:	6678      	str	r0, [r7, #100]	; 0x64
 8002e84:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002e86:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002e8a:	6678      	str	r0, [r7, #100]	; 0x64
 8002e8c:	015b      	lsls	r3, r3, #5
 8002e8e:	663b      	str	r3, [r7, #96]	; 0x60
 8002e90:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8002e94:	1a5b      	subs	r3, r3, r1
 8002e96:	eb64 0402 	sbc.w	r4, r4, r2
 8002e9a:	01a0      	lsls	r0, r4, #6
 8002e9c:	65f8      	str	r0, [r7, #92]	; 0x5c
 8002e9e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002ea0:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8002ea4:	65f8      	str	r0, [r7, #92]	; 0x5c
 8002ea6:	0198      	lsls	r0, r3, #6
 8002ea8:	65b8      	str	r0, [r7, #88]	; 0x58
 8002eaa:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8002eae:	1aed      	subs	r5, r5, r3
 8002eb0:	eb66 0604 	sbc.w	r6, r6, r4
 8002eb4:	4633      	mov	r3, r6
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	657b      	str	r3, [r7, #84]	; 0x54
 8002eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ec4:	462b      	mov	r3, r5
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	653b      	str	r3, [r7, #80]	; 0x50
 8002eca:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8002ece:	461d      	mov	r5, r3
 8002ed0:	4626      	mov	r6, r4
 8002ed2:	186b      	adds	r3, r5, r1
 8002ed4:	eb46 0402 	adc.w	r4, r6, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	4621      	mov	r1, r4
 8002edc:	460b      	mov	r3, r1
 8002ede:	025b      	lsls	r3, r3, #9
 8002ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 8002eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eec:	4603      	mov	r3, r0
 8002eee:	025b      	lsls	r3, r3, #9
 8002ef0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ef2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	4621      	mov	r1, r4
 8002efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002efc:	f04f 0400 	mov.w	r4, #0
 8002f00:	461a      	mov	r2, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	f7fd fa64 	bl	80003d0 <__aeabi_uldivmod>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	460c      	mov	r4, r1
 8002f0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f0e:	e04d      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f10:	4b5a      	ldr	r3, [pc, #360]	; (800307c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	f04f 0400 	mov.w	r4, #0
 8002f1a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	ea01 0103 	and.w	r1, r1, r3
 8002f26:	ea02 0204 	and.w	r2, r2, r4
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4614      	mov	r4, r2
 8002f2e:	0160      	lsls	r0, r4, #5
 8002f30:	6478      	str	r0, [r7, #68]	; 0x44
 8002f32:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002f34:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002f38:	6478      	str	r0, [r7, #68]	; 0x44
 8002f3a:	015b      	lsls	r3, r3, #5
 8002f3c:	643b      	str	r3, [r7, #64]	; 0x40
 8002f3e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002f42:	1a5b      	subs	r3, r3, r1
 8002f44:	eb64 0402 	sbc.w	r4, r4, r2
 8002f48:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8002f4c:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8002f50:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8002f54:	ebba 0a03 	subs.w	sl, sl, r3
 8002f58:	eb6b 0b04 	sbc.w	fp, fp, r4
 8002f5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f6a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8002f6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f70:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8002f74:	eb1a 0a01 	adds.w	sl, sl, r1
 8002f78:	eb4b 0b02 	adc.w	fp, fp, r2
 8002f7c:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 8002f88:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8a:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8002f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8002f90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f94:	4650      	mov	r0, sl
 8002f96:	4659      	mov	r1, fp
 8002f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f9a:	f04f 0400 	mov.w	r4, #0
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4623      	mov	r3, r4
 8002fa2:	f7fd fa15 	bl	80003d0 <__aeabi_uldivmod>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	460c      	mov	r4, r1
 8002faa:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fac:	4b33      	ldr	r3, [pc, #204]	; (800307c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8002fbc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002fbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8002fc6:	e0b4      	b.n	8003132 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fc8:	4b2c      	ldr	r3, [pc, #176]	; (800307c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd0:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fd2:	4b2a      	ldr	r3, [pc, #168]	; (800307c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d054      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fde:	4b27      	ldr	r3, [pc, #156]	; (800307c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	099b      	lsrs	r3, r3, #6
 8002fe4:	f04f 0400 	mov.w	r4, #0
 8002fe8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	ea01 0103 	and.w	r1, r1, r3
 8002ff4:	ea02 0204 	and.w	r2, r2, r4
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4614      	mov	r4, r2
 8002ffc:	0160      	lsls	r0, r4, #5
 8002ffe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003000:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003002:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003006:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003008:	015b      	lsls	r3, r3, #5
 800300a:	62bb      	str	r3, [r7, #40]	; 0x28
 800300c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003010:	1a5b      	subs	r3, r3, r1
 8003012:	eb64 0402 	sbc.w	r4, r4, r2
 8003016:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800301a:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800301e:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8003022:	ebb8 0803 	subs.w	r8, r8, r3
 8003026:	eb69 0904 	sbc.w	r9, r9, r4
 800302a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
 8003038:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800303c:	623b      	str	r3, [r7, #32]
 800303e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003042:	eb18 0801 	adds.w	r8, r8, r1
 8003046:	eb49 0902 	adc.w	r9, r9, r2
 800304a:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003056:	61fb      	str	r3, [r7, #28]
 8003058:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003062:	4640      	mov	r0, r8
 8003064:	4649      	mov	r1, r9
 8003066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003068:	f04f 0400 	mov.w	r4, #0
 800306c:	461a      	mov	r2, r3
 800306e:	4623      	mov	r3, r4
 8003070:	f7fd f9ae 	bl	80003d0 <__aeabi_uldivmod>
 8003074:	4603      	mov	r3, r0
 8003076:	460c      	mov	r4, r1
 8003078:	67fb      	str	r3, [r7, #124]	; 0x7c
 800307a:	e04b      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x338>
 800307c:	40023800 	.word	0x40023800
 8003080:	00f42400 	.word	0x00f42400
 8003084:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003088:	4b2d      	ldr	r3, [pc, #180]	; (8003140 <HAL_RCC_GetSysClockFreq+0x364>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	f04f 0400 	mov.w	r4, #0
 8003092:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	ea01 0103 	and.w	r1, r1, r3
 800309e:	ea02 0204 	and.w	r2, r2, r4
 80030a2:	460b      	mov	r3, r1
 80030a4:	4614      	mov	r4, r2
 80030a6:	0160      	lsls	r0, r4, #5
 80030a8:	6178      	str	r0, [r7, #20]
 80030aa:	6978      	ldr	r0, [r7, #20]
 80030ac:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80030b0:	6178      	str	r0, [r7, #20]
 80030b2:	015b      	lsls	r3, r3, #5
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80030ba:	1a5b      	subs	r3, r3, r1
 80030bc:	eb64 0402 	sbc.w	r4, r4, r2
 80030c0:	01a6      	lsls	r6, r4, #6
 80030c2:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80030c6:	019d      	lsls	r5, r3, #6
 80030c8:	1aed      	subs	r5, r5, r3
 80030ca:	eb66 0604 	sbc.w	r6, r6, r4
 80030ce:	00f3      	lsls	r3, r6, #3
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	00eb      	lsls	r3, r5, #3
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80030e2:	186d      	adds	r5, r5, r1
 80030e4:	eb46 0602 	adc.w	r6, r6, r2
 80030e8:	02b3      	lsls	r3, r6, #10
 80030ea:	607b      	str	r3, [r7, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	02ab      	lsls	r3, r5, #10
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	e897 0060 	ldmia.w	r7, {r5, r6}
 80030fc:	4628      	mov	r0, r5
 80030fe:	4631      	mov	r1, r6
 8003100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003102:	f04f 0400 	mov.w	r4, #0
 8003106:	461a      	mov	r2, r3
 8003108:	4623      	mov	r3, r4
 800310a:	f7fd f961 	bl	80003d0 <__aeabi_uldivmod>
 800310e:	4603      	mov	r3, r0
 8003110:	460c      	mov	r4, r1
 8003112:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_RCC_GetSysClockFreq+0x364>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	0f1b      	lsrs	r3, r3, #28
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 8003120:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003124:	fbb2 f3f3 	udiv	r3, r2, r3
 8003128:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800312a:	e002      	b.n	8003132 <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <HAL_RCC_GetSysClockFreq+0x368>)
 800312e:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8003130:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003132:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8003134:	4618      	mov	r0, r3
 8003136:	3784      	adds	r7, #132	; 0x84
 8003138:	46bd      	mov	sp, r7
 800313a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800
 8003144:	00f42400 	.word	0x00f42400

08003148 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 8083 	beq.w	8003268 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003162:	4b95      	ldr	r3, [pc, #596]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b04      	cmp	r3, #4
 800316c:	d019      	beq.n	80031a2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800316e:	4b92      	ldr	r3, [pc, #584]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003176:	2b08      	cmp	r3, #8
 8003178:	d106      	bne.n	8003188 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800317a:	4b8f      	ldr	r3, [pc, #572]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003186:	d00c      	beq.n	80031a2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003188:	4b8b      	ldr	r3, [pc, #556]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003190:	2b0c      	cmp	r3, #12
 8003192:	d112      	bne.n	80031ba <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003194:	4b88      	ldr	r3, [pc, #544]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a0:	d10b      	bne.n	80031ba <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a2:	4b85      	ldr	r3, [pc, #532]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d05b      	beq.n	8003266 <HAL_RCC_OscConfig+0x11e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d157      	bne.n	8003266 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e216      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c2:	d106      	bne.n	80031d2 <HAL_RCC_OscConfig+0x8a>
 80031c4:	4a7c      	ldr	r2, [pc, #496]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031c6:	4b7c      	ldr	r3, [pc, #496]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	e01d      	b.n	800320e <HAL_RCC_OscConfig+0xc6>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031da:	d10c      	bne.n	80031f6 <HAL_RCC_OscConfig+0xae>
 80031dc:	4a76      	ldr	r2, [pc, #472]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031de:	4b76      	ldr	r3, [pc, #472]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	4a73      	ldr	r2, [pc, #460]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031ea:	4b73      	ldr	r3, [pc, #460]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	e00b      	b.n	800320e <HAL_RCC_OscConfig+0xc6>
 80031f6:	4a70      	ldr	r2, [pc, #448]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031f8:	4b6f      	ldr	r3, [pc, #444]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4a6d      	ldr	r2, [pc, #436]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003204:	4b6c      	ldr	r3, [pc, #432]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d013      	beq.n	800323e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fd fac9 	bl	80007ac <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321e:	f7fd fac5 	bl	80007ac <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b64      	cmp	r3, #100	; 0x64
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e1db      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003230:	4b61      	ldr	r3, [pc, #388]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0xd6>
 800323c:	e014      	b.n	8003268 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323e:	f7fd fab5 	bl	80007ac <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003246:	f7fd fab1 	bl	80007ac <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b64      	cmp	r3, #100	; 0x64
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e1c7      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003258:	4b57      	ldr	r3, [pc, #348]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f0      	bne.n	8003246 <HAL_RCC_OscConfig+0xfe>
 8003264:	e000      	b.n	8003268 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003266:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d06f      	beq.n	8003354 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003274:	4b50      	ldr	r3, [pc, #320]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 030c 	and.w	r3, r3, #12
 800327c:	2b00      	cmp	r3, #0
 800327e:	d017      	beq.n	80032b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003280:	4b4d      	ldr	r3, [pc, #308]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003288:	2b08      	cmp	r3, #8
 800328a:	d105      	bne.n	8003298 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800328c:	4b4a      	ldr	r3, [pc, #296]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00b      	beq.n	80032b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003298:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032a0:	2b0c      	cmp	r3, #12
 80032a2:	d11c      	bne.n	80032de <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a4:	4b44      	ldr	r3, [pc, #272]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d116      	bne.n	80032de <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b0:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_OscConfig+0x180>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e18f      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	493b      	ldr	r1, [pc, #236]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80032ca:	4b3b      	ldr	r3, [pc, #236]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032dc:	e03a      	b.n	8003354 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d020      	beq.n	8003328 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e6:	4b35      	ldr	r3, [pc, #212]	; (80033bc <HAL_RCC_OscConfig+0x274>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fd fa5e 	bl	80007ac <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f4:	f7fd fa5a 	bl	80007ac <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e170      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003306:	4b2c      	ldr	r3, [pc, #176]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003312:	4929      	ldr	r1, [pc, #164]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003314:	4b28      	ldr	r3, [pc, #160]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
 8003326:	e015      	b.n	8003354 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003328:	4b24      	ldr	r3, [pc, #144]	; (80033bc <HAL_RCC_OscConfig+0x274>)
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332e:	f7fd fa3d 	bl	80007ac <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003336:	f7fd fa39 	bl	80007ac <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e14f      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003348:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f0      	bne.n	8003336 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d037      	beq.n	80033d0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d016      	beq.n	8003396 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003368:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <HAL_RCC_OscConfig+0x278>)
 800336a:	2201      	movs	r2, #1
 800336c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336e:	f7fd fa1d 	bl	80007ac <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003376:	f7fd fa19 	bl	80007ac <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e12f      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCC_OscConfig+0x270>)
 800338a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f0      	beq.n	8003376 <HAL_RCC_OscConfig+0x22e>
 8003394:	e01c      	b.n	80033d0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <HAL_RCC_OscConfig+0x278>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339c:	f7fd fa06 	bl	80007ac <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a2:	e00f      	b.n	80033c4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a4:	f7fd fa02 	bl	80007ac <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d908      	bls.n	80033c4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e118      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	42470000 	.word	0x42470000
 80033c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c4:	4b8a      	ldr	r3, [pc, #552]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 80033c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e9      	bne.n	80033a4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 8097 	beq.w	800350c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033de:	2300      	movs	r3, #0
 80033e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e2:	4b83      	ldr	r3, [pc, #524]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10f      	bne.n	800340e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	4a7f      	ldr	r2, [pc, #508]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 80033f4:	4b7e      	ldr	r3, [pc, #504]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fc:	6413      	str	r3, [r2, #64]	; 0x40
 80033fe:	4b7c      	ldr	r3, [pc, #496]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800340a:	2301      	movs	r3, #1
 800340c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340e:	4b79      	ldr	r3, [pc, #484]	; (80035f4 <HAL_RCC_OscConfig+0x4ac>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	2b00      	cmp	r3, #0
 8003418:	d118      	bne.n	800344c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800341a:	4a76      	ldr	r2, [pc, #472]	; (80035f4 <HAL_RCC_OscConfig+0x4ac>)
 800341c:	4b75      	ldr	r3, [pc, #468]	; (80035f4 <HAL_RCC_OscConfig+0x4ac>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003426:	f7fd f9c1 	bl	80007ac <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342e:	f7fd f9bd 	bl	80007ac <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e0d3      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	4b6c      	ldr	r3, [pc, #432]	; (80035f4 <HAL_RCC_OscConfig+0x4ac>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d106      	bne.n	8003462 <HAL_RCC_OscConfig+0x31a>
 8003454:	4a66      	ldr	r2, [pc, #408]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003456:	4b66      	ldr	r3, [pc, #408]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6713      	str	r3, [r2, #112]	; 0x70
 8003460:	e01c      	b.n	800349c <HAL_RCC_OscConfig+0x354>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b05      	cmp	r3, #5
 8003468:	d10c      	bne.n	8003484 <HAL_RCC_OscConfig+0x33c>
 800346a:	4a61      	ldr	r2, [pc, #388]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 800346c:	4b60      	ldr	r3, [pc, #384]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	6713      	str	r3, [r2, #112]	; 0x70
 8003476:	4a5e      	ldr	r2, [pc, #376]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003478:	4b5d      	ldr	r3, [pc, #372]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6713      	str	r3, [r2, #112]	; 0x70
 8003482:	e00b      	b.n	800349c <HAL_RCC_OscConfig+0x354>
 8003484:	4a5a      	ldr	r2, [pc, #360]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003486:	4b5a      	ldr	r3, [pc, #360]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	6713      	str	r3, [r2, #112]	; 0x70
 8003490:	4a57      	ldr	r2, [pc, #348]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003492:	4b57      	ldr	r3, [pc, #348]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	f023 0304 	bic.w	r3, r3, #4
 800349a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d015      	beq.n	80034d0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7fd f982 	bl	80007ac <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fd f97e 	bl	80007ac <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e092      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ee      	beq.n	80034ac <HAL_RCC_OscConfig+0x364>
 80034ce:	e014      	b.n	80034fa <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fd f96c 	bl	80007ac <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fd f968 	bl	80007ac <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e07c      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ee:	4b40      	ldr	r3, [pc, #256]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1ee      	bne.n	80034d8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d105      	bne.n	800350c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003500:	4a3b      	ldr	r2, [pc, #236]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003502:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800350a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d068      	beq.n	80035e6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b08      	cmp	r3, #8
 800351e:	d060      	beq.n	80035e2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b02      	cmp	r3, #2
 8003526:	d145      	bne.n	80035b4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003528:	4b33      	ldr	r3, [pc, #204]	; (80035f8 <HAL_RCC_OscConfig+0x4b0>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7fd f93d 	bl	80007ac <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003536:	f7fd f939 	bl	80007ac <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e04f      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003548:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f0      	bne.n	8003536 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003554:	4926      	ldr	r1, [pc, #152]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	019b      	lsls	r3, r3, #6
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	3b01      	subs	r3, #1
 8003570:	041b      	lsls	r3, r3, #16
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	061b      	lsls	r3, r3, #24
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	071b      	lsls	r3, r3, #28
 8003582:	4313      	orrs	r3, r2
 8003584:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003586:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <HAL_RCC_OscConfig+0x4b0>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fd f90e 	bl	80007ac <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003594:	f7fd f90a 	bl	80007ac <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e020      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a6:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x44c>
 80035b2:	e018      	b.n	80035e6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b4:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <HAL_RCC_OscConfig+0x4b0>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ba:	f7fd f8f7 	bl	80007ac <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fd f8f3 	bl	80007ac <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e009      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCC_OscConfig+0x4a8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f0      	bne.n	80035c2 <HAL_RCC_OscConfig+0x47a>
 80035e0:	e001      	b.n	80035e6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40007000 	.word	0x40007000
 80035f8:	42470060 	.word	0x42470060

080035fc <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e03f      	b.n	800368e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f004 f97e 	bl	8007924 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2224      	movs	r2, #36	; 0x24
 800362c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	68d2      	ldr	r2, [r2, #12]
 800363a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800363e:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f829 	bl	8003698 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	6912      	ldr	r2, [r2, #16]
 8003650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6812      	ldr	r2, [r2, #0]
 800365e:	6952      	ldr	r2, [r2, #20]
 8003660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003664:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	68d2      	ldr	r2, [r2, #12]
 8003670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003674:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80036d4:	f023 030c 	bic.w	r3, r3, #12
 80036d8:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	431a      	orrs	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370c:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003728:	f040 80e4 	bne.w	80038f4 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4aab      	ldr	r2, [pc, #684]	; (80039e0 <UART_SetConfig+0x348>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <UART_SetConfig+0xa8>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4aaa      	ldr	r2, [pc, #680]	; (80039e4 <UART_SetConfig+0x34c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d16c      	bne.n	800381a <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681c      	ldr	r4, [r3, #0]
 8003744:	f7ff f80c 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 8003748:	4602      	mov	r2, r0
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	009a      	lsls	r2, r3, #2
 8003752:	441a      	add	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	fbb2 f3f3 	udiv	r3, r2, r3
 800375e:	4aa2      	ldr	r2, [pc, #648]	; (80039e8 <UART_SetConfig+0x350>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	011d      	lsls	r5, r3, #4
 8003768:	f7fe fffa 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 800376c:	4602      	mov	r2, r0
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	009a      	lsls	r2, r3, #2
 8003776:	441a      	add	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003782:	f7fe ffed 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 8003786:	4602      	mov	r2, r0
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	009a      	lsls	r2, r3, #2
 8003790:	441a      	add	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	fbb2 f3f3 	udiv	r3, r2, r3
 800379c:	4a92      	ldr	r2, [pc, #584]	; (80039e8 <UART_SetConfig+0x350>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	2264      	movs	r2, #100	; 0x64
 80037a6:	fb02 f303 	mul.w	r3, r2, r3
 80037aa:	1af3      	subs	r3, r6, r3
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	3332      	adds	r3, #50	; 0x32
 80037b0:	4a8d      	ldr	r2, [pc, #564]	; (80039e8 <UART_SetConfig+0x350>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037be:	441d      	add	r5, r3
 80037c0:	f7fe ffce 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	009a      	lsls	r2, r3, #2
 80037ce:	441a      	add	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80037da:	f7fe ffc1 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 80037de:	4602      	mov	r2, r0
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	009a      	lsls	r2, r3, #2
 80037e8:	441a      	add	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f4:	4a7c      	ldr	r2, [pc, #496]	; (80039e8 <UART_SetConfig+0x350>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	2264      	movs	r2, #100	; 0x64
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	1af3      	subs	r3, r6, r3
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	3332      	adds	r3, #50	; 0x32
 8003808:	4a77      	ldr	r2, [pc, #476]	; (80039e8 <UART_SetConfig+0x350>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	442b      	add	r3, r5
 8003816:	60a3      	str	r3, [r4, #8]
 8003818:	e154      	b.n	8003ac4 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681c      	ldr	r4, [r3, #0]
 800381e:	f7fe ff8b 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 8003822:	4602      	mov	r2, r0
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	009a      	lsls	r2, r3, #2
 800382c:	441a      	add	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	fbb2 f3f3 	udiv	r3, r2, r3
 8003838:	4a6b      	ldr	r2, [pc, #428]	; (80039e8 <UART_SetConfig+0x350>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	011d      	lsls	r5, r3, #4
 8003842:	f7fe ff79 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 8003846:	4602      	mov	r2, r0
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009a      	lsls	r2, r3, #2
 8003850:	441a      	add	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	fbb2 f6f3 	udiv	r6, r2, r3
 800385c:	f7fe ff6c 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 8003860:	4602      	mov	r2, r0
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	009a      	lsls	r2, r3, #2
 800386a:	441a      	add	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	fbb2 f3f3 	udiv	r3, r2, r3
 8003876:	4a5c      	ldr	r2, [pc, #368]	; (80039e8 <UART_SetConfig+0x350>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	2264      	movs	r2, #100	; 0x64
 8003880:	fb02 f303 	mul.w	r3, r2, r3
 8003884:	1af3      	subs	r3, r6, r3
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	3332      	adds	r3, #50	; 0x32
 800388a:	4a57      	ldr	r2, [pc, #348]	; (80039e8 <UART_SetConfig+0x350>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003898:	441d      	add	r5, r3
 800389a:	f7fe ff4d 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 800389e:	4602      	mov	r2, r0
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	009a      	lsls	r2, r3, #2
 80038a8:	441a      	add	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80038b4:	f7fe ff40 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 80038b8:	4602      	mov	r2, r0
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	009a      	lsls	r2, r3, #2
 80038c2:	441a      	add	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ce:	4a46      	ldr	r2, [pc, #280]	; (80039e8 <UART_SetConfig+0x350>)
 80038d0:	fba2 2303 	umull	r2, r3, r2, r3
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	2264      	movs	r2, #100	; 0x64
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	1af3      	subs	r3, r6, r3
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	3332      	adds	r3, #50	; 0x32
 80038e2:	4a41      	ldr	r2, [pc, #260]	; (80039e8 <UART_SetConfig+0x350>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	442b      	add	r3, r5
 80038f0:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80038f2:	e0e7      	b.n	8003ac4 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a39      	ldr	r2, [pc, #228]	; (80039e0 <UART_SetConfig+0x348>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <UART_SetConfig+0x270>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a38      	ldr	r2, [pc, #224]	; (80039e4 <UART_SetConfig+0x34c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d171      	bne.n	80039ec <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681c      	ldr	r4, [r3, #0]
 800390c:	f7fe ff28 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 8003910:	4602      	mov	r2, r0
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	009a      	lsls	r2, r3, #2
 800391a:	441a      	add	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	fbb2 f3f3 	udiv	r3, r2, r3
 8003926:	4a30      	ldr	r2, [pc, #192]	; (80039e8 <UART_SetConfig+0x350>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	011d      	lsls	r5, r3, #4
 8003930:	f7fe ff16 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 8003934:	4602      	mov	r2, r0
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	009a      	lsls	r2, r3, #2
 800393e:	441a      	add	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	fbb2 f6f3 	udiv	r6, r2, r3
 800394a:	f7fe ff09 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 800394e:	4602      	mov	r2, r0
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	009a      	lsls	r2, r3, #2
 8003958:	441a      	add	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	fbb2 f3f3 	udiv	r3, r2, r3
 8003964:	4a20      	ldr	r2, [pc, #128]	; (80039e8 <UART_SetConfig+0x350>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	2264      	movs	r2, #100	; 0x64
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	1af3      	subs	r3, r6, r3
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	3332      	adds	r3, #50	; 0x32
 8003978:	4a1b      	ldr	r2, [pc, #108]	; (80039e8 <UART_SetConfig+0x350>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003984:	441d      	add	r5, r3
 8003986:	f7fe feeb 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 800398a:	4602      	mov	r2, r0
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	009a      	lsls	r2, r3, #2
 8003994:	441a      	add	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	fbb2 f6f3 	udiv	r6, r2, r3
 80039a0:	f7fe fede 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	009a      	lsls	r2, r3, #2
 80039ae:	441a      	add	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ba:	4a0b      	ldr	r2, [pc, #44]	; (80039e8 <UART_SetConfig+0x350>)
 80039bc:	fba2 2303 	umull	r2, r3, r2, r3
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	2264      	movs	r2, #100	; 0x64
 80039c4:	fb02 f303 	mul.w	r3, r2, r3
 80039c8:	1af3      	subs	r3, r6, r3
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	3332      	adds	r3, #50	; 0x32
 80039ce:	4a06      	ldr	r2, [pc, #24]	; (80039e8 <UART_SetConfig+0x350>)
 80039d0:	fba2 2303 	umull	r2, r3, r2, r3
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	442b      	add	r3, r5
 80039dc:	60a3      	str	r3, [r4, #8]
 80039de:	e071      	b.n	8003ac4 <UART_SetConfig+0x42c>
 80039e0:	40011000 	.word	0x40011000
 80039e4:	40011400 	.word	0x40011400
 80039e8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681c      	ldr	r4, [r3, #0]
 80039f0:	f7fe fea2 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 80039f4:	4602      	mov	r2, r0
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	009a      	lsls	r2, r3, #2
 80039fe:	441a      	add	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0a:	4a30      	ldr	r2, [pc, #192]	; (8003acc <UART_SetConfig+0x434>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	011d      	lsls	r5, r3, #4
 8003a14:	f7fe fe90 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009a      	lsls	r2, r3, #2
 8003a22:	441a      	add	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a2e:	f7fe fe83 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 8003a32:	4602      	mov	r2, r0
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	009a      	lsls	r2, r3, #2
 8003a3c:	441a      	add	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a48:	4a20      	ldr	r2, [pc, #128]	; (8003acc <UART_SetConfig+0x434>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	2264      	movs	r2, #100	; 0x64
 8003a52:	fb02 f303 	mul.w	r3, r2, r3
 8003a56:	1af3      	subs	r3, r6, r3
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	3332      	adds	r3, #50	; 0x32
 8003a5c:	4a1b      	ldr	r2, [pc, #108]	; (8003acc <UART_SetConfig+0x434>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a68:	441d      	add	r5, r3
 8003a6a:	f7fe fe65 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	009a      	lsls	r2, r3, #2
 8003a78:	441a      	add	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a84:	f7fe fe58 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	009a      	lsls	r2, r3, #2
 8003a92:	441a      	add	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9e:	4a0b      	ldr	r2, [pc, #44]	; (8003acc <UART_SetConfig+0x434>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	095b      	lsrs	r3, r3, #5
 8003aa6:	2264      	movs	r2, #100	; 0x64
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
 8003aac:	1af3      	subs	r3, r6, r3
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	3332      	adds	r3, #50	; 0x32
 8003ab2:	4a06      	ldr	r2, [pc, #24]	; (8003acc <UART_SetConfig+0x434>)
 8003ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	442b      	add	r3, r5
 8003ac0:	60a3      	str	r3, [r4, #8]
}
 8003ac2:	e7ff      	b.n	8003ac4 <UART_SetConfig+0x42c>
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003acc:	51eb851f 	.word	0x51eb851f

08003ad0 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	f107 0014 	add.w	r0, r7, #20
 8003ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d120      	bne.n	8003b2a <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 8003b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d105      	bne.n	8003b22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f936 	bl	8003d94 <USB_CoreReset>
 8003b28:	e00c      	b.n	8003b44 <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f92c 	bl	8003d94 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b42:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d10b      	bne.n	8003b62 <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f043 0206 	orr.w	r2, r3, #6
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f043 0220 	orr.w	r2, r3, #32
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b6e:	b004      	add	sp, #16
 8003b70:	4770      	bx	lr

08003b72 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f043 0201 	orr.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f023 0201 	bic.w	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d106      	bne.n	8003be2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]
 8003be0:	e008      	b.n	8003bf4 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d105      	bne.n	8003bf4 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 8003bf4:	2032      	movs	r0, #50	; 0x32
 8003bf6:	f7fc fde5 	bl	80007c4 <HAL_Delay>
  
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	019b      	lsls	r3, r3, #6
 8003c16:	f043 0220 	orr.w	r2, r3, #32
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	3301      	adds	r3, #1
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4a09      	ldr	r2, [pc, #36]	; (8003c4c <USB_FlushTxFifo+0x48>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d901      	bls.n	8003c30 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e006      	b.n	8003c3e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d0f0      	beq.n	8003c1e <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	00030d40 	.word	0x00030d40

08003c50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2210      	movs	r2, #16
 8003c60:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3301      	adds	r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a09      	ldr	r2, [pc, #36]	; (8003c90 <USB_FlushRxFifo+0x40>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e006      	b.n	8003c82 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d0f0      	beq.n	8003c62 <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	00030d40 	.word	0x00030d40

08003c94 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	71fb      	strb	r3, [r7, #7]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 8003cb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d11a      	bne.n	8003cf0 <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 8003cba:	88bb      	ldrh	r3, [r7, #4]
 8003cbc:	3303      	adds	r3, #3
 8003cbe:	089b      	lsrs	r3, r3, #2
 8003cc0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e00f      	b.n	8003ce8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	031a      	lsls	r2, r3, #12
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d3eb      	bcc.n	8003cc8 <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b087      	sub	sp, #28
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	3303      	adds	r3, #3
 8003d14:	089b      	lsrs	r3, r3, #2
 8003d16:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	e00b      	b.n	8003d36 <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	3304      	adds	r3, #4
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d3ef      	bcc.n	8003d1e <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4013      	ands	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  return v;  
 8003d68:	68fb      	ldr	r3, [r7, #12]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f003 0301 	and.w	r3, r3, #1
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3301      	adds	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4a13      	ldr	r2, [pc, #76]	; (8003df8 <USB_CoreReset+0x64>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e01b      	b.n	8003dea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	daf2      	bge.n	8003da0 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f043 0201 	orr.w	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4a09      	ldr	r2, [pc, #36]	; (8003df8 <USB_CoreReset+0x64>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d901      	bls.n	8003ddc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e006      	b.n	8003dea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d0f0      	beq.n	8003dca <USB_CoreReset+0x36>
  
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	00030d40 	.word	0x00030d40

08003dfc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	f107 001c 	add.w	r0, r7, #28
 8003e0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e14:	461a      	mov	r2, r3
 8003e16:	2300      	movs	r3, #0
 8003e18:	6013      	str	r3, [r2, #0]
  
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d10f      	bne.n	8003e4c <USB_HostInit+0x50>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e32:	d00b      	beq.n	8003e4c <USB_HostInit+0x50>
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f043 0304 	orr.w	r3, r3, #4
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	e00a      	b.n	8003e62 <USB_HostInit+0x66>
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e52:	461a      	mov	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f023 0304 	bic.w	r3, r3, #4
 8003e60:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003e62:	2110      	movs	r1, #16
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7ff fecd 	bl	8003c04 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff fef0 	bl	8003c50 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e015      	b.n	8003ea2 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e82:	461a      	mov	r2, r3
 8003e84:	f04f 33ff 	mov.w	r3, #4294967295
 8003e88:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e96:	461a      	mov	r2, r3
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	6a3a      	ldr	r2, [r7, #32]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d8e5      	bhi.n	8003e76 <USB_HostInit+0x7a>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 8003eaa:	2101      	movs	r1, #1
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f8a4 	bl	8003ffa <USB_DriveVbus>
  
  HAL_Delay(200U);
 8003eb2:	20c8      	movs	r0, #200	; 0xc8
 8003eb4:	f7fc fc86 	bl	80007c4 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec4:	615a      	str	r2, [r3, #20]
  
  if(USBx == USB_OTG_FS)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ecc:	d10a      	bne.n	8003ee4 <USB_HostInit+0xe8>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U; 
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2280      	movs	r2, #128	; 0x80
 8003ed2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a14      	ldr	r2, [pc, #80]	; (8003f28 <USB_HostInit+0x12c>)
 8003ed8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a13      	ldr	r2, [pc, #76]	; (8003f2c <USB_HostInit+0x130>)
 8003ede:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003ee2:	e00a      	b.n	8003efa <USB_HostInit+0xfe>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U; 
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a10      	ldr	r2, [pc, #64]	; (8003f30 <USB_HostInit+0x134>)
 8003ef0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a0f      	ldr	r2, [pc, #60]	; (8003f34 <USB_HostInit+0x138>)
 8003ef6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d105      	bne.n	8003f0c <USB_HostInit+0x110>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	f043 0210 	orr.w	r2, r3, #16
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699a      	ldr	r2, [r3, #24]
 8003f10:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <USB_HostInit+0x13c>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f24:	b004      	add	sp, #16
 8003f26:	4770      	bx	lr
 8003f28:	00600080 	.word	0x00600080
 8003f2c:	004000e0 	.word	0x004000e0
 8003f30:	01000200 	.word	0x01000200
 8003f34:	00e00300 	.word	0x00e00300
 8003f38:	a3200008 	.word	0xa3200008

08003f3c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock 
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70fb      	strb	r3, [r7, #3]
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f4e:	461a      	mov	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f023 0303 	bic.w	r3, r3, #3
 8003f5c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f64:	4619      	mov	r1, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	4313      	orrs	r3, r2
 8003f76:	600b      	str	r3, [r1, #0]
  
  if (freq ==  HCFG_48_MHZ)
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d107      	bne.n	8003f8e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f84:	461a      	mov	r2, r3
 8003f86:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003f8a:	6053      	str	r3, [r2, #4]
 8003f8c:	e009      	b.n	8003fa2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq ==  HCFG_6_MHZ)
 8003f8e:	78fb      	ldrb	r3, [r7, #3]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d106      	bne.n	8003fa2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f241 7370 	movw	r3, #6000	; 0x1770
 8003fa0:	6053      	str	r3, [r2, #4]
  } 
  return HAL_OK;  
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60fb      	str	r3, [r7, #12]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003fc8:	60fb      	str	r3, [r7, #12]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd8:	6013      	str	r3, [r2, #0]
  HAL_Delay (10U);                                /* See Note #1 */
 8003fda:	200a      	movs	r0, #10
 8003fdc:	f7fc fbf2 	bl	80007c4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fee:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60fb      	str	r3, [r7, #12]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004016:	60fb      	str	r3, [r7, #12]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <USB_DriveVbus+0x3e>
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d107      	bne.n	8004038 <USB_DriveVbus+0x3e>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800402e:	461a      	mov	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004036:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800403e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004042:	d10a      	bne.n	800405a <USB_DriveVbus+0x60>
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d107      	bne.n	800405a <USB_DriveVbus+0x60>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004050:	461a      	mov	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004058:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK; 
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60fb      	str	r3, [r7, #12]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	0c5b      	lsrs	r3, r3, #17
 800407e:	f003 0303 	and.w	r3, r3, #3
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	b29b      	uxth	r3, r3
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	4608      	mov	r0, r1
 80040b6:	4611      	mov	r1, r2
 80040b8:	461a      	mov	r2, r3
 80040ba:	4603      	mov	r3, r0
 80040bc:	70fb      	strb	r3, [r7, #3]
 80040be:	460b      	mov	r3, r1
 80040c0:	70bb      	strb	r3, [r7, #2]
 80040c2:	4613      	mov	r3, r2
 80040c4:	707b      	strb	r3, [r7, #1]
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 80040c6:	78fb      	ldrb	r3, [r7, #3]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d2:	461a      	mov	r2, r3
 80040d4:	f04f 33ff 	mov.w	r3, #4294967295
 80040d8:	6093      	str	r3, [r2, #8]
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 80040da:	7d3b      	ldrb	r3, [r7, #20]
 80040dc:	2b03      	cmp	r3, #3
 80040de:	f200 8086 	bhi.w	80041ee <USB_HC_Init+0x142>
 80040e2:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <USB_HC_Init+0x3c>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	080040f9 	.word	0x080040f9
 80040ec:	080041a5 	.word	0x080041a5
 80040f0:	080040f9 	.word	0x080040f9
 80040f4:	08004165 	.word	0x08004165
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004104:	461a      	mov	r2, r3
 8004106:	f240 439d 	movw	r3, #1181	; 0x49d
 800410a:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 800410c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004110:	2b00      	cmp	r3, #0
 8004112:	da11      	bge.n	8004138 <USB_HC_Init+0x8c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4413      	add	r3, r2
 800411c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004120:	4619      	mov	r1, r3
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004134:	60cb      	str	r3, [r1, #12]
      if(USBx != USB_OTG_FS)
      {
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
      }
    }
    break;
 8004136:	e055      	b.n	80041e4 <USB_HC_Init+0x138>
      if(USBx != USB_OTG_FS)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800413e:	d051      	beq.n	80041e4 <USB_HC_Init+0x138>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4413      	add	r3, r2
 8004148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414c:	4619      	mov	r1, r3
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4413      	add	r3, r2
 8004156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004160:	60cb      	str	r3, [r1, #12]
    break;
 8004162:	e03f      	b.n	80041e4 <USB_HC_Init+0x138>
    
  case EP_TYPE_INTR:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4413      	add	r3, r2
 800416c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004170:	461a      	mov	r2, r3
 8004172:	f240 639d 	movw	r3, #1693	; 0x69d
 8004176:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_NAKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
 8004178:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800417c:	2b00      	cmp	r3, #0
 800417e:	da33      	bge.n	80041e8 <USB_HC_Init+0x13c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4413      	add	r3, r2
 8004188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418c:	4619      	mov	r1, r3
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a0:	60cb      	str	r3, [r1, #12]
    }
    
    break;
 80041a2:	e021      	b.n	80041e8 <USB_HC_Init+0x13c>
  case EP_TYPE_ISOC:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b0:	461a      	mov	r2, r3
 80041b2:	f240 2325 	movw	r3, #549	; 0x225
 80041b6:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_ACKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;   
    
    if (epnum & 0x80U) 
 80041b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	da15      	bge.n	80041ec <USB_HC_Init+0x140>
    {
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041cc:	4619      	mov	r1, r3
 80041ce:	78fb      	ldrb	r3, [r7, #3]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80041e0:	60cb      	str	r3, [r1, #12]
    }
    break;
 80041e2:	e003      	b.n	80041ec <USB_HC_Init+0x140>
    break;
 80041e4:	bf00      	nop
 80041e6:	e002      	b.n	80041ee <USB_HC_Init+0x142>
    break;
 80041e8:	bf00      	nop
 80041ea:	e000      	b.n	80041ee <USB_HC_Init+0x142>
    break;
 80041ec:	bf00      	nop
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041f4:	4618      	mov	r0, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	78fa      	ldrb	r2, [r7, #3]
 8004200:	2101      	movs	r1, #1
 8004202:	fa01 f202 	lsl.w	r2, r1, r2
 8004206:	4313      	orrs	r3, r2
 8004208:	6183      	str	r3, [r0, #24]
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	619a      	str	r2, [r3, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8004216:	78fb      	ldrb	r3, [r7, #3]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4413      	add	r3, r2
 800421e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004222:	4619      	mov	r1, r3
 8004224:	787b      	ldrb	r3, [r7, #1]
 8004226:	059b      	lsls	r3, r3, #22
 8004228:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 800422c:	78bb      	ldrb	r3, [r7, #2]
 800422e:	02db      	lsls	r3, r3, #11
 8004230:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8004234:	431a      	orrs	r2, r3
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 8004236:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800423a:	2b00      	cmp	r3, #0
 800423c:	da02      	bge.n	8004244 <USB_HC_Init+0x198>
 800423e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004242:	e000      	b.n	8004246 <USB_HC_Init+0x19a>
 8004244:	2300      	movs	r3, #0
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8004246:	431a      	orrs	r2, r3
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8004248:	7c3b      	ldrb	r3, [r7, #16]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d102      	bne.n	8004254 <USB_HC_Init+0x1a8>
 800424e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004252:	e000      	b.n	8004256 <USB_HC_Init+0x1aa>
 8004254:	2300      	movs	r3, #0
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 8004256:	431a      	orrs	r2, r3
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8004258:	7d3b      	ldrb	r3, [r7, #20]
 800425a:	049b      	lsls	r3, r3, #18
 800425c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8004260:	431a      	orrs	r2, r3
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8004262:	8b3b      	ldrh	r3, [r7, #24]
 8004264:	f3c3 030a 	ubfx	r3, r3, #0, #11
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8004268:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 800426a:	600b      	str	r3, [r1, #0]
    
  if (ep_type == EP_TYPE_INTR)
 800426c:	7d3b      	ldrb	r3, [r7, #20]
 800426e:	2b03      	cmp	r3, #3
 8004270:	d110      	bne.n	8004294 <USB_HC_Init+0x1e8>
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004272:	78fb      	ldrb	r3, [r7, #3]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427e:	4619      	mov	r1, r3
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4413      	add	r3, r2
 8004288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004292:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK; 
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop

080042a4 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08a      	sub	sp, #40	; 0x28
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	4613      	mov	r3, r2
 80042b0:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 80042b2:	2300      	movs	r3, #0
 80042b4:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 80042b6:	2300      	movs	r3, #0
 80042b8:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 80042ba:	2300      	movs	r3, #0
 80042bc:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 80042be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042c2:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042ce:	d02b      	beq.n	8004328 <USB_HC_StartXfer+0x84>
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	791b      	ldrb	r3, [r3, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d127      	bne.n	8004328 <USB_HC_StartXfer+0x84>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10b      	bne.n	80042f6 <USB_HC_StartXfer+0x52>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	795b      	ldrb	r3, [r3, #5]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d107      	bne.n	80042f6 <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	785b      	ldrb	r3, [r3, #1]
 80042ea:	4619      	mov	r1, r3
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fa0f 	bl	8004710 <USB_DoPing>
      return HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e10d      	b.n	8004512 <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1)
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d115      	bne.n	8004328 <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	785b      	ldrb	r3, [r3, #1]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4413      	add	r3, r2
 8004306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430a:	4619      	mov	r1, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	785b      	ldrb	r3, [r3, #1]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004320:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2200      	movs	r2, #0
 8004326:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d019      	beq.n	8004364 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	8912      	ldrh	r2, [r2, #8]
 8004338:	4413      	add	r3, r2
 800433a:	3b01      	subs	r3, #1
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	8912      	ldrh	r2, [r2, #8]
 8004340:	fbb3 f3f2 	udiv	r3, r3, r2
 8004344:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 8004346:	8bfa      	ldrh	r2, [r7, #30]
 8004348:	8b3b      	ldrh	r3, [r7, #24]
 800434a:	429a      	cmp	r2, r3
 800434c:	d90c      	bls.n	8004368 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800434e:	8b3b      	ldrh	r3, [r7, #24]
 8004350:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 8004352:	8bfb      	ldrh	r3, [r7, #30]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	8912      	ldrh	r2, [r2, #8]
 8004358:	fb02 f303 	mul.w	r3, r2, r3
 800435c:	461a      	mov	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	611a      	str	r2, [r3, #16]
 8004362:	e001      	b.n	8004368 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1;
 8004364:	2301      	movs	r3, #1
 8004366:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	78db      	ldrb	r3, [r3, #3]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d007      	beq.n	8004380 <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 8004370:	8bfb      	ldrh	r3, [r7, #30]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	8912      	ldrh	r2, [r2, #8]
 8004376:	fb02 f303 	mul.w	r3, r2, r3
 800437a:	461a      	mov	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	785b      	ldrb	r3, [r3, #1]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4413      	add	r3, r2
 800438a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438e:	4619      	mov	r1, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004398:	8bfb      	ldrh	r3, [r7, #30]
 800439a:	04db      	lsls	r3, r3, #19
 800439c:	4618      	mov	r0, r3
 800439e:	4b5f      	ldr	r3, [pc, #380]	; (800451c <USB_HC_StartXfer+0x278>)
 80043a0:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 80043a2:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	7a9b      	ldrb	r3, [r3, #10]
 80043a8:	075b      	lsls	r3, r3, #29
 80043aa:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 80043ae:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 80043b0:	610b      	str	r3, [r1, #16]
  
  if (dma)
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00a      	beq.n	80043ce <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	785b      	ldrb	r3, [r3, #1]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c6:	461a      	mov	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bf0c      	ite	eq
 80043de:	2301      	moveq	r3, #1
 80043e0:	2300      	movne	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	785b      	ldrb	r3, [r3, #1]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f4:	4619      	mov	r1, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	785b      	ldrb	r3, [r3, #1]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800440a:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	785b      	ldrb	r3, [r3, #1]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4413      	add	r3, r2
 8004416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441a:	4619      	mov	r1, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	785b      	ldrb	r3, [r3, #1]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4413      	add	r3, r2
 8004426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	7f7a      	ldrb	r2, [r7, #29]
 800442e:	0752      	lsls	r2, r2, #29
 8004430:	4313      	orrs	r3, r2
 8004432:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	785b      	ldrb	r3, [r3, #1]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4413      	add	r3, r2
 800443e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800444c:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004454:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	785b      	ldrb	r3, [r3, #1]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4413      	add	r3, r2
 8004460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004464:	461a      	mov	r2, r3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d14f      	bne.n	8004510 <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	78db      	ldrb	r3, [r3, #3]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d14b      	bne.n	8004510 <USB_HC_StartXfer+0x26c>
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d047      	beq.n	8004510 <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	79db      	ldrb	r3, [r3, #7]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d831      	bhi.n	80044ec <USB_HC_StartXfer+0x248>
 8004488:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <USB_HC_StartXfer+0x1ec>)
 800448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448e:	bf00      	nop
 8004490:	080044a1 	.word	0x080044a1
 8004494:	080044c5 	.word	0x080044c5
 8004498:	080044a1 	.word	0x080044a1
 800449c:	080044c5 	.word	0x080044c5
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	3303      	adds	r3, #3
 80044a6:	089b      	lsrs	r3, r3, #2
 80044a8:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 80044aa:	8b7a      	ldrh	r2, [r7, #26]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d91c      	bls.n	80044f0 <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f043 0220 	orr.w	r2, r3, #32
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	619a      	str	r2, [r3, #24]
        }
        break;
 80044c2:	e015      	b.n	80044f0 <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	3303      	adds	r3, #3
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 80044ce:	8b7a      	ldrh	r2, [r7, #26]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	429a      	cmp	r2, r3
 80044dc:	d90a      	bls.n	80044f4 <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80044ea:	e003      	b.n	80044f4 <USB_HC_StartXfer+0x250>
        
      default:
        break;
 80044ec:	bf00      	nop
 80044ee:	e002      	b.n	80044f6 <USB_HC_StartXfer+0x252>
        break;
 80044f0:	bf00      	nop
 80044f2:	e000      	b.n	80044f6 <USB_HC_StartXfer+0x252>
        break;
 80044f4:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	68d9      	ldr	r1, [r3, #12]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	785a      	ldrb	r2, [r3, #1]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	b298      	uxth	r0, r3
 8004504:	2300      	movs	r3, #0
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	4603      	mov	r3, r0
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7ff fbc2 	bl	8003c94 <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3720      	adds	r7, #32
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	1ff80000 	.word	0x1ff80000

08004520 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	b29b      	uxth	r3, r3
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 800453e:	b480      	push	{r7}
 8004540:	b085      	sub	sp, #20
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	460b      	mov	r3, r1
 8004548:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4413      	add	r3, r2
 8004556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	0c9b      	lsrs	r3, r3, #18
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00b      	beq.n	800457e <USB_HC_Halt+0x40>
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4413      	add	r3, r2
 800456e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004572:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8004574:	0c9b      	lsrs	r3, r3, #18
 8004576:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 800457a:	2b02      	cmp	r3, #2
 800457c:	d160      	bne.n	8004640 <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800457e:	78fb      	ldrb	r3, [r7, #3]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4413      	add	r3, r2
 8004586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458a:	4619      	mov	r1, r3
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4413      	add	r3, r2
 8004594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800459e:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d135      	bne.n	8004618 <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b8:	4619      	mov	r1, r3
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045cc:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045da:	4619      	mov	r1, r3
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045ee:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3301      	adds	r3, #1
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045fc:	d81e      	bhi.n	800463c <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 80045fe:	78fb      	ldrb	r3, [r7, #3]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4413      	add	r3, r2
 8004606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004614:	d0ec      	beq.n	80045f0 <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004616:	e074      	b.n	8004702 <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4413      	add	r3, r2
 8004620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004624:	4619      	mov	r1, r3
 8004626:	78fb      	ldrb	r3, [r7, #3]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004638:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800463a:	e062      	b.n	8004702 <USB_HC_Halt+0x1c4>
          break;
 800463c:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800463e:	e060      	b.n	8004702 <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4413      	add	r3, r2
 8004648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464c:	4619      	mov	r1, r3
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004660:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d135      	bne.n	80046dc <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4413      	add	r3, r2
 8004678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467c:	4619      	mov	r1, r3
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4413      	add	r3, r2
 8004686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004690:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4413      	add	r3, r2
 800469a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469e:	4619      	mov	r1, r3
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046b2:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3301      	adds	r3, #1
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046c0:	d81e      	bhi.n	8004700 <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046d8:	d0ec      	beq.n	80046b4 <USB_HC_Halt+0x176>
 80046da:	e012      	b.n	8004702 <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e8:	4619      	mov	r1, r3
 80046ea:	78fb      	ldrb	r3, [r7, #3]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046fc:	600b      	str	r3, [r1, #0]
 80046fe:	e000      	b.n	8004702 <USB_HC_Halt+0x1c4>
          break;
 8004700:	bf00      	nop
    }
  }
  
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 800471c:	2301      	movs	r3, #1
 800471e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4413      	add	r3, r2
 800472c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004730:	461a      	mov	r2, r3
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	04db      	lsls	r3, r3, #19
 8004736:	4619      	mov	r1, r3
 8004738:	4b12      	ldr	r3, [pc, #72]	; (8004784 <USB_DoPing+0x74>)
 800473a:	400b      	ands	r3, r1
 800473c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004740:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004742:	78fb      	ldrb	r3, [r7, #3]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4413      	add	r3, r2
 800474a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004758:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004760:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004762:	78fb      	ldrb	r3, [r7, #3]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4413      	add	r3, r2
 800476a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476e:	461a      	mov	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	1ff80000 	.word	0x1ff80000

08004788 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff f9fd 	bl	8003b94 <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 800479a:	2110      	movs	r1, #16
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff fa31 	bl	8003c04 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff fa54 	bl	8003c50 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 80047a8:	2300      	movs	r3, #0
 80047aa:	75fb      	strb	r3, [r7, #23]
 80047ac:	e01f      	b.n	80047ee <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 80047ae:	7dfb      	ldrb	r3, [r7, #23]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047c4:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047cc:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047d4:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 80047d6:	7dfb      	ldrb	r3, [r7, #23]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e2:	461a      	mov	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 80047e8:	7dfb      	ldrb	r3, [r7, #23]
 80047ea:	3301      	adds	r3, #1
 80047ec:	75fb      	strb	r3, [r7, #23]
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
 80047f0:	2b0f      	cmp	r3, #15
 80047f2:	d9dc      	bls.n	80047ae <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 80047f4:	2300      	movs	r3, #0
 80047f6:	75fb      	strb	r3, [r7, #23]
 80047f8:	e034      	b.n	8004864 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 80047fa:	7dfb      	ldrb	r3, [r7, #23]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4413      	add	r3, r2
 8004802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004810:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004818:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004820:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 8004822:	7dfb      	ldrb	r3, [r7, #23]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4413      	add	r3, r2
 800482a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482e:	461a      	mov	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	3301      	adds	r3, #1
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004840:	d80c      	bhi.n	800485c <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004842:	7dfb      	ldrb	r3, [r7, #23]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4413      	add	r3, r2
 800484a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004858:	d0ec      	beq.n	8004834 <USB_StopHost+0xac>
 800485a:	e000      	b.n	800485e <USB_StopHost+0xd6>
        break;
 800485c:	bf00      	nop
  for (i = 0; i <= 15; i++)
 800485e:	7dfb      	ldrb	r3, [r7, #23]
 8004860:	3301      	adds	r3, #1
 8004862:	75fb      	strb	r3, [r7, #23]
 8004864:	7dfb      	ldrb	r3, [r7, #23]
 8004866:	2b0f      	cmp	r3, #15
 8004868:	d9c7      	bls.n	80047fa <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004870:	461a      	mov	r2, r3
 8004872:	f04f 33ff 	mov.w	r3, #4294967295
 8004876:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f04f 32ff 	mov.w	r2, #4294967295
 800487e:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff f976 	bl	8003b72 <USB_EnableGlobalInt>
  return HAL_OK;  
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit (USBH_HandleTypeDef *phost)
{	
 8004890:	b590      	push	{r4, r7, lr}
 8004892:	b08b      	sub	sp, #44	; 0x2c
 8004894:	af04      	add	r7, sp, #16
 8004896:	6078      	str	r0, [r7, #4]
  uint8_t max_ep;
  uint8_t num = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;
  
  USBH_StatusTypeDef status = USBH_FAIL ;
 800489c:	2302      	movs	r3, #2
 800489e:	757b      	strb	r3, [r7, #21]
  HID_HandleTypeDef *HID_Handle;
  
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80048a6:	7919      	ldrb	r1, [r3, #4]
 80048a8:	23ff      	movs	r3, #255	; 0xff
 80048aa:	2201      	movs	r2, #1
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f001 fb53 	bl	8005f58 <USBH_FindInterface>
 80048b2:	4603      	mov	r3, r0
 80048b4:	75bb      	strb	r3, [r7, #22]

  if (interface == 0xFF) // did not find KB or mouse
 80048b6:	7dbb      	ldrb	r3, [r7, #22]
 80048b8:	2bff      	cmp	r3, #255	; 0xff
 80048ba:	d10a      	bne.n	80048d2 <USBH_HID_InterfaceInit+0x42>
	  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0, 0xFF); // try looking for ds3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80048c2:	7919      	ldrb	r1, [r3, #4]
 80048c4:	23ff      	movs	r3, #255	; 0xff
 80048c6:	2200      	movs	r2, #0
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f001 fb45 	bl	8005f58 <USBH_FindInterface>
 80048ce:	4603      	mov	r3, r0
 80048d0:	75bb      	strb	r3, [r7, #22]
  
  if(interface == 0xFF) /* No Valid Interface */
 80048d2:	7dbb      	ldrb	r3, [r7, #22]
 80048d4:	2bff      	cmp	r3, #255	; 0xff
 80048d6:	d110      	bne.n	80048fa <USBH_HID_InterfaceInit+0x6a>
  {
    status = USBH_FAIL;  
 80048d8:	2302      	movs	r3, #2
 80048da:	757b      	strb	r3, [r7, #21]
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);         
 80048dc:	48a7      	ldr	r0, [pc, #668]	; (8004b7c <USBH_HID_InterfaceInit+0x2ec>)
 80048de:	f003 fcc5 	bl	800826c <iprintf>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4619      	mov	r1, r3
 80048ec:	48a4      	ldr	r0, [pc, #656]	; (8004b80 <USBH_HID_InterfaceInit+0x2f0>)
 80048ee:	f003 fcbd 	bl	800826c <iprintf>
 80048f2:	200a      	movs	r0, #10
 80048f4:	f003 fcd2 	bl	800829c <putchar>
 80048f8:	e13b      	b.n	8004b72 <USBH_HID_InterfaceInit+0x2e2>
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80048fa:	7dbb      	ldrb	r3, [r7, #22]
 80048fc:	4619      	mov	r1, r3
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f001 fac2 	bl	8005e88 <USBH_SelectInterface>
    phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc (sizeof(HID_HandleTypeDef));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800490a:	2034      	movs	r0, #52	; 0x34
 800490c:	f003 fbea 	bl	80080e4 <malloc>
 8004910:	4603      	mov	r3, r0
 8004912:	61e3      	str	r3, [r4, #28]
    HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	613b      	str	r3, [r7, #16]
    HID_Handle->state = HID_ERROR;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2207      	movs	r2, #7
 8004922:	709a      	strb	r2, [r3, #2]
    
    /*Decode Bootclass Protocol: Mouse or Keyboard*/
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800492a:	4619      	mov	r1, r3
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	231a      	movs	r3, #26
 8004930:	fb03 f301 	mul.w	r3, r3, r1
 8004934:	4413      	add	r3, r2
 8004936:	f203 3343 	addw	r3, r3, #835	; 0x343
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d109      	bne.n	8004954 <USBH_HID_InterfaceInit+0xc4>
    {
      USBH_UsrLog ("KeyBoard device found!"); 
 8004940:	4890      	ldr	r0, [pc, #576]	; (8004b84 <USBH_HID_InterfaceInit+0x2f4>)
 8004942:	f003 fc93 	bl	800826c <iprintf>
 8004946:	200a      	movs	r0, #10
 8004948:	f003 fca8 	bl	800829c <putchar>
      HID_Handle->Init =  USBH_HID_KeybdInit;     
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4a8e      	ldr	r2, [pc, #568]	; (8004b88 <USBH_HID_InterfaceInit+0x2f8>)
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
 8004952:	e037      	b.n	80049c4 <USBH_HID_InterfaceInit+0x134>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)		  
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800495a:	4619      	mov	r1, r3
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	231a      	movs	r3, #26
 8004960:	fb03 f301 	mul.w	r3, r3, r1
 8004964:	4413      	add	r3, r2
 8004966:	f203 3343 	addw	r3, r3, #835	; 0x343
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d109      	bne.n	8004984 <USBH_HID_InterfaceInit+0xf4>
    {
      USBH_UsrLog ("Mouse device found!");         
 8004970:	4886      	ldr	r0, [pc, #536]	; (8004b8c <USBH_HID_InterfaceInit+0x2fc>)
 8004972:	f003 fc7b 	bl	800826c <iprintf>
 8004976:	200a      	movs	r0, #10
 8004978:	f003 fc90 	bl	800829c <putchar>
      HID_Handle->Init =  USBH_HID_MouseInit;     
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4a84      	ldr	r2, [pc, #528]	; (8004b90 <USBH_HID_InterfaceInit+0x300>)
 8004980:	631a      	str	r2, [r3, #48]	; 0x30
 8004982:	e01f      	b.n	80049c4 <USBH_HID_InterfaceInit+0x134>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol  == HID_DS3_BOOT_CODE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800498a:	4619      	mov	r1, r3
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	231a      	movs	r3, #26
 8004990:	fb03 f301 	mul.w	r3, r3, r1
 8004994:	4413      	add	r3, r2
 8004996:	f203 3343 	addw	r3, r3, #835	; 0x343
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d109      	bne.n	80049b4 <USBH_HID_InterfaceInit+0x124>
	{
	  USBH_UsrLog ("DS3 device found!");
 80049a0:	487c      	ldr	r0, [pc, #496]	; (8004b94 <USBH_HID_InterfaceInit+0x304>)
 80049a2:	f003 fc63 	bl	800826c <iprintf>
 80049a6:	200a      	movs	r0, #10
 80049a8:	f003 fc78 	bl	800829c <putchar>
	  HID_Handle->Init =  USBH_HID_DS3Init;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4a7a      	ldr	r2, [pc, #488]	; (8004b98 <USBH_HID_InterfaceInit+0x308>)
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30
 80049b2:	e007      	b.n	80049c4 <USBH_HID_InterfaceInit+0x134>
	}
    else
    {
      USBH_UsrLog ("Protocol not supported.");  
 80049b4:	4879      	ldr	r0, [pc, #484]	; (8004b9c <USBH_HID_InterfaceInit+0x30c>)
 80049b6:	f003 fc59 	bl	800826c <iprintf>
 80049ba:	200a      	movs	r0, #10
 80049bc:	f003 fc6e 	bl	800829c <putchar>
      return USBH_FAIL;
 80049c0:	2302      	movs	r3, #2
 80049c2:	e0d7      	b.n	8004b74 <USBH_HID_InterfaceInit+0x2e4>
    }
    
    HID_Handle->state     = HID_INIT;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2200      	movs	r2, #0
 80049c8:	709a      	strb	r2, [r3, #2]
    HID_Handle->ctl_state = HID_REQ_INIT; 
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2200      	movs	r2, #0
 80049ce:	715a      	strb	r2, [r3, #5]
    HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80049d6:	4619      	mov	r1, r3
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	231a      	movs	r3, #26
 80049dc:	fb03 f301 	mul.w	r3, r3, r1
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80049e6:	781a      	ldrb	r2, [r3, #0]
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	769a      	strb	r2, [r3, #26]
    HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80049f2:	4619      	mov	r1, r3
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	231a      	movs	r3, #26
 80049f8:	fb03 f301 	mul.w	r3, r3, r1
 80049fc:	4413      	add	r3, r2
 80049fe:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8004a02:	881a      	ldrh	r2, [r3, #0]
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	831a      	strh	r2, [r3, #24]
    HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bInterval ;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004a0e:	4619      	mov	r1, r3
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	231a      	movs	r3, #26
 8004a14:	fb03 f301 	mul.w	r3, r3, r1
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	839a      	strh	r2, [r3, #28]
    
    if (HID_Handle->poll  < HID_MIN_POLL) 
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	8b9b      	ldrh	r3, [r3, #28]
 8004a2a:	2b09      	cmp	r3, #9
 8004a2c:	d802      	bhi.n	8004a34 <USBH_HID_InterfaceInit+0x1a4>
    {
      HID_Handle->poll = HID_MIN_POLL;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	220a      	movs	r2, #10
 8004a32:	839a      	strh	r2, [r3, #28]
    
    /* Check for available number of endpoints */
    /* Find the number of EPs in the Interface Descriptor */      
    /* Choose the lower number in order not to overrun the buffer allocated */
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
              phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	231a      	movs	r3, #26
 8004a40:	fb03 f301 	mul.w	r3, r3, r1
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8004a4a:	781b      	ldrb	r3, [r3, #0]
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	bf28      	it	cs
 8004a50:	2302      	movcs	r3, #2
 8004a52:	73fb      	strb	r3, [r7, #15]
                  USBH_MAX_NUM_ENDPOINTS); 
    
    
    /* Decode endpoint IN and OUT address from interface descriptor */
    for ( ;num < max_ep; num++)
 8004a54:	e086      	b.n	8004b64 <USBH_HID_InterfaceInit+0x2d4>
    {
      if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress & 0x80)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	7dfb      	ldrb	r3, [r7, #23]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	3301      	adds	r3, #1
 8004a64:	00d9      	lsls	r1, r3, #3
 8004a66:	231a      	movs	r3, #26
 8004a68:	fb03 f300 	mul.w	r3, r3, r0
 8004a6c:	440b      	add	r3, r1
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	b25b      	sxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	da38      	bge.n	8004aee <USBH_HID_InterfaceInit+0x25e>
      {
        HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004a82:	4618      	mov	r0, r3
 8004a84:	7dfb      	ldrb	r3, [r7, #23]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	00d9      	lsls	r1, r3, #3
 8004a8c:	231a      	movs	r3, #26
 8004a8e:	fb03 f300 	mul.w	r3, r3, r0
 8004a92:	440b      	add	r3, r1
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8004a9a:	781a      	ldrb	r2, [r3, #0]
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	711a      	strb	r2, [r3, #4]
        HID_Handle->InPipe  =\
          USBH_AllocPipe(phost, HID_Handle->InEp);
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	791b      	ldrb	r3, [r3, #4]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f002 fb9b 	bl	80071e2 <USBH_AllocPipe>
 8004aac:	4603      	mov	r3, r0
 8004aae:	461a      	mov	r2, r3
        HID_Handle->InPipe  =\
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	705a      	strb	r2, [r3, #1]
        
        /* Open pipe for IN endpoint */
        USBH_OpenPipe  (phost,
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	7859      	ldrb	r1, [r3, #1]
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	7918      	ldrb	r0, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	8b12      	ldrh	r2, [r2, #24]
 8004acc:	9202      	str	r2, [sp, #8]
 8004ace:	2203      	movs	r2, #3
 8004ad0:	9201      	str	r2, [sp, #4]
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	4623      	mov	r3, r4
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f002 fb53 	bl	8007184 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        HID_Handle->length); 
        
        USBH_LL_SetToggle (phost, HID_Handle->InPipe, 0);
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	785b      	ldrb	r3, [r3, #1]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f003 fa6f 	bl	8007fca <USBH_LL_SetToggle>
 8004aec:	e037      	b.n	8004b5e <USBH_HID_InterfaceInit+0x2ce>
        
      }
      else
      {
        HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004af4:	4618      	mov	r0, r3
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	3301      	adds	r3, #1
 8004afc:	00d9      	lsls	r1, r3, #3
 8004afe:	231a      	movs	r3, #26
 8004b00:	fb03 f300 	mul.w	r3, r3, r0
 8004b04:	440b      	add	r3, r1
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8004b0c:	781a      	ldrb	r2, [r3, #0]
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	70da      	strb	r2, [r3, #3]
        HID_Handle->OutPipe  =\
          USBH_AllocPipe(phost, HID_Handle->OutEp);
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	78db      	ldrb	r3, [r3, #3]
 8004b16:	4619      	mov	r1, r3
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f002 fb62 	bl	80071e2 <USBH_AllocPipe>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	461a      	mov	r2, r3
        HID_Handle->OutPipe  =\
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	701a      	strb	r2, [r3, #0]
        
        /* Open pipe for OUT endpoint */
        USBH_OpenPipe  (phost,
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	7819      	ldrb	r1, [r3, #0]
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	78d8      	ldrb	r0, [r3, #3]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	8b12      	ldrh	r2, [r2, #24]
 8004b3e:	9202      	str	r2, [sp, #8]
 8004b40:	2203      	movs	r2, #3
 8004b42:	9201      	str	r2, [sp, #4]
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	4623      	mov	r3, r4
 8004b48:	4602      	mov	r2, r0
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f002 fb1a 	bl	8007184 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        HID_Handle->length); 
        
        USBH_LL_SetToggle (phost, HID_Handle->OutPipe, 0);        
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2200      	movs	r2, #0
 8004b56:	4619      	mov	r1, r3
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f003 fa36 	bl	8007fca <USBH_LL_SetToggle>
    for ( ;num < max_ep; num++)
 8004b5e:	7dfb      	ldrb	r3, [r7, #23]
 8004b60:	3301      	adds	r3, #1
 8004b62:	75fb      	strb	r3, [r7, #23]
 8004b64:	7dfa      	ldrb	r2, [r7, #23]
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	f4ff af74 	bcc.w	8004a56 <USBH_HID_InterfaceInit+0x1c6>
      }
      
    }  
    status = USBH_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	757b      	strb	r3, [r7, #21]
  }
  return status;
 8004b72:	7d7b      	ldrb	r3, [r7, #21]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd90      	pop	{r4, r7, pc}
 8004b7c:	08009030 	.word	0x08009030
 8004b80:	0800903c 	.word	0x0800903c
 8004b84:	08009064 	.word	0x08009064
 8004b88:	08005975 	.word	0x08005975
 8004b8c:	0800907c 	.word	0x0800907c
 8004b90:	08005b5d 	.word	0x08005b5d
 8004b94:	08009090 	.word	0x08009090
 8004b98:	08005865 	.word	0x08005865
 8004b9c:	080090a4 	.word	0x080090a4

08004ba0 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_InterfaceDeInit (USBH_HandleTypeDef *phost )
{	
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	60fb      	str	r3, [r7, #12]
  
  if(HID_Handle->InPipe != 0x00)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	785b      	ldrb	r3, [r3, #1]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00e      	beq.n	8004bd8 <USBH_HID_InterfaceDeInit+0x38>
  {   
    USBH_ClosePipe  (phost, HID_Handle->InPipe);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	785b      	ldrb	r3, [r3, #1]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f002 fafe 	bl	80071c2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->InPipe);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	785b      	ldrb	r3, [r3, #1]
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f002 fb27 	bl	8007220 <USBH_FreePipe>
    HID_Handle->InPipe = 0;     /* Reset the pipe as Free */  
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	705a      	strb	r2, [r3, #1]
  }
  
  if(HID_Handle->OutPipe != 0x00)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00e      	beq.n	8004bfe <USBH_HID_InterfaceDeInit+0x5e>
  {   
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	4619      	mov	r1, r3
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f002 faeb 	bl	80071c2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->OutPipe);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f002 fb14 	bl	8007220 <USBH_FreePipe>
    HID_Handle->OutPipe = 0;     /* Reset the pipe as Free */  
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
  }
  
  if(phost->pActiveClass->pData)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d006      	beq.n	8004c18 <USBH_HID_InterfaceDeInit+0x78>
  {
    USBH_free (phost->pActiveClass->pData);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f003 fa6e 	bl	80080f4 <free>
  }

  return USBH_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{   
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	6078      	str	r0, [r7, #4]
  uint8_t enable[4] = {0x42, 0x0C, 0x00, 0x00};
 8004c2c:	4b50      	ldr	r3, [pc, #320]	; (8004d70 <USBH_HID_ClassRequest+0x14c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef status         = USBH_BUSY;
 8004c32:	2301      	movs	r3, #1
 8004c34:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8004c36:	2301      	movs	r3, #1
 8004c38:	75bb      	strb	r3, [r7, #22]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	613b      	str	r3, [r7, #16]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	795b      	ldrb	r3, [r3, #5]
 8004c48:	2b07      	cmp	r3, #7
 8004c4a:	f200 8081 	bhi.w	8004d50 <USBH_HID_ClassRequest+0x12c>
 8004c4e:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <USBH_HID_ClassRequest+0x30>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004c75 	.word	0x08004c75
 8004c58:	08004d51 	.word	0x08004d51
 8004c5c:	08004c9f 	.word	0x08004c9f
 8004c60:	08004c75 	.word	0x08004c75
 8004c64:	08004d01 	.word	0x08004d01
 8004c68:	08004d2b 	.word	0x08004d2b
 8004c6c:	08004d51 	.word	0x08004d51
 8004c70:	08004cdb 	.word	0x08004cdb
  {
  case HID_REQ_INIT:  
  case HID_REQ_GET_HID_DESC:
    
    /* Get HID Desc */ 
    if (USBH_HID_GetHIDDescriptor (phost, USB_HID_DESC_SIZE)== USBH_OK)
 8004c74:	2109      	movs	r1, #9
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f95e 	bl	8004f38 <USBH_HID_GetHIDDescriptor>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d168      	bne.n	8004d54 <USBH_HID_ClassRequest+0x130>
    {
      
      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f000 fa0f 	bl	80050b4 <USBH_HID_ParseHIDDesc>
      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	2202      	movs	r2, #2
 8004c9a:	715a      	strb	r2, [r3, #5]
    }
    
    break;     
 8004c9c:	e05a      	b.n	8004d54 <USBH_HID_ClassRequest+0x130>
  case HID_REQ_GET_REPORT_DESC:
    
    
    /* Get Report Desc */ 
    if (USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength) == USBH_OK)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f92e 	bl	8004f06 <USBH_HID_GetHIDReportDescriptor>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d153      	bne.n	8004d58 <USBH_HID_ClassRequest+0x134>
    {
      /* The descriptor is available in phost->device.Data */
    	if(phost->device.DevDesc.idVendor == 0x054C && phost->device.DevDesc.idProduct == 0x0268) // DS3 Sixaxis
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8004cb6:	f240 524c 	movw	r2, #1356	; 0x54c
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d109      	bne.n	8004cd2 <USBH_HID_ClassRequest+0xae>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8004cc4:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8004cc8:	d103      	bne.n	8004cd2 <USBH_HID_ClassRequest+0xae>
    	{
    		HID_Handle->ctl_state = HID_PS3_BOOTCODE;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2207      	movs	r2, #7
 8004cce:	715a      	strb	r2, [r3, #5]
    	}
    	else HID_Handle->ctl_state = HID_REQ_SET_IDLE;
    }
    
    break;
 8004cd0:	e042      	b.n	8004d58 <USBH_HID_ClassRequest+0x134>
    	else HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	715a      	strb	r2, [r3, #5]
    break;
 8004cd8:	e03e      	b.n	8004d58 <USBH_HID_ClassRequest+0x134>
    
  case HID_PS3_BOOTCODE:
	  if(USBH_HID_SetReport(phost,0x03,0xF4,enable,4) == USBH_OK)
 8004cda:	f107 020c 	add.w	r2, r7, #12
 8004cde:	2304      	movs	r3, #4
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	22f4      	movs	r2, #244	; 0xf4
 8004ce6:	2103      	movs	r1, #3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f966 	bl	8004fba <USBH_HID_SetReport>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d133      	bne.n	8004d5c <USBH_HID_ClassRequest+0x138>
	  {
		  HID_Handle->ctl_state = HID_REQ_IDLE; // enable ps3 communication
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	715a      	strb	r2, [r3, #5]
		  status = USBH_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	75fb      	strb	r3, [r7, #23]
	  }
	  break;
 8004cfe:	e02d      	b.n	8004d5c <USBH_HID_ClassRequest+0x138>

  case HID_REQ_SET_IDLE:
    
    classReqStatus = USBH_HID_SetIdle (phost, 0, 0);
 8004d00:	2200      	movs	r2, #0
 8004d02:	2100      	movs	r1, #0
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f930 	bl	8004f6a <USBH_HID_SetIdle>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	75bb      	strb	r3, [r7, #22]
    
    /* set Idle */
    if (classReqStatus == USBH_OK)
 8004d0e:	7dbb      	ldrb	r3, [r7, #22]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d103      	bne.n	8004d1c <USBH_HID_ClassRequest+0xf8>
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;  
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	2205      	movs	r2, #5
 8004d18:	715a      	strb	r2, [r3, #5]
    }
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL; // Why if it's not supported would we set it to this state?!
    } 
    break; 
 8004d1a:	e021      	b.n	8004d60 <USBH_HID_ClassRequest+0x13c>
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
 8004d1c:	7dbb      	ldrb	r3, [r7, #22]
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d11e      	bne.n	8004d60 <USBH_HID_ClassRequest+0x13c>
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL; // Why if it's not supported would we set it to this state?!
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2205      	movs	r2, #5
 8004d26:	715a      	strb	r2, [r3, #5]
    break; 
 8004d28:	e01a      	b.n	8004d60 <USBH_HID_ClassRequest+0x13c>
    
  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
    if (USBH_HID_SetProtocol (phost, 0) == USBH_OK)
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f99c 	bl	800506a <USBH_HID_SetProtocol>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d115      	bne.n	8004d64 <USBH_HID_ClassRequest+0x140>
    {
      HID_Handle->ctl_state = HID_REQ_IDLE;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	715a      	strb	r2, [r3, #5]
      
      /* all requests performed*/
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE); 
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004d44:	2102      	movs	r1, #2
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	4798      	blx	r3
      status = USBH_OK; 
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]
    } 
    break;
 8004d4e:	e009      	b.n	8004d64 <USBH_HID_ClassRequest+0x140>
    
  case HID_REQ_IDLE:
  default:
    break;
 8004d50:	bf00      	nop
 8004d52:	e008      	b.n	8004d66 <USBH_HID_ClassRequest+0x142>
    break;     
 8004d54:	bf00      	nop
 8004d56:	e006      	b.n	8004d66 <USBH_HID_ClassRequest+0x142>
    break;
 8004d58:	bf00      	nop
 8004d5a:	e004      	b.n	8004d66 <USBH_HID_ClassRequest+0x142>
	  break;
 8004d5c:	bf00      	nop
 8004d5e:	e002      	b.n	8004d66 <USBH_HID_ClassRequest+0x142>
    break; 
 8004d60:	bf00      	nop
 8004d62:	e000      	b.n	8004d66 <USBH_HID_ClassRequest+0x142>
    break;
 8004d64:	bf00      	nop
  }
  
  return status; 
 8004d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	080090bc 	.word	0x080090bc

08004d74 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	73fb      	strb	r3, [r7, #15]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	60bb      	str	r3, [r7, #8]
  
  switch (HID_Handle->state)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	789b      	ldrb	r3, [r3, #2]
 8004d8e:	2b06      	cmp	r3, #6
 8004d90:	f200 808b 	bhi.w	8004eaa <USBH_HID_Process+0x136>
 8004d94:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <USBH_HID_Process+0x28>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004db9 	.word	0x08004db9
 8004da0:	08004dc1 	.word	0x08004dc1
 8004da4:	08004eab 	.word	0x08004eab
 8004da8:	08004eab 	.word	0x08004eab
 8004dac:	08004e11 	.word	0x08004e11
 8004db0:	08004dfb 	.word	0x08004dfb
 8004db4:	08004e3f 	.word	0x08004e3f
  {
  case HID_INIT:
    HID_Handle->Init(phost); 
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	4798      	blx	r3
  case HID_IDLE:
    if(USBH_HID_GetReport (phost,
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	695a      	ldr	r2, [r3, #20]
                           0x01,
                            0,
                            HID_Handle->pData,
                            HID_Handle->length) == USBH_OK)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	8b1b      	ldrh	r3, [r3, #24]
    if(USBH_HID_GetReport (phost,
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f91d 	bl	8005012 <USBH_HID_GetReport>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d167      	bne.n	8004eae <USBH_HID_Process+0x13a>
    {
      
      fifo_write(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);  
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f103 0008 	add.w	r0, r3, #8
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6959      	ldr	r1, [r3, #20]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	8b1b      	ldrh	r3, [r3, #24]
 8004dec:	461a      	mov	r2, r3
 8004dee:	f000 fa45 	bl	800527c <fifo_write>
      HID_Handle->state = HID_SYNC;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2205      	movs	r2, #5
 8004df6:	709a      	strb	r2, [r3, #2]
    }
    
    break;
 8004df8:	e059      	b.n	8004eae <USBH_HID_Process+0x13a>
    
  case HID_SYNC:

    /* Sync with start of Even Frame */
    if(phost->Timer & 1)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d054      	beq.n	8004eb2 <USBH_HID_Process+0x13e>
    {
      HID_Handle->state = HID_GET_DATA; 
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2204      	movs	r2, #4
 8004e0c:	709a      	strb	r2, [r3, #2]
    }
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif   
    break;
 8004e0e:	e050      	b.n	8004eb2 <USBH_HID_Process+0x13e>
    
  case HID_GET_DATA:

    USBH_InterruptReceiveData(phost, 
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	6959      	ldr	r1, [r3, #20]
                              HID_Handle->pData,
                              HID_Handle->length,
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	8b1b      	ldrh	r3, [r3, #24]
    USBH_InterruptReceiveData(phost, 
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	785b      	ldrb	r3, [r3, #1]
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f002 f991 	bl	8007146 <USBH_InterruptReceiveData>
                              HID_Handle->InPipe);
    
    HID_Handle->state = HID_POLL;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2206      	movs	r2, #6
 8004e28:	709a      	strb	r2, [r3, #2]
    HID_Handle->timer = phost->Timer;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	621a      	str	r2, [r3, #32]
    HID_Handle->DataReady = 0;
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    break;
 8004e3c:	e03c      	b.n	8004eb8 <USBH_HID_Process+0x144>
    
  case HID_POLL:
    
    if(USBH_LL_GetURBState(phost , HID_Handle->InPipe) == USBH_URB_DONE)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	785b      	ldrb	r3, [r3, #1]
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f003 f89f 	bl	8007f88 <USBH_LL_GetURBState>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d116      	bne.n	8004e7e <USBH_HID_Process+0x10a>
    {
      if(HID_Handle->DataReady == 0)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d12d      	bne.n	8004eb6 <USBH_HID_Process+0x142>
      {
        fifo_write(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f103 0008 	add.w	r0, r3, #8
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	6959      	ldr	r1, [r3, #20]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	8b1b      	ldrh	r3, [r3, #24]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f000 fa07 	bl	800527c <fifo_write>
        HID_Handle->DataReady = 1;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        USBH_HID_EventCallback(phost);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fa54 	bl	8005324 <USBH_HID_EventCallback>
        HID_Handle->state = HID_GET_DATA;
      }
    } 
    

    break;
 8004e7c:	e01b      	b.n	8004eb6 <USBH_HID_Process+0x142>
    else if(USBH_LL_GetURBState(phost , HID_Handle->InPipe) == USBH_URB_STALL) /* IN Endpoint Stalled */
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	785b      	ldrb	r3, [r3, #1]
 8004e82:	4619      	mov	r1, r3
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f003 f87f 	bl	8007f88 <USBH_LL_GetURBState>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b05      	cmp	r3, #5
 8004e8e:	d112      	bne.n	8004eb6 <USBH_HID_Process+0x142>
      if(USBH_ClrFeature(phost,
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	7e9b      	ldrb	r3, [r3, #26]
 8004e94:	4619      	mov	r1, r3
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f001 fd61 	bl	800695e <USBH_ClrFeature>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d109      	bne.n	8004eb6 <USBH_HID_Process+0x142>
        HID_Handle->state = HID_GET_DATA;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2204      	movs	r2, #4
 8004ea6:	709a      	strb	r2, [r3, #2]
    break;
 8004ea8:	e005      	b.n	8004eb6 <USBH_HID_Process+0x142>
    
  default:
    break;
 8004eaa:	bf00      	nop
 8004eac:	e004      	b.n	8004eb8 <USBH_HID_Process+0x144>
    break;
 8004eae:	bf00      	nop
 8004eb0:	e002      	b.n	8004eb8 <USBH_HID_Process+0x144>
    break;
 8004eb2:	bf00      	nop
 8004eb4:	e000      	b.n	8004eb8 <USBH_HID_Process+0x144>
    break;
 8004eb6:	bf00      	nop
  }
  return status;
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop

08004ec4 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	60fb      	str	r3, [r7, #12]
  
  if(HID_Handle->state == HID_POLL)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	789b      	ldrb	r3, [r3, #2]
 8004eda:	2b06      	cmp	r3, #6
 8004edc:	d10c      	bne.n	8004ef8 <USBH_HID_SOFProcess+0x34>
  {
    if(( phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	8b92      	ldrh	r2, [r2, #28]
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d302      	bcc.n	8004ef8 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	709a      	strb	r2, [r3, #2]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
  }
  return USBH_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor (USBH_HandleTypeDef *phost,
                                                         uint16_t length)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b086      	sub	sp, #24
 8004f0a:	af02      	add	r7, sp, #8
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  
  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,                                  
                              USB_DESC_HID_REPORT, 
                              phost->device.Data,
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8004f18:	887b      	ldrh	r3, [r7, #2]
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8004f22:	2101      	movs	r1, #1
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f001 fc9e 	bl	8006866 <USBH_GetDescriptor>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/
  
  
  return status;
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <USBH_HID_GetHIDDescriptor>:
  * @param  Length : HID Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor (USBH_HandleTypeDef *phost,
                                            uint16_t length)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  
  status = USBH_GetDescriptor( phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,                                  
                              USB_DESC_HID,
                              phost->device.Data,
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor( phost,
 8004f4a:	887b      	ldrh	r3, [r7, #2]
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8004f54:	2101      	movs	r1, #1
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f001 fc85 	bl	8006866 <USBH_GetDescriptor>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	73fb      	strb	r3, [r7, #15]
                              length);
 
  return status;
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle (USBH_HandleTypeDef *phost,
                                         uint8_t duration,
                                         uint8_t reportId)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b082      	sub	sp, #8
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	460b      	mov	r3, r1
 8004f74:	70fb      	strb	r3, [r7, #3]
 8004f76:	4613      	mov	r3, r2
 8004f78:	70bb      	strb	r3, [r7, #2]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2221      	movs	r2, #33	; 0x21
 8004f7e:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	220a      	movs	r2, #10
 8004f84:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (duration << 8 ) | reportId;
 8004f86:	78fb      	ldrb	r3, [r7, #3]
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	b21a      	sxth	r2, r3
 8004f8c:	78bb      	ldrb	r3, [r7, #2]
 8004f8e:	b21b      	sxth	r3, r3
 8004f90:	4313      	orrs	r3, r2
 8004f92:	b21b      	sxth	r3, r3
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	825a      	strh	r2, [r3, #18]
  
  phost->Control.setup.b.wIndex.w = 0;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	2100      	movs	r1, #0
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f001 febb 	bl	8006d26 <USBH_CtlReq>
 8004fb0:	4603      	mov	r3, r0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <USBH_HID_SetReport>:
USBH_StatusTypeDef USBH_HID_SetReport (USBH_HandleTypeDef *phost,
                                    uint8_t reportType,
                                    uint8_t reportId,
                                    uint8_t* reportBuff,
                                    uint8_t reportLen)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	607b      	str	r3, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	72fb      	strb	r3, [r7, #11]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	72bb      	strb	r3, [r7, #10]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2221      	movs	r2, #33	; 0x21
 8004fd0:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_REPORT;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2209      	movs	r2, #9
 8004fd6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (reportType << 8 ) | reportId;
 8004fd8:	7afb      	ldrb	r3, [r7, #11]
 8004fda:	021b      	lsls	r3, r3, #8
 8004fdc:	b21a      	sxth	r2, r3
 8004fde:	7abb      	ldrb	r3, [r7, #10]
 8004fe0:	b21b      	sxth	r3, r3
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	b21b      	sxth	r3, r3
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	825a      	strh	r2, [r3, #18]
  
  phost->Control.setup.b.wIndex.w = 0;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8004ff2:	7e3b      	ldrb	r3, [r7, #24]
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, reportBuff , reportLen );
 8004ffa:	7e3b      	ldrb	r3, [r7, #24]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	461a      	mov	r2, r3
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f001 fe8f 	bl	8006d26 <USBH_CtlReq>
 8005008:	4603      	mov	r3, r0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport (USBH_HandleTypeDef *phost,
                                    uint8_t reportType,
                                    uint8_t reportId,
                                    uint8_t* reportBuff,
                                    uint8_t reportLen)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b084      	sub	sp, #16
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	607b      	str	r3, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	72fb      	strb	r3, [r7, #11]
 8005020:	4613      	mov	r3, r2
 8005022:	72bb      	strb	r3, [r7, #10]
  
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE |\
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	22a1      	movs	r2, #161	; 0xa1
 8005028:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2201      	movs	r2, #1
 800502e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (reportType << 8 ) | reportId;
 8005030:	7afb      	ldrb	r3, [r7, #11]
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	b21a      	sxth	r2, r3
 8005036:	7abb      	ldrb	r3, [r7, #10]
 8005038:	b21b      	sxth	r3, r3
 800503a:	4313      	orrs	r3, r2
 800503c:	b21b      	sxth	r3, r3
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	825a      	strh	r2, [r3, #18]
  
  phost->Control.setup.b.wIndex.w = 0;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800504a:	7e3b      	ldrb	r3, [r7, #24]
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, reportBuff , reportLen );
 8005052:	7e3b      	ldrb	r3, [r7, #24]
 8005054:	b29b      	uxth	r3, r3
 8005056:	461a      	mov	r2, r3
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f001 fe63 	bl	8006d26 <USBH_CtlReq>
 8005060:	4603      	mov	r3, r0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                            uint8_t protocol)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	460b      	mov	r3, r1
 8005074:	70fb      	strb	r3, [r7, #3]
  
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2221      	movs	r2, #33	; 0x21
 800507a:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	220b      	movs	r2, #11
 8005080:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = protocol != 0 ? 0 : 1;
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	2b00      	cmp	r3, #0
 8005086:	bf0c      	ite	eq
 8005088:	2301      	moveq	r3, #1
 800508a:	2300      	movne	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	b29a      	uxth	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );
 80050a0:	2200      	movs	r2, #0
 80050a2:	2100      	movs	r1, #0
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f001 fe3e 	bl	8006d26 <USBH_CtlReq>
 80050aa:	4603      	mov	r3, r0
  
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc (HID_DescTypeDef *desc, uint8_t *buf)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  
  desc->bLength                  = *(uint8_t  *) (buf + 0);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781a      	ldrb	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	701a      	strb	r2, [r3, #0]
  desc->bDescriptorType          = *(uint8_t  *) (buf + 1);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	785a      	ldrb	r2, [r3, #1]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	705a      	strb	r2, [r3, #1]
  desc->bcdHID                   =  LE16  (buf + 2);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	3302      	adds	r3, #2
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	3303      	adds	r3, #3
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	021b      	lsls	r3, r3, #8
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	4413      	add	r3, r2
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	805a      	strh	r2, [r3, #2]
  desc->bCountryCode             = *(uint8_t  *) (buf + 4);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	791a      	ldrb	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	711a      	strb	r2, [r3, #4]
  desc->bNumDescriptors          = *(uint8_t  *) (buf + 5);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	795a      	ldrb	r2, [r3, #5]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	715a      	strb	r2, [r3, #5]
  desc->bReportDescriptorType    = *(uint8_t  *) (buf + 6);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	799a      	ldrb	r2, [r3, #6]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	719a      	strb	r2, [r3, #6]
  desc->wItemLength              =  LE16  (buf + 7);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	3307      	adds	r3, #7
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	b29a      	uxth	r2, r3
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	3308      	adds	r3, #8
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	021b      	lsls	r3, r3, #8
 8005114:	b29b      	uxth	r3, r3
 8005116:	4413      	add	r3, r2
 8005118:	b29a      	uxth	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	811a      	strh	r2, [r3, #8]
} 
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 8005132:	23ff      	movs	r3, #255	; 0xff
 8005134:	73fb      	strb	r3, [r7, #15]
  
  if(phost->gState == HOST_CLASS)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b0a      	cmp	r3, #10
 800513e:	d131      	bne.n	80051a4 <USBH_HID_GetDeviceType+0x7a>
  {
    
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol \
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005146:	4619      	mov	r1, r3
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	231a      	movs	r3, #26
 800514c:	fb03 f301 	mul.w	r3, r3, r1
 8005150:	4413      	add	r3, r2
 8005152:	f203 3343 	addw	r3, r3, #835	; 0x343
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d102      	bne.n	8005162 <USBH_HID_GetDeviceType+0x38>
      == HID_KEYBRD_BOOT_CODE)
    {
      type = HID_KEYBOARD;  
 800515c:	2302      	movs	r3, #2
 800515e:	73fb      	strb	r3, [r7, #15]
 8005160:	e020      	b.n	80051a4 <USBH_HID_GetDeviceType+0x7a>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol \
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005168:	4619      	mov	r1, r3
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	231a      	movs	r3, #26
 800516e:	fb03 f301 	mul.w	r3, r3, r1
 8005172:	4413      	add	r3, r2
 8005174:	f203 3343 	addw	r3, r3, #835	; 0x343
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d102      	bne.n	8005184 <USBH_HID_GetDeviceType+0x5a>
      == HID_MOUSE_BOOT_CODE)		  
    {
      type=  HID_MOUSE;  
 800517e:	2301      	movs	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
 8005182:	e00f      	b.n	80051a4 <USBH_HID_GetDeviceType+0x7a>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol \
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800518a:	4619      	mov	r1, r3
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	231a      	movs	r3, #26
 8005190:	fb03 f301 	mul.w	r3, r3, r1
 8005194:	4413      	add	r3, r2
 8005196:	f203 3343 	addw	r3, r3, #835	; 0x343
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <USBH_HID_GetDeviceType+0x7a>
	  == HID_DS3_BOOT_CODE)
	{
	  type=  HID_DS3;
 80051a0:	2303      	movs	r3, #3
 80051a2:	73fb      	strb	r3, [r7, #15]
	}
  }
  return type;
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <fifo_init>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void fifo_init(FIFO_TypeDef * f, uint8_t * buf, uint16_t size)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	4613      	mov	r3, r2
 80051be:	80fb      	strh	r3, [r7, #6]
     f->head = 0;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	809a      	strh	r2, [r3, #4]
     f->tail = 0;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	80da      	strh	r2, [r3, #6]
     f->lock = 0;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	729a      	strb	r2, [r3, #10]
     f->size = size;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	88fa      	ldrh	r2, [r7, #6]
 80051d6:	811a      	strh	r2, [r3, #8]
     f->buf = buf;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	601a      	str	r2, [r3, #0]
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <fifo_read>:
  * @param  buf: read buffer 
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t  fifo_read(FIFO_TypeDef * f, void * buf, uint16_t  nbytes)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b087      	sub	sp, #28
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	4613      	mov	r3, r2
 80051f6:	80fb      	strh	r3, [r7, #6]
  uint16_t  i;
  uint8_t * p;
  p = (uint8_t*) buf;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	613b      	str	r3, [r7, #16]
  
  if(f->lock == 0)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	7a9b      	ldrb	r3, [r3, #10]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d131      	bne.n	8005268 <fifo_read+0x7e>
  {
    f->lock = 1;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	729a      	strb	r2, [r3, #10]
    for(i=0; i < nbytes; i++)
 800520a:	2300      	movs	r3, #0
 800520c:	82fb      	strh	r3, [r7, #22]
 800520e:	e027      	b.n	8005260 <fifo_read+0x76>
    {
      if( f->tail != f->head )
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	88da      	ldrh	r2, [r3, #6]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	889b      	ldrh	r3, [r3, #4]
 8005218:	429a      	cmp	r2, r3
 800521a:	d019      	beq.n	8005250 <fifo_read+0x66>
      { 
        *p++ = f->buf[f->tail];  
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	613a      	str	r2, [r7, #16]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	6812      	ldr	r2, [r2, #0]
 8005226:	68f9      	ldr	r1, [r7, #12]
 8005228:	88c9      	ldrh	r1, [r1, #6]
 800522a:	440a      	add	r2, r1
 800522c:	7812      	ldrb	r2, [r2, #0]
 800522e:	701a      	strb	r2, [r3, #0]
        f->tail++;  
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	88db      	ldrh	r3, [r3, #6]
 8005234:	3301      	adds	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	80da      	strh	r2, [r3, #6]
        if( f->tail == f->size )
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	88da      	ldrh	r2, [r3, #6]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	891b      	ldrh	r3, [r3, #8]
 8005244:	429a      	cmp	r2, r3
 8005246:	d108      	bne.n	800525a <fifo_read+0x70>
        {  
          f->tail = 0;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	80da      	strh	r2, [r3, #6]
 800524e:	e004      	b.n	800525a <fifo_read+0x70>
        }
      } else 
      {
        f->lock = 0;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	729a      	strb	r2, [r3, #10]
        return i; 
 8005256:	8afb      	ldrh	r3, [r7, #22]
 8005258:	e00a      	b.n	8005270 <fifo_read+0x86>
    for(i=0; i < nbytes; i++)
 800525a:	8afb      	ldrh	r3, [r7, #22]
 800525c:	3301      	adds	r3, #1
 800525e:	82fb      	strh	r3, [r7, #22]
 8005260:	8afa      	ldrh	r2, [r7, #22]
 8005262:	88fb      	ldrh	r3, [r7, #6]
 8005264:	429a      	cmp	r2, r3
 8005266:	d3d3      	bcc.n	8005210 <fifo_read+0x26>
      }
    }
  }
  f->lock = 0;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	729a      	strb	r2, [r3, #10]
  return nbytes;
 800526e:	88fb      	ldrh	r3, [r7, #6]
}
 8005270:	4618      	mov	r0, r3
 8005272:	371c      	adds	r7, #28
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <fifo_write>:
  * @param  buf: read buffer 
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t  fifo_write(FIFO_TypeDef * f, const void * buf, uint16_t  nbytes)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	4613      	mov	r3, r2
 8005288:	80fb      	strh	r3, [r7, #6]
  uint16_t  i;
  const uint8_t * p;
  p = (const uint8_t*) buf;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	613b      	str	r3, [r7, #16]
  if(f->lock == 0)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	7a9b      	ldrb	r3, [r3, #10]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d13c      	bne.n	8005310 <fifo_write+0x94>
  {
    f->lock = 1;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	729a      	strb	r2, [r3, #10]
    for(i=0; i < nbytes; i++)
 800529c:	2300      	movs	r3, #0
 800529e:	82fb      	strh	r3, [r7, #22]
 80052a0:	e032      	b.n	8005308 <fifo_write+0x8c>
    {
      if( (f->head + 1 == f->tail) ||
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	889b      	ldrh	r3, [r3, #4]
 80052a6:	3301      	adds	r3, #1
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	88d2      	ldrh	r2, [r2, #6]
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00a      	beq.n	80052c6 <fifo_write+0x4a>
         ( (f->head + 1 == f->size) && (f->tail == 0)) )
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	889b      	ldrh	r3, [r3, #4]
 80052b4:	3301      	adds	r3, #1
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	8912      	ldrh	r2, [r2, #8]
      if( (f->head + 1 == f->tail) ||
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d108      	bne.n	80052d0 <fifo_write+0x54>
         ( (f->head + 1 == f->size) && (f->tail == 0)) )
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	88db      	ldrh	r3, [r3, #6]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d104      	bne.n	80052d0 <fifo_write+0x54>
      {
        f->lock = 0;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	729a      	strb	r2, [r3, #10]
        return i;
 80052cc:	8afb      	ldrh	r3, [r7, #22]
 80052ce:	e023      	b.n	8005318 <fifo_write+0x9c>
      } 
      else 
      {
        f->buf[f->head] = *p++;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	8892      	ldrh	r2, [r2, #4]
 80052d8:	441a      	add	r2, r3
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1c59      	adds	r1, r3, #1
 80052de:	6139      	str	r1, [r7, #16]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	7013      	strb	r3, [r2, #0]
        f->head++;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	889b      	ldrh	r3, [r3, #4]
 80052e8:	3301      	adds	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	809a      	strh	r2, [r3, #4]
        if( f->head == f->size )
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	889a      	ldrh	r2, [r3, #4]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	891b      	ldrh	r3, [r3, #8]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d102      	bne.n	8005302 <fifo_write+0x86>
        {
          f->head = 0;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	809a      	strh	r2, [r3, #4]
    for(i=0; i < nbytes; i++)
 8005302:	8afb      	ldrh	r3, [r7, #22]
 8005304:	3301      	adds	r3, #1
 8005306:	82fb      	strh	r3, [r7, #22]
 8005308:	8afa      	ldrh	r2, [r7, #22]
 800530a:	88fb      	ldrh	r3, [r7, #6]
 800530c:	429a      	cmp	r2, r3
 800530e:	d3c8      	bcc.n	80052a2 <fifo_write+0x26>
        }
      }
    }
  }
  f->lock = 0;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	729a      	strb	r2, [r3, #10]
  return nbytes;
 8005316:	88fb      	ldrh	r3, [r7, #6]
}
 8005318:	4618      	mov	r0, r3
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <USBH_HID_EventCallback>:
* @brief  The function is a callback about HID Data events
*  @param  phost: Selected device
* @retval None
*/
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08e      	sub	sp, #56	; 0x38
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	HID_TypeTypeDef type = HID_UNKNOWN;
 800532c:	23ff      	movs	r3, #255	; 0xff
 800532e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	HID_KEYBD_Info_TypeDef* kb_state = NULL;
 8005332:	2300      	movs	r3, #0
 8005334:	62fb      	str	r3, [r7, #44]	; 0x2c
	HID_DS3_Info_TypeDef* ds3_state = NULL;
 8005336:	2300      	movs	r3, #0
 8005338:	62bb      	str	r3, [r7, #40]	; 0x28

	type = USBH_HID_GetDeviceType(phost);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff fef5 	bl	800512a <USBH_HID_GetDeviceType>
 8005340:	4603      	mov	r3, r0
 8005342:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	memset(&n64_data,0,4);
 8005346:	2204      	movs	r2, #4
 8005348:	2100      	movs	r1, #0
 800534a:	4850      	ldr	r0, [pc, #320]	; (800548c <USBH_HID_EventCallback+0x168>)
 800534c:	f002 feda 	bl	8008104 <memset>

	switch(type)
 8005350:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005354:	2b02      	cmp	r3, #2
 8005356:	d003      	beq.n	8005360 <USBH_HID_EventCallback+0x3c>
 8005358:	2b03      	cmp	r3, #3
 800535a:	f000 8099 	beq.w	8005490 <USBH_HID_EventCallback+0x16c>
			n64_data.x_axis = reverse((uint8_t)LSX);
			n64_data.y_axis = reverse((uint8_t)LSY);
			// end of analog code
			break;
		default:
			break;
 800535e:	e27a      	b.n	8005856 <USBH_HID_EventCallback+0x532>
			kb_state = USBH_HID_GetKeybdInfo(phost);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fb57 	bl	8005a14 <USBH_HID_GetKeybdInfo>
 8005366:	62f8      	str	r0, [r7, #44]	; 0x2c
			for(int index = 0;index < 6;index++)
 8005368:	2300      	movs	r3, #0
 800536a:	637b      	str	r3, [r7, #52]	; 0x34
 800536c:	e089      	b.n	8005482 <USBH_HID_EventCallback+0x15e>
				if(kb_state->keys[index] == KEY_A)
 800536e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005372:	4413      	add	r3, r2
 8005374:	3309      	adds	r3, #9
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b04      	cmp	r3, #4
 800537a:	d105      	bne.n	8005388 <USBH_HID_EventCallback+0x64>
					n64_data.a = 1;
 800537c:	4a43      	ldr	r2, [pc, #268]	; (800548c <USBH_HID_EventCallback+0x168>)
 800537e:	7813      	ldrb	r3, [r2, #0]
 8005380:	f043 0301 	orr.w	r3, r3, #1
 8005384:	7013      	strb	r3, [r2, #0]
					continue;
 8005386:	e079      	b.n	800547c <USBH_HID_EventCallback+0x158>
				if(kb_state->keys[index] == KEY_S)
 8005388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800538a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538c:	4413      	add	r3, r2
 800538e:	3309      	adds	r3, #9
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b16      	cmp	r3, #22
 8005394:	d105      	bne.n	80053a2 <USBH_HID_EventCallback+0x7e>
					n64_data.b = 1;
 8005396:	4a3d      	ldr	r2, [pc, #244]	; (800548c <USBH_HID_EventCallback+0x168>)
 8005398:	7813      	ldrb	r3, [r2, #0]
 800539a:	f043 0302 	orr.w	r3, r3, #2
 800539e:	7013      	strb	r3, [r2, #0]
					continue;
 80053a0:	e06c      	b.n	800547c <USBH_HID_EventCallback+0x158>
				if(kb_state->keys[index] == KEY_D)
 80053a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a6:	4413      	add	r3, r2
 80053a8:	3309      	adds	r3, #9
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b07      	cmp	r3, #7
 80053ae:	d105      	bne.n	80053bc <USBH_HID_EventCallback+0x98>
					n64_data.z = 1;
 80053b0:	4a36      	ldr	r2, [pc, #216]	; (800548c <USBH_HID_EventCallback+0x168>)
 80053b2:	7813      	ldrb	r3, [r2, #0]
 80053b4:	f043 0304 	orr.w	r3, r3, #4
 80053b8:	7013      	strb	r3, [r2, #0]
					continue;
 80053ba:	e05f      	b.n	800547c <USBH_HID_EventCallback+0x158>
				if(kb_state->keys[index] == KEY_F)
 80053bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c0:	4413      	add	r3, r2
 80053c2:	3309      	adds	r3, #9
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b09      	cmp	r3, #9
 80053c8:	d105      	bne.n	80053d6 <USBH_HID_EventCallback+0xb2>
					n64_data.r = 1;
 80053ca:	4a30      	ldr	r2, [pc, #192]	; (800548c <USBH_HID_EventCallback+0x168>)
 80053cc:	7853      	ldrb	r3, [r2, #1]
 80053ce:	f043 0308 	orr.w	r3, r3, #8
 80053d2:	7053      	strb	r3, [r2, #1]
					continue;
 80053d4:	e052      	b.n	800547c <USBH_HID_EventCallback+0x158>
				if(kb_state->keys[index] == KEY_W)
 80053d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053da:	4413      	add	r3, r2
 80053dc:	3309      	adds	r3, #9
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b1a      	cmp	r3, #26
 80053e2:	d105      	bne.n	80053f0 <USBH_HID_EventCallback+0xcc>
					n64_data.c_up = 1;
 80053e4:	4a29      	ldr	r2, [pc, #164]	; (800548c <USBH_HID_EventCallback+0x168>)
 80053e6:	7853      	ldrb	r3, [r2, #1]
 80053e8:	f043 0310 	orr.w	r3, r3, #16
 80053ec:	7053      	strb	r3, [r2, #1]
					continue;
 80053ee:	e045      	b.n	800547c <USBH_HID_EventCallback+0x158>
				if(kb_state->keys[index] == KEY_1_EXCLAMATION_MARK)
 80053f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f4:	4413      	add	r3, r2
 80053f6:	3309      	adds	r3, #9
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b1e      	cmp	r3, #30
 80053fc:	d105      	bne.n	800540a <USBH_HID_EventCallback+0xe6>
					n64_data.l = 1;
 80053fe:	4a23      	ldr	r2, [pc, #140]	; (800548c <USBH_HID_EventCallback+0x168>)
 8005400:	7853      	ldrb	r3, [r2, #1]
 8005402:	f043 0304 	orr.w	r3, r3, #4
 8005406:	7053      	strb	r3, [r2, #1]
					continue;
 8005408:	e038      	b.n	800547c <USBH_HID_EventCallback+0x158>
				if(kb_state->keys[index] == KEY_ENTER)
 800540a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800540c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540e:	4413      	add	r3, r2
 8005410:	3309      	adds	r3, #9
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b28      	cmp	r3, #40	; 0x28
 8005416:	d105      	bne.n	8005424 <USBH_HID_EventCallback+0x100>
					n64_data.start = 1;
 8005418:	4a1c      	ldr	r2, [pc, #112]	; (800548c <USBH_HID_EventCallback+0x168>)
 800541a:	7813      	ldrb	r3, [r2, #0]
 800541c:	f043 0308 	orr.w	r3, r3, #8
 8005420:	7013      	strb	r3, [r2, #0]
					continue;
 8005422:	e02b      	b.n	800547c <USBH_HID_EventCallback+0x158>
				if(kb_state->keys[index] == KEY_UPARROW)
 8005424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005428:	4413      	add	r3, r2
 800542a:	3309      	adds	r3, #9
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b52      	cmp	r3, #82	; 0x52
 8005430:	d103      	bne.n	800543a <USBH_HID_EventCallback+0x116>
					n64_data.y_axis = 0x26;
 8005432:	4b16      	ldr	r3, [pc, #88]	; (800548c <USBH_HID_EventCallback+0x168>)
 8005434:	2226      	movs	r2, #38	; 0x26
 8005436:	70da      	strb	r2, [r3, #3]
					continue;
 8005438:	e020      	b.n	800547c <USBH_HID_EventCallback+0x158>
				if(kb_state->keys[index] == KEY_DOWNARROW)
 800543a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800543c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543e:	4413      	add	r3, r2
 8005440:	3309      	adds	r3, #9
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b51      	cmp	r3, #81	; 0x51
 8005446:	d103      	bne.n	8005450 <USBH_HID_EventCallback+0x12c>
					n64_data.y_axis = 0x39;
 8005448:	4b10      	ldr	r3, [pc, #64]	; (800548c <USBH_HID_EventCallback+0x168>)
 800544a:	2239      	movs	r2, #57	; 0x39
 800544c:	70da      	strb	r2, [r3, #3]
					continue;
 800544e:	e015      	b.n	800547c <USBH_HID_EventCallback+0x158>
				if(kb_state->keys[index] == KEY_LEFTARROW)
 8005450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005454:	4413      	add	r3, r2
 8005456:	3309      	adds	r3, #9
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b50      	cmp	r3, #80	; 0x50
 800545c:	d103      	bne.n	8005466 <USBH_HID_EventCallback+0x142>
					n64_data.x_axis = 0x39;
 800545e:	4b0b      	ldr	r3, [pc, #44]	; (800548c <USBH_HID_EventCallback+0x168>)
 8005460:	2239      	movs	r2, #57	; 0x39
 8005462:	709a      	strb	r2, [r3, #2]
					continue;
 8005464:	e00a      	b.n	800547c <USBH_HID_EventCallback+0x158>
				if(kb_state->keys[index] == KEY_RIGHTARROW)
 8005466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546a:	4413      	add	r3, r2
 800546c:	3309      	adds	r3, #9
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b4f      	cmp	r3, #79	; 0x4f
 8005472:	d103      	bne.n	800547c <USBH_HID_EventCallback+0x158>
					n64_data.x_axis = 0x26;
 8005474:	4b05      	ldr	r3, [pc, #20]	; (800548c <USBH_HID_EventCallback+0x168>)
 8005476:	2226      	movs	r2, #38	; 0x26
 8005478:	709a      	strb	r2, [r3, #2]
					continue;
 800547a:	bf00      	nop
			for(int index = 0;index < 6;index++)
 800547c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547e:	3301      	adds	r3, #1
 8005480:	637b      	str	r3, [r7, #52]	; 0x34
 8005482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005484:	2b05      	cmp	r3, #5
 8005486:	f77f af72 	ble.w	800536e <USBH_HID_EventCallback+0x4a>
			break;
 800548a:	e1e4      	b.n	8005856 <USBH_HID_EventCallback+0x532>
 800548c:	20000144 	.word	0x20000144
			ds3_state = USBH_HID_GetDS3Info(phost);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fa5b 	bl	800594c <USBH_HID_GetDS3Info>
 8005496:	62b8      	str	r0, [r7, #40]	; 0x28
			if(ds3_state->x)
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	78db      	ldrb	r3, [r3, #3]
 800549c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d004      	beq.n	80054b0 <USBH_HID_EventCallback+0x18c>
				n64_data.a = 1;
 80054a6:	4ac4      	ldr	r2, [pc, #784]	; (80057b8 <USBH_HID_EventCallback+0x494>)
 80054a8:	7813      	ldrb	r3, [r2, #0]
 80054aa:	f043 0301 	orr.w	r3, r3, #1
 80054ae:	7013      	strb	r3, [r2, #0]
			if(ds3_state->triangle)
 80054b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b2:	78db      	ldrb	r3, [r3, #3]
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d004      	beq.n	80054c8 <USBH_HID_EventCallback+0x1a4>
				n64_data.c_up = 1;
 80054be:	4abe      	ldr	r2, [pc, #760]	; (80057b8 <USBH_HID_EventCallback+0x494>)
 80054c0:	7853      	ldrb	r3, [r2, #1]
 80054c2:	f043 0310 	orr.w	r3, r3, #16
 80054c6:	7053      	strb	r3, [r2, #1]
			if(ds3_state->square)
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	78db      	ldrb	r3, [r3, #3]
 80054cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d004      	beq.n	80054e0 <USBH_HID_EventCallback+0x1bc>
				n64_data.b = 1;
 80054d6:	4ab8      	ldr	r2, [pc, #736]	; (80057b8 <USBH_HID_EventCallback+0x494>)
 80054d8:	7813      	ldrb	r3, [r2, #0]
 80054da:	f043 0302 	orr.w	r3, r3, #2
 80054de:	7013      	strb	r3, [r2, #0]
			if(ds3_state->circle)
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	78db      	ldrb	r3, [r3, #3]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d004      	beq.n	80054f8 <USBH_HID_EventCallback+0x1d4>
				n64_data.c_right = 1;
 80054ee:	4ab2      	ldr	r2, [pc, #712]	; (80057b8 <USBH_HID_EventCallback+0x494>)
 80054f0:	7853      	ldrb	r3, [r2, #1]
 80054f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f6:	7053      	strb	r3, [r2, #1]
			if(ds3_state->L1)
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	78db      	ldrb	r3, [r3, #3]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <USBH_HID_EventCallback+0x1ec>
				n64_data.l = 1;
 8005506:	4aac      	ldr	r2, [pc, #688]	; (80057b8 <USBH_HID_EventCallback+0x494>)
 8005508:	7853      	ldrb	r3, [r2, #1]
 800550a:	f043 0304 	orr.w	r3, r3, #4
 800550e:	7053      	strb	r3, [r2, #1]
			if(ds3_state->R1)
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	78db      	ldrb	r3, [r3, #3]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d004      	beq.n	8005528 <USBH_HID_EventCallback+0x204>
				n64_data.r = 1;
 800551e:	4aa6      	ldr	r2, [pc, #664]	; (80057b8 <USBH_HID_EventCallback+0x494>)
 8005520:	7853      	ldrb	r3, [r2, #1]
 8005522:	f043 0308 	orr.w	r3, r3, #8
 8005526:	7053      	strb	r3, [r2, #1]
			if(ds3_state->R2)
 8005528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552a:	78db      	ldrb	r3, [r3, #3]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d004      	beq.n	8005540 <USBH_HID_EventCallback+0x21c>
				n64_data.z = 1;
 8005536:	4aa0      	ldr	r2, [pc, #640]	; (80057b8 <USBH_HID_EventCallback+0x494>)
 8005538:	7813      	ldrb	r3, [r2, #0]
 800553a:	f043 0304 	orr.w	r3, r3, #4
 800553e:	7013      	strb	r3, [r2, #0]
			if(ds3_state->L2)
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	78db      	ldrb	r3, [r3, #3]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d004      	beq.n	8005558 <USBH_HID_EventCallback+0x234>
				n64_data.c_left = 1;
 800554e:	4a9a      	ldr	r2, [pc, #616]	; (80057b8 <USBH_HID_EventCallback+0x494>)
 8005550:	7853      	ldrb	r3, [r2, #1]
 8005552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005556:	7053      	strb	r3, [r2, #1]
			if(ds3_state->start)
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	789b      	ldrb	r3, [r3, #2]
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d004      	beq.n	8005570 <USBH_HID_EventCallback+0x24c>
				n64_data.start = 1;
 8005566:	4a94      	ldr	r2, [pc, #592]	; (80057b8 <USBH_HID_EventCallback+0x494>)
 8005568:	7813      	ldrb	r3, [r2, #0]
 800556a:	f043 0308 	orr.w	r3, r3, #8
 800556e:	7013      	strb	r3, [r2, #0]
			if(ds3_state->select)
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005572:	789b      	ldrb	r3, [r3, #2]
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d004      	beq.n	8005588 <USBH_HID_EventCallback+0x264>
				n64_data.c_down = 1;
 800557e:	4a8e      	ldr	r2, [pc, #568]	; (80057b8 <USBH_HID_EventCallback+0x494>)
 8005580:	7853      	ldrb	r3, [r2, #1]
 8005582:	f043 0320 	orr.w	r3, r3, #32
 8005586:	7053      	strb	r3, [r2, #1]
			if(ds3_state->d_up)
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	789b      	ldrb	r3, [r3, #2]
 800558c:	f003 0310 	and.w	r3, r3, #16
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d004      	beq.n	80055a0 <USBH_HID_EventCallback+0x27c>
				n64_data.up = 1;
 8005596:	4a88      	ldr	r2, [pc, #544]	; (80057b8 <USBH_HID_EventCallback+0x494>)
 8005598:	7813      	ldrb	r3, [r2, #0]
 800559a:	f043 0310 	orr.w	r3, r3, #16
 800559e:	7013      	strb	r3, [r2, #0]
			if(ds3_state->d_down)
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	789b      	ldrb	r3, [r3, #2]
 80055a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d004      	beq.n	80055b8 <USBH_HID_EventCallback+0x294>
				n64_data.down = 1;
 80055ae:	4a82      	ldr	r2, [pc, #520]	; (80057b8 <USBH_HID_EventCallback+0x494>)
 80055b0:	7813      	ldrb	r3, [r2, #0]
 80055b2:	f043 0320 	orr.w	r3, r3, #32
 80055b6:	7013      	strb	r3, [r2, #0]
			if(ds3_state->d_left)
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	789b      	ldrb	r3, [r3, #2]
 80055bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d004      	beq.n	80055d0 <USBH_HID_EventCallback+0x2ac>
				n64_data.left = 1;
 80055c6:	4a7c      	ldr	r2, [pc, #496]	; (80057b8 <USBH_HID_EventCallback+0x494>)
 80055c8:	7813      	ldrb	r3, [r2, #0]
 80055ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ce:	7013      	strb	r3, [r2, #0]
			if(ds3_state->d_right)
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	789b      	ldrb	r3, [r3, #2]
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d004      	beq.n	80055e8 <USBH_HID_EventCallback+0x2c4>
				n64_data.right = 1;
 80055de:	4a76      	ldr	r2, [pc, #472]	; (80057b8 <USBH_HID_EventCallback+0x494>)
 80055e0:	7813      	ldrb	r3, [r2, #0]
 80055e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e6:	7013      	strb	r3, [r2, #0]
			const int sensitivity = 100;
 80055e8:	2364      	movs	r3, #100	; 0x64
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
			const int dead_zone = 20;
 80055ec:	2314      	movs	r3, #20
 80055ee:	623b      	str	r3, [r7, #32]
			const float DS3_MAX = 128;
 80055f0:	f04f 4386 	mov.w	r3, #1124073472	; 0x43000000
 80055f4:	61fb      	str	r3, [r7, #28]
			const float N64_MAX = (sensitivity > 0) ? 127*(sensitivity/100.0f) : 0;
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	dd0d      	ble.n	8005618 <USBH_HID_EventCallback+0x2f4>
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005606:	eddf 6a6d 	vldr	s13, [pc, #436]	; 80057bc <USBH_HID_EventCallback+0x498>
 800560a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800560e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80057c0 <USBH_HID_EventCallback+0x49c>
 8005612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005616:	e001      	b.n	800561c <USBH_HID_EventCallback+0x2f8>
 8005618:	eddf 7a6a 	vldr	s15, [pc, #424]	; 80057c4 <USBH_HID_EventCallback+0x4a0>
 800561c:	edc7 7a06 	vstr	s15, [r7, #24]
			float deadzoneValue = (dead_zone/100.0f) * DS3_MAX;
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800562a:	eddf 6a64 	vldr	s13, [pc, #400]	; 80057bc <USBH_HID_EventCallback+0x498>
 800562e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005632:	edd7 7a07 	vldr	s15, [r7, #28]
 8005636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563a:	edc7 7a05 	vstr	s15, [r7, #20]
			float deadzoneRelation = DS3_MAX / (DS3_MAX - deadzoneValue);
 800563e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005642:	edd7 7a05 	vldr	s15, [r7, #20]
 8005646:	ee37 7a67 	vsub.f32	s14, s14, s15
 800564a:	edd7 6a07 	vldr	s13, [r7, #28]
 800564e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005652:	edc7 7a04 	vstr	s15, [r7, #16]
			int8_t LSX = 0, LSY = 0; // -128 to +127...
 8005656:	2300      	movs	r3, #0
 8005658:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800565c:	2300      	movs	r3, #0
 800565e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			float unscaled_result = 0;
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	60fb      	str	r3, [r7, #12]
			int8_t stick_lx = ds3_state->LAnalogX - 128;
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	799b      	ldrb	r3, [r3, #6]
 800566c:	3b80      	subs	r3, #128	; 0x80
 800566e:	b2db      	uxtb	r3, r3
 8005670:	72fb      	strb	r3, [r7, #11]
			int8_t stick_ly = ds3_state->LAnalogY - 128;
 8005672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005674:	79db      	ldrb	r3, [r3, #7]
 8005676:	3b80      	subs	r3, #128	; 0x80
 8005678:	b2db      	uxtb	r3, r3
 800567a:	72bb      	strb	r3, [r7, #10]
			if(stick_lx >= deadzoneValue) // positive = right
 800567c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005680:	ee07 3a90 	vmov	s15, r3
 8005684:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005688:	edd7 7a05 	vldr	s15, [r7, #20]
 800568c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005694:	db21      	blt.n	80056da <USBH_HID_EventCallback+0x3b6>
				unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 8005696:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80056a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80056ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b2:	edc7 7a03 	vstr	s15, [r7, #12]
				LSX = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 80056b6:	edd7 6a06 	vldr	s13, [r7, #24]
 80056ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80056be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80056c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056ce:	edc7 7a00 	vstr	s15, [r7]
 80056d2:	783b      	ldrb	r3, [r7, #0]
 80056d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056d8:	e039      	b.n	800574e <USBH_HID_EventCallback+0x42a>
			else if(stick_lx <= (-deadzoneValue)) // negative = left
 80056da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80056ea:	eef1 7a67 	vneg.f32	s15, s15
 80056ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f6:	d82a      	bhi.n	800574e <USBH_HID_EventCallback+0x42a>
				stick_lx = -stick_lx; // compute as positive, then negate at the end
 80056f8:	7afb      	ldrb	r3, [r7, #11]
 80056fa:	425b      	negs	r3, r3
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	72fb      	strb	r3, [r7, #11]
				unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 8005700:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005704:	ee07 3a90 	vmov	s15, r3
 8005708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800570c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005710:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005714:	edd7 7a04 	vldr	s15, [r7, #16]
 8005718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571c:	edc7 7a03 	vstr	s15, [r7, #12]
				LSX = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 8005720:	edd7 6a06 	vldr	s13, [r7, #24]
 8005724:	edd7 7a07 	vldr	s15, [r7, #28]
 8005728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800572c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005734:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005738:	edc7 7a00 	vstr	s15, [r7]
 800573c:	783b      	ldrb	r3, [r7, #0]
 800573e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				LSX = -LSX;
 8005742:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005746:	425b      	negs	r3, r3
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			if(stick_ly >= deadzoneValue) // DS3 positive = down
 800574e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800575a:	edd7 7a05 	vldr	s15, [r7, #20]
 800575e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005766:	db2f      	blt.n	80057c8 <USBH_HID_EventCallback+0x4a4>
				unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 8005768:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005774:	edd7 7a05 	vldr	s15, [r7, #20]
 8005778:	ee37 7a67 	vsub.f32	s14, s14, s15
 800577c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005784:	edc7 7a03 	vstr	s15, [r7, #12]
				LSY = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 8005788:	edd7 6a06 	vldr	s13, [r7, #24]
 800578c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005794:	edd7 7a03 	vldr	s15, [r7, #12]
 8005798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057a0:	edc7 7a00 	vstr	s15, [r7]
 80057a4:	783b      	ldrb	r3, [r7, #0]
 80057a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				LSY = -LSY; // for n64 down is negative
 80057aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80057ae:	425b      	negs	r3, r3
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80057b6:	e03b      	b.n	8005830 <USBH_HID_EventCallback+0x50c>
 80057b8:	20000144 	.word	0x20000144
 80057bc:	42c80000 	.word	0x42c80000
 80057c0:	42fe0000 	.word	0x42fe0000
 80057c4:	00000000 	.word	0x00000000
			else if(stick_ly <= (-deadzoneValue)) // DS3 negative = down
 80057c8:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80057cc:	ee07 3a90 	vmov	s15, r3
 80057d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80057d8:	eef1 7a67 	vneg.f32	s15, s15
 80057dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e4:	d824      	bhi.n	8005830 <USBH_HID_EventCallback+0x50c>
				stick_ly = -stick_ly; // compute as positive, then negate at the end
 80057e6:	7abb      	ldrb	r3, [r7, #10]
 80057e8:	425b      	negs	r3, r3
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	72bb      	strb	r3, [r7, #10]
				unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 80057ee:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80057fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005802:	edd7 7a04 	vldr	s15, [r7, #16]
 8005806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580a:	edc7 7a03 	vstr	s15, [r7, #12]
				LSY = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 800580e:	edd7 6a06 	vldr	s13, [r7, #24]
 8005812:	edd7 7a07 	vldr	s15, [r7, #28]
 8005816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581a:	edd7 7a03 	vldr	s15, [r7, #12]
 800581e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005822:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005826:	edc7 7a00 	vstr	s15, [r7]
 800582a:	783b      	ldrb	r3, [r7, #0]
 800582c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			n64_data.x_axis = reverse((uint8_t)LSX);
 8005830:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005834:	4618      	mov	r0, r3
 8005836:	f001 fd32 	bl	800729e <reverse>
 800583a:	4603      	mov	r3, r0
 800583c:	461a      	mov	r2, r3
 800583e:	4b08      	ldr	r3, [pc, #32]	; (8005860 <USBH_HID_EventCallback+0x53c>)
 8005840:	709a      	strb	r2, [r3, #2]
			n64_data.y_axis = reverse((uint8_t)LSY);
 8005842:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005846:	4618      	mov	r0, r3
 8005848:	f001 fd29 	bl	800729e <reverse>
 800584c:	4603      	mov	r3, r0
 800584e:	461a      	mov	r2, r3
 8005850:	4b03      	ldr	r3, [pc, #12]	; (8005860 <USBH_HID_EventCallback+0x53c>)
 8005852:	70da      	strb	r2, [r3, #3]
			break;
 8005854:	bf00      	nop
	}
}
 8005856:	bf00      	nop
 8005858:	3738      	adds	r7, #56	; 0x38
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20000144 	.word	0x20000144

08005864 <USBH_HID_DS3Init>:

	USBH_HID_SetReport(phost,0x02,0x01,abuffer,sizeof(abuffer)); // set the player LED?
}

USBH_StatusTypeDef USBH_HID_DS3Init(USBH_HandleTypeDef *phost)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
	  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	60fb      	str	r3, [r7, #12]

	  memset(&ds3_data,0,sizeof(HID_DS3_Info_TypeDef));
 8005876:	2230      	movs	r2, #48	; 0x30
 8005878:	2100      	movs	r1, #0
 800587a:	4811      	ldr	r0, [pc, #68]	; (80058c0 <USBH_HID_DS3Init+0x5c>)
 800587c:	f002 fc42 	bl	8008104 <memset>
	  memset(ds3_report_data,0,sizeof(uint32_t)*12);
 8005880:	2230      	movs	r2, #48	; 0x30
 8005882:	2100      	movs	r1, #0
 8005884:	480f      	ldr	r0, [pc, #60]	; (80058c4 <USBH_HID_DS3Init+0x60>)
 8005886:	f002 fc3d 	bl	8008104 <memset>

	  if(HID_Handle->length > (sizeof(ds3_report_data)/sizeof(uint32_t)))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8b1b      	ldrh	r3, [r3, #24]
 800588e:	2b0c      	cmp	r3, #12
 8005890:	d902      	bls.n	8005898 <USBH_HID_DS3Init+0x34>
	  {
	    HID_Handle->length = (sizeof(ds3_report_data)/sizeof(uint32_t));
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	220c      	movs	r2, #12
 8005896:	831a      	strh	r2, [r3, #24]
	  }
	  HID_Handle->pData = (uint8_t*)ds3_report_data;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4a0a      	ldr	r2, [pc, #40]	; (80058c4 <USBH_HID_DS3Init+0x60>)
 800589c:	615a      	str	r2, [r3, #20]
	  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(ds3_report_data));
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f103 0008 	add.w	r0, r3, #8
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80058aa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80058ae:	4619      	mov	r1, r3
 80058b0:	f7ff fc7f 	bl	80051b2 <fifo_init>

	  //DS3_Led(phost, 1);

	  return USBH_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	200000f0 	.word	0x200000f0
 80058c4:	200000c0 	.word	0x200000c0

080058c8 <USBH_HID_DS3Decode>:


static USBH_StatusTypeDef USBH_HID_DS3Decode(USBH_HandleTypeDef *phost)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  int x;

  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	60bb      	str	r3, [r7, #8]
  if(HID_Handle->length == 0)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	8b1b      	ldrh	r3, [r3, #24]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <USBH_HID_DS3Decode+0x1e>
  {
    return USBH_FAIL;
 80058e2:	2302      	movs	r3, #2
 80058e4:	e027      	b.n	8005936 <USBH_HID_DS3Decode+0x6e>
  }
  /*Fill report */
  if(fifo_read(&HID_Handle->fifo, &ds3_report_data, HID_Handle->length) ==  HID_Handle->length)
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f103 0008 	add.w	r0, r3, #8
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	8b1b      	ldrh	r3, [r3, #24]
 80058f0:	461a      	mov	r2, r3
 80058f2:	4913      	ldr	r1, [pc, #76]	; (8005940 <USBH_HID_DS3Decode+0x78>)
 80058f4:	f7ff fc79 	bl	80051ea <fifo_read>
 80058f8:	4603      	mov	r3, r0
 80058fa:	461a      	mov	r2, r3
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	8b1b      	ldrh	r3, [r3, #24]
 8005900:	429a      	cmp	r2, r3
 8005902:	d117      	bne.n	8005934 <USBH_HID_DS3Decode+0x6c>
  {
	//TODO: MAKE THIS WORK

	for(x=0; x < sizeof(HID_DS3_Info_TypeDef); x++)
 8005904:	2300      	movs	r3, #0
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	e00f      	b.n	800592a <USBH_HID_DS3Decode+0x62>
	{
		ds3_data.data[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ds3_byte, x);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	4619      	mov	r1, r3
 8005910:	480c      	ldr	r0, [pc, #48]	; (8005944 <USBH_HID_DS3Decode+0x7c>)
 8005912:	f000 f95b 	bl	8005bcc <HID_ReadItem>
 8005916:	4603      	mov	r3, r0
 8005918:	b2d9      	uxtb	r1, r3
 800591a:	4a0b      	ldr	r2, [pc, #44]	; (8005948 <USBH_HID_DS3Decode+0x80>)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	460a      	mov	r2, r1
 8005922:	701a      	strb	r2, [r3, #0]
	for(x=0; x < sizeof(HID_DS3_Info_TypeDef); x++)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3301      	adds	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b2f      	cmp	r3, #47	; 0x2f
 800592e:	d9ec      	bls.n	800590a <USBH_HID_DS3Decode+0x42>
	}

    return USBH_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	e000      	b.n	8005936 <USBH_HID_DS3Decode+0x6e>
  }
  return   USBH_FAIL;
 8005934:	2302      	movs	r3, #2
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	200000c0 	.word	0x200000c0
 8005944:	08009374 	.word	0x08009374
 8005948:	200000f0 	.word	0x200000f0

0800594c <USBH_HID_GetDS3Info>:

HID_DS3_Info_TypeDef *USBH_HID_GetDS3Info(USBH_HandleTypeDef *phost)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 if(USBH_HID_DS3Decode(phost) == USBH_OK)
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7ff ffb7 	bl	80058c8 <USBH_HID_DS3Decode>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <USBH_HID_GetDS3Info+0x18>
 {
  return &ds3_data;
 8005960:	4b03      	ldr	r3, [pc, #12]	; (8005970 <USBH_HID_GetDS3Info+0x24>)
 8005962:	e000      	b.n	8005966 <USBH_HID_GetDS3Info+0x1a>
 }
 else
 {
  return NULL;
 8005964:	2300      	movs	r3, #0
 }
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	200000f0 	.word	0x200000f0

08005974 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;  
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	60bb      	str	r3, [r7, #8]
    
  keybd_info.lctrl=keybd_info.lshift= 0;
 8005986:	4b21      	ldr	r3, [pc, #132]	; (8005a0c <USBH_HID_KeybdInit+0x98>)
 8005988:	2200      	movs	r2, #0
 800598a:	709a      	strb	r2, [r3, #2]
 800598c:	4b1f      	ldr	r3, [pc, #124]	; (8005a0c <USBH_HID_KeybdInit+0x98>)
 800598e:	789a      	ldrb	r2, [r3, #2]
 8005990:	4b1e      	ldr	r3, [pc, #120]	; (8005a0c <USBH_HID_KeybdInit+0x98>)
 8005992:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt=keybd_info.lgui= 0;
 8005994:	4b1d      	ldr	r3, [pc, #116]	; (8005a0c <USBH_HID_KeybdInit+0x98>)
 8005996:	2200      	movs	r2, #0
 8005998:	711a      	strb	r2, [r3, #4]
 800599a:	4b1c      	ldr	r3, [pc, #112]	; (8005a0c <USBH_HID_KeybdInit+0x98>)
 800599c:	791a      	ldrb	r2, [r3, #4]
 800599e:	4b1b      	ldr	r3, [pc, #108]	; (8005a0c <USBH_HID_KeybdInit+0x98>)
 80059a0:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl=keybd_info.rshift= 0;
 80059a2:	4b1a      	ldr	r3, [pc, #104]	; (8005a0c <USBH_HID_KeybdInit+0x98>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	719a      	strb	r2, [r3, #6]
 80059a8:	4b18      	ldr	r3, [pc, #96]	; (8005a0c <USBH_HID_KeybdInit+0x98>)
 80059aa:	799a      	ldrb	r2, [r3, #6]
 80059ac:	4b17      	ldr	r3, [pc, #92]	; (8005a0c <USBH_HID_KeybdInit+0x98>)
 80059ae:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt=keybd_info.rgui=0;
 80059b0:	4b16      	ldr	r3, [pc, #88]	; (8005a0c <USBH_HID_KeybdInit+0x98>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	721a      	strb	r2, [r3, #8]
 80059b6:	4b15      	ldr	r3, [pc, #84]	; (8005a0c <USBH_HID_KeybdInit+0x98>)
 80059b8:	7a1a      	ldrb	r2, [r3, #8]
 80059ba:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <USBH_HID_KeybdInit+0x98>)
 80059bc:	71da      	strb	r2, [r3, #7]
  
  
  for(x=0; x< (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	e007      	b.n	80059d4 <USBH_HID_KeybdInit+0x60>
  {
    keybd_report_data[x]=0;
 80059c4:	4a12      	ldr	r2, [pc, #72]	; (8005a10 <USBH_HID_KeybdInit+0x9c>)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2100      	movs	r1, #0
 80059ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(x=0; x< (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3301      	adds	r3, #1
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d9f4      	bls.n	80059c4 <USBH_HID_KeybdInit+0x50>
  }
  
  if(HID_Handle->length > (sizeof(keybd_report_data)/sizeof(uint32_t)))
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	8b1b      	ldrh	r3, [r3, #24]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d902      	bls.n	80059e8 <USBH_HID_KeybdInit+0x74>
  {
    HID_Handle->length = (sizeof(keybd_report_data)/sizeof(uint32_t));
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2202      	movs	r2, #2
 80059e6:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t*)keybd_report_data;
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4a09      	ldr	r2, [pc, #36]	; (8005a10 <USBH_HID_KeybdInit+0x9c>)
 80059ec:	615a      	str	r2, [r3, #20]
  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f103 0008 	add.w	r0, r3, #8
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80059fa:	2250      	movs	r2, #80	; 0x50
 80059fc:	4619      	mov	r1, r3
 80059fe:	f7ff fbd8 	bl	80051b2 <fifo_init>
  
  return USBH_OK;    
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20000128 	.word	0x20000128
 8005a10:	20000120 	.word	0x20000120

08005a14 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  if(USBH_HID_KeybdDecode(phost) == USBH_OK)
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f80d 	bl	8005a3c <USBH_HID_KeybdDecode>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <USBH_HID_GetKeybdInfo+0x18>
 {
  return &keybd_info;
 8005a28:	4b03      	ldr	r3, [pc, #12]	; (8005a38 <USBH_HID_GetKeybdInfo+0x24>)
 8005a2a:	e000      	b.n	8005a2e <USBH_HID_GetKeybdInfo+0x1a>
 }
 else
 {
  return NULL; 
 8005a2c:	2300      	movs	r3, #0
 }  
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20000128 	.word	0x20000128

08005a3c <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 8005a3c:	b590      	push	{r4, r7, lr}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint8_t x;
  
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	60bb      	str	r3, [r7, #8]
  if(HID_Handle->length == 0)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	8b1b      	ldrh	r3, [r3, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 8005a56:	2302      	movs	r3, #2
 8005a58:	e065      	b.n	8005b26 <USBH_HID_KeybdDecode+0xea>
  }
  /*Fill report */
  if(fifo_read(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f103 0008 	add.w	r0, r3, #8
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	8b1b      	ldrh	r3, [r3, #24]
 8005a64:	461a      	mov	r2, r3
 8005a66:	4932      	ldr	r1, [pc, #200]	; (8005b30 <USBH_HID_KeybdDecode+0xf4>)
 8005a68:	f7ff fbbf 	bl	80051ea <fifo_read>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	8b1b      	ldrh	r3, [r3, #24]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d155      	bne.n	8005b24 <USBH_HID_KeybdDecode+0xe8>
  {
    
    keybd_info.lctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0);
 8005a78:	2100      	movs	r1, #0
 8005a7a:	482e      	ldr	r0, [pc, #184]	; (8005b34 <USBH_HID_KeybdDecode+0xf8>)
 8005a7c:	f000 f8a6 	bl	8005bcc <HID_ReadItem>
 8005a80:	4603      	mov	r3, r0
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	4b2c      	ldr	r3, [pc, #176]	; (8005b38 <USBH_HID_KeybdDecode+0xfc>)
 8005a86:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0);
 8005a88:	2100      	movs	r1, #0
 8005a8a:	482c      	ldr	r0, [pc, #176]	; (8005b3c <USBH_HID_KeybdDecode+0x100>)
 8005a8c:	f000 f89e 	bl	8005bcc <HID_ReadItem>
 8005a90:	4603      	mov	r3, r0
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	4b28      	ldr	r3, [pc, #160]	; (8005b38 <USBH_HID_KeybdDecode+0xfc>)
 8005a96:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0);
 8005a98:	2100      	movs	r1, #0
 8005a9a:	4829      	ldr	r0, [pc, #164]	; (8005b40 <USBH_HID_KeybdDecode+0x104>)
 8005a9c:	f000 f896 	bl	8005bcc <HID_ReadItem>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <USBH_HID_KeybdDecode+0xfc>)
 8005aa6:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0);
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4826      	ldr	r0, [pc, #152]	; (8005b44 <USBH_HID_KeybdDecode+0x108>)
 8005aac:	f000 f88e 	bl	8005bcc <HID_ReadItem>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	4b20      	ldr	r3, [pc, #128]	; (8005b38 <USBH_HID_KeybdDecode+0xfc>)
 8005ab6:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0);
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4823      	ldr	r0, [pc, #140]	; (8005b48 <USBH_HID_KeybdDecode+0x10c>)
 8005abc:	f000 f886 	bl	8005bcc <HID_ReadItem>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	4b1c      	ldr	r3, [pc, #112]	; (8005b38 <USBH_HID_KeybdDecode+0xfc>)
 8005ac6:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0);
 8005ac8:	2100      	movs	r1, #0
 8005aca:	4820      	ldr	r0, [pc, #128]	; (8005b4c <USBH_HID_KeybdDecode+0x110>)
 8005acc:	f000 f87e 	bl	8005bcc <HID_ReadItem>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	4b18      	ldr	r3, [pc, #96]	; (8005b38 <USBH_HID_KeybdDecode+0xfc>)
 8005ad6:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0);
 8005ad8:	2100      	movs	r1, #0
 8005ada:	481d      	ldr	r0, [pc, #116]	; (8005b50 <USBH_HID_KeybdDecode+0x114>)
 8005adc:	f000 f876 	bl	8005bcc <HID_ReadItem>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <USBH_HID_KeybdDecode+0xfc>)
 8005ae6:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0);
 8005ae8:	2100      	movs	r1, #0
 8005aea:	481a      	ldr	r0, [pc, #104]	; (8005b54 <USBH_HID_KeybdDecode+0x118>)
 8005aec:	f000 f86e 	bl	8005bcc <HID_ReadItem>
 8005af0:	4603      	mov	r3, r0
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	4b10      	ldr	r3, [pc, #64]	; (8005b38 <USBH_HID_KeybdDecode+0xfc>)
 8005af6:	721a      	strb	r2, [r3, #8]
    
    for(x=0; x < sizeof(keybd_info.keys); x++)
 8005af8:	2300      	movs	r3, #0
 8005afa:	73fb      	strb	r3, [r7, #15]
 8005afc:	e00d      	b.n	8005b1a <USBH_HID_KeybdDecode+0xde>
    {    
      keybd_info.keys[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 8005afe:	7bfc      	ldrb	r4, [r7, #15]
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	4619      	mov	r1, r3
 8005b04:	4814      	ldr	r0, [pc, #80]	; (8005b58 <USBH_HID_KeybdDecode+0x11c>)
 8005b06:	f000 f861 	bl	8005bcc <HID_ReadItem>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <USBH_HID_KeybdDecode+0xfc>)
 8005b10:	4423      	add	r3, r4
 8005b12:	725a      	strb	r2, [r3, #9]
    for(x=0; x < sizeof(keybd_info.keys); x++)
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	3301      	adds	r3, #1
 8005b18:	73fb      	strb	r3, [r7, #15]
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
 8005b1c:	2b05      	cmp	r3, #5
 8005b1e:	d9ee      	bls.n	8005afe <USBH_HID_KeybdDecode+0xc2>
    }
    
    return USBH_OK; 
 8005b20:	2300      	movs	r3, #0
 8005b22:	e000      	b.n	8005b26 <USBH_HID_KeybdDecode+0xea>
  }
  return   USBH_FAIL;  
 8005b24:	2302      	movs	r3, #2
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd90      	pop	{r4, r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000120 	.word	0x20000120
 8005b34:	08009394 	.word	0x08009394
 8005b38:	20000128 	.word	0x20000128
 8005b3c:	080093b4 	.word	0x080093b4
 8005b40:	080093d4 	.word	0x080093d4
 8005b44:	080093f4 	.word	0x080093f4
 8005b48:	08009414 	.word	0x08009414
 8005b4c:	08009434 	.word	0x08009434
 8005b50:	08009454 	.word	0x08009454
 8005b54:	08009474 	.word	0x08009474
 8005b58:	08009494 	.word	0x08009494

08005b5c <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	60fb      	str	r3, [r7, #12]

  mouse_info.x=0;
 8005b6e:	4b15      	ldr	r3, [pc, #84]	; (8005bc4 <USBH_HID_MouseInit+0x68>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	701a      	strb	r2, [r3, #0]
  mouse_info.y=0;
 8005b74:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <USBH_HID_MouseInit+0x68>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0]=0;
 8005b7a:	4b12      	ldr	r3, [pc, #72]	; (8005bc4 <USBH_HID_MouseInit+0x68>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1]=0;
 8005b80:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <USBH_HID_MouseInit+0x68>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2]=0;
 8005b86:	4b0f      	ldr	r3, [pc, #60]	; (8005bc4 <USBH_HID_MouseInit+0x68>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	711a      	strb	r2, [r3, #4]
  
  mouse_report_data[0]=0;
 8005b8c:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <USBH_HID_MouseInit+0x6c>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
  
  if(HID_Handle->length > sizeof(mouse_report_data))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8b1b      	ldrh	r3, [r3, #24]
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d902      	bls.n	8005ba0 <USBH_HID_MouseInit+0x44>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2204      	movs	r2, #4
 8005b9e:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)mouse_report_data;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4a09      	ldr	r2, [pc, #36]	; (8005bc8 <USBH_HID_MouseInit+0x6c>)
 8005ba4:	615a      	str	r2, [r3, #20]
  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f103 0008 	add.w	r0, r3, #8
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005bb2:	2228      	movs	r2, #40	; 0x28
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	f7ff fafc 	bl	80051b2 <fifo_init>

  return USBH_OK;  
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20000138 	.word	0x20000138
 8005bc8:	20000140 	.word	0x20000140

08005bcc <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b089      	sub	sp, #36	; 0x24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t val=0;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	61fb      	str	r3, [r7, #28]
  uint32_t x=0;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data=ri->data;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	617b      	str	r3, [r7, #20]
  uint8_t shift=ri->shift;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	7a1b      	ldrb	r3, [r3, #8]
 8005bea:	74fb      	strb	r3, [r7, #19]
  
  /* get the logical value of the item */
  
  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	7a5b      	ldrb	r3, [r3, #9]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01a      	beq.n	8005c2a <HID_ReadItem+0x5e>
  { 
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	7a5b      	ldrb	r3, [r3, #9]
 8005bf8:	78fa      	ldrb	r2, [r7, #3]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d301      	bcc.n	8005c02 <HID_ReadItem+0x36>
    {
      return(0);
 8005bfe:	2300      	movs	r3, #0
 8005c00:	e07a      	b.n	8005cf8 <HID_ReadItem+0x12c>
    }
    
    /* calculate bit offset */
    bofs = ndx*ri->size;
 8005c02:	78fb      	ldrb	r3, [r7, #3]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6852      	ldr	r2, [r2, #4]
 8005c08:	fb02 f303 	mul.w	r3, r2, r3
 8005c0c:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 8005c0e:	7cfb      	ldrb	r3, [r7, #19]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */    
    data+=bofs/8;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	08db      	lsrs	r3, r3, #3
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	617b      	str	r3, [r7, #20]
    shift=(uint8_t)(bofs%8);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for(x=0; x < ((ri->size & 0x7) ? (ri->size/8)+1 : (ri->size/8)); x++)
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	e00a      	b.n	8005c46 <HID_ReadItem+0x7a>
  {
    val=(uint32_t)(*data << (x*8));
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	461a      	mov	r2, r3
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3e:	61fb      	str	r3, [r7, #28]
  for(x=0; x < ((ri->size & 0x7) ? (ri->size/8)+1 : (ri->size/8)); x++)
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	3301      	adds	r3, #1
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d004      	beq.n	8005c5c <HID_ReadItem+0x90>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	08db      	lsrs	r3, r3, #3
 8005c58:	3301      	adds	r3, #1
 8005c5a:	e002      	b.n	8005c62 <HID_ReadItem+0x96>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	08db      	lsrs	r3, r3, #3
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d8e3      	bhi.n	8005c30 <HID_ReadItem+0x64>
  }    
  val=(val >> shift) & ((1<<ri->size)-1);
 8005c68:	7cfb      	ldrb	r3, [r7, #19]
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6852      	ldr	r2, [r2, #4]
 8005c74:	2101      	movs	r1, #1
 8005c76:	fa01 f202 	lsl.w	r2, r1, r2
 8005c7a:	3a01      	subs	r2, #1
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	61fb      	str	r3, [r7, #28]
  
  if (val < ri->logical_min || val > ri->logical_max)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d804      	bhi.n	8005c94 <HID_ReadItem+0xc8>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691a      	ldr	r2, [r3, #16]
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d201      	bcs.n	8005c98 <HID_ReadItem+0xcc>
  {
    return(0);
 8005c94:	2300      	movs	r3, #0
 8005c96:	e02f      	b.n	8005cf8 <HID_ReadItem+0x12c>
  }
  
  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1<<(ri->size-1))))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	7a9b      	ldrb	r3, [r3, #10]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d020      	beq.n	8005ce2 <HID_ReadItem+0x116>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cac:	461a      	mov	r2, r3
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d015      	beq.n	8005ce2 <HID_ReadItem+0x116>
  {
    /* yes, so sign extend value to 32 bits. */
    int vs=(int)((-1 & ~((1<<(ri->size))-1)) | val);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc0:	425b      	negs	r3, r3
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60bb      	str	r3, [r7, #8]
    
    if(ri->resolution == 1)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <HID_ReadItem+0x10a>
    {
      return((uint32_t)vs);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	e010      	b.n	8005cf8 <HID_ReadItem+0x12c>
    }
    return((uint32_t)(vs*ri->resolution));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	fb02 f303 	mul.w	r3, r2, r3
 8005ce0:	e00a      	b.n	8005cf8 <HID_ReadItem+0x12c>
  }
  else
  {
    if(ri->resolution == 1)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <HID_ReadItem+0x122>
    {
      return(val);
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	e004      	b.n	8005cf8 <HID_ReadItem+0x12c>
    }
    return(val*ri->resolution);    
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	fb02 f303 	mul.w	r3, r2, r3
  }  
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3724      	adds	r7, #36	; 0x24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t ), uint8_t id)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 8005d18:	4814      	ldr	r0, [pc, #80]	; (8005d6c <USBH_Init+0x68>)
 8005d1a:	f002 faa7 	bl	800826c <iprintf>
 8005d1e:	4814      	ldr	r0, [pc, #80]	; (8005d70 <USBH_Init+0x6c>)
 8005d20:	f002 faa4 	bl	800826c <iprintf>
 8005d24:	200a      	movs	r0, #10
 8005d26:	f002 fab9 	bl	800829c <putchar>
    return USBH_FAIL; 
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e019      	b.n	8005d62 <USBH_Init+0x5e>
  }
  
  /* Set DRiver ID */
  phost->id = id;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	79fa      	ldrb	r2, [r7, #7]
 8005d32:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
  
  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  
  /* Restore default states and prepare EP0 */ 
  DeInitStateMachine(phost);
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f814 	bl	8005d74 <DeInitStateMachine>
  
  /* Assign User process */
  if(pUsrFunc != NULL)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <USBH_Init+0x56>
  {
    phost->pUser = pUsrFunc;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#endif  
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
#endif  
  
  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f001 ff54 	bl	8007c08 <USBH_LL_Init>
  return USBH_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	080090c0 	.word	0x080090c0
 8005d70:	080090c8 	.word	0x080090c8

08005d74 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005d80:	e008      	b.n	8005d94 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	32e0      	adds	r2, #224	; 0xe0
 8005d88:	2100      	movs	r1, #0
 8005d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3301      	adds	r3, #1
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b0e      	cmp	r3, #14
 8005d98:	d9f3      	bls.n	8005d82 <DeInitStateMachine+0xe>
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	e009      	b.n	8005db4 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0;
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005daa:	2200      	movs	r2, #0
 8005dac:	701a      	strb	r2, [r3, #0]
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3301      	adds	r3, #1
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dba:	d3f1      	bcc.n	8005da0 <DeInitStateMachine+0x2c>
  }
  
  phost->gState = HOST_IDLE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0;  
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  
  phost->Control.state = CTRL_SETUP;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2240      	movs	r2, #64	; 0x40
 8005de0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	765a      	strb	r2, [r3, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  
  return USBH_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
	...

08005e08 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	73fb      	strb	r3, [r7, #15]
  
  if(pclass != 0)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01f      	beq.n	8005e5c <USBH_RegisterClass+0x54>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d80e      	bhi.n	8005e44 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e2c:	1c59      	adds	r1, r3, #1
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	33dc      	adds	r3, #220	; 0xdc
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	73fb      	strb	r3, [r7, #15]
 8005e42:	e016      	b.n	8005e72 <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 8005e44:	480d      	ldr	r0, [pc, #52]	; (8005e7c <USBH_RegisterClass+0x74>)
 8005e46:	f002 fa11 	bl	800826c <iprintf>
 8005e4a:	480d      	ldr	r0, [pc, #52]	; (8005e80 <USBH_RegisterClass+0x78>)
 8005e4c:	f002 fa0e 	bl	800826c <iprintf>
 8005e50:	200a      	movs	r0, #10
 8005e52:	f002 fa23 	bl	800829c <putchar>
      status = USBH_FAIL; 
 8005e56:	2302      	movs	r3, #2
 8005e58:	73fb      	strb	r3, [r7, #15]
 8005e5a:	e00a      	b.n	8005e72 <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 8005e5c:	4807      	ldr	r0, [pc, #28]	; (8005e7c <USBH_RegisterClass+0x74>)
 8005e5e:	f002 fa05 	bl	800826c <iprintf>
 8005e62:	4808      	ldr	r0, [pc, #32]	; (8005e84 <USBH_RegisterClass+0x7c>)
 8005e64:	f002 fa02 	bl	800826c <iprintf>
 8005e68:	200a      	movs	r0, #10
 8005e6a:	f002 fa17 	bl	800829c <putchar>
    status = USBH_FAIL; 
 8005e6e:	2302      	movs	r3, #2
 8005e70:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	080090c0 	.word	0x080090c0
 8005e80:	080090dc 	.word	0x080090dc
 8005e84:	080090f8 	.word	0x080090f8

08005e88 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	73fb      	strb	r3, [r7, #15]
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8005e9e:	78fa      	ldrb	r2, [r7, #3]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d23c      	bcs.n	8005f1e <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	78fa      	ldrb	r2, [r7, #3]
 8005ea8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    USBH_UsrLog ("Switching to Interface (#%d)", interface);
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4823      	ldr	r0, [pc, #140]	; (8005f40 <USBH_SelectInterface+0xb8>)
 8005eb2:	f002 f9db 	bl	800826c <iprintf>
 8005eb6:	200a      	movs	r0, #10
 8005eb8:	f002 f9f0 	bl	800829c <putchar>
    USBH_UsrLog ("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass );
 8005ebc:	78fb      	ldrb	r3, [r7, #3]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	211a      	movs	r1, #26
 8005ec2:	fb01 f303 	mul.w	r3, r1, r3
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f203 3341 	addw	r3, r3, #833	; 0x341
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	481c      	ldr	r0, [pc, #112]	; (8005f44 <USBH_SelectInterface+0xbc>)
 8005ed2:	f002 f9cb 	bl	800826c <iprintf>
 8005ed6:	200a      	movs	r0, #10
 8005ed8:	f002 f9e0 	bl	800829c <putchar>
    USBH_UsrLog ("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass );
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	211a      	movs	r1, #26
 8005ee2:	fb01 f303 	mul.w	r3, r1, r3
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f203 3342 	addw	r3, r3, #834	; 0x342
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4815      	ldr	r0, [pc, #84]	; (8005f48 <USBH_SelectInterface+0xc0>)
 8005ef2:	f002 f9bb 	bl	800826c <iprintf>
 8005ef6:	200a      	movs	r0, #10
 8005ef8:	f002 f9d0 	bl	800829c <putchar>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	211a      	movs	r1, #26
 8005f02:	fb01 f303 	mul.w	r3, r1, r3
 8005f06:	4413      	add	r3, r2
 8005f08:	f203 3343 	addw	r3, r3, #835	; 0x343
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	480e      	ldr	r0, [pc, #56]	; (8005f4c <USBH_SelectInterface+0xc4>)
 8005f12:	f002 f9ab 	bl	800826c <iprintf>
 8005f16:	200a      	movs	r0, #10
 8005f18:	f002 f9c0 	bl	800829c <putchar>
 8005f1c:	e00a      	b.n	8005f34 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
 8005f1e:	480c      	ldr	r0, [pc, #48]	; (8005f50 <USBH_SelectInterface+0xc8>)
 8005f20:	f002 f9a4 	bl	800826c <iprintf>
 8005f24:	480b      	ldr	r0, [pc, #44]	; (8005f54 <USBH_SelectInterface+0xcc>)
 8005f26:	f002 f9a1 	bl	800826c <iprintf>
 8005f2a:	200a      	movs	r0, #10
 8005f2c:	f002 f9b6 	bl	800829c <putchar>
    status = USBH_FAIL; 
 8005f30:	2302      	movs	r3, #2
 8005f32:	73fb      	strb	r3, [r7, #15]
  }
  return status;  
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	08009110 	.word	0x08009110
 8005f44:	08009130 	.word	0x08009130
 8005f48:	08009140 	.word	0x08009140
 8005f4c:	08009150 	.word	0x08009150
 8005f50:	080090c0 	.word	0x080090c0
 8005f54:	08009160 	.word	0x08009160

08005f58 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	4608      	mov	r0, r1
 8005f62:	4611      	mov	r1, r2
 8005f64:	461a      	mov	r2, r3
 8005f66:	4603      	mov	r3, r0
 8005f68:	70fb      	strb	r3, [r7, #3]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	70bb      	strb	r3, [r7, #2]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  int8_t                        if_ix = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	75fb      	strb	r3, [r7, #23]
  
  pif = (USBH_InterfaceDescTypeDef *)0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;  
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f203 3332 	addw	r3, r3, #818	; 0x332
 8005f80:	60fb      	str	r3, [r7, #12]
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005f82:	e029      	b.n	8005fd8 <USBH_FindInterface+0x80>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005f84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f88:	221a      	movs	r2, #26
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
 8005f8e:	3308      	adds	r3, #8
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	3302      	adds	r3, #2
 8005f96:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	795b      	ldrb	r3, [r3, #5]
 8005f9c:	78fa      	ldrb	r2, [r7, #3]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d002      	beq.n	8005fa8 <USBH_FindInterface+0x50>
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	2bff      	cmp	r3, #255	; 0xff
 8005fa6:	d111      	bne.n	8005fcc <USBH_FindInterface+0x74>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8005fac:	78ba      	ldrb	r2, [r7, #2]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d002      	beq.n	8005fb8 <USBH_FindInterface+0x60>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8005fb2:	78bb      	ldrb	r3, [r7, #2]
 8005fb4:	2bff      	cmp	r3, #255	; 0xff
 8005fb6:	d109      	bne.n	8005fcc <USBH_FindInterface+0x74>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8005fbc:	787a      	ldrb	r2, [r7, #1]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d002      	beq.n	8005fc8 <USBH_FindInterface+0x70>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8005fc2:	787b      	ldrb	r3, [r7, #1]
 8005fc4:	2bff      	cmp	r3, #255	; 0xff
 8005fc6:	d101      	bne.n	8005fcc <USBH_FindInterface+0x74>
    {
      return  if_ix;
 8005fc8:	7dfb      	ldrb	r3, [r7, #23]
 8005fca:	e00a      	b.n	8005fe2 <USBH_FindInterface+0x8a>
    }
    if_ix++;
 8005fcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	ddd1      	ble.n	8005f84 <USBH_FindInterface+0x2c>
  }
  return 0xFF;
 8005fe0:	23ff      	movs	r3, #255	; 0xff
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f001 fe46 	bl	8007c88 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f001 ffd5 	bl	8007fae <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af04      	add	r7, sp, #16
 8006016:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006018:	2302      	movs	r3, #2
 800601a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0;
 800601c:	2300      	movs	r3, #0
 800601e:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->gState)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b0a      	cmp	r3, #10
 8006028:	f200 816b 	bhi.w	8006302 <USBH_Process+0x2f2>
 800602c:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <USBH_Process+0x24>)
 800602e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006032:	bf00      	nop
 8006034:	08006061 	.word	0x08006061
 8006038:	08006303 	.word	0x08006303
 800603c:	08006083 	.word	0x08006083
 8006040:	080062dd 	.word	0x080062dd
 8006044:	08006303 	.word	0x08006303
 8006048:	0800611d 	.word	0x0800611d
 800604c:	08006281 	.word	0x08006281
 8006050:	08006165 	.word	0x08006165
 8006054:	08006185 	.word	0x08006185
 8006058:	080061b1 	.word	0x080061b1
 800605c:	080062c5 	.word	0x080062c5
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 814c 	beq.w	8006306 <USBH_Process+0x2f6>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200); 
 8006074:	20c8      	movs	r0, #200	; 0xc8
 8006076:	f001 ffdb 	bl	8008030 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f001 fe8e 	bl	8007d9c <USBH_LL_ResetPort>
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif
    }
    break;
 8006080:	e141      	b.n	8006306 <USBH_Process+0x2f6>
  case HOST_DEV_WAIT_FOR_ATTACHMENT:
    break;    
    
  case HOST_DEV_ATTACHED :
    
    USBH_UsrLog("USB Device Attached");  
 8006082:	48aa      	ldr	r0, [pc, #680]	; (800632c <USBH_Process+0x31c>)
 8006084:	f002 f8f2 	bl	800826c <iprintf>
 8006088:	200a      	movs	r0, #10
 800608a:	f002 f907 	bl	800829c <putchar>
      
    /* Wait for 100 ms after Reset */
    USBH_Delay(100); 
 800608e:	2064      	movs	r0, #100	; 0x64
 8006090:	f001 ffce 	bl	8008030 <USBH_Delay>
          
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f001 fe5b 	bl	8007d50 <USBH_LL_GetSpeed>
 800609a:	4603      	mov	r3, r0
 800609c:	461a      	mov	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
    
    phost->gState = HOST_ENUMERATION;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2205      	movs	r2, #5
 80060a8:	701a      	strb	r2, [r3, #0]
    
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 80060aa:	2100      	movs	r1, #0
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f001 f898 	bl	80071e2 <USBH_AllocPipe>
 80060b2:	4603      	mov	r3, r0
 80060b4:	461a      	mov	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80060ba:	2180      	movs	r1, #128	; 0x80
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 f890 	bl	80071e2 <USBH_AllocPipe>
 80060c2:	4603      	mov	r3, r0
 80060c4:	461a      	mov	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	711a      	strb	r2, [r3, #4]
    
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	7919      	ldrb	r1, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size); 
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80060de:	b292      	uxth	r2, r2
 80060e0:	9202      	str	r2, [sp, #8]
 80060e2:	2200      	movs	r2, #0
 80060e4:	9201      	str	r2, [sp, #4]
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	4603      	mov	r3, r0
 80060ea:	2280      	movs	r2, #128	; 0x80
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 f849 	bl	8007184 <USBH_OpenPipe>
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	7959      	ldrb	r1, [r3, #5]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size);
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006106:	b292      	uxth	r2, r2
 8006108:	9202      	str	r2, [sp, #8]
 800610a:	2200      	movs	r2, #0
 800610c:	9201      	str	r2, [sp, #4]
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	4603      	mov	r3, r0
 8006112:	2200      	movs	r2, #0
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f001 f835 	bl	8007184 <USBH_OpenPipe>
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif    
    
    break;
 800611a:	e101      	b.n	8006320 <USBH_Process+0x310>
    
  case HOST_ENUMERATION:     
    /* Check for enumeration status */  
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f919 	bl	8006354 <USBH_HandleEnum>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	f040 80f0 	bne.w	800630a <USBH_Process+0x2fa>
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
 800612a:	4881      	ldr	r0, [pc, #516]	; (8006330 <USBH_Process+0x320>)
 800612c:	f002 f89e 	bl	800826c <iprintf>
 8006130:	200a      	movs	r0, #10
 8006132:	f002 f8b3 	bl	800829c <putchar>
      phost->device.current_interface = 0;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006144:	2b01      	cmp	r3, #1
 8006146:	d109      	bne.n	800615c <USBH_Process+0x14c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
 8006148:	487a      	ldr	r0, [pc, #488]	; (8006334 <USBH_Process+0x324>)
 800614a:	f002 f88f 	bl	800826c <iprintf>
 800614e:	200a      	movs	r0, #10
 8006150:	f002 f8a4 	bl	800829c <putchar>
        phost->gState  = HOST_SET_CONFIGURATION;        
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2208      	movs	r2, #8
 8006158:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT; 
      }
          
    }
    break;
 800615a:	e0d6      	b.n	800630a <USBH_Process+0x2fa>
        phost->gState  = HOST_INPUT; 
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2207      	movs	r2, #7
 8006160:	701a      	strb	r2, [r3, #0]
    break;
 8006162:	e0d2      	b.n	800630a <USBH_Process+0x2fa>
    
  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 80cf 	beq.w	800630e <USBH_Process+0x2fe>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006176:	2101      	movs	r1, #1
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2208      	movs	r2, #8
 8006180:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1)
        osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif         
      }
    }
    break;
 8006182:	e0c4      	b.n	800630e <USBH_Process+0x2fe>
    
  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800618a:	b29b      	uxth	r3, r3
 800618c:	4619      	mov	r1, r3
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fbc2 	bl	8006918 <USBH_SetCfg>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	f040 80bb 	bne.w	8006312 <USBH_Process+0x302>
    {
      phost->gState  = HOST_CHECK_CLASS;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2209      	movs	r2, #9
 80061a0:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
 80061a2:	4865      	ldr	r0, [pc, #404]	; (8006338 <USBH_Process+0x328>)
 80061a4:	f002 f862 	bl	800826c <iprintf>
 80061a8:	200a      	movs	r0, #10
 80061aa:	f002 f877 	bl	800829c <putchar>
      
    }      
    
    break;
 80061ae:	e0b0      	b.n	8006312 <USBH_Process+0x302>
    
  case HOST_CHECK_CLASS:
    
    if(phost->ClassNumber == 0)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <USBH_Process+0x1b8>
    {
      USBH_UsrLog ("No Class has been registered.");
 80061ba:	4860      	ldr	r0, [pc, #384]	; (800633c <USBH_Process+0x32c>)
 80061bc:	f002 f856 	bl	800826c <iprintf>
 80061c0:	200a      	movs	r0, #10
 80061c2:	f002 f86b 	bl	800829c <putchar>
    }
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif 
    break;    
 80061c6:	e0ab      	b.n	8006320 <USBH_Process+0x310>
      phost->pActiveClass = NULL;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 80061d0:	2300      	movs	r3, #0
 80061d2:	73fb      	strb	r3, [r7, #15]
 80061d4:	e015      	b.n	8006202 <USBH_Process+0x1f2>
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80061d6:	7bfa      	ldrb	r2, [r7, #15]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	32dc      	adds	r2, #220	; 0xdc
 80061dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e0:	791a      	ldrb	r2, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d107      	bne.n	80061fc <USBH_Process+0x1ec>
          phost->pActiveClass = phost->pClass[idx];
 80061ec:	7bfa      	ldrb	r2, [r7, #15]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	32dc      	adds	r2, #220	; 0xdc
 80061f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	3301      	adds	r3, #1
 8006200:	73fb      	strb	r3, [r7, #15]
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d9e6      	bls.n	80061d6 <USBH_Process+0x1c6>
      if(phost->pActiveClass != NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800620e:	2b00      	cmp	r3, #0
 8006210:	d02c      	beq.n	800626c <USBH_Process+0x25c>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4798      	blx	r3
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d114      	bne.n	800624e <USBH_Process+0x23e>
          phost->gState  = HOST_CLASS_REQUEST; 
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2206      	movs	r2, #6
 8006228:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4619      	mov	r1, r3
 8006234:	4842      	ldr	r0, [pc, #264]	; (8006340 <USBH_Process+0x330>)
 8006236:	f002 f819 	bl	800826c <iprintf>
 800623a:	200a      	movs	r0, #10
 800623c:	f002 f82e 	bl	800829c <putchar>
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006246:	2103      	movs	r1, #3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	4798      	blx	r3
    break;    
 800624c:	e068      	b.n	8006320 <USBH_Process+0x310>
          phost->gState  = HOST_ABORT_STATE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	220c      	movs	r2, #12
 8006252:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4619      	mov	r1, r3
 800625e:	4839      	ldr	r0, [pc, #228]	; (8006344 <USBH_Process+0x334>)
 8006260:	f002 f804 	bl	800826c <iprintf>
 8006264:	200a      	movs	r0, #10
 8006266:	f002 f819 	bl	800829c <putchar>
    break;    
 800626a:	e059      	b.n	8006320 <USBH_Process+0x310>
        phost->gState  = HOST_ABORT_STATE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	220c      	movs	r2, #12
 8006270:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
 8006272:	4835      	ldr	r0, [pc, #212]	; (8006348 <USBH_Process+0x338>)
 8006274:	f001 fffa 	bl	800826c <iprintf>
 8006278:	200a      	movs	r0, #10
 800627a:	f002 f80f 	bl	800829c <putchar>
    break;    
 800627e:	e04f      	b.n	8006320 <USBH_Process+0x310>
    
  case HOST_CLASS_REQUEST:  
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00f      	beq.n	80062aa <USBH_Process+0x29a>
    {
      status = phost->pActiveClass->Requests(phost);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	4798      	blx	r3
 8006296:	4603      	mov	r3, r0
 8006298:	73bb      	strb	r3, [r7, #14]
      
      if(status == USBH_OK)
 800629a:	7bbb      	ldrb	r3, [r7, #14]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d139      	bne.n	8006316 <USBH_Process+0x306>
      {
        phost->gState  = HOST_CLASS;        
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	220a      	movs	r2, #10
 80062a6:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    
    break;    
 80062a8:	e035      	b.n	8006316 <USBH_Process+0x306>
      phost->gState  = HOST_ABORT_STATE;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	220c      	movs	r2, #12
 80062ae:	701a      	strb	r2, [r3, #0]
      USBH_ErrLog ("Invalid Class Driver.");
 80062b0:	4826      	ldr	r0, [pc, #152]	; (800634c <USBH_Process+0x33c>)
 80062b2:	f001 ffdb 	bl	800826c <iprintf>
 80062b6:	4826      	ldr	r0, [pc, #152]	; (8006350 <USBH_Process+0x340>)
 80062b8:	f001 ffd8 	bl	800826c <iprintf>
 80062bc:	200a      	movs	r0, #10
 80062be:	f001 ffed 	bl	800829c <putchar>
    break;    
 80062c2:	e028      	b.n	8006316 <USBH_Process+0x306>
  case HOST_CLASS:   
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d025      	beq.n	800631a <USBH_Process+0x30a>
    { 
      phost->pActiveClass->BgndProcess(phost);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	4798      	blx	r3
    }
    break;       
 80062da:	e01e      	b.n	800631a <USBH_Process+0x30a>

  case HOST_DEV_DISCONNECTED :
    
    DeInitStateMachine(phost);  
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7ff fd49 	bl	8005d74 <DeInitStateMachine>
    
    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d018      	beq.n	800631e <USBH_Process+0x30e>
    {
      phost->pActiveClass->DeInit(phost); 
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }     
    break;
 8006300:	e00d      	b.n	800631e <USBH_Process+0x30e>
    
  case HOST_ABORT_STATE:
  default :
    break;
 8006302:	bf00      	nop
 8006304:	e00c      	b.n	8006320 <USBH_Process+0x310>
    break;
 8006306:	bf00      	nop
 8006308:	e00a      	b.n	8006320 <USBH_Process+0x310>
    break;
 800630a:	bf00      	nop
 800630c:	e008      	b.n	8006320 <USBH_Process+0x310>
    break;
 800630e:	bf00      	nop
 8006310:	e006      	b.n	8006320 <USBH_Process+0x310>
    break;
 8006312:	bf00      	nop
 8006314:	e004      	b.n	8006320 <USBH_Process+0x310>
    break;    
 8006316:	bf00      	nop
 8006318:	e002      	b.n	8006320 <USBH_Process+0x310>
    break;       
 800631a:	bf00      	nop
 800631c:	e000      	b.n	8006320 <USBH_Process+0x310>
    break;
 800631e:	bf00      	nop
  }
 return USBH_OK;  
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	08009180 	.word	0x08009180
 8006330:	08009194 	.word	0x08009194
 8006334:	080091a8 	.word	0x080091a8
 8006338:	080091d0 	.word	0x080091d0
 800633c:	080091ec 	.word	0x080091ec
 8006340:	0800920c 	.word	0x0800920c
 8006344:	08009220 	.word	0x08009220
 8006348:	08009240 	.word	0x08009240
 800634c:	080090c0 	.word	0x080090c0
 8006350:	08009268 	.word	0x08009268

08006354 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af04      	add	r7, sp, #16
 800635a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;  
 800635c:	2301      	movs	r3, #1
 800635e:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->EnumState)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	785b      	ldrb	r3, [r3, #1]
 8006364:	2b07      	cmp	r3, #7
 8006366:	f200 8148 	bhi.w	80065fa <USBH_HandleEnum+0x2a6>
 800636a:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <USBH_HandleEnum+0x1c>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	08006391 	.word	0x08006391
 8006374:	08006403 	.word	0x08006403
 8006378:	08006443 	.word	0x08006443
 800637c:	080064cd 	.word	0x080064cd
 8006380:	080064e5 	.word	0x080064e5
 8006384:	08006503 	.word	0x08006503
 8006388:	08006557 	.word	0x08006557
 800638c:	080065ab 	.word	0x080065ab
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 8006390:	2108      	movs	r1, #8
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f9f0 	bl	8006778 <USBH_Get_DevDesc>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	f040 812f 	bne.w	80065fe <USBH_HandleEnum+0x2aa>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	7919      	ldrb	r1, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80063c4:	b292      	uxth	r2, r2
 80063c6:	9202      	str	r2, [sp, #8]
 80063c8:	2200      	movs	r2, #0
 80063ca:	9201      	str	r2, [sp, #4]
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	4603      	mov	r3, r0
 80063d0:	2280      	movs	r2, #128	; 0x80
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fed6 	bl	8007184 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	7959      	ldrb	r1, [r3, #5]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);           
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80063ec:	b292      	uxth	r2, r2
 80063ee:	9202      	str	r2, [sp, #8]
 80063f0:	2200      	movs	r2, #0
 80063f2:	9201      	str	r2, [sp, #4]
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	4603      	mov	r3, r0
 80063f8:	2200      	movs	r2, #0
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fec2 	bl	8007184 <USBH_OpenPipe>
      
    }
    break;
 8006400:	e0fd      	b.n	80065fe <USBH_HandleEnum+0x2aa>
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8006402:	2112      	movs	r1, #18
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f9b7 	bl	8006778 <USBH_Get_DevDesc>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	f040 80f8 	bne.w	8006602 <USBH_HandleEnum+0x2ae>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 8006418:	4619      	mov	r1, r3
 800641a:	4883      	ldr	r0, [pc, #524]	; (8006628 <USBH_HandleEnum+0x2d4>)
 800641c:	f001 ff26 	bl	800826c <iprintf>
 8006420:	200a      	movs	r0, #10
 8006422:	f001 ff3b 	bl	800829c <putchar>
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800642c:	4619      	mov	r1, r3
 800642e:	487f      	ldr	r0, [pc, #508]	; (800662c <USBH_HandleEnum+0x2d8>)
 8006430:	f001 ff1c 	bl	800826c <iprintf>
 8006434:	200a      	movs	r0, #10
 8006436:	f001 ff31 	bl	800829c <putchar>
      
      phost->EnumState = ENUM_SET_ADDR;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2202      	movs	r2, #2
 800643e:	705a      	strb	r2, [r3, #1]
       
    }
    break;
 8006440:	e0df      	b.n	8006602 <USBH_HandleEnum+0x2ae>
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8006442:	2101      	movs	r1, #1
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fa43 	bl	80068d0 <USBH_SetAddress>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	f040 80da 	bne.w	8006606 <USBH_HandleEnum+0x2b2>
    {
      USBH_Delay(2);
 8006452:	2002      	movs	r0, #2
 8006454:	f001 fdec 	bl	8008030 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
      
      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 8006466:	4619      	mov	r1, r3
 8006468:	4871      	ldr	r0, [pc, #452]	; (8006630 <USBH_HandleEnum+0x2dc>)
 800646a:	f001 feff 	bl	800826c <iprintf>
 800646e:	200a      	movs	r0, #10
 8006470:	f001 ff14 	bl	800829c <putchar>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2203      	movs	r2, #3
 8006478:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	7919      	ldrb	r1, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800648e:	b292      	uxth	r2, r2
 8006490:	9202      	str	r2, [sp, #8]
 8006492:	2200      	movs	r2, #0
 8006494:	9201      	str	r2, [sp, #4]
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	4603      	mov	r3, r0
 800649a:	2280      	movs	r2, #128	; 0x80
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fe71 	bl	8007184 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	7959      	ldrb	r1, [r3, #5]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);        
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80064b6:	b292      	uxth	r2, r2
 80064b8:	9202      	str	r2, [sp, #8]
 80064ba:	2200      	movs	r2, #0
 80064bc:	9201      	str	r2, [sp, #4]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	4603      	mov	r3, r0
 80064c2:	2200      	movs	r2, #0
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fe5d 	bl	8007184 <USBH_OpenPipe>
    }
    break;
 80064ca:	e09c      	b.n	8006606 <USBH_HandleEnum+0x2b2>
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
 80064cc:	2109      	movs	r1, #9
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f97a 	bl	80067c8 <USBH_Get_CfgDesc>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f040 8097 	bne.w	800660a <USBH_HandleEnum+0x2b6>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2204      	movs	r2, #4
 80064e0:	705a      	strb	r2, [r3, #1]
    }
    break;
 80064e2:	e092      	b.n	800660a <USBH_HandleEnum+0x2b6>
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f96b 	bl	80067c8 <USBH_Get_CfgDesc>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f040 808a 	bne.w	800660e <USBH_HandleEnum+0x2ba>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2205      	movs	r2, #5
 80064fe:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006500:	e085      	b.n	800660e <USBH_HandleEnum+0x2ba>
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01a      	beq.n	8006542 <USBH_HandleEnum+0x1ee>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 132e 	ldrb.w	r1, [r3, #814]	; 0x32e
                               phost->device.DevDesc.iManufacturer, 
                                phost->device.Data , 
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006518:	23ff      	movs	r3, #255	; 0xff
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f978 	bl	8006810 <USBH_Get_StringDesc>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d175      	bne.n	8006612 <USBH_HandleEnum+0x2be>
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800652c:	4619      	mov	r1, r3
 800652e:	4841      	ldr	r0, [pc, #260]	; (8006634 <USBH_HandleEnum+0x2e0>)
 8006530:	f001 fe9c 	bl	800826c <iprintf>
 8006534:	200a      	movs	r0, #10
 8006536:	f001 feb1 	bl	800829c <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2206      	movs	r2, #6
 800653e:	705a      	strb	r2, [r3, #1]
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    break;
 8006540:	e067      	b.n	8006612 <USBH_HandleEnum+0x2be>
     USBH_UsrLog("Manufacturer : N/A");      
 8006542:	483d      	ldr	r0, [pc, #244]	; (8006638 <USBH_HandleEnum+0x2e4>)
 8006544:	f001 fe92 	bl	800826c <iprintf>
 8006548:	200a      	movs	r0, #10
 800654a:	f001 fea7 	bl	800829c <putchar>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2206      	movs	r2, #6
 8006552:	705a      	strb	r2, [r3, #1]
    break;
 8006554:	e05d      	b.n	8006612 <USBH_HandleEnum+0x2be>
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800655c:	2b00      	cmp	r3, #0
 800655e:	d01a      	beq.n	8006596 <USBH_HandleEnum+0x242>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 132f 	ldrb.w	r1, [r3, #815]	; 0x32f
                               phost->device.DevDesc.iProduct, 
                               phost->device.Data, 
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800656c:	23ff      	movs	r3, #255	; 0xff
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f94e 	bl	8006810 <USBH_Get_StringDesc>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d14d      	bne.n	8006616 <USBH_HandleEnum+0x2c2>
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006580:	4619      	mov	r1, r3
 8006582:	482e      	ldr	r0, [pc, #184]	; (800663c <USBH_HandleEnum+0x2e8>)
 8006584:	f001 fe72 	bl	800826c <iprintf>
 8006588:	200a      	movs	r0, #10
 800658a:	f001 fe87 	bl	800829c <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2207      	movs	r2, #7
 8006592:	705a      	strb	r2, [r3, #1]
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    } 
    break;
 8006594:	e03f      	b.n	8006616 <USBH_HandleEnum+0x2c2>
      USBH_UsrLog("Product : N/A");
 8006596:	482a      	ldr	r0, [pc, #168]	; (8006640 <USBH_HandleEnum+0x2ec>)
 8006598:	f001 fe68 	bl	800826c <iprintf>
 800659c:	200a      	movs	r0, #10
 800659e:	f001 fe7d 	bl	800829c <putchar>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2207      	movs	r2, #7
 80065a6:	705a      	strb	r2, [r3, #1]
    break;
 80065a8:	e035      	b.n	8006616 <USBH_HandleEnum+0x2c2>
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d019      	beq.n	80065e8 <USBH_HandleEnum+0x294>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iSerialNumber, 
                               phost->device.Data, 
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80065c0:	23ff      	movs	r3, #255	; 0xff
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f924 	bl	8006810 <USBH_Get_StringDesc>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d125      	bne.n	800661a <USBH_HandleEnum+0x2c6>
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)phost->device.Data);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80065d4:	4619      	mov	r1, r3
 80065d6:	481b      	ldr	r0, [pc, #108]	; (8006644 <USBH_HandleEnum+0x2f0>)
 80065d8:	f001 fe48 	bl	800826c <iprintf>
 80065dc:	200a      	movs	r0, #10
 80065de:	f001 fe5d 	bl	800829c <putchar>
        Status = USBH_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]
      Status = USBH_OK;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    }  
    break;
 80065e6:	e018      	b.n	800661a <USBH_HandleEnum+0x2c6>
      USBH_UsrLog("Serial Number : N/A"); 
 80065e8:	4817      	ldr	r0, [pc, #92]	; (8006648 <USBH_HandleEnum+0x2f4>)
 80065ea:	f001 fe3f 	bl	800826c <iprintf>
 80065ee:	200a      	movs	r0, #10
 80065f0:	f001 fe54 	bl	800829c <putchar>
      Status = USBH_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73fb      	strb	r3, [r7, #15]
    break;
 80065f8:	e00f      	b.n	800661a <USBH_HandleEnum+0x2c6>
    
  default:
    break;
 80065fa:	bf00      	nop
 80065fc:	e00e      	b.n	800661c <USBH_HandleEnum+0x2c8>
    break;
 80065fe:	bf00      	nop
 8006600:	e00c      	b.n	800661c <USBH_HandleEnum+0x2c8>
    break;
 8006602:	bf00      	nop
 8006604:	e00a      	b.n	800661c <USBH_HandleEnum+0x2c8>
    break;
 8006606:	bf00      	nop
 8006608:	e008      	b.n	800661c <USBH_HandleEnum+0x2c8>
    break;
 800660a:	bf00      	nop
 800660c:	e006      	b.n	800661c <USBH_HandleEnum+0x2c8>
    break;
 800660e:	bf00      	nop
 8006610:	e004      	b.n	800661c <USBH_HandleEnum+0x2c8>
    break;
 8006612:	bf00      	nop
 8006614:	e002      	b.n	800661c <USBH_HandleEnum+0x2c8>
    break;
 8006616:	bf00      	nop
 8006618:	e000      	b.n	800661c <USBH_HandleEnum+0x2c8>
    break;
 800661a:	bf00      	nop
  }  
  return Status;
 800661c:	7bfb      	ldrb	r3, [r7, #15]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	08009280 	.word	0x08009280
 800662c:	0800928c 	.word	0x0800928c
 8006630:	08009298 	.word	0x08009298
 8006634:	080092b0 	.word	0x080092b0
 8006638:	080092c4 	.word	0x080092c4
 800663c:	080092d8 	.word	0x080092d8
 8006640:	080092e8 	.word	0x080092e8
 8006644:	080092f8 	.word	0x080092f8
 8006648:	0800930c 	.word	0x0800930c

0800664c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f804 	bl	800668e <USBH_HandleSof>
}
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b0a      	cmp	r3, #10
 800669e:	d10a      	bne.n	80066b6 <USBH_HandleSof+0x28>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d005      	beq.n	80066b6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
  }
}
 80066b6:	bf00      	nop
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10f      	bne.n	80066f0 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
    
    if(phost->pUser != NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00e      	beq.n	8006700 <USBH_LL_Connect+0x42>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80066e8:	2104      	movs	r1, #4
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	4798      	blx	r3
 80066ee:	e007      	b.n	8006700 <USBH_LL_Connect+0x42>
    }
  } 
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d102      	bne.n	8006700 <USBH_LL_Connect+0x42>
  {
    phost->gState = HOST_DEV_ATTACHED ;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2202      	movs	r2, #2
 80066fe:	701a      	strb	r2, [r3, #0]
  }
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 fae9 	bl	8007cec <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	791b      	ldrb	r3, [r3, #4]
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fd7d 	bl	8007220 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	795b      	ldrb	r3, [r3, #5]
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fd77 	bl	8007220 <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <USBH_LL_Disconnect+0x44>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800674a:	2105      	movs	r1, #5
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
 8006750:	4808      	ldr	r0, [pc, #32]	; (8006774 <USBH_LL_Disconnect+0x68>)
 8006752:	f001 fd8b 	bl	800826c <iprintf>
 8006756:	200a      	movs	r0, #10
 8006758:	f001 fda0 	bl	800829c <putchar>
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f001 fa93 	bl	8007c88 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2203      	movs	r2, #3
 8006766:	701a      	strb	r2, [r3, #0]
  
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	08009320 	.word	0x08009320

08006778 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af02      	add	r7, sp, #8
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;
  
  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  phost->device.Data,
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800678a:	78fb      	ldrb	r3, [r7, #3]
 800678c:	b29b      	uxth	r3, r3
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	4613      	mov	r3, r2
 8006792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006796:	2100      	movs	r1, #0
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f864 	bl	8006866 <USBH_GetDescriptor>
 800679e:	4603      	mov	r3, r0
 80067a0:	73fb      	strb	r3, [r7, #15]
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10a      	bne.n	80067be <USBH_Get_DevDesc+0x46>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data, length);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f503 7048 	add.w	r0, r3, #800	; 0x320
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80067b4:	78fa      	ldrb	r2, [r7, #3]
 80067b6:	b292      	uxth	r2, r2
 80067b8:	4619      	mov	r1, r3
 80067ba:	f000 f8f4 	bl	80069a6 <USBH_ParseDevDesc>
  }
  return status;      
 80067be:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,                      
                             uint16_t length)

{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af02      	add	r7, sp, #8
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1)  
  pData = phost->device.CfgDesc_Raw;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	331c      	adds	r3, #28
 80067d8:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif  
  if((status = USBH_GetDescriptor(phost,
 80067da:	887b      	ldrh	r3, [r7, #2]
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067e4:	2100      	movs	r1, #0
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f83d 	bl	8006866 <USBH_GetDescriptor>
 80067ec:	4603      	mov	r3, r0
 80067ee:	72fb      	strb	r3, [r7, #11]
 80067f0:	7afb      	ldrb	r3, [r7, #11]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d107      	bne.n	8006806 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {
    
    /* Commands successfully sent and Response Received  */       
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f203 3332 	addw	r3, r3, #818	; 0x332
 80067fc:	887a      	ldrh	r2, [r7, #2]
 80067fe:	68f9      	ldr	r1, [r7, #12]
 8006800:	4618      	mov	r0, r3
 8006802:	f000 f940 	bl	8006a86 <USBH_ParseCfgDesc>
                       pData,
                       length); 
    
  }
  return status;
 8006806:	7afb      	ldrb	r3, [r7, #11]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	607a      	str	r2, [r7, #4]
 800681a:	461a      	mov	r2, r3
 800681c:	460b      	mov	r3, r1
 800681e:	72fb      	strb	r3, [r7, #11]
 8006820:	4613      	mov	r3, r2
 8006822:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8006824:	7afb      	ldrb	r3, [r7, #11]
 8006826:	b29b      	uxth	r3, r3
 8006828:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800682c:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  phost->device.Data,
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006834:	893b      	ldrh	r3, [r7, #8]
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	460b      	mov	r3, r1
 800683a:	2100      	movs	r1, #0
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f812 	bl	8006866 <USBH_GetDescriptor>
 8006842:	4603      	mov	r3, r0
 8006844:	75fb      	strb	r3, [r7, #23]
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d107      	bne.n	800685c <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(phost->device.Data,buff, length);    
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006852:	893a      	ldrh	r2, [r7, #8]
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fa17 	bl	8006c8a <USBH_ParseStringDesc>
  }
  return status;
 800685c:	7dfb      	ldrb	r3, [r7, #23]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,                          
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	60f8      	str	r0, [r7, #12]
 800686e:	607b      	str	r3, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	72fb      	strb	r3, [r7, #11]
 8006874:	4613      	mov	r3, r2
 8006876:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	789b      	ldrb	r3, [r3, #2]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d11c      	bne.n	80068ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006880:	7afb      	ldrb	r3, [r7, #11]
 8006882:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006886:	b2da      	uxtb	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2206      	movs	r2, #6
 8006890:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	893a      	ldrh	r2, [r7, #8]
 8006896:	825a      	strh	r2, [r3, #18]
    
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 8006898:	893b      	ldrh	r3, [r7, #8]
 800689a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800689e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068a2:	d104      	bne.n	80068ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f240 4209 	movw	r2, #1033	; 0x409
 80068aa:	829a      	strh	r2, [r3, #20]
 80068ac:	e002      	b.n	80068b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length; 
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8b3a      	ldrh	r2, [r7, #24]
 80068b8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff , length );     
 80068ba:	8b3b      	ldrh	r3, [r7, #24]
 80068bc:	461a      	mov	r2, r3
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 fa30 	bl	8006d26 <USBH_CtlReq>
 80068c6:	4603      	mov	r3, r0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost, 
                                   uint8_t DeviceAddress)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	789b      	ldrb	r3, [r3, #2]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d10f      	bne.n	8006904 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2205      	movs	r2, #5
 80068ee:	745a      	strb	r2, [r3, #17]
    
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );
 8006904:	2200      	movs	r2, #0
 8006906:	2100      	movs	r1, #0
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fa0c 	bl	8006d26 <USBH_CtlReq>
 800690e:	4603      	mov	r3, r0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <USBH_SetCfg>:
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, 
                               uint16_t cfg_idx)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	789b      	ldrb	r3, [r3, #2]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d10e      	bne.n	800694a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2209      	movs	r2, #9
 8006936:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	887a      	ldrh	r2, [r7, #2]
 800693c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0; 
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	82da      	strh	r2, [r3, #22]
  }
  
  return USBH_CtlReq(phost, 0 , 0 );      
 800694a:	2200      	movs	r2, #0
 800694c:	2100      	movs	r1, #0
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f9e9 	bl	8006d26 <USBH_CtlReq>
 8006954:	4603      	mov	r3, r0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <USBH_ClrFeature>:
  * @param  hc_num: Host channel number 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost,
                                   uint8_t ep_num) 
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b082      	sub	sp, #8
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	460b      	mov	r3, r1
 8006968:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	789b      	ldrb	r3, [r3, #2]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d10f      	bne.n	8006992 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2202      	movs	r2, #2
 8006976:	741a      	strb	r2, [r3, #16]
      USB_REQ_RECIPIENT_ENDPOINT |
        USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	b29a      	uxth	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;           
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );   
 8006992:	2200      	movs	r2, #0
 8006994:	2100      	movs	r1, #0
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f9c5 	bl	8006d26 <USBH_CtlReq>
 800699c:	4603      	mov	r3, r0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b085      	sub	sp, #20
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	60b9      	str	r1, [r7, #8]
 80069b0:	4613      	mov	r3, r2
 80069b2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	781a      	ldrb	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	785a      	ldrb	r2, [r3, #1]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	3302      	adds	r3, #2
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	3303      	adds	r3, #3
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	4413      	add	r3, r2
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	791a      	ldrb	r2, [r3, #4]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	795a      	ldrb	r2, [r3, #5]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	799a      	ldrb	r2, [r3, #6]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	79da      	ldrb	r2, [r3, #7]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	71da      	strb	r2, [r3, #7]
  
  if (length > 8)
 8006a00:	88fb      	ldrh	r3, [r7, #6]
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d939      	bls.n	8006a7a <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	3308      	adds	r3, #8
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	3309      	adds	r3, #9
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	021b      	lsls	r3, r3, #8
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	330a      	adds	r3, #10
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	330b      	adds	r3, #11
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	021b      	lsls	r3, r3, #8
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	4413      	add	r3, r2
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	330c      	adds	r3, #12
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	330d      	adds	r3, #13
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	021b      	lsls	r3, r3, #8
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	4413      	add	r3, r2
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	7b9a      	ldrb	r2, [r3, #14]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	7bda      	ldrb	r2, [r3, #15]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	7c1a      	ldrb	r2, [r3, #16]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	7c5a      	ldrb	r2, [r3, #17]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	745a      	strb	r2, [r3, #17]
  }
}
 8006a7a:	bf00      	nop
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <USBH_ParseCfgDesc>:
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc,
                               uint8_t *buf, 
                               uint16_t length)
{  
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b08a      	sub	sp, #40	; 0x28
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	4613      	mov	r3, r2
 8006a92:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;  
  USBH_DescHeader_t             *pdesc = (USBH_DescHeader_t *)buf;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                      ptr;
  int8_t                        if_ix = 0;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  int8_t                        ep_ix = 0;  
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  
  pdesc   = (USBH_DescHeader_t *)buf;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	781a      	ldrb	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	785a      	ldrb	r2, [r3, #1]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	3302      	adds	r3, #2
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	3303      	adds	r3, #3
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	021b      	lsls	r3, r3, #8
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	4413      	add	r3, r2
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	791a      	ldrb	r2, [r3, #4]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	795a      	ldrb	r2, [r3, #5]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	799a      	ldrb	r2, [r3, #6]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	79da      	ldrb	r2, [r3, #7]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	7a1a      	ldrb	r2, [r3, #8]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	721a      	strb	r2, [r3, #8]
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006afc:	88fb      	ldrh	r3, [r7, #6]
 8006afe:	2b09      	cmp	r3, #9
 8006b00:	d963      	bls.n	8006bca <USBH_ParseCfgDesc+0x144>
  {
    ptr = USB_LEN_CFG_DESC;
 8006b02:	2309      	movs	r3, #9
 8006b04:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006b06:	2300      	movs	r3, #0
 8006b08:	61fb      	str	r3, [r7, #28]
    
    
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 8006b0a:	e055      	b.n	8006bb8 <USBH_ParseCfgDesc+0x132>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006b0c:	f107 0316 	add.w	r3, r7, #22
 8006b10:	4619      	mov	r1, r3
 8006b12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b14:	f000 f8ec 	bl	8006cf0 <USBH_GetNextDesc>
 8006b18:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	785b      	ldrb	r3, [r3, #1]
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d14a      	bne.n	8006bb8 <USBH_ParseCfgDesc+0x132>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006b22:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8006b26:	221a      	movs	r2, #26
 8006b28:	fb02 f303 	mul.w	r3, r2, r3
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	4413      	add	r3, r2
 8006b32:	3302      	adds	r3, #2
 8006b34:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)pdesc);            
 8006b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b38:	69f8      	ldr	r0, [r7, #28]
 8006b3a:	f000 f84a 	bl	8006bd2 <USBH_ParseInterfaceDesc>
        
        ep_ix = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;        
 8006b44:	2300      	movs	r3, #0
 8006b46:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006b48:	e024      	b.n	8006b94 <USBH_ParseCfgDesc+0x10e>
        {
          pdesc = USBH_GetNextDesc((uint8_t*) pdesc, &ptr);
 8006b4a:	f107 0316 	add.w	r3, r7, #22
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b52:	f000 f8cd 	bl	8006cf0 <USBH_GetNextDesc>
 8006b56:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	785b      	ldrb	r3, [r3, #1]
 8006b5c:	2b05      	cmp	r3, #5
 8006b5e:	d119      	bne.n	8006b94 <USBH_ParseCfgDesc+0x10e>
          {  
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006b60:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8006b64:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 8006b68:	3201      	adds	r2, #1
 8006b6a:	00d2      	lsls	r2, r2, #3
 8006b6c:	211a      	movs	r1, #26
 8006b6e:	fb01 f303 	mul.w	r3, r1, r3
 8006b72:	4413      	add	r3, r2
 8006b74:	3308      	adds	r3, #8
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4413      	add	r3, r2
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
 8006b7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b80:	69b8      	ldr	r0, [r7, #24]
 8006b82:	f000 f855 	bl	8006c30 <USBH_ParseEPDesc>
            ep_ix++;
 8006b86:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006b94:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8006b98:	69fa      	ldr	r2, [r7, #28]
 8006b9a:	7912      	ldrb	r2, [r2, #4]
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	da04      	bge.n	8006baa <USBH_ParseCfgDesc+0x124>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	885a      	ldrh	r2, [r3, #2]
 8006ba4:	8afb      	ldrh	r3, [r7, #22]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d8cf      	bhi.n	8006b4a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006baa:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 8006bb8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	dc04      	bgt.n	8006bca <USBH_ParseCfgDesc+0x144>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	885a      	ldrh	r2, [r3, #2]
 8006bc4:	8afb      	ldrh	r3, [r7, #22]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d8a0      	bhi.n	8006b0c <USBH_ParseCfgDesc+0x86>
      }
    }
  }  
}
 8006bca:	bf00      	nop
 8006bcc:	3728      	adds	r7, #40	; 0x28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor, 
                                      uint8_t *buf)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	781a      	ldrb	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	785a      	ldrb	r2, [r3, #1]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	789a      	ldrb	r2, [r3, #2]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	78da      	ldrb	r2, [r3, #3]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	791a      	ldrb	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	795a      	ldrb	r2, [r3, #5]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	799a      	ldrb	r2, [r3, #6]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	79da      	ldrb	r2, [r3, #7]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	7a1a      	ldrb	r2, [r3, #8]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	721a      	strb	r2, [r3, #8]
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781a      	ldrb	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	785a      	ldrb	r2, [r3, #1]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	789a      	ldrb	r2, [r3, #2]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	78da      	ldrb	r2, [r3, #3]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	3305      	adds	r3, #5
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	021b      	lsls	r3, r3, #8
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	4413      	add	r3, r2
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	799a      	ldrb	r2, [r3, #6]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	719a      	strb	r2, [r3, #6]
}
 8006c7e:	bf00      	nop
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USBH_ParseStringDesc>:
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, 
                                  uint8_t* pdest, 
                                  uint16_t length)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b087      	sub	sp, #28
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	4613      	mov	r3, r2
 8006c96:	80fb      	strh	r3, [r7, #6]
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d120      	bne.n	8006ce4 <USBH_ParseStringDesc+0x5a>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	1e9a      	subs	r2, r3, #2
 8006ca8:	88fb      	ldrh	r3, [r7, #6]
 8006caa:	4293      	cmp	r3, r2
 8006cac:	bfa8      	it	ge
 8006cae:	4613      	movge	r3, r2
 8006cb0:	82bb      	strh	r3, [r7, #20]
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3302      	adds	r3, #2
 8006cb6:	60fb      	str	r3, [r7, #12]
    
    for (idx = 0; idx < strlength; idx+=2 )
 8006cb8:	2300      	movs	r3, #0
 8006cba:	82fb      	strh	r3, [r7, #22]
 8006cbc:	e00b      	b.n	8006cd6 <USBH_ParseStringDesc+0x4c>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006cbe:	8afb      	ldrh	r3, [r7, #22]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	781a      	ldrb	r2, [r3, #0]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	60bb      	str	r3, [r7, #8]
    for (idx = 0; idx < strlength; idx+=2 )
 8006cd0:	8afb      	ldrh	r3, [r7, #22]
 8006cd2:	3302      	adds	r3, #2
 8006cd4:	82fb      	strh	r3, [r7, #22]
 8006cd6:	8afa      	ldrh	r2, [r7, #22]
 8006cd8:	8abb      	ldrh	r3, [r7, #20]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d3ef      	bcc.n	8006cbe <USBH_ParseStringDesc+0x34>
    }  
    *pdest = 0; /* mark end of string */  
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
  }
}
 8006ce4:	bf00      	nop
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	881a      	ldrh	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	4413      	add	r3, r2
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
         ((USBH_DescHeader_t *)pbuf)->bLength);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4413      	add	r3, r2
 8006d16:	60fb      	str	r3, [r7, #12]
 
  return(pnext);
 8006d18:	68fb      	ldr	r3, [r7, #12]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b086      	sub	sp, #24
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	4613      	mov	r3, r2
 8006d32:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006d34:	2301      	movs	r3, #1
 8006d36:	75fb      	strb	r3, [r7, #23]
  
  switch (phost->RequestState)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	789b      	ldrb	r3, [r3, #2]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d002      	beq.n	8006d46 <USBH_CtlReq+0x20>
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d00f      	beq.n	8006d64 <USBH_CtlReq+0x3e>
      status = USBH_FAIL;
    }   
    break;
    
  default:
    break; 
 8006d44:	e028      	b.n	8006d98 <USBH_CtlReq+0x72>
    phost->Control.buff = buff; 
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	88fa      	ldrh	r2, [r7, #6]
 8006d50:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;  
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2201      	movs	r2, #1
 8006d56:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	75fb      	strb	r3, [r7, #23]
    break;
 8006d62:	e019      	b.n	8006d98 <USBH_CtlReq+0x72>
    status = USBH_HandleControl(phost);
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 f81d 	bl	8006da4 <USBH_HandleControl>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	75fb      	strb	r3, [r7, #23]
     if (status == USBH_OK) 
 8006d6e:	7dfb      	ldrb	r3, [r7, #23]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d108      	bne.n	8006d86 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;  
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;      
 8006d80:	2300      	movs	r3, #0
 8006d82:	75fb      	strb	r3, [r7, #23]
    break;
 8006d84:	e007      	b.n	8006d96 <USBH_CtlReq+0x70>
    else if  (status == USBH_FAIL)
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d104      	bne.n	8006d96 <USBH_CtlReq+0x70>
      phost->RequestState = CMD_SEND;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	709a      	strb	r2, [r3, #2]
      status = USBH_FAIL;
 8006d92:	2302      	movs	r3, #2
 8006d94:	75fb      	strb	r3, [r7, #23]
    break;
 8006d96:	bf00      	nop
  }
  return status;
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af02      	add	r7, sp, #8
 8006daa:	6078      	str	r0, [r7, #4]
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8006dac:	2301      	movs	r3, #1
 8006dae:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006db0:	2300      	movs	r3, #0
 8006db2:	73bb      	strb	r3, [r7, #14]
  
  switch (phost->Control.state)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	7e1b      	ldrb	r3, [r3, #24]
 8006db8:	3b01      	subs	r3, #1
 8006dba:	2b0a      	cmp	r3, #10
 8006dbc:	f200 8152 	bhi.w	8007064 <USBH_HandleControl+0x2c0>
 8006dc0:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <USBH_HandleControl+0x24>)
 8006dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc6:	bf00      	nop
 8006dc8:	08006df5 	.word	0x08006df5
 8006dcc:	08006e0f 	.word	0x08006e0f
 8006dd0:	08006e73 	.word	0x08006e73
 8006dd4:	08006e99 	.word	0x08006e99
 8006dd8:	08006ed1 	.word	0x08006ed1
 8006ddc:	08006efd 	.word	0x08006efd
 8006de0:	08006f4f 	.word	0x08006f4f
 8006de4:	08006f71 	.word	0x08006f71
 8006de8:	08006fad 	.word	0x08006fad
 8006dec:	08006fd5 	.word	0x08006fd5
 8006df0:	08007013 	.word	0x08007013
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
	                   (uint8_t *)phost->Control.setup.d8 , 
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f103 0110 	add.w	r1, r3, #16
    USBH_CtlSendSetup     (phost, 
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	795b      	ldrb	r3, [r3, #5]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f943 	bl	800708c <USBH_CtlSendSetup>
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2202      	movs	r2, #2
 8006e0a:	761a      	strb	r2, [r3, #24]
    break; 
 8006e0c:	e135      	b.n	800707a <USBH_HandleControl+0x2d6>
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	795b      	ldrb	r3, [r3, #5]
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f001 f8b7 	bl	8007f88 <USBH_LL_GetURBState>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006e1e:	7bbb      	ldrb	r3, [r7, #14]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d11e      	bne.n	8006e62 <USBH_HandleControl+0xbe>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	7c1b      	ldrb	r3, [r3, #16]
 8006e28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e2c:	737b      	strb	r3, [r7, #13]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	8adb      	ldrh	r3, [r3, #22]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <USBH_HandleControl+0xa8>
      {        
        if (direction == USB_D2H)
 8006e36:	7b7b      	ldrb	r3, [r7, #13]
 8006e38:	2b80      	cmp	r3, #128	; 0x80
 8006e3a:	d103      	bne.n	8006e44 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2203      	movs	r2, #3
 8006e40:	761a      	strb	r2, [r3, #24]
      phost->Control.state = CTRL_ERROR;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }    
    break;
 8006e42:	e111      	b.n	8007068 <USBH_HandleControl+0x2c4>
          phost->Control.state = CTRL_DATA_OUT;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2205      	movs	r2, #5
 8006e48:	761a      	strb	r2, [r3, #24]
    break;
 8006e4a:	e10d      	b.n	8007068 <USBH_HandleControl+0x2c4>
        if (direction == USB_D2H)
 8006e4c:	7b7b      	ldrb	r3, [r7, #13]
 8006e4e:	2b80      	cmp	r3, #128	; 0x80
 8006e50:	d103      	bne.n	8006e5a <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2209      	movs	r2, #9
 8006e56:	761a      	strb	r2, [r3, #24]
    break;
 8006e58:	e106      	b.n	8007068 <USBH_HandleControl+0x2c4>
          phost->Control.state = CTRL_STATUS_IN;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2207      	movs	r2, #7
 8006e5e:	761a      	strb	r2, [r3, #24]
    break;
 8006e60:	e102      	b.n	8007068 <USBH_HandleControl+0x2c4>
    else if(URB_Status == USBH_URB_ERROR)
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	f040 80ff 	bne.w	8007068 <USBH_HandleControl+0x2c4>
      phost->Control.state = CTRL_ERROR;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	220b      	movs	r2, #11
 8006e6e:	761a      	strb	r2, [r3, #24]
    break;
 8006e70:	e0fa      	b.n	8007068 <USBH_HandleControl+0x2c4>
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
     phost->Control.timer = phost->Timer;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6899      	ldr	r1, [r3, #8]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	899a      	ldrh	r2, [r3, #12]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	791b      	ldrb	r3, [r3, #4]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f93d 	bl	800710a <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.pipe_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2204      	movs	r2, #4
 8006e94:	761a      	strb	r2, [r3, #24]
    break;    
 8006e96:	e0f0      	b.n	800707a <USBH_HandleControl+0x2d6>
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	791b      	ldrb	r3, [r3, #4]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 f872 	bl	8007f88 <USBH_LL_GetURBState>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73bb      	strb	r3, [r7, #14]
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006ea8:	7bbb      	ldrb	r3, [r7, #14]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d102      	bne.n	8006eb4 <USBH_HandleControl+0x110>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2209      	movs	r2, #9
 8006eb2:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 8006eb4:	7bbb      	ldrb	r3, [r7, #14]
 8006eb6:	2b05      	cmp	r3, #5
 8006eb8:	d102      	bne.n	8006ec0 <USBH_HandleControl+0x11c>
    { 
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_ERROR;  
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 8006ebe:	e0d5      	b.n	800706c <USBH_HandleControl+0x2c8>
    else if (URB_Status == USBH_URB_ERROR)
 8006ec0:	7bbb      	ldrb	r3, [r7, #14]
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	f040 80d2 	bne.w	800706c <USBH_HandleControl+0x2c8>
      phost->Control.state = CTRL_ERROR;  
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	220b      	movs	r2, #11
 8006ecc:	761a      	strb	r2, [r3, #24]
    break;
 8006ece:	e0cd      	b.n	800706c <USBH_HandleControl+0x2c8>
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6899      	ldr	r1, [r3, #8]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	899a      	ldrh	r2, [r3, #12]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	7958      	ldrb	r0, [r3, #5]
 8006edc:	2301      	movs	r3, #1
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f8ec 	bl	80070c0 <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2206      	movs	r2, #6
 8006ef8:	761a      	strb	r2, [r3, #24]
    break;
 8006efa:	e0be      	b.n	800707a <USBH_HandleControl+0x2d6>
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	795b      	ldrb	r3, [r3, #5]
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f001 f840 	bl	8007f88 <USBH_LL_GetURBState>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	73bb      	strb	r3, [r7, #14]
    
    if  (URB_Status == USBH_URB_DONE)
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d103      	bne.n	8006f1a <USBH_HandleControl+0x176>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2207      	movs	r2, #7
 8006f16:	761a      	strb	r2, [r3, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    } 
    break;
 8006f18:	e0aa      	b.n	8007070 <USBH_HandleControl+0x2cc>
    else if  (URB_Status == USBH_URB_STALL) 
 8006f1a:	7bbb      	ldrb	r3, [r7, #14]
 8006f1c:	2b05      	cmp	r3, #5
 8006f1e:	d105      	bne.n	8006f2c <USBH_HandleControl+0x188>
      phost->Control.state = CTRL_STALLED; 
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	220c      	movs	r2, #12
 8006f24:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006f26:	2303      	movs	r3, #3
 8006f28:	73fb      	strb	r3, [r7, #15]
    break;
 8006f2a:	e0a1      	b.n	8007070 <USBH_HandleControl+0x2cc>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006f2c:	7bbb      	ldrb	r3, [r7, #14]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d103      	bne.n	8006f3a <USBH_HandleControl+0x196>
      phost->Control.state = CTRL_DATA_OUT;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2205      	movs	r2, #5
 8006f36:	761a      	strb	r2, [r3, #24]
    break;
 8006f38:	e09a      	b.n	8007070 <USBH_HandleControl+0x2cc>
    else if (URB_Status == USBH_URB_ERROR)
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	f040 8097 	bne.w	8007070 <USBH_HandleControl+0x2cc>
      phost->Control.state = CTRL_ERROR;  
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	220b      	movs	r2, #11
 8006f46:	761a      	strb	r2, [r3, #24]
      status = USBH_FAIL;    
 8006f48:	2302      	movs	r3, #2
 8006f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f4c:	e090      	b.n	8007070 <USBH_HandleControl+0x2cc>
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	791b      	ldrb	r3, [r3, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	2100      	movs	r1, #0
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f8d7 	bl	800710a <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.pipe_in);
    phost->Control.timer = phost->Timer;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2208      	movs	r2, #8
 8006f6c:	761a      	strb	r2, [r3, #24]
    
    break;
 8006f6e:	e084      	b.n	800707a <USBH_HandleControl+0x2d6>
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	791b      	ldrb	r3, [r3, #4]
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 f806 	bl	8007f88 <USBH_LL_GetURBState>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73bb      	strb	r3, [r7, #14]
    
    if  ( URB_Status == USBH_URB_DONE)
 8006f80:	7bbb      	ldrb	r3, [r7, #14]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d105      	bne.n	8006f92 <USBH_HandleControl+0x1ee>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	220d      	movs	r2, #13
 8006f8a:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73fb      	strb	r3, [r7, #15]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 8006f90:	e070      	b.n	8007074 <USBH_HandleControl+0x2d0>
    else if (URB_Status == USBH_URB_ERROR)
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d103      	bne.n	8006fa0 <USBH_HandleControl+0x1fc>
      phost->Control.state = CTRL_ERROR;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	220b      	movs	r2, #11
 8006f9c:	761a      	strb	r2, [r3, #24]
    break;
 8006f9e:	e069      	b.n	8007074 <USBH_HandleControl+0x2d0>
     else if(URB_Status == USBH_URB_STALL)
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	2b05      	cmp	r3, #5
 8006fa4:	d166      	bne.n	8007074 <USBH_HandleControl+0x2d0>
      status = USBH_NOT_SUPPORTED;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	73fb      	strb	r3, [r7, #15]
    break;
 8006faa:	e063      	b.n	8007074 <USBH_HandleControl+0x2d0>
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	795a      	ldrb	r2, [r3, #5]
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	2100      	movs	r1, #0
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f880 	bl	80070c0 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	220a      	movs	r2, #10
 8006fd0:	761a      	strb	r2, [r3, #24]
    break;
 8006fd2:	e052      	b.n	800707a <USBH_HandleControl+0x2d6>
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	795b      	ldrb	r3, [r3, #5]
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 ffd4 	bl	8007f88 <USBH_LL_GetURBState>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006fe4:	7bbb      	ldrb	r3, [r7, #14]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d105      	bne.n	8006ff6 <USBH_HandleControl+0x252>
    { 
      status = USBH_OK;      
 8006fea:	2300      	movs	r3, #0
 8006fec:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE; 
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	220d      	movs	r2, #13
 8006ff2:	761a      	strb	r2, [r3, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 8006ff4:	e040      	b.n	8007078 <USBH_HandleControl+0x2d4>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006ff6:	7bbb      	ldrb	r3, [r7, #14]
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d103      	bne.n	8007004 <USBH_HandleControl+0x260>
      phost->Control.state = CTRL_STATUS_OUT;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2209      	movs	r2, #9
 8007000:	761a      	strb	r2, [r3, #24]
    break;
 8007002:	e039      	b.n	8007078 <USBH_HandleControl+0x2d4>
    else if (URB_Status == USBH_URB_ERROR)
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	2b04      	cmp	r3, #4
 8007008:	d136      	bne.n	8007078 <USBH_HandleControl+0x2d4>
      phost->Control.state = CTRL_ERROR; 
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	220b      	movs	r2, #11
 800700e:	761a      	strb	r2, [r3, #24]
    break;
 8007010:	e032      	b.n	8007078 <USBH_HandleControl+0x2d4>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	7e5b      	ldrb	r3, [r3, #25]
 8007016:	3301      	adds	r3, #1
 8007018:	b2da      	uxtb	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	765a      	strb	r2, [r3, #25]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	7e5b      	ldrb	r3, [r3, #25]
 8007022:	2b02      	cmp	r3, #2
 8007024:	d809      	bhi.n	800703a <USBH_HandleControl+0x296>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fe60 	bl	8007cec <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007038:	e01f      	b.n	800707a <USBH_HandleControl+0x2d6>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007040:	2106      	movs	r1, #6
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	4798      	blx	r3
      phost->Control.errorcount = 0;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	765a      	strb	r2, [r3, #25]
      USBH_ErrLog("Control error");
 800704c:	480d      	ldr	r0, [pc, #52]	; (8007084 <USBH_HandleControl+0x2e0>)
 800704e:	f001 f90d 	bl	800826c <iprintf>
 8007052:	480d      	ldr	r0, [pc, #52]	; (8007088 <USBH_HandleControl+0x2e4>)
 8007054:	f001 f90a 	bl	800826c <iprintf>
 8007058:	200a      	movs	r0, #10
 800705a:	f001 f91f 	bl	800829c <putchar>
      status = USBH_FAIL;
 800705e:	2302      	movs	r3, #2
 8007060:	73fb      	strb	r3, [r7, #15]
    break;
 8007062:	e00a      	b.n	800707a <USBH_HandleControl+0x2d6>
    
  default:
    break;
 8007064:	bf00      	nop
 8007066:	e008      	b.n	800707a <USBH_HandleControl+0x2d6>
    break;
 8007068:	bf00      	nop
 800706a:	e006      	b.n	800707a <USBH_HandleControl+0x2d6>
    break;
 800706c:	bf00      	nop
 800706e:	e004      	b.n	800707a <USBH_HandleControl+0x2d6>
    break;
 8007070:	bf00      	nop
 8007072:	e002      	b.n	800707a <USBH_HandleControl+0x2d6>
    break;
 8007074:	bf00      	nop
 8007076:	e000      	b.n	800707a <USBH_HandleControl+0x2d6>
    break;
 8007078:	bf00      	nop
  }
  return status;
 800707a:	7bfb      	ldrb	r3, [r7, #15]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	08009338 	.word	0x08009338
 8007088:	08009340 	.word	0x08009340

0800708c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af04      	add	r7, sp, #16
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	4613      	mov	r3, r2
 8007098:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800709a:	79f9      	ldrb	r1, [r7, #7]
 800709c:	2300      	movs	r3, #0
 800709e:	9303      	str	r3, [sp, #12]
 80070a0:	2308      	movs	r3, #8
 80070a2:	9302      	str	r3, [sp, #8]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	9301      	str	r3, [sp, #4]
 80070a8:	2300      	movs	r3, #0
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	2300      	movs	r3, #0
 80070ae:	2200      	movs	r2, #0
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 ff21 	bl	8007ef8 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af04      	add	r7, sp, #16
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	4611      	mov	r1, r2
 80070cc:	461a      	mov	r2, r3
 80070ce:	460b      	mov	r3, r1
 80070d0:	80fb      	strh	r3, [r7, #6]
 80070d2:	4613      	mov	r3, r2
 80070d4:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0;
 80070e0:	2300      	movs	r3, #0
 80070e2:	763b      	strb	r3, [r7, #24]
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80070e4:	7979      	ldrb	r1, [r7, #5]
 80070e6:	7e3b      	ldrb	r3, [r7, #24]
 80070e8:	9303      	str	r3, [sp, #12]
 80070ea:	88fb      	ldrh	r3, [r7, #6]
 80070ec:	9302      	str	r3, [sp, #8]
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	2301      	movs	r3, #1
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	2300      	movs	r3, #0
 80070f8:	2200      	movs	r2, #0
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f000 fefc 	bl	8007ef8 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b088      	sub	sp, #32
 800710e:	af04      	add	r7, sp, #16
 8007110:	60f8      	str	r0, [r7, #12]
 8007112:	60b9      	str	r1, [r7, #8]
 8007114:	4611      	mov	r1, r2
 8007116:	461a      	mov	r2, r3
 8007118:	460b      	mov	r3, r1
 800711a:	80fb      	strh	r3, [r7, #6]
 800711c:	4613      	mov	r3, r2
 800711e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007120:	7979      	ldrb	r1, [r7, #5]
 8007122:	2300      	movs	r3, #0
 8007124:	9303      	str	r3, [sp, #12]
 8007126:	88fb      	ldrh	r3, [r7, #6]
 8007128:	9302      	str	r3, [sp, #8]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	9301      	str	r3, [sp, #4]
 800712e:	2301      	movs	r3, #1
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	2300      	movs	r3, #0
 8007134:	2201      	movs	r2, #1
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 fede 	bl	8007ef8 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
 800713c:	2300      	movs	r3, #0
  
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t pipe_num)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b088      	sub	sp, #32
 800714a:	af04      	add	r7, sp, #16
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	4611      	mov	r1, r2
 8007152:	461a      	mov	r2, r3
 8007154:	460b      	mov	r3, r1
 8007156:	71fb      	strb	r3, [r7, #7]
 8007158:	4613      	mov	r3, r2
 800715a:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800715c:	79fb      	ldrb	r3, [r7, #7]
 800715e:	b29b      	uxth	r3, r3
 8007160:	79b9      	ldrb	r1, [r7, #6]
 8007162:	2200      	movs	r2, #0
 8007164:	9203      	str	r2, [sp, #12]
 8007166:	9302      	str	r3, [sp, #8]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	9301      	str	r3, [sp, #4]
 800716c:	2301      	movs	r3, #1
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	2303      	movs	r3, #3
 8007172:	2201      	movs	r2, #1
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 febf 	bl	8007ef8 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0); 
  
  return USBH_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af04      	add	r7, sp, #16
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	4608      	mov	r0, r1
 800718e:	4611      	mov	r1, r2
 8007190:	461a      	mov	r2, r3
 8007192:	4603      	mov	r3, r0
 8007194:	70fb      	strb	r3, [r7, #3]
 8007196:	460b      	mov	r3, r1
 8007198:	70bb      	strb	r3, [r7, #2]
 800719a:	4613      	mov	r3, r2
 800719c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800719e:	7878      	ldrb	r0, [r7, #1]
 80071a0:	78ba      	ldrb	r2, [r7, #2]
 80071a2:	78f9      	ldrb	r1, [r7, #3]
 80071a4:	8b3b      	ldrh	r3, [r7, #24]
 80071a6:	9302      	str	r3, [sp, #8]
 80071a8:	7d3b      	ldrb	r3, [r7, #20]
 80071aa:	9301      	str	r3, [sp, #4]
 80071ac:	7c3b      	ldrb	r3, [r7, #16]
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	4603      	mov	r3, r0
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fe24 	bl	8007e00 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  
  return USBH_OK; 
 80071b8:	2300      	movs	r3, #0

}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 80071ce:	78fb      	ldrb	r3, [r7, #3]
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fe5a 	bl	8007e8c <USBH_LL_ClosePipe>
  
  return USBH_OK; 
 80071d8:	2300      	movs	r3, #0

}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	460b      	mov	r3, r1
 80071ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;
  
  pipe =  USBH_GetFreePipe(phost);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f832 	bl	8007258 <USBH_GetFreePipe>
 80071f4:	4603      	mov	r3, r0
 80071f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFF)
 80071f8:	89fb      	ldrh	r3, [r7, #14]
 80071fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071fe:	4293      	cmp	r3, r2
 8007200:	d008      	beq.n	8007214 <USBH_AllocPipe+0x32>
  {
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 8007202:	89fa      	ldrh	r2, [r7, #14]
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800720a:	4619      	mov	r1, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	32e0      	adds	r2, #224	; 0xe0
 8007210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return pipe;
 8007214:	89fb      	ldrh	r3, [r7, #14]
 8007216:	b2db      	uxtb	r3, r3
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	460b      	mov	r3, r1
 800722a:	70fb      	strb	r3, [r7, #3]
   if(idx < 11)
 800722c:	78fb      	ldrb	r3, [r7, #3]
 800722e:	2b0a      	cmp	r3, #10
 8007230:	d80b      	bhi.n	800724a <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFF;
 8007232:	78fa      	ldrb	r2, [r7, #3]
 8007234:	78f9      	ldrb	r1, [r7, #3]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	31e0      	adds	r1, #224	; 0xe0
 800723a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800723e:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	32e0      	adds	r2, #224	; 0xe0
 8007246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0;
 8007260:	2300      	movs	r3, #0
 8007262:	73fb      	strb	r3, [r7, #15]
  
  for (idx = 0 ; idx < 11 ; idx++)
 8007264:	2300      	movs	r3, #0
 8007266:	73fb      	strb	r3, [r7, #15]
 8007268:	e00e      	b.n	8007288 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 800726a:	7bfa      	ldrb	r2, [r7, #15]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	32e0      	adds	r2, #224	; 0xe0
 8007270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d102      	bne.n	8007282 <USBH_GetFreePipe+0x2a>
	{
	   return idx;
 800727c:	7bfb      	ldrb	r3, [r7, #15]
 800727e:	b29b      	uxth	r3, r3
 8007280:	e007      	b.n	8007292 <USBH_GetFreePipe+0x3a>
  for (idx = 0 ; idx < 11 ; idx++)
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	3301      	adds	r3, #1
 8007286:	73fb      	strb	r3, [r7, #15]
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	2b0a      	cmp	r3, #10
 800728c:	d9ed      	bls.n	800726a <USBH_GetFreePipe+0x12>
	} 
  }
  return 0xFFFF;
 800728e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <reverse>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

uint8_t reverse(uint8_t b)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	4603      	mov	r3, r0
 80072a6:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 80072a8:	79fb      	ldrb	r3, [r7, #7]
 80072aa:	091b      	lsrs	r3, r3, #4
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	b25a      	sxtb	r2, r3
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	011b      	lsls	r3, r3, #4
 80072b4:	b25b      	sxtb	r3, r3
 80072b6:	4313      	orrs	r3, r2
 80072b8:	b25b      	sxtb	r3, r3
 80072ba:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	109b      	asrs	r3, r3, #2
 80072c0:	b25b      	sxtb	r3, r3
 80072c2:	f003 0333 	and.w	r3, r3, #51	; 0x33
 80072c6:	b25a      	sxtb	r2, r3
 80072c8:	79fb      	ldrb	r3, [r7, #7]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	b25b      	sxtb	r3, r3
 80072ce:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 80072d2:	b25b      	sxtb	r3, r3
 80072d4:	4313      	orrs	r3, r2
 80072d6:	b25b      	sxtb	r3, r3
 80072d8:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	105b      	asrs	r3, r3, #1
 80072de:	b25b      	sxtb	r3, r3
 80072e0:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80072e4:	b25a      	sxtb	r2, r3
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	b25b      	sxtb	r3, r3
 80072ec:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 80072f0:	b25b      	sxtb	r3, r3
 80072f2:	4313      	orrs	r3, r2
 80072f4:	b25b      	sxtb	r3, r3
 80072f6:	71fb      	strb	r3, [r7, #7]
   return b;
 80072f8:	79fb      	ldrb	r3, [r7, #7]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
	...

08007308 <SetN64DataInputMode>:

void SetN64DataInputMode()
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0
	// port A8 to input mode
	GPIOA->MODER &= ~(1 << 17);
 800730c:	4a08      	ldr	r2, [pc, #32]	; (8007330 <SetN64DataInputMode+0x28>)
 800730e:	4b08      	ldr	r3, [pc, #32]	; (8007330 <SetN64DataInputMode+0x28>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007316:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1 << 16);
 8007318:	4a05      	ldr	r2, [pc, #20]	; (8007330 <SetN64DataInputMode+0x28>)
 800731a:	4b05      	ldr	r3, [pc, #20]	; (8007330 <SetN64DataInputMode+0x28>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007322:	6013      	str	r3, [r2, #0]
}
 8007324:	bf00      	nop
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	40020000 	.word	0x40020000

08007334 <SetN64DataOutputMode>:

void SetN64DataOutputMode()
{
 8007334:	b480      	push	{r7}
 8007336:	af00      	add	r7, sp, #0
	// port A8 to output mode
	GPIOA->MODER &= ~(1 << 17);
 8007338:	4a08      	ldr	r2, [pc, #32]	; (800735c <SetN64DataOutputMode+0x28>)
 800733a:	4b08      	ldr	r3, [pc, #32]	; (800735c <SetN64DataOutputMode+0x28>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007342:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1 << 16);
 8007344:	4a05      	ldr	r2, [pc, #20]	; (800735c <SetN64DataOutputMode+0x28>)
 8007346:	4b05      	ldr	r3, [pc, #20]	; (800735c <SetN64DataOutputMode+0x28>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800734e:	6013      	str	r3, [r2, #0]
}
 8007350:	bf00      	nop
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40020000 	.word	0x40020000

08007360 <write_1>:

void write_1()
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
	GPIOA->BSRR = (1 << 24);
 8007364:	4b07      	ldr	r3, [pc, #28]	; (8007384 <write_1+0x24>)
 8007366:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800736a:	619a      	str	r2, [r3, #24]
	my_wait_us_asm(1);
 800736c:	2001      	movs	r0, #1
 800736e:	f7f8 ff4f 	bl	8000210 <my_wait_us_asm>
	GPIOA->BSRR = (1 << 8);
 8007372:	4b04      	ldr	r3, [pc, #16]	; (8007384 <write_1+0x24>)
 8007374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007378:	619a      	str	r2, [r3, #24]
    my_wait_us_asm(3);
 800737a:	2003      	movs	r0, #3
 800737c:	f7f8 ff48 	bl	8000210 <my_wait_us_asm>
}
 8007380:	bf00      	nop
 8007382:	bd80      	pop	{r7, pc}
 8007384:	40020000 	.word	0x40020000

08007388 <write_0>:

void write_0()
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
	GPIOA->BSRR = (1 << 24);
 800738c:	4b07      	ldr	r3, [pc, #28]	; (80073ac <write_0+0x24>)
 800738e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007392:	619a      	str	r2, [r3, #24]
	my_wait_us_asm(3);
 8007394:	2003      	movs	r0, #3
 8007396:	f7f8 ff3b 	bl	8000210 <my_wait_us_asm>
	GPIOA->BSRR = (1 << 8);
 800739a:	4b04      	ldr	r3, [pc, #16]	; (80073ac <write_0+0x24>)
 800739c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073a0:	619a      	str	r2, [r3, #24]
    my_wait_us_asm(1);
 80073a2:	2001      	movs	r0, #1
 80073a4:	f7f8 ff34 	bl	8000210 <my_wait_us_asm>
}
 80073a8:	bf00      	nop
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	40020000 	.word	0x40020000

080073b0 <SendStop>:

void SendStop()
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
	GPIOA->BSRR = (1 << 24);
 80073b4:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <SendStop+0x20>)
 80073b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073ba:	619a      	str	r2, [r3, #24]
	my_wait_us_asm(1);
 80073bc:	2001      	movs	r0, #1
 80073be:	f7f8 ff27 	bl	8000210 <my_wait_us_asm>
	GPIOA->BSRR = (1 << 8);
 80073c2:	4b03      	ldr	r3, [pc, #12]	; (80073d0 <SendStop+0x20>)
 80073c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073c8:	619a      	str	r2, [r3, #24]
}
 80073ca:	bf00      	nop
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	40020000 	.word	0x40020000

080073d4 <SendByte>:

// send a byte from LSB to MSB (proper serialization)
void SendByte(unsigned char b)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	71fb      	strb	r3, [r7, #7]
    for(int i = 0;i < 8;i++) // send all 8 bits, one at a time
 80073de:	2300      	movs	r3, #0
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	e00f      	b.n	8007404 <SendByte+0x30>
    {
        if((b >> i) & 1)
 80073e4:	79fa      	ldrb	r2, [r7, #7]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	fa42 f303 	asr.w	r3, r2, r3
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d002      	beq.n	80073fa <SendByte+0x26>
        {
            write_1();
 80073f4:	f7ff ffb4 	bl	8007360 <write_1>
 80073f8:	e001      	b.n	80073fe <SendByte+0x2a>
        }
        else
        {
            write_0();
 80073fa:	f7ff ffc5 	bl	8007388 <write_0>
    for(int i = 0;i < 8;i++) // send all 8 bits, one at a time
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3301      	adds	r3, #1
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b07      	cmp	r3, #7
 8007408:	ddec      	ble.n	80073e4 <SendByte+0x10>
        }
    }
}
 800740a:	bf00      	nop
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <SendIdentity>:

void SendIdentity()
{
 8007412:	b580      	push	{r7, lr}
 8007414:	af00      	add	r7, sp, #0
    // reply 0x05, 0x00, 0x02
    SendByte(0x05);
 8007416:	2005      	movs	r0, #5
 8007418:	f7ff ffdc 	bl	80073d4 <SendByte>
    SendByte(0x00);
 800741c:	2000      	movs	r0, #0
 800741e:	f7ff ffd9 	bl	80073d4 <SendByte>
    SendByte(0x02);
 8007422:	2002      	movs	r0, #2
 8007424:	f7ff ffd6 	bl	80073d4 <SendByte>
    SendStop();
 8007428:	f7ff ffc2 	bl	80073b0 <SendStop>
}
 800742c:	bf00      	nop
 800742e:	bd80      	pop	{r7, pc}

08007430 <SendControllerData>:

void SendControllerData()
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
    unsigned long data = *(unsigned long*)&n64_data;
 8007436:	4b11      	ldr	r3, [pc, #68]	; (800747c <SendControllerData+0x4c>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	60bb      	str	r3, [r7, #8]
    unsigned int size = sizeof(data) * 8; // should be 4 bytes * 8 = 32 bits
 800743c:	2320      	movs	r3, #32
 800743e:	607b      	str	r3, [r7, #4]

    for(unsigned int i = 0;i < size;i++)
 8007440:	2300      	movs	r3, #0
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	e00f      	b.n	8007466 <SendControllerData+0x36>
    {
        if((data >> i) & 1)
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	fa22 f303 	lsr.w	r3, r2, r3
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <SendControllerData+0x2c>
        {
            write_1();
 8007456:	f7ff ff83 	bl	8007360 <write_1>
 800745a:	e001      	b.n	8007460 <SendControllerData+0x30>
        }
        else
        {
            write_0();
 800745c:	f7ff ff94 	bl	8007388 <write_0>
    for(unsigned int i = 0;i < size;i++)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3301      	adds	r3, #1
 8007464:	60fb      	str	r3, [r7, #12]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	429a      	cmp	r2, r3
 800746c:	d3eb      	bcc.n	8007446 <SendControllerData+0x16>
        }
    }

    SendStop();
 800746e:	f7ff ff9f 	bl	80073b0 <SendStop>
}
 8007472:	bf00      	nop
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20000144 	.word	0x20000144

08007480 <GetMiddleOfPulse>:

// 0 is 3 microseconds low followed by 1 microsecond high
// 1 is 1 microsecond low followed by 3 microseconds high
unsigned int GetMiddleOfPulse()
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
    // wait for line to go high
    while(1)
    {
        if(GPIOA->IDR & 0x0100) break;
 8007484:	4b0d      	ldr	r3, [pc, #52]	; (80074bc <GetMiddleOfPulse+0x3c>)
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0f9      	beq.n	8007484 <GetMiddleOfPulse+0x4>
    }

    // wait for line to go low
    while(1)
    {
        if(!(GPIOA->IDR & 0x0100)) break;
 8007490:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <GetMiddleOfPulse+0x3c>)
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007498:	2b00      	cmp	r3, #0
 800749a:	d000      	beq.n	800749e <GetMiddleOfPulse+0x1e>
 800749c:	e7f8      	b.n	8007490 <GetMiddleOfPulse+0x10>
 800749e:	bf00      	nop
    }

    // now we have the falling edge

    // wait 2 microseconds to be in the middle of the pulse, and read. high --> 1.  low --> 0.
    my_wait_us_asm(2);
 80074a0:	2002      	movs	r0, #2
 80074a2:	f7f8 feb5 	bl	8000210 <my_wait_us_asm>

    return (GPIOA->IDR & 0x0100) ? 1U : 0U;
 80074a6:	4b05      	ldr	r3, [pc, #20]	; (80074bc <GetMiddleOfPulse+0x3c>)
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <GetMiddleOfPulse+0x36>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <GetMiddleOfPulse+0x38>
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	40020000 	.word	0x40020000

080074c0 <readCommand>:

// continuously read bits until at least 9 are read, confirm valid command, return without stop bit
unsigned int readCommand()
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
	// we are already at the first falling edge
	// get middle of first pulse, 2us later
	my_wait_us_asm(2);
 80074c6:	2002      	movs	r0, #2
 80074c8:	f7f8 fea2 	bl	8000210 <my_wait_us_asm>
    unsigned int command = (GPIOA->IDR & 0x0100) ? 1U : 0U, bits_read = 1;
 80074cc:	4b11      	ldr	r3, [pc, #68]	; (8007514 <readCommand+0x54>)
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <readCommand+0x1c>
 80074d8:	2301      	movs	r3, #1
 80074da:	e000      	b.n	80074de <readCommand+0x1e>
 80074dc:	2300      	movs	r3, #0
 80074de:	607b      	str	r3, [r7, #4]
 80074e0:	2301      	movs	r3, #1
 80074e2:	603b      	str	r3, [r7, #0]

    while(1) // read at least 9 bits (2 bytes + stop bit)
    {
        command = command << 1; // make room for the new bit
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	005b      	lsls	r3, r3, #1
 80074e8:	607b      	str	r3, [r7, #4]
        command += GetMiddleOfPulse();
 80074ea:	f7ff ffc9 	bl	8007480 <GetMiddleOfPulse>
 80074ee:	4602      	mov	r2, r0
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4413      	add	r3, r2
 80074f4:	607b      	str	r3, [r7, #4]

        bits_read++;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	3301      	adds	r3, #1
 80074fa:	603b      	str	r3, [r7, #0]

        if(bits_read >= 9) // only consider when at least a whole command's length has been read
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	2b08      	cmp	r3, #8
 8007500:	d9f0      	bls.n	80074e4 <readCommand+0x24>
        {
        	command = command >> 1; // get rid of the stop bit (which is always a 1)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	085b      	lsrs	r3, r3, #1
 8007506:	607b      	str	r3, [r7, #4]
        	return command;
 8007508:	687b      	ldr	r3, [r7, #4]
        }
    }
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	40020000 	.word	0x40020000

08007518 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  memset(&n64_data,0,4); // clear controller state
 800751c:	2204      	movs	r2, #4
 800751e:	2100      	movs	r1, #0
 8007520:	4807      	ldr	r0, [pc, #28]	; (8007540 <main+0x28>)
 8007522:	f000 fdef 	bl	8008104 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007526:	f7f9 f8db 	bl	80006e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800752a:	f000 f80b 	bl	8007544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800752e:	f000 f8cd 	bl	80076cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8007532:	f000 f89d 	bl	8007670 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8007536:	f000 fa95 	bl	8007a64 <MX_USB_HOST_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800753a:	f000 faa9 	bl	8007a90 <MX_USB_HOST_Process>
 800753e:	e7fc      	b.n	800753a <main+0x22>
 8007540:	20000144 	.word	0x20000144

08007544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b0ac      	sub	sp, #176	; 0xb0
 8007548:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800754a:	2300      	movs	r3, #0
 800754c:	60bb      	str	r3, [r7, #8]
 800754e:	4a44      	ldr	r2, [pc, #272]	; (8007660 <SystemClock_Config+0x11c>)
 8007550:	4b43      	ldr	r3, [pc, #268]	; (8007660 <SystemClock_Config+0x11c>)
 8007552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007558:	6413      	str	r3, [r2, #64]	; 0x40
 800755a:	4b41      	ldr	r3, [pc, #260]	; (8007660 <SystemClock_Config+0x11c>)
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007562:	60bb      	str	r3, [r7, #8]
 8007564:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8007566:	2300      	movs	r3, #0
 8007568:	607b      	str	r3, [r7, #4]
 800756a:	4a3e      	ldr	r2, [pc, #248]	; (8007664 <SystemClock_Config+0x120>)
 800756c:	4b3d      	ldr	r3, [pc, #244]	; (8007664 <SystemClock_Config+0x120>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007578:	6013      	str	r3, [r2, #0]
 800757a:	4b3a      	ldr	r3, [pc, #232]	; (8007664 <SystemClock_Config+0x120>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007582:	607b      	str	r3, [r7, #4]
 8007584:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007586:	2301      	movs	r3, #1
 8007588:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800758a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800758e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007592:	2302      	movs	r3, #2
 8007594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007598:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800759c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80075a0:	2304      	movs	r3, #4
 80075a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80075a6:	2348      	movs	r3, #72	; 0x48
 80075a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80075ac:	2302      	movs	r3, #2
 80075ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80075b2:	2303      	movs	r3, #3
 80075b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80075b8:	2302      	movs	r3, #2
 80075ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80075be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fb fdc0 	bl	8003148 <HAL_RCC_OscConfig>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d004      	beq.n	80075d8 <SystemClock_Config+0x94>
  {
    _Error_Handler(__FILE__, __LINE__);
 80075ce:	f240 112f 	movw	r1, #303	; 0x12f
 80075d2:	4825      	ldr	r0, [pc, #148]	; (8007668 <SystemClock_Config+0x124>)
 80075d4:	f000 f94e 	bl	8007874 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80075d8:	230f      	movs	r3, #15
 80075da:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80075dc:	2302      	movs	r3, #2
 80075de:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80075e0:	2300      	movs	r3, #0
 80075e2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80075e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075e8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80075ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075ee:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80075f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80075f4:	2102      	movs	r1, #2
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fa ffb0 	bl	800255c <HAL_RCC_ClockConfig>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d004      	beq.n	800760c <SystemClock_Config+0xc8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007602:	f240 113d 	movw	r1, #317	; 0x13d
 8007606:	4818      	ldr	r0, [pc, #96]	; (8007668 <SystemClock_Config+0x124>)
 8007608:	f000 f934 	bl	8007874 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800760c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007610:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007612:	2300      	movs	r3, #0
 8007614:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007616:	f107 030c 	add.w	r3, r7, #12
 800761a:	4618      	mov	r0, r3
 800761c:	f7fb f8b4 	bl	8002788 <HAL_RCCEx_PeriphCLKConfig>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d004      	beq.n	8007630 <SystemClock_Config+0xec>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007626:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800762a:	480f      	ldr	r0, [pc, #60]	; (8007668 <SystemClock_Config+0x124>)
 800762c:	f000 f922 	bl	8007874 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8007630:	f7fb f876 	bl	8002720 <HAL_RCC_GetHCLKFreq>
 8007634:	4602      	mov	r2, r0
 8007636:	4b0d      	ldr	r3, [pc, #52]	; (800766c <SystemClock_Config+0x128>)
 8007638:	fba3 2302 	umull	r2, r3, r3, r2
 800763c:	099b      	lsrs	r3, r3, #6
 800763e:	4618      	mov	r0, r3
 8007640:	f7f9 f9e1 	bl	8000a06 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8007644:	2004      	movs	r0, #4
 8007646:	f7f9 f9eb 	bl	8000a20 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800764a:	2200      	movs	r2, #0
 800764c:	2100      	movs	r1, #0
 800764e:	f04f 30ff 	mov.w	r0, #4294967295
 8007652:	f7f9 f9ae 	bl	80009b2 <HAL_NVIC_SetPriority>
}
 8007656:	bf00      	nop
 8007658:	37b0      	adds	r7, #176	; 0xb0
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	40023800 	.word	0x40023800
 8007664:	40007000 	.word	0x40007000
 8007668:	08009350 	.word	0x08009350
 800766c:	10624dd3 	.word	0x10624dd3

08007670 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8007674:	4b12      	ldr	r3, [pc, #72]	; (80076c0 <MX_USART2_UART_Init+0x50>)
 8007676:	4a13      	ldr	r2, [pc, #76]	; (80076c4 <MX_USART2_UART_Init+0x54>)
 8007678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800767a:	4b11      	ldr	r3, [pc, #68]	; (80076c0 <MX_USART2_UART_Init+0x50>)
 800767c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007682:	4b0f      	ldr	r3, [pc, #60]	; (80076c0 <MX_USART2_UART_Init+0x50>)
 8007684:	2200      	movs	r2, #0
 8007686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007688:	4b0d      	ldr	r3, [pc, #52]	; (80076c0 <MX_USART2_UART_Init+0x50>)
 800768a:	2200      	movs	r2, #0
 800768c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800768e:	4b0c      	ldr	r3, [pc, #48]	; (80076c0 <MX_USART2_UART_Init+0x50>)
 8007690:	2200      	movs	r2, #0
 8007692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007694:	4b0a      	ldr	r3, [pc, #40]	; (80076c0 <MX_USART2_UART_Init+0x50>)
 8007696:	220c      	movs	r2, #12
 8007698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800769a:	4b09      	ldr	r3, [pc, #36]	; (80076c0 <MX_USART2_UART_Init+0x50>)
 800769c:	2200      	movs	r2, #0
 800769e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80076a0:	4b07      	ldr	r3, [pc, #28]	; (80076c0 <MX_USART2_UART_Init+0x50>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80076a6:	4806      	ldr	r0, [pc, #24]	; (80076c0 <MX_USART2_UART_Init+0x50>)
 80076a8:	f7fb ffa8 	bl	80035fc <HAL_UART_Init>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d004      	beq.n	80076bc <MX_USART2_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80076b2:	f240 1161 	movw	r1, #353	; 0x161
 80076b6:	4804      	ldr	r0, [pc, #16]	; (80076c8 <MX_USART2_UART_Init+0x58>)
 80076b8:	f000 f8dc 	bl	8007874 <_Error_Handler>
  }

}
 80076bc:	bf00      	nop
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	20000148 	.word	0x20000148
 80076c4:	40004400 	.word	0x40004400
 80076c8:	08009350 	.word	0x08009350

080076cc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
static void MX_GPIO_Init(void)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08a      	sub	sp, #40	; 0x28
 80076d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076d2:	2300      	movs	r3, #0
 80076d4:	613b      	str	r3, [r7, #16]
 80076d6:	4a61      	ldr	r2, [pc, #388]	; (800785c <MX_GPIO_Init+0x190>)
 80076d8:	4b60      	ldr	r3, [pc, #384]	; (800785c <MX_GPIO_Init+0x190>)
 80076da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076dc:	f043 0304 	orr.w	r3, r3, #4
 80076e0:	6313      	str	r3, [r2, #48]	; 0x30
 80076e2:	4b5e      	ldr	r3, [pc, #376]	; (800785c <MX_GPIO_Init+0x190>)
 80076e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e6:	f003 0304 	and.w	r3, r3, #4
 80076ea:	613b      	str	r3, [r7, #16]
 80076ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]
 80076f2:	4a5a      	ldr	r2, [pc, #360]	; (800785c <MX_GPIO_Init+0x190>)
 80076f4:	4b59      	ldr	r3, [pc, #356]	; (800785c <MX_GPIO_Init+0x190>)
 80076f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076fc:	6313      	str	r3, [r2, #48]	; 0x30
 80076fe:	4b57      	ldr	r3, [pc, #348]	; (800785c <MX_GPIO_Init+0x190>)
 8007700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800770a:	2300      	movs	r3, #0
 800770c:	60bb      	str	r3, [r7, #8]
 800770e:	4a53      	ldr	r2, [pc, #332]	; (800785c <MX_GPIO_Init+0x190>)
 8007710:	4b52      	ldr	r3, [pc, #328]	; (800785c <MX_GPIO_Init+0x190>)
 8007712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007714:	f043 0301 	orr.w	r3, r3, #1
 8007718:	6313      	str	r3, [r2, #48]	; 0x30
 800771a:	4b50      	ldr	r3, [pc, #320]	; (800785c <MX_GPIO_Init+0x190>)
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	60bb      	str	r3, [r7, #8]
 8007724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007726:	2300      	movs	r3, #0
 8007728:	607b      	str	r3, [r7, #4]
 800772a:	4a4c      	ldr	r2, [pc, #304]	; (800785c <MX_GPIO_Init+0x190>)
 800772c:	4b4b      	ldr	r3, [pc, #300]	; (800785c <MX_GPIO_Init+0x190>)
 800772e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007730:	f043 0302 	orr.w	r3, r3, #2
 8007734:	6313      	str	r3, [r2, #48]	; 0x30
 8007736:	4b49      	ldr	r3, [pc, #292]	; (800785c <MX_GPIO_Init+0x190>)
 8007738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	607b      	str	r3, [r7, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007742:	2300      	movs	r3, #0
 8007744:	603b      	str	r3, [r7, #0]
 8007746:	4a45      	ldr	r2, [pc, #276]	; (800785c <MX_GPIO_Init+0x190>)
 8007748:	4b44      	ldr	r3, [pc, #272]	; (800785c <MX_GPIO_Init+0x190>)
 800774a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774c:	f043 0308 	orr.w	r3, r3, #8
 8007750:	6313      	str	r3, [r2, #48]	; 0x30
 8007752:	4b42      	ldr	r3, [pc, #264]	; (800785c <MX_GPIO_Init+0x190>)
 8007754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007756:	f003 0308 	and.w	r3, r3, #8
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800775e:	2200      	movs	r2, #0
 8007760:	2120      	movs	r1, #32
 8007762:	483f      	ldr	r0, [pc, #252]	; (8007860 <MX_GPIO_Init+0x194>)
 8007764:	f7f9 fb18 	bl	8000d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8007768:	2200      	movs	r2, #0
 800776a:	2140      	movs	r1, #64	; 0x40
 800776c:	483d      	ldr	r0, [pc, #244]	; (8007864 <MX_GPIO_Init+0x198>)
 800776e:	f7f9 fb13 	bl	8000d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8007772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007778:	4b3b      	ldr	r3, [pc, #236]	; (8007868 <MX_GPIO_Init+0x19c>)
 800777a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800777c:	2300      	movs	r3, #0
 800777e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007780:	f107 0314 	add.w	r3, r7, #20
 8007784:	4619      	mov	r1, r3
 8007786:	4837      	ldr	r0, [pc, #220]	; (8007864 <MX_GPIO_Init+0x198>)
 8007788:	f7f9 f974 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800778c:	f641 73bf 	movw	r3, #8127	; 0x1fbf
 8007790:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007792:	2303      	movs	r3, #3
 8007794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007796:	2300      	movs	r3, #0
 8007798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800779a:	f107 0314 	add.w	r3, r7, #20
 800779e:	4619      	mov	r1, r3
 80077a0:	4830      	ldr	r0, [pc, #192]	; (8007864 <MX_GPIO_Init+0x198>)
 80077a2:	f7f9 f967 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6 
                           PA7 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 80077a6:	f248 43d3 	movw	r3, #34003	; 0x84d3
 80077aa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80077ac:	2303      	movs	r3, #3
 80077ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077b0:	2300      	movs	r3, #0
 80077b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077b4:	f107 0314 	add.w	r3, r7, #20
 80077b8:	4619      	mov	r1, r3
 80077ba:	4829      	ldr	r0, [pc, #164]	; (8007860 <MX_GPIO_Init+0x194>)
 80077bc:	f7f9 f95a 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80077c0:	2320      	movs	r3, #32
 80077c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077c4:	2301      	movs	r3, #1
 80077c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077c8:	2300      	movs	r3, #0
 80077ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077cc:	2300      	movs	r3, #0
 80077ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80077d0:	f107 0314 	add.w	r3, r7, #20
 80077d4:	4619      	mov	r1, r3
 80077d6:	4822      	ldr	r0, [pc, #136]	; (8007860 <MX_GPIO_Init+0x194>)
 80077d8:	f7f9 f94c 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB12 PB13 PB14 PB15 
                           PB4 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80077dc:	f24f 73f7 	movw	r3, #63479	; 0xf7f7
 80077e0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80077e2:	2303      	movs	r3, #3
 80077e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077ea:	f107 0314 	add.w	r3, r7, #20
 80077ee:	4619      	mov	r1, r3
 80077f0:	481e      	ldr	r0, [pc, #120]	; (800786c <MX_GPIO_Init+0x1a0>)
 80077f2:	f7f9 f93f 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80077f6:	2340      	movs	r3, #64	; 0x40
 80077f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077fa:	2301      	movs	r3, #1
 80077fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077fe:	2300      	movs	r3, #0
 8007800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007802:	2303      	movs	r3, #3
 8007804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007806:	f107 0314 	add.w	r3, r7, #20
 800780a:	4619      	mov	r1, r3
 800780c:	4815      	ldr	r0, [pc, #84]	; (8007864 <MX_GPIO_Init+0x198>)
 800780e:	f7f9 f931 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : N64_DATA_Pin */
  GPIO_InitStruct.Pin = N64_DATA_Pin;
 8007812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007818:	4b13      	ldr	r3, [pc, #76]	; (8007868 <MX_GPIO_Init+0x19c>)
 800781a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800781c:	2300      	movs	r3, #0
 800781e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(N64_DATA_GPIO_Port, &GPIO_InitStruct);
 8007820:	f107 0314 	add.w	r3, r7, #20
 8007824:	4619      	mov	r1, r3
 8007826:	480e      	ldr	r0, [pc, #56]	; (8007860 <MX_GPIO_Init+0x194>)
 8007828:	f7f9 f924 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800782c:	2304      	movs	r3, #4
 800782e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007830:	2303      	movs	r3, #3
 8007832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007834:	2300      	movs	r3, #0
 8007836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007838:	f107 0314 	add.w	r3, r7, #20
 800783c:	4619      	mov	r1, r3
 800783e:	480c      	ldr	r0, [pc, #48]	; (8007870 <MX_GPIO_Init+0x1a4>)
 8007840:	f7f9 f918 	bl	8000a74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8007844:	2200      	movs	r2, #0
 8007846:	2100      	movs	r1, #0
 8007848:	2017      	movs	r0, #23
 800784a:	f7f9 f8b2 	bl	80009b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800784e:	2017      	movs	r0, #23
 8007850:	f7f9 f8cb 	bl	80009ea <HAL_NVIC_EnableIRQ>

}
 8007854:	bf00      	nop
 8007856:	3728      	adds	r7, #40	; 0x28
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	40023800 	.word	0x40023800
 8007860:	40020000 	.word	0x40020000
 8007864:	40020800 	.word	0x40020800
 8007868:	10210000 	.word	0x10210000
 800786c:	40020400 	.word	0x40020400
 8007870:	40020c00 	.word	0x40020c00

08007874 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800787e:	e7fe      	b.n	800787e <_Error_Handler+0xa>

08007880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007886:	2300      	movs	r3, #0
 8007888:	607b      	str	r3, [r7, #4]
 800788a:	4a25      	ldr	r2, [pc, #148]	; (8007920 <HAL_MspInit+0xa0>)
 800788c:	4b24      	ldr	r3, [pc, #144]	; (8007920 <HAL_MspInit+0xa0>)
 800788e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007894:	6453      	str	r3, [r2, #68]	; 0x44
 8007896:	4b22      	ldr	r3, [pc, #136]	; (8007920 <HAL_MspInit+0xa0>)
 8007898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800789e:	607b      	str	r3, [r7, #4]
 80078a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80078a2:	2300      	movs	r3, #0
 80078a4:	603b      	str	r3, [r7, #0]
 80078a6:	4a1e      	ldr	r2, [pc, #120]	; (8007920 <HAL_MspInit+0xa0>)
 80078a8:	4b1d      	ldr	r3, [pc, #116]	; (8007920 <HAL_MspInit+0xa0>)
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078b0:	6413      	str	r3, [r2, #64]	; 0x40
 80078b2:	4b1b      	ldr	r3, [pc, #108]	; (8007920 <HAL_MspInit+0xa0>)
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ba:	603b      	str	r3, [r7, #0]
 80078bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80078be:	2003      	movs	r0, #3
 80078c0:	f7f9 f86c 	bl	800099c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80078c4:	2200      	movs	r2, #0
 80078c6:	2100      	movs	r1, #0
 80078c8:	f06f 000b 	mvn.w	r0, #11
 80078cc:	f7f9 f871 	bl	80009b2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80078d0:	2200      	movs	r2, #0
 80078d2:	2100      	movs	r1, #0
 80078d4:	f06f 000a 	mvn.w	r0, #10
 80078d8:	f7f9 f86b 	bl	80009b2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80078dc:	2200      	movs	r2, #0
 80078de:	2100      	movs	r1, #0
 80078e0:	f06f 0009 	mvn.w	r0, #9
 80078e4:	f7f9 f865 	bl	80009b2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80078e8:	2200      	movs	r2, #0
 80078ea:	2100      	movs	r1, #0
 80078ec:	f06f 0004 	mvn.w	r0, #4
 80078f0:	f7f9 f85f 	bl	80009b2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80078f4:	2200      	movs	r2, #0
 80078f6:	2100      	movs	r1, #0
 80078f8:	f06f 0003 	mvn.w	r0, #3
 80078fc:	f7f9 f859 	bl	80009b2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8007900:	2200      	movs	r2, #0
 8007902:	2100      	movs	r1, #0
 8007904:	f06f 0001 	mvn.w	r0, #1
 8007908:	f7f9 f853 	bl	80009b2 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800790c:	2200      	movs	r2, #0
 800790e:	2100      	movs	r1, #0
 8007910:	f04f 30ff 	mov.w	r0, #4294967295
 8007914:	f7f9 f84d 	bl	80009b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007918:	bf00      	nop
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	40023800 	.word	0x40023800

08007924 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a12      	ldr	r2, [pc, #72]	; (800797c <HAL_UART_MspInit+0x58>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d11d      	bne.n	8007972 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007936:	2300      	movs	r3, #0
 8007938:	60bb      	str	r3, [r7, #8]
 800793a:	4a11      	ldr	r2, [pc, #68]	; (8007980 <HAL_UART_MspInit+0x5c>)
 800793c:	4b10      	ldr	r3, [pc, #64]	; (8007980 <HAL_UART_MspInit+0x5c>)
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007944:	6413      	str	r3, [r2, #64]	; 0x40
 8007946:	4b0e      	ldr	r3, [pc, #56]	; (8007980 <HAL_UART_MspInit+0x5c>)
 8007948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800794e:	60bb      	str	r3, [r7, #8]
 8007950:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007952:	230c      	movs	r3, #12
 8007954:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007956:	2302      	movs	r3, #2
 8007958:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800795a:	2301      	movs	r3, #1
 800795c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800795e:	2303      	movs	r3, #3
 8007960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007962:	2307      	movs	r3, #7
 8007964:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007966:	f107 030c 	add.w	r3, r7, #12
 800796a:	4619      	mov	r1, r3
 800796c:	4805      	ldr	r0, [pc, #20]	; (8007984 <HAL_UART_MspInit+0x60>)
 800796e:	f7f9 f881 	bl	8000a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007972:	bf00      	nop
 8007974:	3720      	adds	r7, #32
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	40004400 	.word	0x40004400
 8007980:	40023800 	.word	0x40023800
 8007984:	40020000 	.word	0x40020000

08007988 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800798c:	f7f8 fefa 	bl	8000784 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8007990:	f7f9 f862 	bl	8000a58 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007994:	bf00      	nop
 8007996:	bd80      	pop	{r7, pc}

08007998 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Read 64 command
	unsigned int cmd = readCommand();
 800799e:	f7ff fd8f 	bl	80074c0 <readCommand>
 80079a2:	6078      	str	r0, [r7, #4]

	my_wait_us_asm(2); // wait a small amount of time before replying
 80079a4:	2002      	movs	r0, #2
 80079a6:	f7f8 fc33 	bl	8000210 <my_wait_us_asm>

	//-------- SEND RESPONSE
	SetN64DataOutputMode();
 80079aa:	f7ff fcc3 	bl	8007334 <SetN64DataOutputMode>

	switch(cmd)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d00a      	beq.n	80079ca <EXTI9_5_IRQHandler+0x32>
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d302      	bcc.n	80079be <EXTI9_5_IRQHandler+0x26>
 80079b8:	2bff      	cmp	r3, #255	; 0xff
 80079ba:	d003      	beq.n	80079c4 <EXTI9_5_IRQHandler+0x2c>
	  case 0x01: // poll for state
		  SendControllerData();
		  break;
	  default:
		  // we do not process the read and write commands (memory pack)
		  break;
 80079bc:	e008      	b.n	80079d0 <EXTI9_5_IRQHandler+0x38>
		  SendIdentity();
 80079be:	f7ff fd28 	bl	8007412 <SendIdentity>
		  break;
 80079c2:	e005      	b.n	80079d0 <EXTI9_5_IRQHandler+0x38>
		  SendIdentity();
 80079c4:	f7ff fd25 	bl	8007412 <SendIdentity>
		  break;
 80079c8:	e002      	b.n	80079d0 <EXTI9_5_IRQHandler+0x38>
		  SendControllerData();
 80079ca:	f7ff fd31 	bl	8007430 <SendControllerData>
		  break;
 80079ce:	bf00      	nop
	}
	//-------- DONE SENDING RESPOSE

	SetN64DataInputMode();
 80079d0:	f7ff fc9a 	bl	8007308 <SetN64DataInputMode>

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80079d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80079d8:	f7f9 f9f8 	bl	8000dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80079dc:	bf00      	nop
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80079e8:	4802      	ldr	r0, [pc, #8]	; (80079f4 <OTG_FS_IRQHandler+0x10>)
 80079ea:	f7f9 fc9b 	bl	8001324 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80079ee:	bf00      	nop
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20000554 	.word	0x20000554

080079f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80079fc:	4a16      	ldr	r2, [pc, #88]	; (8007a58 <SystemInit+0x60>)
 80079fe:	4b16      	ldr	r3, [pc, #88]	; (8007a58 <SystemInit+0x60>)
 8007a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007a0c:	4a13      	ldr	r2, [pc, #76]	; (8007a5c <SystemInit+0x64>)
 8007a0e:	4b13      	ldr	r3, [pc, #76]	; (8007a5c <SystemInit+0x64>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f043 0301 	orr.w	r3, r3, #1
 8007a16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007a18:	4b10      	ldr	r3, [pc, #64]	; (8007a5c <SystemInit+0x64>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007a1e:	4a0f      	ldr	r2, [pc, #60]	; (8007a5c <SystemInit+0x64>)
 8007a20:	4b0e      	ldr	r3, [pc, #56]	; (8007a5c <SystemInit+0x64>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007a2e:	4b0b      	ldr	r3, [pc, #44]	; (8007a5c <SystemInit+0x64>)
 8007a30:	4a0b      	ldr	r2, [pc, #44]	; (8007a60 <SystemInit+0x68>)
 8007a32:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007a34:	4a09      	ldr	r2, [pc, #36]	; (8007a5c <SystemInit+0x64>)
 8007a36:	4b09      	ldr	r3, [pc, #36]	; (8007a5c <SystemInit+0x64>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007a40:	4b06      	ldr	r3, [pc, #24]	; (8007a5c <SystemInit+0x64>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007a46:	4b04      	ldr	r3, [pc, #16]	; (8007a58 <SystemInit+0x60>)
 8007a48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a4c:	609a      	str	r2, [r3, #8]
#endif
}
 8007a4e:	bf00      	nop
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	e000ed00 	.word	0xe000ed00
 8007a5c:	40023800 	.word	0x40023800
 8007a60:	24003010 	.word	0x24003010

08007a64 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 8007a68:	2201      	movs	r2, #1
 8007a6a:	4906      	ldr	r1, [pc, #24]	; (8007a84 <MX_USB_HOST_Init+0x20>)
 8007a6c:	4806      	ldr	r0, [pc, #24]	; (8007a88 <MX_USB_HOST_Init+0x24>)
 8007a6e:	f7fe f949 	bl	8005d04 <USBH_Init>

  USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS);
 8007a72:	4906      	ldr	r1, [pc, #24]	; (8007a8c <MX_USB_HOST_Init+0x28>)
 8007a74:	4804      	ldr	r0, [pc, #16]	; (8007a88 <MX_USB_HOST_Init+0x24>)
 8007a76:	f7fe f9c7 	bl	8005e08 <USBH_RegisterClass>

  USBH_Start(&hUsbHostFS);
 8007a7a:	4803      	ldr	r0, [pc, #12]	; (8007a88 <MX_USB_HOST_Init+0x24>)
 8007a7c:	f7fe fab7 	bl	8005fee <USBH_Start>

  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007a80:	bf00      	nop
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	08007aa5 	.word	0x08007aa5
 8007a88:	20000188 	.word	0x20000188
 8007a8c:	20000008 	.word	0x20000008

08007a90 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007a94:	4802      	ldr	r0, [pc, #8]	; (8007aa0 <MX_USB_HOST_Process+0x10>)
 8007a96:	f7fe fabb 	bl	8006010 <USBH_Process>
}
 8007a9a:	bf00      	nop
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000188 	.word	0x20000188

08007aa4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	460b      	mov	r3, r1
 8007aae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007ab0:	78fb      	ldrb	r3, [r7, #3]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	d819      	bhi.n	8007aec <USBH_UserProcess+0x48>
 8007ab8:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <USBH_UserProcess+0x1c>)
 8007aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abe:	bf00      	nop
 8007ac0:	08007aed 	.word	0x08007aed
 8007ac4:	08007add 	.word	0x08007add
 8007ac8:	08007aed 	.word	0x08007aed
 8007acc:	08007ae5 	.word	0x08007ae5
 8007ad0:	08007ad5 	.word	0x08007ad5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007ad4:	4b09      	ldr	r3, [pc, #36]	; (8007afc <USBH_UserProcess+0x58>)
 8007ad6:	2203      	movs	r2, #3
 8007ad8:	701a      	strb	r2, [r3, #0]
  break;
 8007ada:	e008      	b.n	8007aee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007adc:	4b07      	ldr	r3, [pc, #28]	; (8007afc <USBH_UserProcess+0x58>)
 8007ade:	2202      	movs	r2, #2
 8007ae0:	701a      	strb	r2, [r3, #0]
  break;
 8007ae2:	e004      	b.n	8007aee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007ae4:	4b05      	ldr	r3, [pc, #20]	; (8007afc <USBH_UserProcess+0x58>)
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	701a      	strb	r2, [r3, #0]
  break;
 8007aea:	e000      	b.n	8007aee <USBH_UserProcess+0x4a>

  default:
  break;
 8007aec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	200000ac 	.word	0x200000ac

08007b00 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b088      	sub	sp, #32
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b10:	d139      	bne.n	8007b86 <HAL_HCD_MspInit+0x86>
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b20:	f107 030c 	add.w	r3, r7, #12
 8007b24:	4619      	mov	r1, r3
 8007b26:	481a      	ldr	r0, [pc, #104]	; (8007b90 <HAL_HCD_MspInit+0x90>)
 8007b28:	f7f8 ffa4 	bl	8000a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b2c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007b30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b32:	2302      	movs	r3, #2
 8007b34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b36:	2300      	movs	r3, #0
 8007b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b3e:	230a      	movs	r3, #10
 8007b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b42:	f107 030c 	add.w	r3, r7, #12
 8007b46:	4619      	mov	r1, r3
 8007b48:	4811      	ldr	r0, [pc, #68]	; (8007b90 <HAL_HCD_MspInit+0x90>)
 8007b4a:	f7f8 ff93 	bl	8000a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b4e:	4a11      	ldr	r2, [pc, #68]	; (8007b94 <HAL_HCD_MspInit+0x94>)
 8007b50:	4b10      	ldr	r3, [pc, #64]	; (8007b94 <HAL_HCD_MspInit+0x94>)
 8007b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b58:	6353      	str	r3, [r2, #52]	; 0x34
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60bb      	str	r3, [r7, #8]
 8007b5e:	4a0d      	ldr	r2, [pc, #52]	; (8007b94 <HAL_HCD_MspInit+0x94>)
 8007b60:	4b0c      	ldr	r3, [pc, #48]	; (8007b94 <HAL_HCD_MspInit+0x94>)
 8007b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b68:	6453      	str	r3, [r2, #68]	; 0x44
 8007b6a:	4b0a      	ldr	r3, [pc, #40]	; (8007b94 <HAL_HCD_MspInit+0x94>)
 8007b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b72:	60bb      	str	r3, [r7, #8]
 8007b74:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 8007b76:	2200      	movs	r2, #0
 8007b78:	2102      	movs	r1, #2
 8007b7a:	2043      	movs	r0, #67	; 0x43
 8007b7c:	f7f8 ff19 	bl	80009b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b80:	2043      	movs	r0, #67	; 0x43
 8007b82:	f7f8 ff32 	bl	80009ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b86:	bf00      	nop
 8007b88:	3720      	adds	r7, #32
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	40020000 	.word	0x40020000
 8007b94:	40023800 	.word	0x40023800

08007b98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe fd5f 	bl	800666a <USBH_LL_IncTimer>
}
 8007bac:	bf00      	nop
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fe fd7b 	bl	80066be <USBH_LL_Connect>
}
 8007bc8:	bf00      	nop
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fe fd94 	bl	800670c <USBH_LL_Disconnect>
}
 8007be4:	bf00      	nop
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	70fb      	strb	r3, [r7, #3]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d12c      	bne.n	8007c74 <USBH_LL_Init+0x6c>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007c1a:	4a19      	ldr	r2, [pc, #100]	; (8007c80 <USBH_LL_Init+0x78>)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  phost->pData = &hhcd_USB_OTG_FS;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a16      	ldr	r2, [pc, #88]	; (8007c80 <USBH_LL_Init+0x78>)
 8007c26:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c2a:	4b15      	ldr	r3, [pc, #84]	; (8007c80 <USBH_LL_Init+0x78>)
 8007c2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007c30:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007c32:	4b13      	ldr	r3, [pc, #76]	; (8007c80 <USBH_LL_Init+0x78>)
 8007c34:	2208      	movs	r2, #8
 8007c36:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007c38:	4b11      	ldr	r3, [pc, #68]	; (8007c80 <USBH_LL_Init+0x78>)
 8007c3a:	2203      	movs	r2, #3
 8007c3c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c3e:	4b10      	ldr	r3, [pc, #64]	; (8007c80 <USBH_LL_Init+0x78>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007c44:	4b0e      	ldr	r3, [pc, #56]	; (8007c80 <USBH_LL_Init+0x78>)
 8007c46:	2202      	movs	r2, #2
 8007c48:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c4a:	4b0d      	ldr	r3, [pc, #52]	; (8007c80 <USBH_LL_Init+0x78>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007c50:	480b      	ldr	r0, [pc, #44]	; (8007c80 <USBH_LL_Init+0x78>)
 8007c52:	f7f9 f8de 	bl	8000e12 <HAL_HCD_Init>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <USBH_LL_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007c5c:	21df      	movs	r1, #223	; 0xdf
 8007c5e:	4809      	ldr	r0, [pc, #36]	; (8007c84 <USBH_LL_Init+0x7c>)
 8007c60:	f7ff fe08 	bl	8007874 <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007c64:	4806      	ldr	r0, [pc, #24]	; (8007c80 <USBH_LL_Init+0x78>)
 8007c66:	f7f9 fcc0 	bl	80015ea <HAL_HCD_GetCurrentFrame>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7fe fcec 	bl	800664c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	20000554 	.word	0x20000554
 8007c84:	08009360 	.word	0x08009360

08007c88 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c94:	2300      	movs	r3, #0
 8007c96:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Start(phost->pData);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7f9 fc40 	bl	8001524 <HAL_HCD_Start>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d816      	bhi.n	8007cdc <USBH_LL_Start+0x54>
 8007cae:	a201      	add	r2, pc, #4	; (adr r2, 8007cb4 <USBH_LL_Start+0x2c>)
 8007cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb4:	08007cc5 	.word	0x08007cc5
 8007cb8:	08007ccb 	.word	0x08007ccb
 8007cbc:	08007cd1 	.word	0x08007cd1
 8007cc0:	08007cd7 	.word	0x08007cd7
    case HAL_OK :
      usb_status = USBH_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8007cc8:	e00b      	b.n	8007ce2 <USBH_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007cca:	2302      	movs	r3, #2
 8007ccc:	73fb      	strb	r3, [r7, #15]
    break;
 8007cce:	e008      	b.n	8007ce2 <USBH_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8007cd4:	e005      	b.n	8007ce2 <USBH_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	73fb      	strb	r3, [r7, #15]
    break;
 8007cda:	e002      	b.n	8007ce2 <USBH_LL_Start+0x5a>
    default :
      usb_status = USBH_FAIL;
 8007cdc:	2302      	movs	r3, #2
 8007cde:	73fb      	strb	r3, [r7, #15]
    break;
 8007ce0:	bf00      	nop
  }
  return usb_status;
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7f9 fc31 	bl	800156a <HAL_HCD_Stop>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d816      	bhi.n	8007d40 <USBH_LL_Stop+0x54>
 8007d12:	a201      	add	r2, pc, #4	; (adr r2, 8007d18 <USBH_LL_Stop+0x2c>)
 8007d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d18:	08007d29 	.word	0x08007d29
 8007d1c:	08007d2f 	.word	0x08007d2f
 8007d20:	08007d35 	.word	0x08007d35
 8007d24:	08007d3b 	.word	0x08007d3b
    case HAL_OK :
      usb_status = USBH_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d2c:	e00b      	b.n	8007d46 <USBH_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007d2e:	2302      	movs	r3, #2
 8007d30:	73fb      	strb	r3, [r7, #15]
    break;
 8007d32:	e008      	b.n	8007d46 <USBH_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007d34:	2301      	movs	r3, #1
 8007d36:	73fb      	strb	r3, [r7, #15]
    break;
 8007d38:	e005      	b.n	8007d46 <USBH_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d3e:	e002      	b.n	8007d46 <USBH_LL_Stop+0x5a>
    default :
      usb_status = USBH_FAIL;
 8007d40:	2302      	movs	r3, #2
 8007d42:	73fb      	strb	r3, [r7, #15]
    break;
 8007d44:	bf00      	nop
  }
  return usb_status;
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7f9 fc4f 	bl	8001606 <HAL_HCD_GetCurrentSpeed>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d007      	beq.n	8007d7e <USBH_LL_GetSpeed+0x2e>
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d302      	bcc.n	8007d78 <USBH_LL_GetSpeed+0x28>
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d006      	beq.n	8007d84 <USBH_LL_GetSpeed+0x34>
 8007d76:	e008      	b.n	8007d8a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d7c:	e008      	b.n	8007d90 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	73fb      	strb	r3, [r7, #15]
    break;
 8007d82:	e005      	b.n	8007d90 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007d84:	2302      	movs	r3, #2
 8007d86:	73fb      	strb	r3, [r7, #15]
    break;
 8007d88:	e002      	b.n	8007d90 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d8e:	bf00      	nop
  }
  return  speed;
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
	...

08007d9c <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7f9 fbf6 	bl	80015a4 <HAL_HCD_ResetPort>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73bb      	strb	r3, [r7, #14]
  switch (hal_status) {
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d816      	bhi.n	8007df0 <USBH_LL_ResetPort+0x54>
 8007dc2:	a201      	add	r2, pc, #4	; (adr r2, 8007dc8 <USBH_LL_ResetPort+0x2c>)
 8007dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc8:	08007dd9 	.word	0x08007dd9
 8007dcc:	08007ddf 	.word	0x08007ddf
 8007dd0:	08007de5 	.word	0x08007de5
 8007dd4:	08007deb 	.word	0x08007deb
    case HAL_OK :
      usb_status = USBH_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73fb      	strb	r3, [r7, #15]
    break;
 8007ddc:	e00b      	b.n	8007df6 <USBH_LL_ResetPort+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007dde:	2302      	movs	r3, #2
 8007de0:	73fb      	strb	r3, [r7, #15]
    break;
 8007de2:	e008      	b.n	8007df6 <USBH_LL_ResetPort+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007de4:	2301      	movs	r3, #1
 8007de6:	73fb      	strb	r3, [r7, #15]
    break;
 8007de8:	e005      	b.n	8007df6 <USBH_LL_ResetPort+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007dea:	2302      	movs	r3, #2
 8007dec:	73fb      	strb	r3, [r7, #15]
    break;
 8007dee:	e002      	b.n	8007df6 <USBH_LL_ResetPort+0x5a>
    default :
      usb_status = USBH_FAIL;
 8007df0:	2302      	movs	r3, #2
 8007df2:	73fb      	strb	r3, [r7, #15]
    break;
 8007df4:	bf00      	nop
  }
  return usb_status;
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007e00:	b590      	push	{r4, r7, lr}
 8007e02:	b089      	sub	sp, #36	; 0x24
 8007e04:	af04      	add	r7, sp, #16
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	4608      	mov	r0, r1
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	4603      	mov	r3, r0
 8007e10:	70fb      	strb	r3, [r7, #3]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70bb      	strb	r3, [r7, #2]
 8007e16:	4613      	mov	r3, r2
 8007e18:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007e28:	787c      	ldrb	r4, [r7, #1]
 8007e2a:	78ba      	ldrb	r2, [r7, #2]
 8007e2c:	78f9      	ldrb	r1, [r7, #3]
 8007e2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e30:	9302      	str	r3, [sp, #8]
 8007e32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	4623      	mov	r3, r4
 8007e40:	f7f9 f833 	bl	8000eaa <HAL_HCD_HC_Init>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73bb      	strb	r3, [r7, #14]
                               dev_address, speed, ep_type, mps);

  switch (hal_status) {
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	d816      	bhi.n	8007e7c <USBH_LL_OpenPipe+0x7c>
 8007e4e:	a201      	add	r2, pc, #4	; (adr r2, 8007e54 <USBH_LL_OpenPipe+0x54>)
 8007e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e54:	08007e65 	.word	0x08007e65
 8007e58:	08007e6b 	.word	0x08007e6b
 8007e5c:	08007e71 	.word	0x08007e71
 8007e60:	08007e77 	.word	0x08007e77
    case HAL_OK :
      usb_status = USBH_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	73fb      	strb	r3, [r7, #15]
    break;
 8007e68:	e00b      	b.n	8007e82 <USBH_LL_OpenPipe+0x82>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e6e:	e008      	b.n	8007e82 <USBH_LL_OpenPipe+0x82>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007e70:	2301      	movs	r3, #1
 8007e72:	73fb      	strb	r3, [r7, #15]
    break;
 8007e74:	e005      	b.n	8007e82 <USBH_LL_OpenPipe+0x82>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007e76:	2302      	movs	r3, #2
 8007e78:	73fb      	strb	r3, [r7, #15]
    break;
 8007e7a:	e002      	b.n	8007e82 <USBH_LL_OpenPipe+0x82>
    default :
      usb_status = USBH_FAIL;
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e80:	bf00      	nop
  }
  return usb_status;
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd90      	pop	{r4, r7, pc}

08007e8c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ea6:	78fa      	ldrb	r2, [r7, #3]
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7f9 f884 	bl	8000fb8 <HAL_HCD_HC_Halt>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	d816      	bhi.n	8007ee8 <USBH_LL_ClosePipe+0x5c>
 8007eba:	a201      	add	r2, pc, #4	; (adr r2, 8007ec0 <USBH_LL_ClosePipe+0x34>)
 8007ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec0:	08007ed1 	.word	0x08007ed1
 8007ec4:	08007ed7 	.word	0x08007ed7
 8007ec8:	08007edd 	.word	0x08007edd
 8007ecc:	08007ee3 	.word	0x08007ee3
    case HAL_OK :
      usb_status = USBH_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed4:	e00b      	b.n	8007eee <USBH_LL_ClosePipe+0x62>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	73fb      	strb	r3, [r7, #15]
    break;
 8007eda:	e008      	b.n	8007eee <USBH_LL_ClosePipe+0x62>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007edc:	2301      	movs	r3, #1
 8007ede:	73fb      	strb	r3, [r7, #15]
    break;
 8007ee0:	e005      	b.n	8007eee <USBH_LL_ClosePipe+0x62>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ee6:	e002      	b.n	8007eee <USBH_LL_ClosePipe+0x62>
    default :
      usb_status = USBH_FAIL;
 8007ee8:	2302      	movs	r3, #2
 8007eea:	73fb      	strb	r3, [r7, #15]
    break;
 8007eec:	bf00      	nop
  }
  return usb_status;
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007ef8:	b590      	push	{r4, r7, lr}
 8007efa:	b089      	sub	sp, #36	; 0x24
 8007efc:	af04      	add	r7, sp, #16
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	4608      	mov	r0, r1
 8007f02:	4611      	mov	r1, r2
 8007f04:	461a      	mov	r2, r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	70fb      	strb	r3, [r7, #3]
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	70bb      	strb	r3, [r7, #2]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007f20:	787c      	ldrb	r4, [r7, #1]
 8007f22:	78ba      	ldrb	r2, [r7, #2]
 8007f24:	78f9      	ldrb	r1, [r7, #3]
 8007f26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f2a:	9303      	str	r3, [sp, #12]
 8007f2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f2e:	9302      	str	r3, [sp, #8]
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	9301      	str	r3, [sp, #4]
 8007f34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	4623      	mov	r3, r4
 8007f3c:	f7f9 f860 	bl	8001000 <HAL_HCD_HC_SubmitRequest>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73bb      	strb	r3, [r7, #14]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  switch (hal_status) {
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	d816      	bhi.n	8007f78 <USBH_LL_SubmitURB+0x80>
 8007f4a:	a201      	add	r2, pc, #4	; (adr r2, 8007f50 <USBH_LL_SubmitURB+0x58>)
 8007f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f50:	08007f61 	.word	0x08007f61
 8007f54:	08007f67 	.word	0x08007f67
 8007f58:	08007f6d 	.word	0x08007f6d
 8007f5c:	08007f73 	.word	0x08007f73
    case HAL_OK :
      usb_status = USBH_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	73fb      	strb	r3, [r7, #15]
    break;
 8007f64:	e00b      	b.n	8007f7e <USBH_LL_SubmitURB+0x86>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007f66:	2302      	movs	r3, #2
 8007f68:	73fb      	strb	r3, [r7, #15]
    break;
 8007f6a:	e008      	b.n	8007f7e <USBH_LL_SubmitURB+0x86>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f70:	e005      	b.n	8007f7e <USBH_LL_SubmitURB+0x86>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007f72:	2302      	movs	r3, #2
 8007f74:	73fb      	strb	r3, [r7, #15]
    break;
 8007f76:	e002      	b.n	8007f7e <USBH_LL_SubmitURB+0x86>
    default :
      usb_status = USBH_FAIL;
 8007f78:	2302      	movs	r3, #2
 8007f7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f7c:	bf00      	nop
  }
  return usb_status;
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd90      	pop	{r4, r7, pc}

08007f88 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f9a:	78fa      	ldrb	r2, [r7, #3]
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7f9 fb0e 	bl	80015c0 <HAL_HCD_HC_GetURBState>
 8007fa4:	4603      	mov	r3, r0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b082      	sub	sp, #8
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8007fba:	20c8      	movs	r0, #200	; 0xc8
 8007fbc:	f7f8 fc02 	bl	80007c4 <HAL_Delay>
  return USBH_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b085      	sub	sp, #20
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	70fb      	strb	r3, [r7, #3]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007fe0:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007fe2:	78fa      	ldrb	r2, [r7, #3]
 8007fe4:	68f9      	ldr	r1, [r7, #12]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	00db      	lsls	r3, r3, #3
 8007fee:	440b      	add	r3, r1
 8007ff0:	333b      	adds	r3, #59	; 0x3b
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00a      	beq.n	800800e <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007ff8:	78fa      	ldrb	r2, [r7, #3]
 8007ffa:	68f9      	ldr	r1, [r7, #12]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	00db      	lsls	r3, r3, #3
 8008004:	440b      	add	r3, r1
 8008006:	3350      	adds	r3, #80	; 0x50
 8008008:	78ba      	ldrb	r2, [r7, #2]
 800800a:	701a      	strb	r2, [r3, #0]
 800800c:	e009      	b.n	8008022 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800800e:	78fa      	ldrb	r2, [r7, #3]
 8008010:	68f9      	ldr	r1, [r7, #12]
 8008012:	4613      	mov	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	00db      	lsls	r3, r3, #3
 800801a:	440b      	add	r3, r1
 800801c:	3351      	adds	r3, #81	; 0x51
 800801e:	78ba      	ldrb	r2, [r7, #2]
 8008020:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7f8 fbc3 	bl	80007c4 <HAL_Delay>
}
 800803e:	bf00      	nop
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008080 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800804c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800804e:	e003      	b.n	8008058 <LoopCopyDataInit>

08008050 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008050:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008052:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008054:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008056:	3104      	adds	r1, #4

08008058 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008058:	480b      	ldr	r0, [pc, #44]	; (8008088 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800805a:	4b0c      	ldr	r3, [pc, #48]	; (800808c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800805c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800805e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008060:	d3f6      	bcc.n	8008050 <CopyDataInit>
  ldr  r2, =_sbss
 8008062:	4a0b      	ldr	r2, [pc, #44]	; (8008090 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008064:	e002      	b.n	800806c <LoopFillZerobss>

08008066 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008066:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008068:	f842 3b04 	str.w	r3, [r2], #4

0800806c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800806c:	4b09      	ldr	r3, [pc, #36]	; (8008094 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800806e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008070:	d3f9      	bcc.n	8008066 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008072:	f7ff fcc1 	bl	80079f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008076:	f000 f811 	bl	800809c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800807a:	f7ff fa4d 	bl	8007518 <main>
  bx  lr    
 800807e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008080:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008084:	08009574 	.word	0x08009574
  ldr  r0, =_sdata
 8008088:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800808c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8008090:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8008094:	200007f0 	.word	0x200007f0

08008098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008098:	e7fe      	b.n	8008098 <ADC_IRQHandler>
	...

0800809c <__libc_init_array>:
 800809c:	b570      	push	{r4, r5, r6, lr}
 800809e:	4e0d      	ldr	r6, [pc, #52]	; (80080d4 <__libc_init_array+0x38>)
 80080a0:	4c0d      	ldr	r4, [pc, #52]	; (80080d8 <__libc_init_array+0x3c>)
 80080a2:	1ba4      	subs	r4, r4, r6
 80080a4:	10a4      	asrs	r4, r4, #2
 80080a6:	2500      	movs	r5, #0
 80080a8:	42a5      	cmp	r5, r4
 80080aa:	d109      	bne.n	80080c0 <__libc_init_array+0x24>
 80080ac:	4e0b      	ldr	r6, [pc, #44]	; (80080dc <__libc_init_array+0x40>)
 80080ae:	4c0c      	ldr	r4, [pc, #48]	; (80080e0 <__libc_init_array+0x44>)
 80080b0:	f000 ffb0 	bl	8009014 <_init>
 80080b4:	1ba4      	subs	r4, r4, r6
 80080b6:	10a4      	asrs	r4, r4, #2
 80080b8:	2500      	movs	r5, #0
 80080ba:	42a5      	cmp	r5, r4
 80080bc:	d105      	bne.n	80080ca <__libc_init_array+0x2e>
 80080be:	bd70      	pop	{r4, r5, r6, pc}
 80080c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080c4:	4798      	blx	r3
 80080c6:	3501      	adds	r5, #1
 80080c8:	e7ee      	b.n	80080a8 <__libc_init_array+0xc>
 80080ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080ce:	4798      	blx	r3
 80080d0:	3501      	adds	r5, #1
 80080d2:	e7f2      	b.n	80080ba <__libc_init_array+0x1e>
 80080d4:	0800956c 	.word	0x0800956c
 80080d8:	0800956c 	.word	0x0800956c
 80080dc:	0800956c 	.word	0x0800956c
 80080e0:	08009570 	.word	0x08009570

080080e4 <malloc>:
 80080e4:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <malloc+0xc>)
 80080e6:	4601      	mov	r1, r0
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	f000 b861 	b.w	80081b0 <_malloc_r>
 80080ee:	bf00      	nop
 80080f0:	2000002c 	.word	0x2000002c

080080f4 <free>:
 80080f4:	4b02      	ldr	r3, [pc, #8]	; (8008100 <free+0xc>)
 80080f6:	4601      	mov	r1, r0
 80080f8:	6818      	ldr	r0, [r3, #0]
 80080fa:	f000 b80b 	b.w	8008114 <_free_r>
 80080fe:	bf00      	nop
 8008100:	2000002c 	.word	0x2000002c

08008104 <memset>:
 8008104:	4402      	add	r2, r0
 8008106:	4603      	mov	r3, r0
 8008108:	4293      	cmp	r3, r2
 800810a:	d100      	bne.n	800810e <memset+0xa>
 800810c:	4770      	bx	lr
 800810e:	f803 1b01 	strb.w	r1, [r3], #1
 8008112:	e7f9      	b.n	8008108 <memset+0x4>

08008114 <_free_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4605      	mov	r5, r0
 8008118:	2900      	cmp	r1, #0
 800811a:	d045      	beq.n	80081a8 <_free_r+0x94>
 800811c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008120:	1f0c      	subs	r4, r1, #4
 8008122:	2b00      	cmp	r3, #0
 8008124:	bfb8      	it	lt
 8008126:	18e4      	addlt	r4, r4, r3
 8008128:	f000 f9a6 	bl	8008478 <__malloc_lock>
 800812c:	4a1f      	ldr	r2, [pc, #124]	; (80081ac <_free_r+0x98>)
 800812e:	6813      	ldr	r3, [r2, #0]
 8008130:	4610      	mov	r0, r2
 8008132:	b933      	cbnz	r3, 8008142 <_free_r+0x2e>
 8008134:	6063      	str	r3, [r4, #4]
 8008136:	6014      	str	r4, [r2, #0]
 8008138:	4628      	mov	r0, r5
 800813a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800813e:	f000 b99c 	b.w	800847a <__malloc_unlock>
 8008142:	42a3      	cmp	r3, r4
 8008144:	d90c      	bls.n	8008160 <_free_r+0x4c>
 8008146:	6821      	ldr	r1, [r4, #0]
 8008148:	1862      	adds	r2, r4, r1
 800814a:	4293      	cmp	r3, r2
 800814c:	bf04      	itt	eq
 800814e:	681a      	ldreq	r2, [r3, #0]
 8008150:	685b      	ldreq	r3, [r3, #4]
 8008152:	6063      	str	r3, [r4, #4]
 8008154:	bf04      	itt	eq
 8008156:	1852      	addeq	r2, r2, r1
 8008158:	6022      	streq	r2, [r4, #0]
 800815a:	6004      	str	r4, [r0, #0]
 800815c:	e7ec      	b.n	8008138 <_free_r+0x24>
 800815e:	4613      	mov	r3, r2
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	b10a      	cbz	r2, 8008168 <_free_r+0x54>
 8008164:	42a2      	cmp	r2, r4
 8008166:	d9fa      	bls.n	800815e <_free_r+0x4a>
 8008168:	6819      	ldr	r1, [r3, #0]
 800816a:	1858      	adds	r0, r3, r1
 800816c:	42a0      	cmp	r0, r4
 800816e:	d10b      	bne.n	8008188 <_free_r+0x74>
 8008170:	6820      	ldr	r0, [r4, #0]
 8008172:	4401      	add	r1, r0
 8008174:	1858      	adds	r0, r3, r1
 8008176:	4282      	cmp	r2, r0
 8008178:	6019      	str	r1, [r3, #0]
 800817a:	d1dd      	bne.n	8008138 <_free_r+0x24>
 800817c:	6810      	ldr	r0, [r2, #0]
 800817e:	6852      	ldr	r2, [r2, #4]
 8008180:	605a      	str	r2, [r3, #4]
 8008182:	4401      	add	r1, r0
 8008184:	6019      	str	r1, [r3, #0]
 8008186:	e7d7      	b.n	8008138 <_free_r+0x24>
 8008188:	d902      	bls.n	8008190 <_free_r+0x7c>
 800818a:	230c      	movs	r3, #12
 800818c:	602b      	str	r3, [r5, #0]
 800818e:	e7d3      	b.n	8008138 <_free_r+0x24>
 8008190:	6820      	ldr	r0, [r4, #0]
 8008192:	1821      	adds	r1, r4, r0
 8008194:	428a      	cmp	r2, r1
 8008196:	bf04      	itt	eq
 8008198:	6811      	ldreq	r1, [r2, #0]
 800819a:	6852      	ldreq	r2, [r2, #4]
 800819c:	6062      	str	r2, [r4, #4]
 800819e:	bf04      	itt	eq
 80081a0:	1809      	addeq	r1, r1, r0
 80081a2:	6021      	streq	r1, [r4, #0]
 80081a4:	605c      	str	r4, [r3, #4]
 80081a6:	e7c7      	b.n	8008138 <_free_r+0x24>
 80081a8:	bd38      	pop	{r3, r4, r5, pc}
 80081aa:	bf00      	nop
 80081ac:	200000b0 	.word	0x200000b0

080081b0 <_malloc_r>:
 80081b0:	b570      	push	{r4, r5, r6, lr}
 80081b2:	1ccd      	adds	r5, r1, #3
 80081b4:	f025 0503 	bic.w	r5, r5, #3
 80081b8:	3508      	adds	r5, #8
 80081ba:	2d0c      	cmp	r5, #12
 80081bc:	bf38      	it	cc
 80081be:	250c      	movcc	r5, #12
 80081c0:	2d00      	cmp	r5, #0
 80081c2:	4606      	mov	r6, r0
 80081c4:	db01      	blt.n	80081ca <_malloc_r+0x1a>
 80081c6:	42a9      	cmp	r1, r5
 80081c8:	d903      	bls.n	80081d2 <_malloc_r+0x22>
 80081ca:	230c      	movs	r3, #12
 80081cc:	6033      	str	r3, [r6, #0]
 80081ce:	2000      	movs	r0, #0
 80081d0:	bd70      	pop	{r4, r5, r6, pc}
 80081d2:	f000 f951 	bl	8008478 <__malloc_lock>
 80081d6:	4a23      	ldr	r2, [pc, #140]	; (8008264 <_malloc_r+0xb4>)
 80081d8:	6814      	ldr	r4, [r2, #0]
 80081da:	4621      	mov	r1, r4
 80081dc:	b991      	cbnz	r1, 8008204 <_malloc_r+0x54>
 80081de:	4c22      	ldr	r4, [pc, #136]	; (8008268 <_malloc_r+0xb8>)
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	b91b      	cbnz	r3, 80081ec <_malloc_r+0x3c>
 80081e4:	4630      	mov	r0, r6
 80081e6:	f000 f86d 	bl	80082c4 <_sbrk_r>
 80081ea:	6020      	str	r0, [r4, #0]
 80081ec:	4629      	mov	r1, r5
 80081ee:	4630      	mov	r0, r6
 80081f0:	f000 f868 	bl	80082c4 <_sbrk_r>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d126      	bne.n	8008246 <_malloc_r+0x96>
 80081f8:	230c      	movs	r3, #12
 80081fa:	6033      	str	r3, [r6, #0]
 80081fc:	4630      	mov	r0, r6
 80081fe:	f000 f93c 	bl	800847a <__malloc_unlock>
 8008202:	e7e4      	b.n	80081ce <_malloc_r+0x1e>
 8008204:	680b      	ldr	r3, [r1, #0]
 8008206:	1b5b      	subs	r3, r3, r5
 8008208:	d41a      	bmi.n	8008240 <_malloc_r+0x90>
 800820a:	2b0b      	cmp	r3, #11
 800820c:	d90f      	bls.n	800822e <_malloc_r+0x7e>
 800820e:	600b      	str	r3, [r1, #0]
 8008210:	50cd      	str	r5, [r1, r3]
 8008212:	18cc      	adds	r4, r1, r3
 8008214:	4630      	mov	r0, r6
 8008216:	f000 f930 	bl	800847a <__malloc_unlock>
 800821a:	f104 000b 	add.w	r0, r4, #11
 800821e:	1d23      	adds	r3, r4, #4
 8008220:	f020 0007 	bic.w	r0, r0, #7
 8008224:	1ac3      	subs	r3, r0, r3
 8008226:	d01b      	beq.n	8008260 <_malloc_r+0xb0>
 8008228:	425a      	negs	r2, r3
 800822a:	50e2      	str	r2, [r4, r3]
 800822c:	bd70      	pop	{r4, r5, r6, pc}
 800822e:	428c      	cmp	r4, r1
 8008230:	bf0d      	iteet	eq
 8008232:	6863      	ldreq	r3, [r4, #4]
 8008234:	684b      	ldrne	r3, [r1, #4]
 8008236:	6063      	strne	r3, [r4, #4]
 8008238:	6013      	streq	r3, [r2, #0]
 800823a:	bf18      	it	ne
 800823c:	460c      	movne	r4, r1
 800823e:	e7e9      	b.n	8008214 <_malloc_r+0x64>
 8008240:	460c      	mov	r4, r1
 8008242:	6849      	ldr	r1, [r1, #4]
 8008244:	e7ca      	b.n	80081dc <_malloc_r+0x2c>
 8008246:	1cc4      	adds	r4, r0, #3
 8008248:	f024 0403 	bic.w	r4, r4, #3
 800824c:	42a0      	cmp	r0, r4
 800824e:	d005      	beq.n	800825c <_malloc_r+0xac>
 8008250:	1a21      	subs	r1, r4, r0
 8008252:	4630      	mov	r0, r6
 8008254:	f000 f836 	bl	80082c4 <_sbrk_r>
 8008258:	3001      	adds	r0, #1
 800825a:	d0cd      	beq.n	80081f8 <_malloc_r+0x48>
 800825c:	6025      	str	r5, [r4, #0]
 800825e:	e7d9      	b.n	8008214 <_malloc_r+0x64>
 8008260:	bd70      	pop	{r4, r5, r6, pc}
 8008262:	bf00      	nop
 8008264:	200000b0 	.word	0x200000b0
 8008268:	200000b4 	.word	0x200000b4

0800826c <iprintf>:
 800826c:	b40f      	push	{r0, r1, r2, r3}
 800826e:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <iprintf+0x2c>)
 8008270:	b513      	push	{r0, r1, r4, lr}
 8008272:	681c      	ldr	r4, [r3, #0]
 8008274:	b124      	cbz	r4, 8008280 <iprintf+0x14>
 8008276:	69a3      	ldr	r3, [r4, #24]
 8008278:	b913      	cbnz	r3, 8008280 <iprintf+0x14>
 800827a:	4620      	mov	r0, r4
 800827c:	f000 f872 	bl	8008364 <__sinit>
 8008280:	ab05      	add	r3, sp, #20
 8008282:	9a04      	ldr	r2, [sp, #16]
 8008284:	68a1      	ldr	r1, [r4, #8]
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	4620      	mov	r0, r4
 800828a:	f000 f921 	bl	80084d0 <_vfiprintf_r>
 800828e:	b002      	add	sp, #8
 8008290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008294:	b004      	add	sp, #16
 8008296:	4770      	bx	lr
 8008298:	2000002c 	.word	0x2000002c

0800829c <putchar>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	4b08      	ldr	r3, [pc, #32]	; (80082c0 <putchar+0x24>)
 80082a0:	681c      	ldr	r4, [r3, #0]
 80082a2:	4605      	mov	r5, r0
 80082a4:	b124      	cbz	r4, 80082b0 <putchar+0x14>
 80082a6:	69a3      	ldr	r3, [r4, #24]
 80082a8:	b913      	cbnz	r3, 80082b0 <putchar+0x14>
 80082aa:	4620      	mov	r0, r4
 80082ac:	f000 f85a 	bl	8008364 <__sinit>
 80082b0:	68a2      	ldr	r2, [r4, #8]
 80082b2:	4629      	mov	r1, r5
 80082b4:	4620      	mov	r0, r4
 80082b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082ba:	f000 bbb5 	b.w	8008a28 <_putc_r>
 80082be:	bf00      	nop
 80082c0:	2000002c 	.word	0x2000002c

080082c4 <_sbrk_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	4c06      	ldr	r4, [pc, #24]	; (80082e0 <_sbrk_r+0x1c>)
 80082c8:	2300      	movs	r3, #0
 80082ca:	4605      	mov	r5, r0
 80082cc:	4608      	mov	r0, r1
 80082ce:	6023      	str	r3, [r4, #0]
 80082d0:	f000 fe8a 	bl	8008fe8 <_sbrk>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d102      	bne.n	80082de <_sbrk_r+0x1a>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	b103      	cbz	r3, 80082de <_sbrk_r+0x1a>
 80082dc:	602b      	str	r3, [r5, #0]
 80082de:	bd38      	pop	{r3, r4, r5, pc}
 80082e0:	200007ec 	.word	0x200007ec

080082e4 <_cleanup_r>:
 80082e4:	4901      	ldr	r1, [pc, #4]	; (80082ec <_cleanup_r+0x8>)
 80082e6:	f000 b8a9 	b.w	800843c <_fwalk_reent>
 80082ea:	bf00      	nop
 80082ec:	08008df1 	.word	0x08008df1

080082f0 <std.isra.0>:
 80082f0:	2300      	movs	r3, #0
 80082f2:	b510      	push	{r4, lr}
 80082f4:	4604      	mov	r4, r0
 80082f6:	6003      	str	r3, [r0, #0]
 80082f8:	6043      	str	r3, [r0, #4]
 80082fa:	6083      	str	r3, [r0, #8]
 80082fc:	8181      	strh	r1, [r0, #12]
 80082fe:	6643      	str	r3, [r0, #100]	; 0x64
 8008300:	81c2      	strh	r2, [r0, #14]
 8008302:	6103      	str	r3, [r0, #16]
 8008304:	6143      	str	r3, [r0, #20]
 8008306:	6183      	str	r3, [r0, #24]
 8008308:	4619      	mov	r1, r3
 800830a:	2208      	movs	r2, #8
 800830c:	305c      	adds	r0, #92	; 0x5c
 800830e:	f7ff fef9 	bl	8008104 <memset>
 8008312:	4b05      	ldr	r3, [pc, #20]	; (8008328 <std.isra.0+0x38>)
 8008314:	6263      	str	r3, [r4, #36]	; 0x24
 8008316:	4b05      	ldr	r3, [pc, #20]	; (800832c <std.isra.0+0x3c>)
 8008318:	62a3      	str	r3, [r4, #40]	; 0x28
 800831a:	4b05      	ldr	r3, [pc, #20]	; (8008330 <std.isra.0+0x40>)
 800831c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800831e:	4b05      	ldr	r3, [pc, #20]	; (8008334 <std.isra.0+0x44>)
 8008320:	6224      	str	r4, [r4, #32]
 8008322:	6323      	str	r3, [r4, #48]	; 0x30
 8008324:	bd10      	pop	{r4, pc}
 8008326:	bf00      	nop
 8008328:	08008a95 	.word	0x08008a95
 800832c:	08008ab7 	.word	0x08008ab7
 8008330:	08008aef 	.word	0x08008aef
 8008334:	08008b13 	.word	0x08008b13

08008338 <__sfmoreglue>:
 8008338:	b570      	push	{r4, r5, r6, lr}
 800833a:	1e4a      	subs	r2, r1, #1
 800833c:	2568      	movs	r5, #104	; 0x68
 800833e:	4355      	muls	r5, r2
 8008340:	460e      	mov	r6, r1
 8008342:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008346:	f7ff ff33 	bl	80081b0 <_malloc_r>
 800834a:	4604      	mov	r4, r0
 800834c:	b140      	cbz	r0, 8008360 <__sfmoreglue+0x28>
 800834e:	2100      	movs	r1, #0
 8008350:	e880 0042 	stmia.w	r0, {r1, r6}
 8008354:	300c      	adds	r0, #12
 8008356:	60a0      	str	r0, [r4, #8]
 8008358:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800835c:	f7ff fed2 	bl	8008104 <memset>
 8008360:	4620      	mov	r0, r4
 8008362:	bd70      	pop	{r4, r5, r6, pc}

08008364 <__sinit>:
 8008364:	6983      	ldr	r3, [r0, #24]
 8008366:	b510      	push	{r4, lr}
 8008368:	4604      	mov	r4, r0
 800836a:	bb33      	cbnz	r3, 80083ba <__sinit+0x56>
 800836c:	6483      	str	r3, [r0, #72]	; 0x48
 800836e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008370:	6503      	str	r3, [r0, #80]	; 0x50
 8008372:	4b12      	ldr	r3, [pc, #72]	; (80083bc <__sinit+0x58>)
 8008374:	4a12      	ldr	r2, [pc, #72]	; (80083c0 <__sinit+0x5c>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	6282      	str	r2, [r0, #40]	; 0x28
 800837a:	4298      	cmp	r0, r3
 800837c:	bf04      	itt	eq
 800837e:	2301      	moveq	r3, #1
 8008380:	6183      	streq	r3, [r0, #24]
 8008382:	f000 f81f 	bl	80083c4 <__sfp>
 8008386:	6060      	str	r0, [r4, #4]
 8008388:	4620      	mov	r0, r4
 800838a:	f000 f81b 	bl	80083c4 <__sfp>
 800838e:	60a0      	str	r0, [r4, #8]
 8008390:	4620      	mov	r0, r4
 8008392:	f000 f817 	bl	80083c4 <__sfp>
 8008396:	2200      	movs	r2, #0
 8008398:	60e0      	str	r0, [r4, #12]
 800839a:	2104      	movs	r1, #4
 800839c:	6860      	ldr	r0, [r4, #4]
 800839e:	f7ff ffa7 	bl	80082f0 <std.isra.0>
 80083a2:	2201      	movs	r2, #1
 80083a4:	2109      	movs	r1, #9
 80083a6:	68a0      	ldr	r0, [r4, #8]
 80083a8:	f7ff ffa2 	bl	80082f0 <std.isra.0>
 80083ac:	2202      	movs	r2, #2
 80083ae:	2112      	movs	r1, #18
 80083b0:	68e0      	ldr	r0, [r4, #12]
 80083b2:	f7ff ff9d 	bl	80082f0 <std.isra.0>
 80083b6:	2301      	movs	r3, #1
 80083b8:	61a3      	str	r3, [r4, #24]
 80083ba:	bd10      	pop	{r4, pc}
 80083bc:	0800952c 	.word	0x0800952c
 80083c0:	080082e5 	.word	0x080082e5

080083c4 <__sfp>:
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c6:	4b1c      	ldr	r3, [pc, #112]	; (8008438 <__sfp+0x74>)
 80083c8:	681e      	ldr	r6, [r3, #0]
 80083ca:	69b3      	ldr	r3, [r6, #24]
 80083cc:	4607      	mov	r7, r0
 80083ce:	b913      	cbnz	r3, 80083d6 <__sfp+0x12>
 80083d0:	4630      	mov	r0, r6
 80083d2:	f7ff ffc7 	bl	8008364 <__sinit>
 80083d6:	3648      	adds	r6, #72	; 0x48
 80083d8:	68b4      	ldr	r4, [r6, #8]
 80083da:	6873      	ldr	r3, [r6, #4]
 80083dc:	3b01      	subs	r3, #1
 80083de:	d503      	bpl.n	80083e8 <__sfp+0x24>
 80083e0:	6833      	ldr	r3, [r6, #0]
 80083e2:	b133      	cbz	r3, 80083f2 <__sfp+0x2e>
 80083e4:	6836      	ldr	r6, [r6, #0]
 80083e6:	e7f7      	b.n	80083d8 <__sfp+0x14>
 80083e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083ec:	b16d      	cbz	r5, 800840a <__sfp+0x46>
 80083ee:	3468      	adds	r4, #104	; 0x68
 80083f0:	e7f4      	b.n	80083dc <__sfp+0x18>
 80083f2:	2104      	movs	r1, #4
 80083f4:	4638      	mov	r0, r7
 80083f6:	f7ff ff9f 	bl	8008338 <__sfmoreglue>
 80083fa:	6030      	str	r0, [r6, #0]
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d1f1      	bne.n	80083e4 <__sfp+0x20>
 8008400:	230c      	movs	r3, #12
 8008402:	603b      	str	r3, [r7, #0]
 8008404:	4604      	mov	r4, r0
 8008406:	4620      	mov	r0, r4
 8008408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800840a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800840e:	81e3      	strh	r3, [r4, #14]
 8008410:	2301      	movs	r3, #1
 8008412:	81a3      	strh	r3, [r4, #12]
 8008414:	6665      	str	r5, [r4, #100]	; 0x64
 8008416:	6025      	str	r5, [r4, #0]
 8008418:	60a5      	str	r5, [r4, #8]
 800841a:	6065      	str	r5, [r4, #4]
 800841c:	6125      	str	r5, [r4, #16]
 800841e:	6165      	str	r5, [r4, #20]
 8008420:	61a5      	str	r5, [r4, #24]
 8008422:	2208      	movs	r2, #8
 8008424:	4629      	mov	r1, r5
 8008426:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800842a:	f7ff fe6b 	bl	8008104 <memset>
 800842e:	6365      	str	r5, [r4, #52]	; 0x34
 8008430:	63a5      	str	r5, [r4, #56]	; 0x38
 8008432:	64a5      	str	r5, [r4, #72]	; 0x48
 8008434:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008436:	e7e6      	b.n	8008406 <__sfp+0x42>
 8008438:	0800952c 	.word	0x0800952c

0800843c <_fwalk_reent>:
 800843c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008440:	4680      	mov	r8, r0
 8008442:	4689      	mov	r9, r1
 8008444:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008448:	2600      	movs	r6, #0
 800844a:	b914      	cbnz	r4, 8008452 <_fwalk_reent+0x16>
 800844c:	4630      	mov	r0, r6
 800844e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008452:	68a5      	ldr	r5, [r4, #8]
 8008454:	6867      	ldr	r7, [r4, #4]
 8008456:	3f01      	subs	r7, #1
 8008458:	d501      	bpl.n	800845e <_fwalk_reent+0x22>
 800845a:	6824      	ldr	r4, [r4, #0]
 800845c:	e7f5      	b.n	800844a <_fwalk_reent+0xe>
 800845e:	89ab      	ldrh	r3, [r5, #12]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d907      	bls.n	8008474 <_fwalk_reent+0x38>
 8008464:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008468:	3301      	adds	r3, #1
 800846a:	d003      	beq.n	8008474 <_fwalk_reent+0x38>
 800846c:	4629      	mov	r1, r5
 800846e:	4640      	mov	r0, r8
 8008470:	47c8      	blx	r9
 8008472:	4306      	orrs	r6, r0
 8008474:	3568      	adds	r5, #104	; 0x68
 8008476:	e7ee      	b.n	8008456 <_fwalk_reent+0x1a>

08008478 <__malloc_lock>:
 8008478:	4770      	bx	lr

0800847a <__malloc_unlock>:
 800847a:	4770      	bx	lr

0800847c <__sfputc_r>:
 800847c:	6893      	ldr	r3, [r2, #8]
 800847e:	3b01      	subs	r3, #1
 8008480:	2b00      	cmp	r3, #0
 8008482:	b410      	push	{r4}
 8008484:	6093      	str	r3, [r2, #8]
 8008486:	da09      	bge.n	800849c <__sfputc_r+0x20>
 8008488:	6994      	ldr	r4, [r2, #24]
 800848a:	42a3      	cmp	r3, r4
 800848c:	db02      	blt.n	8008494 <__sfputc_r+0x18>
 800848e:	b2cb      	uxtb	r3, r1
 8008490:	2b0a      	cmp	r3, #10
 8008492:	d103      	bne.n	800849c <__sfputc_r+0x20>
 8008494:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008498:	f000 bb40 	b.w	8008b1c <__swbuf_r>
 800849c:	6813      	ldr	r3, [r2, #0]
 800849e:	1c58      	adds	r0, r3, #1
 80084a0:	6010      	str	r0, [r2, #0]
 80084a2:	7019      	strb	r1, [r3, #0]
 80084a4:	b2c8      	uxtb	r0, r1
 80084a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <__sfputs_r>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	4606      	mov	r6, r0
 80084b0:	460f      	mov	r7, r1
 80084b2:	4614      	mov	r4, r2
 80084b4:	18d5      	adds	r5, r2, r3
 80084b6:	42ac      	cmp	r4, r5
 80084b8:	d101      	bne.n	80084be <__sfputs_r+0x12>
 80084ba:	2000      	movs	r0, #0
 80084bc:	e007      	b.n	80084ce <__sfputs_r+0x22>
 80084be:	463a      	mov	r2, r7
 80084c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084c4:	4630      	mov	r0, r6
 80084c6:	f7ff ffd9 	bl	800847c <__sfputc_r>
 80084ca:	1c43      	adds	r3, r0, #1
 80084cc:	d1f3      	bne.n	80084b6 <__sfputs_r+0xa>
 80084ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084d0 <_vfiprintf_r>:
 80084d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d4:	b09d      	sub	sp, #116	; 0x74
 80084d6:	460c      	mov	r4, r1
 80084d8:	4617      	mov	r7, r2
 80084da:	9303      	str	r3, [sp, #12]
 80084dc:	4606      	mov	r6, r0
 80084de:	b118      	cbz	r0, 80084e8 <_vfiprintf_r+0x18>
 80084e0:	6983      	ldr	r3, [r0, #24]
 80084e2:	b90b      	cbnz	r3, 80084e8 <_vfiprintf_r+0x18>
 80084e4:	f7ff ff3e 	bl	8008364 <__sinit>
 80084e8:	4b7c      	ldr	r3, [pc, #496]	; (80086dc <_vfiprintf_r+0x20c>)
 80084ea:	429c      	cmp	r4, r3
 80084ec:	d157      	bne.n	800859e <_vfiprintf_r+0xce>
 80084ee:	6874      	ldr	r4, [r6, #4]
 80084f0:	89a3      	ldrh	r3, [r4, #12]
 80084f2:	0718      	lsls	r0, r3, #28
 80084f4:	d55d      	bpl.n	80085b2 <_vfiprintf_r+0xe2>
 80084f6:	6923      	ldr	r3, [r4, #16]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d05a      	beq.n	80085b2 <_vfiprintf_r+0xe2>
 80084fc:	2300      	movs	r3, #0
 80084fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008500:	2320      	movs	r3, #32
 8008502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008506:	2330      	movs	r3, #48	; 0x30
 8008508:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800850c:	f04f 0b01 	mov.w	fp, #1
 8008510:	46b8      	mov	r8, r7
 8008512:	4645      	mov	r5, r8
 8008514:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	d155      	bne.n	80085c8 <_vfiprintf_r+0xf8>
 800851c:	ebb8 0a07 	subs.w	sl, r8, r7
 8008520:	d00b      	beq.n	800853a <_vfiprintf_r+0x6a>
 8008522:	4653      	mov	r3, sl
 8008524:	463a      	mov	r2, r7
 8008526:	4621      	mov	r1, r4
 8008528:	4630      	mov	r0, r6
 800852a:	f7ff ffbf 	bl	80084ac <__sfputs_r>
 800852e:	3001      	adds	r0, #1
 8008530:	f000 80c4 	beq.w	80086bc <_vfiprintf_r+0x1ec>
 8008534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008536:	4453      	add	r3, sl
 8008538:	9309      	str	r3, [sp, #36]	; 0x24
 800853a:	f898 3000 	ldrb.w	r3, [r8]
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 80bc 	beq.w	80086bc <_vfiprintf_r+0x1ec>
 8008544:	2300      	movs	r3, #0
 8008546:	f04f 32ff 	mov.w	r2, #4294967295
 800854a:	9304      	str	r3, [sp, #16]
 800854c:	9307      	str	r3, [sp, #28]
 800854e:	9205      	str	r2, [sp, #20]
 8008550:	9306      	str	r3, [sp, #24]
 8008552:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008556:	931a      	str	r3, [sp, #104]	; 0x68
 8008558:	2205      	movs	r2, #5
 800855a:	7829      	ldrb	r1, [r5, #0]
 800855c:	4860      	ldr	r0, [pc, #384]	; (80086e0 <_vfiprintf_r+0x210>)
 800855e:	f7f7 fee7 	bl	8000330 <memchr>
 8008562:	f105 0801 	add.w	r8, r5, #1
 8008566:	9b04      	ldr	r3, [sp, #16]
 8008568:	2800      	cmp	r0, #0
 800856a:	d131      	bne.n	80085d0 <_vfiprintf_r+0x100>
 800856c:	06d9      	lsls	r1, r3, #27
 800856e:	bf44      	itt	mi
 8008570:	2220      	movmi	r2, #32
 8008572:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008576:	071a      	lsls	r2, r3, #28
 8008578:	bf44      	itt	mi
 800857a:	222b      	movmi	r2, #43	; 0x2b
 800857c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008580:	782a      	ldrb	r2, [r5, #0]
 8008582:	2a2a      	cmp	r2, #42	; 0x2a
 8008584:	d02c      	beq.n	80085e0 <_vfiprintf_r+0x110>
 8008586:	9a07      	ldr	r2, [sp, #28]
 8008588:	2100      	movs	r1, #0
 800858a:	200a      	movs	r0, #10
 800858c:	46a8      	mov	r8, r5
 800858e:	3501      	adds	r5, #1
 8008590:	f898 3000 	ldrb.w	r3, [r8]
 8008594:	3b30      	subs	r3, #48	; 0x30
 8008596:	2b09      	cmp	r3, #9
 8008598:	d96d      	bls.n	8008676 <_vfiprintf_r+0x1a6>
 800859a:	b371      	cbz	r1, 80085fa <_vfiprintf_r+0x12a>
 800859c:	e026      	b.n	80085ec <_vfiprintf_r+0x11c>
 800859e:	4b51      	ldr	r3, [pc, #324]	; (80086e4 <_vfiprintf_r+0x214>)
 80085a0:	429c      	cmp	r4, r3
 80085a2:	d101      	bne.n	80085a8 <_vfiprintf_r+0xd8>
 80085a4:	68b4      	ldr	r4, [r6, #8]
 80085a6:	e7a3      	b.n	80084f0 <_vfiprintf_r+0x20>
 80085a8:	4b4f      	ldr	r3, [pc, #316]	; (80086e8 <_vfiprintf_r+0x218>)
 80085aa:	429c      	cmp	r4, r3
 80085ac:	bf08      	it	eq
 80085ae:	68f4      	ldreq	r4, [r6, #12]
 80085b0:	e79e      	b.n	80084f0 <_vfiprintf_r+0x20>
 80085b2:	4621      	mov	r1, r4
 80085b4:	4630      	mov	r0, r6
 80085b6:	f000 fb15 	bl	8008be4 <__swsetup_r>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d09e      	beq.n	80084fc <_vfiprintf_r+0x2c>
 80085be:	f04f 30ff 	mov.w	r0, #4294967295
 80085c2:	b01d      	add	sp, #116	; 0x74
 80085c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c8:	2b25      	cmp	r3, #37	; 0x25
 80085ca:	d0a7      	beq.n	800851c <_vfiprintf_r+0x4c>
 80085cc:	46a8      	mov	r8, r5
 80085ce:	e7a0      	b.n	8008512 <_vfiprintf_r+0x42>
 80085d0:	4a43      	ldr	r2, [pc, #268]	; (80086e0 <_vfiprintf_r+0x210>)
 80085d2:	1a80      	subs	r0, r0, r2
 80085d4:	fa0b f000 	lsl.w	r0, fp, r0
 80085d8:	4318      	orrs	r0, r3
 80085da:	9004      	str	r0, [sp, #16]
 80085dc:	4645      	mov	r5, r8
 80085de:	e7bb      	b.n	8008558 <_vfiprintf_r+0x88>
 80085e0:	9a03      	ldr	r2, [sp, #12]
 80085e2:	1d11      	adds	r1, r2, #4
 80085e4:	6812      	ldr	r2, [r2, #0]
 80085e6:	9103      	str	r1, [sp, #12]
 80085e8:	2a00      	cmp	r2, #0
 80085ea:	db01      	blt.n	80085f0 <_vfiprintf_r+0x120>
 80085ec:	9207      	str	r2, [sp, #28]
 80085ee:	e004      	b.n	80085fa <_vfiprintf_r+0x12a>
 80085f0:	4252      	negs	r2, r2
 80085f2:	f043 0302 	orr.w	r3, r3, #2
 80085f6:	9207      	str	r2, [sp, #28]
 80085f8:	9304      	str	r3, [sp, #16]
 80085fa:	f898 3000 	ldrb.w	r3, [r8]
 80085fe:	2b2e      	cmp	r3, #46	; 0x2e
 8008600:	d110      	bne.n	8008624 <_vfiprintf_r+0x154>
 8008602:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008606:	2b2a      	cmp	r3, #42	; 0x2a
 8008608:	f108 0101 	add.w	r1, r8, #1
 800860c:	d137      	bne.n	800867e <_vfiprintf_r+0x1ae>
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	1d1a      	adds	r2, r3, #4
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	9203      	str	r2, [sp, #12]
 8008616:	2b00      	cmp	r3, #0
 8008618:	bfb8      	it	lt
 800861a:	f04f 33ff 	movlt.w	r3, #4294967295
 800861e:	f108 0802 	add.w	r8, r8, #2
 8008622:	9305      	str	r3, [sp, #20]
 8008624:	4d31      	ldr	r5, [pc, #196]	; (80086ec <_vfiprintf_r+0x21c>)
 8008626:	f898 1000 	ldrb.w	r1, [r8]
 800862a:	2203      	movs	r2, #3
 800862c:	4628      	mov	r0, r5
 800862e:	f7f7 fe7f 	bl	8000330 <memchr>
 8008632:	b140      	cbz	r0, 8008646 <_vfiprintf_r+0x176>
 8008634:	2340      	movs	r3, #64	; 0x40
 8008636:	1b40      	subs	r0, r0, r5
 8008638:	fa03 f000 	lsl.w	r0, r3, r0
 800863c:	9b04      	ldr	r3, [sp, #16]
 800863e:	4303      	orrs	r3, r0
 8008640:	9304      	str	r3, [sp, #16]
 8008642:	f108 0801 	add.w	r8, r8, #1
 8008646:	f898 1000 	ldrb.w	r1, [r8]
 800864a:	4829      	ldr	r0, [pc, #164]	; (80086f0 <_vfiprintf_r+0x220>)
 800864c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008650:	2206      	movs	r2, #6
 8008652:	f108 0701 	add.w	r7, r8, #1
 8008656:	f7f7 fe6b 	bl	8000330 <memchr>
 800865a:	2800      	cmp	r0, #0
 800865c:	d034      	beq.n	80086c8 <_vfiprintf_r+0x1f8>
 800865e:	4b25      	ldr	r3, [pc, #148]	; (80086f4 <_vfiprintf_r+0x224>)
 8008660:	bb03      	cbnz	r3, 80086a4 <_vfiprintf_r+0x1d4>
 8008662:	9b03      	ldr	r3, [sp, #12]
 8008664:	3307      	adds	r3, #7
 8008666:	f023 0307 	bic.w	r3, r3, #7
 800866a:	3308      	adds	r3, #8
 800866c:	9303      	str	r3, [sp, #12]
 800866e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008670:	444b      	add	r3, r9
 8008672:	9309      	str	r3, [sp, #36]	; 0x24
 8008674:	e74c      	b.n	8008510 <_vfiprintf_r+0x40>
 8008676:	fb00 3202 	mla	r2, r0, r2, r3
 800867a:	2101      	movs	r1, #1
 800867c:	e786      	b.n	800858c <_vfiprintf_r+0xbc>
 800867e:	2300      	movs	r3, #0
 8008680:	9305      	str	r3, [sp, #20]
 8008682:	4618      	mov	r0, r3
 8008684:	250a      	movs	r5, #10
 8008686:	4688      	mov	r8, r1
 8008688:	3101      	adds	r1, #1
 800868a:	f898 2000 	ldrb.w	r2, [r8]
 800868e:	3a30      	subs	r2, #48	; 0x30
 8008690:	2a09      	cmp	r2, #9
 8008692:	d903      	bls.n	800869c <_vfiprintf_r+0x1cc>
 8008694:	2b00      	cmp	r3, #0
 8008696:	d0c5      	beq.n	8008624 <_vfiprintf_r+0x154>
 8008698:	9005      	str	r0, [sp, #20]
 800869a:	e7c3      	b.n	8008624 <_vfiprintf_r+0x154>
 800869c:	fb05 2000 	mla	r0, r5, r0, r2
 80086a0:	2301      	movs	r3, #1
 80086a2:	e7f0      	b.n	8008686 <_vfiprintf_r+0x1b6>
 80086a4:	ab03      	add	r3, sp, #12
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	4622      	mov	r2, r4
 80086aa:	4b13      	ldr	r3, [pc, #76]	; (80086f8 <_vfiprintf_r+0x228>)
 80086ac:	a904      	add	r1, sp, #16
 80086ae:	4630      	mov	r0, r6
 80086b0:	f3af 8000 	nop.w
 80086b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80086b8:	4681      	mov	r9, r0
 80086ba:	d1d8      	bne.n	800866e <_vfiprintf_r+0x19e>
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	065b      	lsls	r3, r3, #25
 80086c0:	f53f af7d 	bmi.w	80085be <_vfiprintf_r+0xee>
 80086c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086c6:	e77c      	b.n	80085c2 <_vfiprintf_r+0xf2>
 80086c8:	ab03      	add	r3, sp, #12
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	4622      	mov	r2, r4
 80086ce:	4b0a      	ldr	r3, [pc, #40]	; (80086f8 <_vfiprintf_r+0x228>)
 80086d0:	a904      	add	r1, sp, #16
 80086d2:	4630      	mov	r0, r6
 80086d4:	f000 f888 	bl	80087e8 <_printf_i>
 80086d8:	e7ec      	b.n	80086b4 <_vfiprintf_r+0x1e4>
 80086da:	bf00      	nop
 80086dc:	080094ec 	.word	0x080094ec
 80086e0:	08009530 	.word	0x08009530
 80086e4:	0800950c 	.word	0x0800950c
 80086e8:	080094cc 	.word	0x080094cc
 80086ec:	08009536 	.word	0x08009536
 80086f0:	0800953a 	.word	0x0800953a
 80086f4:	00000000 	.word	0x00000000
 80086f8:	080084ad 	.word	0x080084ad

080086fc <_printf_common>:
 80086fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008700:	4691      	mov	r9, r2
 8008702:	461f      	mov	r7, r3
 8008704:	688a      	ldr	r2, [r1, #8]
 8008706:	690b      	ldr	r3, [r1, #16]
 8008708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800870c:	4293      	cmp	r3, r2
 800870e:	bfb8      	it	lt
 8008710:	4613      	movlt	r3, r2
 8008712:	f8c9 3000 	str.w	r3, [r9]
 8008716:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800871a:	4606      	mov	r6, r0
 800871c:	460c      	mov	r4, r1
 800871e:	b112      	cbz	r2, 8008726 <_printf_common+0x2a>
 8008720:	3301      	adds	r3, #1
 8008722:	f8c9 3000 	str.w	r3, [r9]
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	0699      	lsls	r1, r3, #26
 800872a:	bf42      	ittt	mi
 800872c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008730:	3302      	addmi	r3, #2
 8008732:	f8c9 3000 	strmi.w	r3, [r9]
 8008736:	6825      	ldr	r5, [r4, #0]
 8008738:	f015 0506 	ands.w	r5, r5, #6
 800873c:	d107      	bne.n	800874e <_printf_common+0x52>
 800873e:	f104 0a19 	add.w	sl, r4, #25
 8008742:	68e3      	ldr	r3, [r4, #12]
 8008744:	f8d9 2000 	ldr.w	r2, [r9]
 8008748:	1a9b      	subs	r3, r3, r2
 800874a:	429d      	cmp	r5, r3
 800874c:	db29      	blt.n	80087a2 <_printf_common+0xa6>
 800874e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008752:	6822      	ldr	r2, [r4, #0]
 8008754:	3300      	adds	r3, #0
 8008756:	bf18      	it	ne
 8008758:	2301      	movne	r3, #1
 800875a:	0692      	lsls	r2, r2, #26
 800875c:	d42e      	bmi.n	80087bc <_printf_common+0xc0>
 800875e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008762:	4639      	mov	r1, r7
 8008764:	4630      	mov	r0, r6
 8008766:	47c0      	blx	r8
 8008768:	3001      	adds	r0, #1
 800876a:	d021      	beq.n	80087b0 <_printf_common+0xb4>
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	68e5      	ldr	r5, [r4, #12]
 8008770:	f8d9 2000 	ldr.w	r2, [r9]
 8008774:	f003 0306 	and.w	r3, r3, #6
 8008778:	2b04      	cmp	r3, #4
 800877a:	bf08      	it	eq
 800877c:	1aad      	subeq	r5, r5, r2
 800877e:	68a3      	ldr	r3, [r4, #8]
 8008780:	6922      	ldr	r2, [r4, #16]
 8008782:	bf0c      	ite	eq
 8008784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008788:	2500      	movne	r5, #0
 800878a:	4293      	cmp	r3, r2
 800878c:	bfc4      	itt	gt
 800878e:	1a9b      	subgt	r3, r3, r2
 8008790:	18ed      	addgt	r5, r5, r3
 8008792:	f04f 0900 	mov.w	r9, #0
 8008796:	341a      	adds	r4, #26
 8008798:	454d      	cmp	r5, r9
 800879a:	d11b      	bne.n	80087d4 <_printf_common+0xd8>
 800879c:	2000      	movs	r0, #0
 800879e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a2:	2301      	movs	r3, #1
 80087a4:	4652      	mov	r2, sl
 80087a6:	4639      	mov	r1, r7
 80087a8:	4630      	mov	r0, r6
 80087aa:	47c0      	blx	r8
 80087ac:	3001      	adds	r0, #1
 80087ae:	d103      	bne.n	80087b8 <_printf_common+0xbc>
 80087b0:	f04f 30ff 	mov.w	r0, #4294967295
 80087b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b8:	3501      	adds	r5, #1
 80087ba:	e7c2      	b.n	8008742 <_printf_common+0x46>
 80087bc:	18e1      	adds	r1, r4, r3
 80087be:	1c5a      	adds	r2, r3, #1
 80087c0:	2030      	movs	r0, #48	; 0x30
 80087c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087c6:	4422      	add	r2, r4
 80087c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087d0:	3302      	adds	r3, #2
 80087d2:	e7c4      	b.n	800875e <_printf_common+0x62>
 80087d4:	2301      	movs	r3, #1
 80087d6:	4622      	mov	r2, r4
 80087d8:	4639      	mov	r1, r7
 80087da:	4630      	mov	r0, r6
 80087dc:	47c0      	blx	r8
 80087de:	3001      	adds	r0, #1
 80087e0:	d0e6      	beq.n	80087b0 <_printf_common+0xb4>
 80087e2:	f109 0901 	add.w	r9, r9, #1
 80087e6:	e7d7      	b.n	8008798 <_printf_common+0x9c>

080087e8 <_printf_i>:
 80087e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087ec:	4617      	mov	r7, r2
 80087ee:	7e0a      	ldrb	r2, [r1, #24]
 80087f0:	b085      	sub	sp, #20
 80087f2:	2a6e      	cmp	r2, #110	; 0x6e
 80087f4:	4698      	mov	r8, r3
 80087f6:	4606      	mov	r6, r0
 80087f8:	460c      	mov	r4, r1
 80087fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087fc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8008800:	f000 80bc 	beq.w	800897c <_printf_i+0x194>
 8008804:	d81a      	bhi.n	800883c <_printf_i+0x54>
 8008806:	2a63      	cmp	r2, #99	; 0x63
 8008808:	d02e      	beq.n	8008868 <_printf_i+0x80>
 800880a:	d80a      	bhi.n	8008822 <_printf_i+0x3a>
 800880c:	2a00      	cmp	r2, #0
 800880e:	f000 80c8 	beq.w	80089a2 <_printf_i+0x1ba>
 8008812:	2a58      	cmp	r2, #88	; 0x58
 8008814:	f000 808a 	beq.w	800892c <_printf_i+0x144>
 8008818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800881c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8008820:	e02a      	b.n	8008878 <_printf_i+0x90>
 8008822:	2a64      	cmp	r2, #100	; 0x64
 8008824:	d001      	beq.n	800882a <_printf_i+0x42>
 8008826:	2a69      	cmp	r2, #105	; 0x69
 8008828:	d1f6      	bne.n	8008818 <_printf_i+0x30>
 800882a:	6821      	ldr	r1, [r4, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008832:	d023      	beq.n	800887c <_printf_i+0x94>
 8008834:	1d11      	adds	r1, r2, #4
 8008836:	6019      	str	r1, [r3, #0]
 8008838:	6813      	ldr	r3, [r2, #0]
 800883a:	e027      	b.n	800888c <_printf_i+0xa4>
 800883c:	2a73      	cmp	r2, #115	; 0x73
 800883e:	f000 80b4 	beq.w	80089aa <_printf_i+0x1c2>
 8008842:	d808      	bhi.n	8008856 <_printf_i+0x6e>
 8008844:	2a6f      	cmp	r2, #111	; 0x6f
 8008846:	d02a      	beq.n	800889e <_printf_i+0xb6>
 8008848:	2a70      	cmp	r2, #112	; 0x70
 800884a:	d1e5      	bne.n	8008818 <_printf_i+0x30>
 800884c:	680a      	ldr	r2, [r1, #0]
 800884e:	f042 0220 	orr.w	r2, r2, #32
 8008852:	600a      	str	r2, [r1, #0]
 8008854:	e003      	b.n	800885e <_printf_i+0x76>
 8008856:	2a75      	cmp	r2, #117	; 0x75
 8008858:	d021      	beq.n	800889e <_printf_i+0xb6>
 800885a:	2a78      	cmp	r2, #120	; 0x78
 800885c:	d1dc      	bne.n	8008818 <_printf_i+0x30>
 800885e:	2278      	movs	r2, #120	; 0x78
 8008860:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8008864:	496e      	ldr	r1, [pc, #440]	; (8008a20 <_printf_i+0x238>)
 8008866:	e064      	b.n	8008932 <_printf_i+0x14a>
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800886e:	1d11      	adds	r1, r2, #4
 8008870:	6019      	str	r1, [r3, #0]
 8008872:	6813      	ldr	r3, [r2, #0]
 8008874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008878:	2301      	movs	r3, #1
 800887a:	e0a3      	b.n	80089c4 <_printf_i+0x1dc>
 800887c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008880:	f102 0104 	add.w	r1, r2, #4
 8008884:	6019      	str	r1, [r3, #0]
 8008886:	d0d7      	beq.n	8008838 <_printf_i+0x50>
 8008888:	f9b2 3000 	ldrsh.w	r3, [r2]
 800888c:	2b00      	cmp	r3, #0
 800888e:	da03      	bge.n	8008898 <_printf_i+0xb0>
 8008890:	222d      	movs	r2, #45	; 0x2d
 8008892:	425b      	negs	r3, r3
 8008894:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008898:	4962      	ldr	r1, [pc, #392]	; (8008a24 <_printf_i+0x23c>)
 800889a:	220a      	movs	r2, #10
 800889c:	e017      	b.n	80088ce <_printf_i+0xe6>
 800889e:	6820      	ldr	r0, [r4, #0]
 80088a0:	6819      	ldr	r1, [r3, #0]
 80088a2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80088a6:	d003      	beq.n	80088b0 <_printf_i+0xc8>
 80088a8:	1d08      	adds	r0, r1, #4
 80088aa:	6018      	str	r0, [r3, #0]
 80088ac:	680b      	ldr	r3, [r1, #0]
 80088ae:	e006      	b.n	80088be <_printf_i+0xd6>
 80088b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088b4:	f101 0004 	add.w	r0, r1, #4
 80088b8:	6018      	str	r0, [r3, #0]
 80088ba:	d0f7      	beq.n	80088ac <_printf_i+0xc4>
 80088bc:	880b      	ldrh	r3, [r1, #0]
 80088be:	4959      	ldr	r1, [pc, #356]	; (8008a24 <_printf_i+0x23c>)
 80088c0:	2a6f      	cmp	r2, #111	; 0x6f
 80088c2:	bf14      	ite	ne
 80088c4:	220a      	movne	r2, #10
 80088c6:	2208      	moveq	r2, #8
 80088c8:	2000      	movs	r0, #0
 80088ca:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80088ce:	6865      	ldr	r5, [r4, #4]
 80088d0:	60a5      	str	r5, [r4, #8]
 80088d2:	2d00      	cmp	r5, #0
 80088d4:	f2c0 809c 	blt.w	8008a10 <_printf_i+0x228>
 80088d8:	6820      	ldr	r0, [r4, #0]
 80088da:	f020 0004 	bic.w	r0, r0, #4
 80088de:	6020      	str	r0, [r4, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d13f      	bne.n	8008964 <_printf_i+0x17c>
 80088e4:	2d00      	cmp	r5, #0
 80088e6:	f040 8095 	bne.w	8008a14 <_printf_i+0x22c>
 80088ea:	4675      	mov	r5, lr
 80088ec:	2a08      	cmp	r2, #8
 80088ee:	d10b      	bne.n	8008908 <_printf_i+0x120>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	07da      	lsls	r2, r3, #31
 80088f4:	d508      	bpl.n	8008908 <_printf_i+0x120>
 80088f6:	6923      	ldr	r3, [r4, #16]
 80088f8:	6862      	ldr	r2, [r4, #4]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	bfde      	ittt	le
 80088fe:	2330      	movle	r3, #48	; 0x30
 8008900:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008904:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008908:	ebae 0305 	sub.w	r3, lr, r5
 800890c:	6123      	str	r3, [r4, #16]
 800890e:	f8cd 8000 	str.w	r8, [sp]
 8008912:	463b      	mov	r3, r7
 8008914:	aa03      	add	r2, sp, #12
 8008916:	4621      	mov	r1, r4
 8008918:	4630      	mov	r0, r6
 800891a:	f7ff feef 	bl	80086fc <_printf_common>
 800891e:	3001      	adds	r0, #1
 8008920:	d155      	bne.n	80089ce <_printf_i+0x1e6>
 8008922:	f04f 30ff 	mov.w	r0, #4294967295
 8008926:	b005      	add	sp, #20
 8008928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800892c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8008930:	493c      	ldr	r1, [pc, #240]	; (8008a24 <_printf_i+0x23c>)
 8008932:	6822      	ldr	r2, [r4, #0]
 8008934:	6818      	ldr	r0, [r3, #0]
 8008936:	f012 0f80 	tst.w	r2, #128	; 0x80
 800893a:	f100 0504 	add.w	r5, r0, #4
 800893e:	601d      	str	r5, [r3, #0]
 8008940:	d001      	beq.n	8008946 <_printf_i+0x15e>
 8008942:	6803      	ldr	r3, [r0, #0]
 8008944:	e002      	b.n	800894c <_printf_i+0x164>
 8008946:	0655      	lsls	r5, r2, #25
 8008948:	d5fb      	bpl.n	8008942 <_printf_i+0x15a>
 800894a:	8803      	ldrh	r3, [r0, #0]
 800894c:	07d0      	lsls	r0, r2, #31
 800894e:	bf44      	itt	mi
 8008950:	f042 0220 	orrmi.w	r2, r2, #32
 8008954:	6022      	strmi	r2, [r4, #0]
 8008956:	b91b      	cbnz	r3, 8008960 <_printf_i+0x178>
 8008958:	6822      	ldr	r2, [r4, #0]
 800895a:	f022 0220 	bic.w	r2, r2, #32
 800895e:	6022      	str	r2, [r4, #0]
 8008960:	2210      	movs	r2, #16
 8008962:	e7b1      	b.n	80088c8 <_printf_i+0xe0>
 8008964:	4675      	mov	r5, lr
 8008966:	fbb3 f0f2 	udiv	r0, r3, r2
 800896a:	fb02 3310 	mls	r3, r2, r0, r3
 800896e:	5ccb      	ldrb	r3, [r1, r3]
 8008970:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008974:	4603      	mov	r3, r0
 8008976:	2800      	cmp	r0, #0
 8008978:	d1f5      	bne.n	8008966 <_printf_i+0x17e>
 800897a:	e7b7      	b.n	80088ec <_printf_i+0x104>
 800897c:	6808      	ldr	r0, [r1, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	6949      	ldr	r1, [r1, #20]
 8008982:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008986:	d004      	beq.n	8008992 <_printf_i+0x1aa>
 8008988:	1d10      	adds	r0, r2, #4
 800898a:	6018      	str	r0, [r3, #0]
 800898c:	6813      	ldr	r3, [r2, #0]
 800898e:	6019      	str	r1, [r3, #0]
 8008990:	e007      	b.n	80089a2 <_printf_i+0x1ba>
 8008992:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008996:	f102 0004 	add.w	r0, r2, #4
 800899a:	6018      	str	r0, [r3, #0]
 800899c:	6813      	ldr	r3, [r2, #0]
 800899e:	d0f6      	beq.n	800898e <_printf_i+0x1a6>
 80089a0:	8019      	strh	r1, [r3, #0]
 80089a2:	2300      	movs	r3, #0
 80089a4:	6123      	str	r3, [r4, #16]
 80089a6:	4675      	mov	r5, lr
 80089a8:	e7b1      	b.n	800890e <_printf_i+0x126>
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	1d11      	adds	r1, r2, #4
 80089ae:	6019      	str	r1, [r3, #0]
 80089b0:	6815      	ldr	r5, [r2, #0]
 80089b2:	6862      	ldr	r2, [r4, #4]
 80089b4:	2100      	movs	r1, #0
 80089b6:	4628      	mov	r0, r5
 80089b8:	f7f7 fcba 	bl	8000330 <memchr>
 80089bc:	b108      	cbz	r0, 80089c2 <_printf_i+0x1da>
 80089be:	1b40      	subs	r0, r0, r5
 80089c0:	6060      	str	r0, [r4, #4]
 80089c2:	6863      	ldr	r3, [r4, #4]
 80089c4:	6123      	str	r3, [r4, #16]
 80089c6:	2300      	movs	r3, #0
 80089c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089cc:	e79f      	b.n	800890e <_printf_i+0x126>
 80089ce:	6923      	ldr	r3, [r4, #16]
 80089d0:	462a      	mov	r2, r5
 80089d2:	4639      	mov	r1, r7
 80089d4:	4630      	mov	r0, r6
 80089d6:	47c0      	blx	r8
 80089d8:	3001      	adds	r0, #1
 80089da:	d0a2      	beq.n	8008922 <_printf_i+0x13a>
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	079b      	lsls	r3, r3, #30
 80089e0:	d507      	bpl.n	80089f2 <_printf_i+0x20a>
 80089e2:	2500      	movs	r5, #0
 80089e4:	f104 0919 	add.w	r9, r4, #25
 80089e8:	68e3      	ldr	r3, [r4, #12]
 80089ea:	9a03      	ldr	r2, [sp, #12]
 80089ec:	1a9b      	subs	r3, r3, r2
 80089ee:	429d      	cmp	r5, r3
 80089f0:	db05      	blt.n	80089fe <_printf_i+0x216>
 80089f2:	68e0      	ldr	r0, [r4, #12]
 80089f4:	9b03      	ldr	r3, [sp, #12]
 80089f6:	4298      	cmp	r0, r3
 80089f8:	bfb8      	it	lt
 80089fa:	4618      	movlt	r0, r3
 80089fc:	e793      	b.n	8008926 <_printf_i+0x13e>
 80089fe:	2301      	movs	r3, #1
 8008a00:	464a      	mov	r2, r9
 8008a02:	4639      	mov	r1, r7
 8008a04:	4630      	mov	r0, r6
 8008a06:	47c0      	blx	r8
 8008a08:	3001      	adds	r0, #1
 8008a0a:	d08a      	beq.n	8008922 <_printf_i+0x13a>
 8008a0c:	3501      	adds	r5, #1
 8008a0e:	e7eb      	b.n	80089e8 <_printf_i+0x200>
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1a7      	bne.n	8008964 <_printf_i+0x17c>
 8008a14:	780b      	ldrb	r3, [r1, #0]
 8008a16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a1e:	e765      	b.n	80088ec <_printf_i+0x104>
 8008a20:	08009552 	.word	0x08009552
 8008a24:	08009541 	.word	0x08009541

08008a28 <_putc_r>:
 8008a28:	b570      	push	{r4, r5, r6, lr}
 8008a2a:	460d      	mov	r5, r1
 8008a2c:	4614      	mov	r4, r2
 8008a2e:	4606      	mov	r6, r0
 8008a30:	b118      	cbz	r0, 8008a3a <_putc_r+0x12>
 8008a32:	6983      	ldr	r3, [r0, #24]
 8008a34:	b90b      	cbnz	r3, 8008a3a <_putc_r+0x12>
 8008a36:	f7ff fc95 	bl	8008364 <__sinit>
 8008a3a:	4b13      	ldr	r3, [pc, #76]	; (8008a88 <_putc_r+0x60>)
 8008a3c:	429c      	cmp	r4, r3
 8008a3e:	d112      	bne.n	8008a66 <_putc_r+0x3e>
 8008a40:	6874      	ldr	r4, [r6, #4]
 8008a42:	68a3      	ldr	r3, [r4, #8]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	60a3      	str	r3, [r4, #8]
 8008a4a:	da16      	bge.n	8008a7a <_putc_r+0x52>
 8008a4c:	69a2      	ldr	r2, [r4, #24]
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	db02      	blt.n	8008a58 <_putc_r+0x30>
 8008a52:	b2eb      	uxtb	r3, r5
 8008a54:	2b0a      	cmp	r3, #10
 8008a56:	d110      	bne.n	8008a7a <_putc_r+0x52>
 8008a58:	4622      	mov	r2, r4
 8008a5a:	4629      	mov	r1, r5
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a62:	f000 b85b 	b.w	8008b1c <__swbuf_r>
 8008a66:	4b09      	ldr	r3, [pc, #36]	; (8008a8c <_putc_r+0x64>)
 8008a68:	429c      	cmp	r4, r3
 8008a6a:	d101      	bne.n	8008a70 <_putc_r+0x48>
 8008a6c:	68b4      	ldr	r4, [r6, #8]
 8008a6e:	e7e8      	b.n	8008a42 <_putc_r+0x1a>
 8008a70:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <_putc_r+0x68>)
 8008a72:	429c      	cmp	r4, r3
 8008a74:	bf08      	it	eq
 8008a76:	68f4      	ldreq	r4, [r6, #12]
 8008a78:	e7e3      	b.n	8008a42 <_putc_r+0x1a>
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	6022      	str	r2, [r4, #0]
 8008a80:	701d      	strb	r5, [r3, #0]
 8008a82:	b2e8      	uxtb	r0, r5
 8008a84:	bd70      	pop	{r4, r5, r6, pc}
 8008a86:	bf00      	nop
 8008a88:	080094ec 	.word	0x080094ec
 8008a8c:	0800950c 	.word	0x0800950c
 8008a90:	080094cc 	.word	0x080094cc

08008a94 <__sread>:
 8008a94:	b510      	push	{r4, lr}
 8008a96:	460c      	mov	r4, r1
 8008a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a9c:	f000 fa48 	bl	8008f30 <_read_r>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	bfab      	itete	ge
 8008aa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008aa6:	89a3      	ldrhlt	r3, [r4, #12]
 8008aa8:	181b      	addge	r3, r3, r0
 8008aaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008aae:	bfac      	ite	ge
 8008ab0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ab2:	81a3      	strhlt	r3, [r4, #12]
 8008ab4:	bd10      	pop	{r4, pc}

08008ab6 <__swrite>:
 8008ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aba:	461f      	mov	r7, r3
 8008abc:	898b      	ldrh	r3, [r1, #12]
 8008abe:	05db      	lsls	r3, r3, #23
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	460c      	mov	r4, r1
 8008ac4:	4616      	mov	r6, r2
 8008ac6:	d505      	bpl.n	8008ad4 <__swrite+0x1e>
 8008ac8:	2302      	movs	r3, #2
 8008aca:	2200      	movs	r2, #0
 8008acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad0:	f000 f9b8 	bl	8008e44 <_lseek_r>
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ade:	81a3      	strh	r3, [r4, #12]
 8008ae0:	4632      	mov	r2, r6
 8008ae2:	463b      	mov	r3, r7
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aea:	f000 b869 	b.w	8008bc0 <_write_r>

08008aee <__sseek>:
 8008aee:	b510      	push	{r4, lr}
 8008af0:	460c      	mov	r4, r1
 8008af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af6:	f000 f9a5 	bl	8008e44 <_lseek_r>
 8008afa:	1c43      	adds	r3, r0, #1
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	bf15      	itete	ne
 8008b00:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b0a:	81a3      	strheq	r3, [r4, #12]
 8008b0c:	bf18      	it	ne
 8008b0e:	81a3      	strhne	r3, [r4, #12]
 8008b10:	bd10      	pop	{r4, pc}

08008b12 <__sclose>:
 8008b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b16:	f000 b8d3 	b.w	8008cc0 <_close_r>
	...

08008b1c <__swbuf_r>:
 8008b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1e:	460e      	mov	r6, r1
 8008b20:	4614      	mov	r4, r2
 8008b22:	4605      	mov	r5, r0
 8008b24:	b118      	cbz	r0, 8008b2e <__swbuf_r+0x12>
 8008b26:	6983      	ldr	r3, [r0, #24]
 8008b28:	b90b      	cbnz	r3, 8008b2e <__swbuf_r+0x12>
 8008b2a:	f7ff fc1b 	bl	8008364 <__sinit>
 8008b2e:	4b21      	ldr	r3, [pc, #132]	; (8008bb4 <__swbuf_r+0x98>)
 8008b30:	429c      	cmp	r4, r3
 8008b32:	d12a      	bne.n	8008b8a <__swbuf_r+0x6e>
 8008b34:	686c      	ldr	r4, [r5, #4]
 8008b36:	69a3      	ldr	r3, [r4, #24]
 8008b38:	60a3      	str	r3, [r4, #8]
 8008b3a:	89a3      	ldrh	r3, [r4, #12]
 8008b3c:	071a      	lsls	r2, r3, #28
 8008b3e:	d52e      	bpl.n	8008b9e <__swbuf_r+0x82>
 8008b40:	6923      	ldr	r3, [r4, #16]
 8008b42:	b363      	cbz	r3, 8008b9e <__swbuf_r+0x82>
 8008b44:	6923      	ldr	r3, [r4, #16]
 8008b46:	6820      	ldr	r0, [r4, #0]
 8008b48:	1ac0      	subs	r0, r0, r3
 8008b4a:	6963      	ldr	r3, [r4, #20]
 8008b4c:	b2f6      	uxtb	r6, r6
 8008b4e:	4298      	cmp	r0, r3
 8008b50:	4637      	mov	r7, r6
 8008b52:	db04      	blt.n	8008b5e <__swbuf_r+0x42>
 8008b54:	4621      	mov	r1, r4
 8008b56:	4628      	mov	r0, r5
 8008b58:	f000 f94a 	bl	8008df0 <_fflush_r>
 8008b5c:	bb28      	cbnz	r0, 8008baa <__swbuf_r+0x8e>
 8008b5e:	68a3      	ldr	r3, [r4, #8]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	60a3      	str	r3, [r4, #8]
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	6022      	str	r2, [r4, #0]
 8008b6a:	701e      	strb	r6, [r3, #0]
 8008b6c:	6963      	ldr	r3, [r4, #20]
 8008b6e:	3001      	adds	r0, #1
 8008b70:	4298      	cmp	r0, r3
 8008b72:	d004      	beq.n	8008b7e <__swbuf_r+0x62>
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	07db      	lsls	r3, r3, #31
 8008b78:	d519      	bpl.n	8008bae <__swbuf_r+0x92>
 8008b7a:	2e0a      	cmp	r6, #10
 8008b7c:	d117      	bne.n	8008bae <__swbuf_r+0x92>
 8008b7e:	4621      	mov	r1, r4
 8008b80:	4628      	mov	r0, r5
 8008b82:	f000 f935 	bl	8008df0 <_fflush_r>
 8008b86:	b190      	cbz	r0, 8008bae <__swbuf_r+0x92>
 8008b88:	e00f      	b.n	8008baa <__swbuf_r+0x8e>
 8008b8a:	4b0b      	ldr	r3, [pc, #44]	; (8008bb8 <__swbuf_r+0x9c>)
 8008b8c:	429c      	cmp	r4, r3
 8008b8e:	d101      	bne.n	8008b94 <__swbuf_r+0x78>
 8008b90:	68ac      	ldr	r4, [r5, #8]
 8008b92:	e7d0      	b.n	8008b36 <__swbuf_r+0x1a>
 8008b94:	4b09      	ldr	r3, [pc, #36]	; (8008bbc <__swbuf_r+0xa0>)
 8008b96:	429c      	cmp	r4, r3
 8008b98:	bf08      	it	eq
 8008b9a:	68ec      	ldreq	r4, [r5, #12]
 8008b9c:	e7cb      	b.n	8008b36 <__swbuf_r+0x1a>
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	f000 f81f 	bl	8008be4 <__swsetup_r>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d0cc      	beq.n	8008b44 <__swbuf_r+0x28>
 8008baa:	f04f 37ff 	mov.w	r7, #4294967295
 8008bae:	4638      	mov	r0, r7
 8008bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	080094ec 	.word	0x080094ec
 8008bb8:	0800950c 	.word	0x0800950c
 8008bbc:	080094cc 	.word	0x080094cc

08008bc0 <_write_r>:
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	4c07      	ldr	r4, [pc, #28]	; (8008be0 <_write_r+0x20>)
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	4608      	mov	r0, r1
 8008bc8:	4611      	mov	r1, r2
 8008bca:	2200      	movs	r2, #0
 8008bcc:	6022      	str	r2, [r4, #0]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	f000 fa18 	bl	8009004 <_write>
 8008bd4:	1c43      	adds	r3, r0, #1
 8008bd6:	d102      	bne.n	8008bde <_write_r+0x1e>
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	b103      	cbz	r3, 8008bde <_write_r+0x1e>
 8008bdc:	602b      	str	r3, [r5, #0]
 8008bde:	bd38      	pop	{r3, r4, r5, pc}
 8008be0:	200007ec 	.word	0x200007ec

08008be4 <__swsetup_r>:
 8008be4:	4b32      	ldr	r3, [pc, #200]	; (8008cb0 <__swsetup_r+0xcc>)
 8008be6:	b570      	push	{r4, r5, r6, lr}
 8008be8:	681d      	ldr	r5, [r3, #0]
 8008bea:	4606      	mov	r6, r0
 8008bec:	460c      	mov	r4, r1
 8008bee:	b125      	cbz	r5, 8008bfa <__swsetup_r+0x16>
 8008bf0:	69ab      	ldr	r3, [r5, #24]
 8008bf2:	b913      	cbnz	r3, 8008bfa <__swsetup_r+0x16>
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	f7ff fbb5 	bl	8008364 <__sinit>
 8008bfa:	4b2e      	ldr	r3, [pc, #184]	; (8008cb4 <__swsetup_r+0xd0>)
 8008bfc:	429c      	cmp	r4, r3
 8008bfe:	d10f      	bne.n	8008c20 <__swsetup_r+0x3c>
 8008c00:	686c      	ldr	r4, [r5, #4]
 8008c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	0715      	lsls	r5, r2, #28
 8008c0a:	d42c      	bmi.n	8008c66 <__swsetup_r+0x82>
 8008c0c:	06d0      	lsls	r0, r2, #27
 8008c0e:	d411      	bmi.n	8008c34 <__swsetup_r+0x50>
 8008c10:	2209      	movs	r2, #9
 8008c12:	6032      	str	r2, [r6, #0]
 8008c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c18:	81a3      	strh	r3, [r4, #12]
 8008c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}
 8008c20:	4b25      	ldr	r3, [pc, #148]	; (8008cb8 <__swsetup_r+0xd4>)
 8008c22:	429c      	cmp	r4, r3
 8008c24:	d101      	bne.n	8008c2a <__swsetup_r+0x46>
 8008c26:	68ac      	ldr	r4, [r5, #8]
 8008c28:	e7eb      	b.n	8008c02 <__swsetup_r+0x1e>
 8008c2a:	4b24      	ldr	r3, [pc, #144]	; (8008cbc <__swsetup_r+0xd8>)
 8008c2c:	429c      	cmp	r4, r3
 8008c2e:	bf08      	it	eq
 8008c30:	68ec      	ldreq	r4, [r5, #12]
 8008c32:	e7e6      	b.n	8008c02 <__swsetup_r+0x1e>
 8008c34:	0751      	lsls	r1, r2, #29
 8008c36:	d512      	bpl.n	8008c5e <__swsetup_r+0x7a>
 8008c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c3a:	b141      	cbz	r1, 8008c4e <__swsetup_r+0x6a>
 8008c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c40:	4299      	cmp	r1, r3
 8008c42:	d002      	beq.n	8008c4a <__swsetup_r+0x66>
 8008c44:	4630      	mov	r0, r6
 8008c46:	f7ff fa65 	bl	8008114 <_free_r>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	6363      	str	r3, [r4, #52]	; 0x34
 8008c4e:	89a3      	ldrh	r3, [r4, #12]
 8008c50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c54:	81a3      	strh	r3, [r4, #12]
 8008c56:	2300      	movs	r3, #0
 8008c58:	6063      	str	r3, [r4, #4]
 8008c5a:	6923      	ldr	r3, [r4, #16]
 8008c5c:	6023      	str	r3, [r4, #0]
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	f043 0308 	orr.w	r3, r3, #8
 8008c64:	81a3      	strh	r3, [r4, #12]
 8008c66:	6923      	ldr	r3, [r4, #16]
 8008c68:	b94b      	cbnz	r3, 8008c7e <__swsetup_r+0x9a>
 8008c6a:	89a3      	ldrh	r3, [r4, #12]
 8008c6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c74:	d003      	beq.n	8008c7e <__swsetup_r+0x9a>
 8008c76:	4621      	mov	r1, r4
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f000 f919 	bl	8008eb0 <__smakebuf_r>
 8008c7e:	89a2      	ldrh	r2, [r4, #12]
 8008c80:	f012 0301 	ands.w	r3, r2, #1
 8008c84:	d00c      	beq.n	8008ca0 <__swsetup_r+0xbc>
 8008c86:	2300      	movs	r3, #0
 8008c88:	60a3      	str	r3, [r4, #8]
 8008c8a:	6963      	ldr	r3, [r4, #20]
 8008c8c:	425b      	negs	r3, r3
 8008c8e:	61a3      	str	r3, [r4, #24]
 8008c90:	6923      	ldr	r3, [r4, #16]
 8008c92:	b953      	cbnz	r3, 8008caa <__swsetup_r+0xc6>
 8008c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c98:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008c9c:	d1ba      	bne.n	8008c14 <__swsetup_r+0x30>
 8008c9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ca0:	0792      	lsls	r2, r2, #30
 8008ca2:	bf58      	it	pl
 8008ca4:	6963      	ldrpl	r3, [r4, #20]
 8008ca6:	60a3      	str	r3, [r4, #8]
 8008ca8:	e7f2      	b.n	8008c90 <__swsetup_r+0xac>
 8008caa:	2000      	movs	r0, #0
 8008cac:	e7f7      	b.n	8008c9e <__swsetup_r+0xba>
 8008cae:	bf00      	nop
 8008cb0:	2000002c 	.word	0x2000002c
 8008cb4:	080094ec 	.word	0x080094ec
 8008cb8:	0800950c 	.word	0x0800950c
 8008cbc:	080094cc 	.word	0x080094cc

08008cc0 <_close_r>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	4c06      	ldr	r4, [pc, #24]	; (8008cdc <_close_r+0x1c>)
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	4608      	mov	r0, r1
 8008cca:	6023      	str	r3, [r4, #0]
 8008ccc:	f000 f964 	bl	8008f98 <_close>
 8008cd0:	1c43      	adds	r3, r0, #1
 8008cd2:	d102      	bne.n	8008cda <_close_r+0x1a>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	b103      	cbz	r3, 8008cda <_close_r+0x1a>
 8008cd8:	602b      	str	r3, [r5, #0]
 8008cda:	bd38      	pop	{r3, r4, r5, pc}
 8008cdc:	200007ec 	.word	0x200007ec

08008ce0 <__sflush_r>:
 8008ce0:	898a      	ldrh	r2, [r1, #12]
 8008ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	0710      	lsls	r0, r2, #28
 8008cea:	460c      	mov	r4, r1
 8008cec:	d45a      	bmi.n	8008da4 <__sflush_r+0xc4>
 8008cee:	684b      	ldr	r3, [r1, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	dc05      	bgt.n	8008d00 <__sflush_r+0x20>
 8008cf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	dc02      	bgt.n	8008d00 <__sflush_r+0x20>
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d02:	2e00      	cmp	r6, #0
 8008d04:	d0f9      	beq.n	8008cfa <__sflush_r+0x1a>
 8008d06:	2300      	movs	r3, #0
 8008d08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d0c:	682f      	ldr	r7, [r5, #0]
 8008d0e:	602b      	str	r3, [r5, #0]
 8008d10:	d033      	beq.n	8008d7a <__sflush_r+0x9a>
 8008d12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	075a      	lsls	r2, r3, #29
 8008d18:	d505      	bpl.n	8008d26 <__sflush_r+0x46>
 8008d1a:	6863      	ldr	r3, [r4, #4]
 8008d1c:	1ac0      	subs	r0, r0, r3
 8008d1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d20:	b10b      	cbz	r3, 8008d26 <__sflush_r+0x46>
 8008d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d24:	1ac0      	subs	r0, r0, r3
 8008d26:	2300      	movs	r3, #0
 8008d28:	4602      	mov	r2, r0
 8008d2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d2c:	6a21      	ldr	r1, [r4, #32]
 8008d2e:	4628      	mov	r0, r5
 8008d30:	47b0      	blx	r6
 8008d32:	1c43      	adds	r3, r0, #1
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	d106      	bne.n	8008d46 <__sflush_r+0x66>
 8008d38:	6829      	ldr	r1, [r5, #0]
 8008d3a:	291d      	cmp	r1, #29
 8008d3c:	d84b      	bhi.n	8008dd6 <__sflush_r+0xf6>
 8008d3e:	4a2b      	ldr	r2, [pc, #172]	; (8008dec <__sflush_r+0x10c>)
 8008d40:	40ca      	lsrs	r2, r1
 8008d42:	07d6      	lsls	r6, r2, #31
 8008d44:	d547      	bpl.n	8008dd6 <__sflush_r+0xf6>
 8008d46:	2200      	movs	r2, #0
 8008d48:	6062      	str	r2, [r4, #4]
 8008d4a:	04d9      	lsls	r1, r3, #19
 8008d4c:	6922      	ldr	r2, [r4, #16]
 8008d4e:	6022      	str	r2, [r4, #0]
 8008d50:	d504      	bpl.n	8008d5c <__sflush_r+0x7c>
 8008d52:	1c42      	adds	r2, r0, #1
 8008d54:	d101      	bne.n	8008d5a <__sflush_r+0x7a>
 8008d56:	682b      	ldr	r3, [r5, #0]
 8008d58:	b903      	cbnz	r3, 8008d5c <__sflush_r+0x7c>
 8008d5a:	6560      	str	r0, [r4, #84]	; 0x54
 8008d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d5e:	602f      	str	r7, [r5, #0]
 8008d60:	2900      	cmp	r1, #0
 8008d62:	d0ca      	beq.n	8008cfa <__sflush_r+0x1a>
 8008d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d68:	4299      	cmp	r1, r3
 8008d6a:	d002      	beq.n	8008d72 <__sflush_r+0x92>
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	f7ff f9d1 	bl	8008114 <_free_r>
 8008d72:	2000      	movs	r0, #0
 8008d74:	6360      	str	r0, [r4, #52]	; 0x34
 8008d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d7a:	6a21      	ldr	r1, [r4, #32]
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	4628      	mov	r0, r5
 8008d80:	47b0      	blx	r6
 8008d82:	1c41      	adds	r1, r0, #1
 8008d84:	d1c6      	bne.n	8008d14 <__sflush_r+0x34>
 8008d86:	682b      	ldr	r3, [r5, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d0c3      	beq.n	8008d14 <__sflush_r+0x34>
 8008d8c:	2b1d      	cmp	r3, #29
 8008d8e:	d001      	beq.n	8008d94 <__sflush_r+0xb4>
 8008d90:	2b16      	cmp	r3, #22
 8008d92:	d101      	bne.n	8008d98 <__sflush_r+0xb8>
 8008d94:	602f      	str	r7, [r5, #0]
 8008d96:	e7b0      	b.n	8008cfa <__sflush_r+0x1a>
 8008d98:	89a3      	ldrh	r3, [r4, #12]
 8008d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d9e:	81a3      	strh	r3, [r4, #12]
 8008da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da4:	690f      	ldr	r7, [r1, #16]
 8008da6:	2f00      	cmp	r7, #0
 8008da8:	d0a7      	beq.n	8008cfa <__sflush_r+0x1a>
 8008daa:	0793      	lsls	r3, r2, #30
 8008dac:	680e      	ldr	r6, [r1, #0]
 8008dae:	bf08      	it	eq
 8008db0:	694b      	ldreq	r3, [r1, #20]
 8008db2:	600f      	str	r7, [r1, #0]
 8008db4:	bf18      	it	ne
 8008db6:	2300      	movne	r3, #0
 8008db8:	eba6 0807 	sub.w	r8, r6, r7
 8008dbc:	608b      	str	r3, [r1, #8]
 8008dbe:	f1b8 0f00 	cmp.w	r8, #0
 8008dc2:	dd9a      	ble.n	8008cfa <__sflush_r+0x1a>
 8008dc4:	4643      	mov	r3, r8
 8008dc6:	463a      	mov	r2, r7
 8008dc8:	6a21      	ldr	r1, [r4, #32]
 8008dca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008dcc:	4628      	mov	r0, r5
 8008dce:	47b0      	blx	r6
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	dc07      	bgt.n	8008de4 <__sflush_r+0x104>
 8008dd4:	89a3      	ldrh	r3, [r4, #12]
 8008dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dda:	81a3      	strh	r3, [r4, #12]
 8008ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8008de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008de4:	4407      	add	r7, r0
 8008de6:	eba8 0800 	sub.w	r8, r8, r0
 8008dea:	e7e8      	b.n	8008dbe <__sflush_r+0xde>
 8008dec:	20400001 	.word	0x20400001

08008df0 <_fflush_r>:
 8008df0:	b538      	push	{r3, r4, r5, lr}
 8008df2:	690b      	ldr	r3, [r1, #16]
 8008df4:	4605      	mov	r5, r0
 8008df6:	460c      	mov	r4, r1
 8008df8:	b1db      	cbz	r3, 8008e32 <_fflush_r+0x42>
 8008dfa:	b118      	cbz	r0, 8008e04 <_fflush_r+0x14>
 8008dfc:	6983      	ldr	r3, [r0, #24]
 8008dfe:	b90b      	cbnz	r3, 8008e04 <_fflush_r+0x14>
 8008e00:	f7ff fab0 	bl	8008364 <__sinit>
 8008e04:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <_fflush_r+0x48>)
 8008e06:	429c      	cmp	r4, r3
 8008e08:	d109      	bne.n	8008e1e <_fflush_r+0x2e>
 8008e0a:	686c      	ldr	r4, [r5, #4]
 8008e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e10:	b17b      	cbz	r3, 8008e32 <_fflush_r+0x42>
 8008e12:	4621      	mov	r1, r4
 8008e14:	4628      	mov	r0, r5
 8008e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e1a:	f7ff bf61 	b.w	8008ce0 <__sflush_r>
 8008e1e:	4b07      	ldr	r3, [pc, #28]	; (8008e3c <_fflush_r+0x4c>)
 8008e20:	429c      	cmp	r4, r3
 8008e22:	d101      	bne.n	8008e28 <_fflush_r+0x38>
 8008e24:	68ac      	ldr	r4, [r5, #8]
 8008e26:	e7f1      	b.n	8008e0c <_fflush_r+0x1c>
 8008e28:	4b05      	ldr	r3, [pc, #20]	; (8008e40 <_fflush_r+0x50>)
 8008e2a:	429c      	cmp	r4, r3
 8008e2c:	bf08      	it	eq
 8008e2e:	68ec      	ldreq	r4, [r5, #12]
 8008e30:	e7ec      	b.n	8008e0c <_fflush_r+0x1c>
 8008e32:	2000      	movs	r0, #0
 8008e34:	bd38      	pop	{r3, r4, r5, pc}
 8008e36:	bf00      	nop
 8008e38:	080094ec 	.word	0x080094ec
 8008e3c:	0800950c 	.word	0x0800950c
 8008e40:	080094cc 	.word	0x080094cc

08008e44 <_lseek_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4c07      	ldr	r4, [pc, #28]	; (8008e64 <_lseek_r+0x20>)
 8008e48:	4605      	mov	r5, r0
 8008e4a:	4608      	mov	r0, r1
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	2200      	movs	r2, #0
 8008e50:	6022      	str	r2, [r4, #0]
 8008e52:	461a      	mov	r2, r3
 8008e54:	f000 f8b8 	bl	8008fc8 <_lseek>
 8008e58:	1c43      	adds	r3, r0, #1
 8008e5a:	d102      	bne.n	8008e62 <_lseek_r+0x1e>
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	b103      	cbz	r3, 8008e62 <_lseek_r+0x1e>
 8008e60:	602b      	str	r3, [r5, #0]
 8008e62:	bd38      	pop	{r3, r4, r5, pc}
 8008e64:	200007ec 	.word	0x200007ec

08008e68 <__swhatbuf_r>:
 8008e68:	b570      	push	{r4, r5, r6, lr}
 8008e6a:	460e      	mov	r6, r1
 8008e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e70:	2900      	cmp	r1, #0
 8008e72:	b090      	sub	sp, #64	; 0x40
 8008e74:	4614      	mov	r4, r2
 8008e76:	461d      	mov	r5, r3
 8008e78:	da07      	bge.n	8008e8a <__swhatbuf_r+0x22>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	602b      	str	r3, [r5, #0]
 8008e7e:	89b3      	ldrh	r3, [r6, #12]
 8008e80:	061a      	lsls	r2, r3, #24
 8008e82:	d410      	bmi.n	8008ea6 <__swhatbuf_r+0x3e>
 8008e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e88:	e00e      	b.n	8008ea8 <__swhatbuf_r+0x40>
 8008e8a:	aa01      	add	r2, sp, #4
 8008e8c:	f000 f862 	bl	8008f54 <_fstat_r>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	dbf2      	blt.n	8008e7a <__swhatbuf_r+0x12>
 8008e94:	9a02      	ldr	r2, [sp, #8]
 8008e96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e9e:	425a      	negs	r2, r3
 8008ea0:	415a      	adcs	r2, r3
 8008ea2:	602a      	str	r2, [r5, #0]
 8008ea4:	e7ee      	b.n	8008e84 <__swhatbuf_r+0x1c>
 8008ea6:	2340      	movs	r3, #64	; 0x40
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	6023      	str	r3, [r4, #0]
 8008eac:	b010      	add	sp, #64	; 0x40
 8008eae:	bd70      	pop	{r4, r5, r6, pc}

08008eb0 <__smakebuf_r>:
 8008eb0:	898b      	ldrh	r3, [r1, #12]
 8008eb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008eb4:	079d      	lsls	r5, r3, #30
 8008eb6:	4606      	mov	r6, r0
 8008eb8:	460c      	mov	r4, r1
 8008eba:	d507      	bpl.n	8008ecc <__smakebuf_r+0x1c>
 8008ebc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	6123      	str	r3, [r4, #16]
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	6163      	str	r3, [r4, #20]
 8008ec8:	b002      	add	sp, #8
 8008eca:	bd70      	pop	{r4, r5, r6, pc}
 8008ecc:	ab01      	add	r3, sp, #4
 8008ece:	466a      	mov	r2, sp
 8008ed0:	f7ff ffca 	bl	8008e68 <__swhatbuf_r>
 8008ed4:	9900      	ldr	r1, [sp, #0]
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f7ff f969 	bl	80081b0 <_malloc_r>
 8008ede:	b948      	cbnz	r0, 8008ef4 <__smakebuf_r+0x44>
 8008ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ee4:	059a      	lsls	r2, r3, #22
 8008ee6:	d4ef      	bmi.n	8008ec8 <__smakebuf_r+0x18>
 8008ee8:	f023 0303 	bic.w	r3, r3, #3
 8008eec:	f043 0302 	orr.w	r3, r3, #2
 8008ef0:	81a3      	strh	r3, [r4, #12]
 8008ef2:	e7e3      	b.n	8008ebc <__smakebuf_r+0xc>
 8008ef4:	4b0d      	ldr	r3, [pc, #52]	; (8008f2c <__smakebuf_r+0x7c>)
 8008ef6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ef8:	89a3      	ldrh	r3, [r4, #12]
 8008efa:	6020      	str	r0, [r4, #0]
 8008efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f00:	81a3      	strh	r3, [r4, #12]
 8008f02:	9b00      	ldr	r3, [sp, #0]
 8008f04:	6163      	str	r3, [r4, #20]
 8008f06:	9b01      	ldr	r3, [sp, #4]
 8008f08:	6120      	str	r0, [r4, #16]
 8008f0a:	b15b      	cbz	r3, 8008f24 <__smakebuf_r+0x74>
 8008f0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f10:	4630      	mov	r0, r6
 8008f12:	f000 f831 	bl	8008f78 <_isatty_r>
 8008f16:	b128      	cbz	r0, 8008f24 <__smakebuf_r+0x74>
 8008f18:	89a3      	ldrh	r3, [r4, #12]
 8008f1a:	f023 0303 	bic.w	r3, r3, #3
 8008f1e:	f043 0301 	orr.w	r3, r3, #1
 8008f22:	81a3      	strh	r3, [r4, #12]
 8008f24:	89a3      	ldrh	r3, [r4, #12]
 8008f26:	431d      	orrs	r5, r3
 8008f28:	81a5      	strh	r5, [r4, #12]
 8008f2a:	e7cd      	b.n	8008ec8 <__smakebuf_r+0x18>
 8008f2c:	080082e5 	.word	0x080082e5

08008f30 <_read_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4c07      	ldr	r4, [pc, #28]	; (8008f50 <_read_r+0x20>)
 8008f34:	4605      	mov	r5, r0
 8008f36:	4608      	mov	r0, r1
 8008f38:	4611      	mov	r1, r2
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	6022      	str	r2, [r4, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	f000 f84a 	bl	8008fd8 <_read>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d102      	bne.n	8008f4e <_read_r+0x1e>
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	b103      	cbz	r3, 8008f4e <_read_r+0x1e>
 8008f4c:	602b      	str	r3, [r5, #0]
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	200007ec 	.word	0x200007ec

08008f54 <_fstat_r>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	4c07      	ldr	r4, [pc, #28]	; (8008f74 <_fstat_r+0x20>)
 8008f58:	2300      	movs	r3, #0
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	4608      	mov	r0, r1
 8008f5e:	4611      	mov	r1, r2
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	f000 f821 	bl	8008fa8 <_fstat>
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	d102      	bne.n	8008f70 <_fstat_r+0x1c>
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	b103      	cbz	r3, 8008f70 <_fstat_r+0x1c>
 8008f6e:	602b      	str	r3, [r5, #0]
 8008f70:	bd38      	pop	{r3, r4, r5, pc}
 8008f72:	bf00      	nop
 8008f74:	200007ec 	.word	0x200007ec

08008f78 <_isatty_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	4c06      	ldr	r4, [pc, #24]	; (8008f94 <_isatty_r+0x1c>)
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4605      	mov	r5, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	6023      	str	r3, [r4, #0]
 8008f84:	f000 f818 	bl	8008fb8 <_isatty>
 8008f88:	1c43      	adds	r3, r0, #1
 8008f8a:	d102      	bne.n	8008f92 <_isatty_r+0x1a>
 8008f8c:	6823      	ldr	r3, [r4, #0]
 8008f8e:	b103      	cbz	r3, 8008f92 <_isatty_r+0x1a>
 8008f90:	602b      	str	r3, [r5, #0]
 8008f92:	bd38      	pop	{r3, r4, r5, pc}
 8008f94:	200007ec 	.word	0x200007ec

08008f98 <_close>:
 8008f98:	4b02      	ldr	r3, [pc, #8]	; (8008fa4 <_close+0xc>)
 8008f9a:	2258      	movs	r2, #88	; 0x58
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa2:	4770      	bx	lr
 8008fa4:	200007ec 	.word	0x200007ec

08008fa8 <_fstat>:
 8008fa8:	4b02      	ldr	r3, [pc, #8]	; (8008fb4 <_fstat+0xc>)
 8008faa:	2258      	movs	r2, #88	; 0x58
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb2:	4770      	bx	lr
 8008fb4:	200007ec 	.word	0x200007ec

08008fb8 <_isatty>:
 8008fb8:	4b02      	ldr	r3, [pc, #8]	; (8008fc4 <_isatty+0xc>)
 8008fba:	2258      	movs	r2, #88	; 0x58
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	200007ec 	.word	0x200007ec

08008fc8 <_lseek>:
 8008fc8:	4b02      	ldr	r3, [pc, #8]	; (8008fd4 <_lseek+0xc>)
 8008fca:	2258      	movs	r2, #88	; 0x58
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd2:	4770      	bx	lr
 8008fd4:	200007ec 	.word	0x200007ec

08008fd8 <_read>:
 8008fd8:	4b02      	ldr	r3, [pc, #8]	; (8008fe4 <_read+0xc>)
 8008fda:	2258      	movs	r2, #88	; 0x58
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe2:	4770      	bx	lr
 8008fe4:	200007ec 	.word	0x200007ec

08008fe8 <_sbrk>:
 8008fe8:	4b04      	ldr	r3, [pc, #16]	; (8008ffc <_sbrk+0x14>)
 8008fea:	6819      	ldr	r1, [r3, #0]
 8008fec:	4602      	mov	r2, r0
 8008fee:	b909      	cbnz	r1, 8008ff4 <_sbrk+0xc>
 8008ff0:	4903      	ldr	r1, [pc, #12]	; (8009000 <_sbrk+0x18>)
 8008ff2:	6019      	str	r1, [r3, #0]
 8008ff4:	6818      	ldr	r0, [r3, #0]
 8008ff6:	4402      	add	r2, r0
 8008ff8:	601a      	str	r2, [r3, #0]
 8008ffa:	4770      	bx	lr
 8008ffc:	200000b8 	.word	0x200000b8
 8009000:	200007f0 	.word	0x200007f0

08009004 <_write>:
 8009004:	4b02      	ldr	r3, [pc, #8]	; (8009010 <_write+0xc>)
 8009006:	2258      	movs	r2, #88	; 0x58
 8009008:	601a      	str	r2, [r3, #0]
 800900a:	f04f 30ff 	mov.w	r0, #4294967295
 800900e:	4770      	bx	lr
 8009010:	200007ec 	.word	0x200007ec

08009014 <_init>:
 8009014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009016:	bf00      	nop
 8009018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800901a:	bc08      	pop	{r3}
 800901c:	469e      	mov	lr, r3
 800901e:	4770      	bx	lr

08009020 <_fini>:
 8009020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009022:	bf00      	nop
 8009024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009026:	bc08      	pop	{r3}
 8009028:	469e      	mov	lr, r3
 800902a:	4770      	bx	lr
