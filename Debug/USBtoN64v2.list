
USBtoN64v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d64  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08009f28  08009f28  00019f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a0b4  0800a0b4  0001a0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a0bc  0800a0bc  0001a0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a0c0  0800a0c0  0001a0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e4  20000000  0800a0c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000874  200000e4  0800a1a8  000200e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000958  0800a1a8  00020958  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000235a7  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000047fc  00000000  00000000  000436bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f38  00000000  00000000  00047eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000da0  00000000  00000000  00048df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000089cc  00000000  00000000  00049b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000058ce  00000000  00000000  0005255c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00057e2a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003df4  00000000  00000000  00057ea8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000e4 	.word	0x200000e4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009f10 	.word	0x08009f10

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000e8 	.word	0x200000e8
 8000200:	08009f10 	.word	0x08009f10

08000204 <my_wait_us_asm>:
.globl my_wait_us_asm
.type  my_wait_us_asm, %function

my_wait_us_asm:
WAIT_1_US:
    ADD     R1, R2, #0      // clock cycle 1
 8000204:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000208:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800020c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000210:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000214:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000218:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800021c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000220:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000224:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 10
 8000228:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800022c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000230:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000234:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000238:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800023c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000240:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000244:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000248:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800024c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 20
 8000250:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000254:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000258:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800025c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000260:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000264:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000268:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800026c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000270:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000274:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 30
 8000278:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800027c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000280:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000284:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000288:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800028c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000290:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000294:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000298:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800029c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 40
 80002a0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002a4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002a8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002ac:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002b0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002b4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002b8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002bc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002c0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002c4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 50
 80002c8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002cc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002d0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002d4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002d8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002dc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002e0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002e4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002e8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002ec:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 60
 80002f0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002f4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002f8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80002fc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000300:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000304:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000308:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800030c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000310:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000314:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 70
 8000318:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800031c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000320:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000324:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000328:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800032c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000330:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000334:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000338:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800033c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 80
 8000340:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000344:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000348:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800034c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000350:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000354:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000358:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800035c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000360:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000364:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 90
 8000368:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800036c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000370:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000374:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000378:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800037c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000380:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000384:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000388:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800038c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 100
 8000390:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000394:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000398:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800039c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003a0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003a4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003a8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003ac:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003b0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003b4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 110
 80003b8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003bc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003c0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003c4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003c8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003cc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003d0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003d4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003d8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003dc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 120
 80003e0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003e4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003e8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003ec:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003f0:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003f4:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003f8:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 80003fc:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000400:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000404:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 130
 8000408:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800040c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000410:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000414:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000418:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800041c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000420:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000424:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000428:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800042c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 140
 8000430:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000434:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000438:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800043c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000440:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000444:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000448:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800044c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000450:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000454:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 150
 8000458:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800045c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000460:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000464:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000468:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800046c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000470:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000474:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000478:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800047c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0      // clock cycle 160
 8000480:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000484:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000488:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 800048c:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000490:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0
 8000494:	f102 0100 	add.w	r1, r2, #0
    ADD     R1, R2, #0		// 166
 8000498:	f102 0100 	add.w	r1, r2, #0

    SUBS    R0, R0, #1      // clock cycle 167
 800049c:	3801      	subs	r0, #1
    BGT     WAIT_1_US       // clock cycle 168
 800049e:	f73f aeb1 	bgt.w	8000204 <my_wait_us_asm>

    BX      LR      // return
 80004a2:	4770      	bx	lr

080004a4 <__aeabi_uldivmod>:
 80004a4:	b953      	cbnz	r3, 80004bc <__aeabi_uldivmod+0x18>
 80004a6:	b94a      	cbnz	r2, 80004bc <__aeabi_uldivmod+0x18>
 80004a8:	2900      	cmp	r1, #0
 80004aa:	bf08      	it	eq
 80004ac:	2800      	cmpeq	r0, #0
 80004ae:	bf1c      	itt	ne
 80004b0:	f04f 31ff 	movne.w	r1, #4294967295
 80004b4:	f04f 30ff 	movne.w	r0, #4294967295
 80004b8:	f000 b97a 	b.w	80007b0 <__aeabi_idiv0>
 80004bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80004c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004c4:	f000 f806 	bl	80004d4 <__udivmoddi4>
 80004c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004d0:	b004      	add	sp, #16
 80004d2:	4770      	bx	lr

080004d4 <__udivmoddi4>:
 80004d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004d8:	468c      	mov	ip, r1
 80004da:	460d      	mov	r5, r1
 80004dc:	4604      	mov	r4, r0
 80004de:	9e08      	ldr	r6, [sp, #32]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d151      	bne.n	8000588 <__udivmoddi4+0xb4>
 80004e4:	428a      	cmp	r2, r1
 80004e6:	4617      	mov	r7, r2
 80004e8:	d96d      	bls.n	80005c6 <__udivmoddi4+0xf2>
 80004ea:	fab2 fe82 	clz	lr, r2
 80004ee:	f1be 0f00 	cmp.w	lr, #0
 80004f2:	d00b      	beq.n	800050c <__udivmoddi4+0x38>
 80004f4:	f1ce 0c20 	rsb	ip, lr, #32
 80004f8:	fa01 f50e 	lsl.w	r5, r1, lr
 80004fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000500:	fa02 f70e 	lsl.w	r7, r2, lr
 8000504:	ea4c 0c05 	orr.w	ip, ip, r5
 8000508:	fa00 f40e 	lsl.w	r4, r0, lr
 800050c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000510:	0c25      	lsrs	r5, r4, #16
 8000512:	fbbc f8fa 	udiv	r8, ip, sl
 8000516:	fa1f f987 	uxth.w	r9, r7
 800051a:	fb0a cc18 	mls	ip, sl, r8, ip
 800051e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000522:	fb08 f309 	mul.w	r3, r8, r9
 8000526:	42ab      	cmp	r3, r5
 8000528:	d90a      	bls.n	8000540 <__udivmoddi4+0x6c>
 800052a:	19ed      	adds	r5, r5, r7
 800052c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000530:	f080 8123 	bcs.w	800077a <__udivmoddi4+0x2a6>
 8000534:	42ab      	cmp	r3, r5
 8000536:	f240 8120 	bls.w	800077a <__udivmoddi4+0x2a6>
 800053a:	f1a8 0802 	sub.w	r8, r8, #2
 800053e:	443d      	add	r5, r7
 8000540:	1aed      	subs	r5, r5, r3
 8000542:	b2a4      	uxth	r4, r4
 8000544:	fbb5 f0fa 	udiv	r0, r5, sl
 8000548:	fb0a 5510 	mls	r5, sl, r0, r5
 800054c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000550:	fb00 f909 	mul.w	r9, r0, r9
 8000554:	45a1      	cmp	r9, r4
 8000556:	d909      	bls.n	800056c <__udivmoddi4+0x98>
 8000558:	19e4      	adds	r4, r4, r7
 800055a:	f100 33ff 	add.w	r3, r0, #4294967295
 800055e:	f080 810a 	bcs.w	8000776 <__udivmoddi4+0x2a2>
 8000562:	45a1      	cmp	r9, r4
 8000564:	f240 8107 	bls.w	8000776 <__udivmoddi4+0x2a2>
 8000568:	3802      	subs	r0, #2
 800056a:	443c      	add	r4, r7
 800056c:	eba4 0409 	sub.w	r4, r4, r9
 8000570:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000574:	2100      	movs	r1, #0
 8000576:	2e00      	cmp	r6, #0
 8000578:	d061      	beq.n	800063e <__udivmoddi4+0x16a>
 800057a:	fa24 f40e 	lsr.w	r4, r4, lr
 800057e:	2300      	movs	r3, #0
 8000580:	6034      	str	r4, [r6, #0]
 8000582:	6073      	str	r3, [r6, #4]
 8000584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000588:	428b      	cmp	r3, r1
 800058a:	d907      	bls.n	800059c <__udivmoddi4+0xc8>
 800058c:	2e00      	cmp	r6, #0
 800058e:	d054      	beq.n	800063a <__udivmoddi4+0x166>
 8000590:	2100      	movs	r1, #0
 8000592:	e886 0021 	stmia.w	r6, {r0, r5}
 8000596:	4608      	mov	r0, r1
 8000598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059c:	fab3 f183 	clz	r1, r3
 80005a0:	2900      	cmp	r1, #0
 80005a2:	f040 808e 	bne.w	80006c2 <__udivmoddi4+0x1ee>
 80005a6:	42ab      	cmp	r3, r5
 80005a8:	d302      	bcc.n	80005b0 <__udivmoddi4+0xdc>
 80005aa:	4282      	cmp	r2, r0
 80005ac:	f200 80fa 	bhi.w	80007a4 <__udivmoddi4+0x2d0>
 80005b0:	1a84      	subs	r4, r0, r2
 80005b2:	eb65 0503 	sbc.w	r5, r5, r3
 80005b6:	2001      	movs	r0, #1
 80005b8:	46ac      	mov	ip, r5
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d03f      	beq.n	800063e <__udivmoddi4+0x16a>
 80005be:	e886 1010 	stmia.w	r6, {r4, ip}
 80005c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c6:	b912      	cbnz	r2, 80005ce <__udivmoddi4+0xfa>
 80005c8:	2701      	movs	r7, #1
 80005ca:	fbb7 f7f2 	udiv	r7, r7, r2
 80005ce:	fab7 fe87 	clz	lr, r7
 80005d2:	f1be 0f00 	cmp.w	lr, #0
 80005d6:	d134      	bne.n	8000642 <__udivmoddi4+0x16e>
 80005d8:	1beb      	subs	r3, r5, r7
 80005da:	0c3a      	lsrs	r2, r7, #16
 80005dc:	fa1f fc87 	uxth.w	ip, r7
 80005e0:	2101      	movs	r1, #1
 80005e2:	fbb3 f8f2 	udiv	r8, r3, r2
 80005e6:	0c25      	lsrs	r5, r4, #16
 80005e8:	fb02 3318 	mls	r3, r2, r8, r3
 80005ec:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80005f0:	fb0c f308 	mul.w	r3, ip, r8
 80005f4:	42ab      	cmp	r3, r5
 80005f6:	d907      	bls.n	8000608 <__udivmoddi4+0x134>
 80005f8:	19ed      	adds	r5, r5, r7
 80005fa:	f108 30ff 	add.w	r0, r8, #4294967295
 80005fe:	d202      	bcs.n	8000606 <__udivmoddi4+0x132>
 8000600:	42ab      	cmp	r3, r5
 8000602:	f200 80d1 	bhi.w	80007a8 <__udivmoddi4+0x2d4>
 8000606:	4680      	mov	r8, r0
 8000608:	1aed      	subs	r5, r5, r3
 800060a:	b2a3      	uxth	r3, r4
 800060c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000610:	fb02 5510 	mls	r5, r2, r0, r5
 8000614:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000618:	fb0c fc00 	mul.w	ip, ip, r0
 800061c:	45a4      	cmp	ip, r4
 800061e:	d907      	bls.n	8000630 <__udivmoddi4+0x15c>
 8000620:	19e4      	adds	r4, r4, r7
 8000622:	f100 33ff 	add.w	r3, r0, #4294967295
 8000626:	d202      	bcs.n	800062e <__udivmoddi4+0x15a>
 8000628:	45a4      	cmp	ip, r4
 800062a:	f200 80b8 	bhi.w	800079e <__udivmoddi4+0x2ca>
 800062e:	4618      	mov	r0, r3
 8000630:	eba4 040c 	sub.w	r4, r4, ip
 8000634:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000638:	e79d      	b.n	8000576 <__udivmoddi4+0xa2>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	f1ce 0420 	rsb	r4, lr, #32
 8000646:	fa05 f30e 	lsl.w	r3, r5, lr
 800064a:	fa07 f70e 	lsl.w	r7, r7, lr
 800064e:	fa20 f804 	lsr.w	r8, r0, r4
 8000652:	0c3a      	lsrs	r2, r7, #16
 8000654:	fa25 f404 	lsr.w	r4, r5, r4
 8000658:	ea48 0803 	orr.w	r8, r8, r3
 800065c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000660:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000664:	fb02 4411 	mls	r4, r2, r1, r4
 8000668:	fa1f fc87 	uxth.w	ip, r7
 800066c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000670:	fb01 f30c 	mul.w	r3, r1, ip
 8000674:	42ab      	cmp	r3, r5
 8000676:	fa00 f40e 	lsl.w	r4, r0, lr
 800067a:	d909      	bls.n	8000690 <__udivmoddi4+0x1bc>
 800067c:	19ed      	adds	r5, r5, r7
 800067e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000682:	f080 808a 	bcs.w	800079a <__udivmoddi4+0x2c6>
 8000686:	42ab      	cmp	r3, r5
 8000688:	f240 8087 	bls.w	800079a <__udivmoddi4+0x2c6>
 800068c:	3902      	subs	r1, #2
 800068e:	443d      	add	r5, r7
 8000690:	1aeb      	subs	r3, r5, r3
 8000692:	fa1f f588 	uxth.w	r5, r8
 8000696:	fbb3 f0f2 	udiv	r0, r3, r2
 800069a:	fb02 3310 	mls	r3, r2, r0, r3
 800069e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80006a2:	fb00 f30c 	mul.w	r3, r0, ip
 80006a6:	42ab      	cmp	r3, r5
 80006a8:	d907      	bls.n	80006ba <__udivmoddi4+0x1e6>
 80006aa:	19ed      	adds	r5, r5, r7
 80006ac:	f100 38ff 	add.w	r8, r0, #4294967295
 80006b0:	d26f      	bcs.n	8000792 <__udivmoddi4+0x2be>
 80006b2:	42ab      	cmp	r3, r5
 80006b4:	d96d      	bls.n	8000792 <__udivmoddi4+0x2be>
 80006b6:	3802      	subs	r0, #2
 80006b8:	443d      	add	r5, r7
 80006ba:	1aeb      	subs	r3, r5, r3
 80006bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006c0:	e78f      	b.n	80005e2 <__udivmoddi4+0x10e>
 80006c2:	f1c1 0720 	rsb	r7, r1, #32
 80006c6:	fa22 f807 	lsr.w	r8, r2, r7
 80006ca:	408b      	lsls	r3, r1
 80006cc:	fa05 f401 	lsl.w	r4, r5, r1
 80006d0:	ea48 0303 	orr.w	r3, r8, r3
 80006d4:	fa20 fe07 	lsr.w	lr, r0, r7
 80006d8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80006dc:	40fd      	lsrs	r5, r7
 80006de:	ea4e 0e04 	orr.w	lr, lr, r4
 80006e2:	fbb5 f9fc 	udiv	r9, r5, ip
 80006e6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80006ea:	fb0c 5519 	mls	r5, ip, r9, r5
 80006ee:	fa1f f883 	uxth.w	r8, r3
 80006f2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80006f6:	fb09 f408 	mul.w	r4, r9, r8
 80006fa:	42ac      	cmp	r4, r5
 80006fc:	fa02 f201 	lsl.w	r2, r2, r1
 8000700:	fa00 fa01 	lsl.w	sl, r0, r1
 8000704:	d908      	bls.n	8000718 <__udivmoddi4+0x244>
 8000706:	18ed      	adds	r5, r5, r3
 8000708:	f109 30ff 	add.w	r0, r9, #4294967295
 800070c:	d243      	bcs.n	8000796 <__udivmoddi4+0x2c2>
 800070e:	42ac      	cmp	r4, r5
 8000710:	d941      	bls.n	8000796 <__udivmoddi4+0x2c2>
 8000712:	f1a9 0902 	sub.w	r9, r9, #2
 8000716:	441d      	add	r5, r3
 8000718:	1b2d      	subs	r5, r5, r4
 800071a:	fa1f fe8e 	uxth.w	lr, lr
 800071e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000722:	fb0c 5510 	mls	r5, ip, r0, r5
 8000726:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800072a:	fb00 f808 	mul.w	r8, r0, r8
 800072e:	45a0      	cmp	r8, r4
 8000730:	d907      	bls.n	8000742 <__udivmoddi4+0x26e>
 8000732:	18e4      	adds	r4, r4, r3
 8000734:	f100 35ff 	add.w	r5, r0, #4294967295
 8000738:	d229      	bcs.n	800078e <__udivmoddi4+0x2ba>
 800073a:	45a0      	cmp	r8, r4
 800073c:	d927      	bls.n	800078e <__udivmoddi4+0x2ba>
 800073e:	3802      	subs	r0, #2
 8000740:	441c      	add	r4, r3
 8000742:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000746:	eba4 0408 	sub.w	r4, r4, r8
 800074a:	fba0 8902 	umull	r8, r9, r0, r2
 800074e:	454c      	cmp	r4, r9
 8000750:	46c6      	mov	lr, r8
 8000752:	464d      	mov	r5, r9
 8000754:	d315      	bcc.n	8000782 <__udivmoddi4+0x2ae>
 8000756:	d012      	beq.n	800077e <__udivmoddi4+0x2aa>
 8000758:	b156      	cbz	r6, 8000770 <__udivmoddi4+0x29c>
 800075a:	ebba 030e 	subs.w	r3, sl, lr
 800075e:	eb64 0405 	sbc.w	r4, r4, r5
 8000762:	fa04 f707 	lsl.w	r7, r4, r7
 8000766:	40cb      	lsrs	r3, r1
 8000768:	431f      	orrs	r7, r3
 800076a:	40cc      	lsrs	r4, r1
 800076c:	6037      	str	r7, [r6, #0]
 800076e:	6074      	str	r4, [r6, #4]
 8000770:	2100      	movs	r1, #0
 8000772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000776:	4618      	mov	r0, r3
 8000778:	e6f8      	b.n	800056c <__udivmoddi4+0x98>
 800077a:	4690      	mov	r8, r2
 800077c:	e6e0      	b.n	8000540 <__udivmoddi4+0x6c>
 800077e:	45c2      	cmp	sl, r8
 8000780:	d2ea      	bcs.n	8000758 <__udivmoddi4+0x284>
 8000782:	ebb8 0e02 	subs.w	lr, r8, r2
 8000786:	eb69 0503 	sbc.w	r5, r9, r3
 800078a:	3801      	subs	r0, #1
 800078c:	e7e4      	b.n	8000758 <__udivmoddi4+0x284>
 800078e:	4628      	mov	r0, r5
 8000790:	e7d7      	b.n	8000742 <__udivmoddi4+0x26e>
 8000792:	4640      	mov	r0, r8
 8000794:	e791      	b.n	80006ba <__udivmoddi4+0x1e6>
 8000796:	4681      	mov	r9, r0
 8000798:	e7be      	b.n	8000718 <__udivmoddi4+0x244>
 800079a:	4601      	mov	r1, r0
 800079c:	e778      	b.n	8000690 <__udivmoddi4+0x1bc>
 800079e:	3802      	subs	r0, #2
 80007a0:	443c      	add	r4, r7
 80007a2:	e745      	b.n	8000630 <__udivmoddi4+0x15c>
 80007a4:	4608      	mov	r0, r1
 80007a6:	e708      	b.n	80005ba <__udivmoddi4+0xe6>
 80007a8:	f1a8 0802 	sub.w	r8, r8, #2
 80007ac:	443d      	add	r5, r7
 80007ae:	e72b      	b.n	8000608 <__udivmoddi4+0x134>

080007b0 <__aeabi_idiv0>:
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop

080007b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007b8:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <HAL_Init+0x40>)
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <HAL_Init+0x40>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007c4:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <HAL_Init+0x40>)
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <HAL_Init+0x40>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d0:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <HAL_Init+0x40>)
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HAL_Init+0x40>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007dc:	2003      	movs	r0, #3
 80007de:	f000 f947 	bl	8000a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e2:	2001      	movs	r0, #1
 80007e4:	f000 f808 	bl	80007f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e8:	f008 fe6a 	bl	80094c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023c00 	.word	0x40023c00

080007f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_InitTick+0x54>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_InitTick+0x58>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000812:	fbb2 f3f3 	udiv	r3, r2, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f95f 	bl	8000ada <HAL_SYSTICK_Config>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e00e      	b.n	8000844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d80a      	bhi.n	8000842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f000 f927 	bl	8000a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <HAL_InitTick+0x5c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800083e:	2300      	movs	r3, #0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000007c 	.word	0x2000007c
 8000850:	20000004 	.word	0x20000004
 8000854:	20000000 	.word	0x20000000

08000858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_IncTick+0x20>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_IncTick+0x24>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <HAL_IncTick+0x24>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000004 	.word	0x20000004
 800087c:	20000118 	.word	0x20000118

08000880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return uwTick;
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <HAL_GetTick+0x14>)
 8000886:	681b      	ldr	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	20000118 	.word	0x20000118

08000898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a0:	f7ff ffee 	bl	8000880 <HAL_GetTick>
 80008a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b0:	d005      	beq.n	80008be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_Delay+0x40>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4413      	add	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008be:	bf00      	nop
 80008c0:	f7ff ffde 	bl	8000880 <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	1ad2      	subs	r2, r2, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d3f7      	bcc.n	80008c0 <HAL_Delay+0x28>
  {
  }
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000004 	.word	0x20000004

080008dc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <NVIC_SetPriorityGrouping+0x44>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090e:	4a04      	ldr	r2, [pc, #16]	; (8000920 <NVIC_SetPriorityGrouping+0x44>)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	60d3      	str	r3, [r2, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <NVIC_GetPriorityGrouping+0x18>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	f003 0307 	and.w	r3, r3, #7
}
 8000932:	4618      	mov	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800094a:	4909      	ldr	r1, [pc, #36]	; (8000970 <NVIC_EnableIRQ+0x30>)
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	095b      	lsrs	r3, r3, #5
 8000952:	79fa      	ldrb	r2, [r7, #7]
 8000954:	f002 021f 	and.w	r2, r2, #31
 8000958:	2001      	movs	r0, #1
 800095a:	fa00 f202 	lsl.w	r2, r0, r2
 800095e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100

08000974 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	da0b      	bge.n	80009a0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	490d      	ldr	r1, [pc, #52]	; (80009c0 <NVIC_SetPriority+0x4c>)
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	f003 030f 	and.w	r3, r3, #15
 8000990:	3b04      	subs	r3, #4
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	0112      	lsls	r2, r2, #4
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	440b      	add	r3, r1
 800099c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800099e:	e009      	b.n	80009b4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a0:	4908      	ldr	r1, [pc, #32]	; (80009c4 <NVIC_SetPriority+0x50>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	b2d2      	uxtb	r2, r2
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	440b      	add	r3, r1
 80009b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00
 80009c4:	e000e100 	.word	0xe000e100

080009c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b089      	sub	sp, #36	; 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f1c3 0307 	rsb	r3, r3, #7
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	bf28      	it	cs
 80009e6:	2304      	movcs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d902      	bls.n	80009f8 <NVIC_EncodePriority+0x30>
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3b03      	subs	r3, #3
 80009f6:	e000      	b.n	80009fa <NVIC_EncodePriority+0x32>
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	2201      	movs	r2, #1
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	1e5a      	subs	r2, r3, #1
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	401a      	ands	r2, r3
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0e:	2101      	movs	r1, #1
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	1e59      	subs	r1, r3, #1
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	4313      	orrs	r3, r2
         );
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3724      	adds	r7, #36	; 0x24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a3c:	d301      	bcc.n	8000a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00f      	b.n	8000a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <SysTick_Config+0x40>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f7ff ff90 	bl	8000974 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SysTick_Config+0x40>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <SysTick_Config+0x40>)
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	e000e010 	.word	0xe000e010

08000a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff2f 	bl	80008dc <NVIC_SetPriorityGrouping>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b086      	sub	sp, #24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a98:	f7ff ff44 	bl	8000924 <NVIC_GetPriorityGrouping>
 8000a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	6978      	ldr	r0, [r7, #20]
 8000aa4:	f7ff ff90 	bl	80009c8 <NVIC_EncodePriority>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff5f 	bl	8000974 <NVIC_SetPriority>
}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff37 	bl	8000940 <NVIC_EnableIRQ>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ffa2 	bl	8000a2c <SysTick_Config>
 8000ae8:	4603      	mov	r3, r0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d106      	bne.n	8000b10 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b02:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000b0e:	e005      	b.n	8000b1c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b10:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f023 0304 	bic.w	r3, r3, #4
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000e010 	.word	0xe000e010

08000b2c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b30:	f000 f802 	bl	8000b38 <HAL_SYSTICK_Callback>
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000b5a:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <HAL_FLASH_Program+0xa0>)
 8000b5c:	7e1b      	ldrb	r3, [r3, #24]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d101      	bne.n	8000b66 <HAL_FLASH_Program+0x1e>
 8000b62:	2302      	movs	r3, #2
 8000b64:	e03b      	b.n	8000bde <HAL_FLASH_Program+0x96>
 8000b66:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <HAL_FLASH_Program+0xa0>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b70:	f000 f870 	bl	8000c54 <FLASH_WaitForLastOperation>
 8000b74:	4603      	mov	r3, r0
 8000b76:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000b78:	7dfb      	ldrb	r3, [r7, #23]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d12b      	bne.n	8000bd6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d105      	bne.n	8000b90 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000b84:	783b      	ldrb	r3, [r7, #0]
 8000b86:	4619      	mov	r1, r3
 8000b88:	68b8      	ldr	r0, [r7, #8]
 8000b8a:	f000 f915 	bl	8000db8 <FLASH_Program_Byte>
 8000b8e:	e016      	b.n	8000bbe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d105      	bne.n	8000ba2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000b96:	883b      	ldrh	r3, [r7, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	68b8      	ldr	r0, [r7, #8]
 8000b9c:	f000 f8e8 	bl	8000d70 <FLASH_Program_HalfWord>
 8000ba0:	e00d      	b.n	8000bbe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d105      	bne.n	8000bb4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	68b8      	ldr	r0, [r7, #8]
 8000bae:	f000 f8bd 	bl	8000d2c <FLASH_Program_Word>
 8000bb2:	e004      	b.n	8000bbe <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bb8:	68b8      	ldr	r0, [r7, #8]
 8000bba:	f000 f88b 	bl	8000cd4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000bbe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bc2:	f000 f847 	bl	8000c54 <FLASH_WaitForLastOperation>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_FLASH_Program+0xa4>)
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <HAL_FLASH_Program+0xa4>)
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	f023 0301 	bic.w	r3, r3, #1
 8000bd4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <HAL_FLASH_Program+0xa0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000011c 	.word	0x2000011c
 8000bec:	40023c00 	.word	0x40023c00

08000bf0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_FLASH_Unlock+0x38>)
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	da0b      	bge.n	8000c1a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_FLASH_Unlock+0x38>)
 8000c04:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <HAL_FLASH_Unlock+0x3c>)
 8000c06:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <HAL_FLASH_Unlock+0x38>)
 8000c0a:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <HAL_FLASH_Unlock+0x40>)
 8000c0c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_FLASH_Unlock+0x38>)
 8000c10:	691b      	ldr	r3, [r3, #16]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	da01      	bge.n	8000c1a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	40023c00 	.word	0x40023c00
 8000c2c:	45670123 	.word	0x45670123
 8000c30:	cdef89ab 	.word	0xcdef89ab

08000c34 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000c38:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <HAL_FLASH_Lock+0x1c>)
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_FLASH_Lock+0x1c>)
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c42:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	40023c00 	.word	0x40023c00

08000c54 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <FLASH_WaitForLastOperation+0x78>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000c66:	f7ff fe0b 	bl	8000880 <HAL_GetTick>
 8000c6a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000c6c:	e010      	b.n	8000c90 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c74:	d00c      	beq.n	8000c90 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d007      	beq.n	8000c8c <FLASH_WaitForLastOperation+0x38>
 8000c7c:	f7ff fe00 	bl	8000880 <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	1ad2      	subs	r2, r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d901      	bls.n	8000c90 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	e019      	b.n	8000cc4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <FLASH_WaitForLastOperation+0x7c>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1e8      	bne.n	8000c6e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <FLASH_WaitForLastOperation+0x7c>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d002      	beq.n	8000cae <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <FLASH_WaitForLastOperation+0x7c>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <FLASH_WaitForLastOperation+0x7c>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000cba:	f000 f89f 	bl	8000dfc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
  
}  
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	2000011c 	.word	0x2000011c
 8000cd0:	40023c00 	.word	0x40023c00

08000cd4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000cd4:	b4f0      	push	{r4, r5, r6, r7}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ce0:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <FLASH_Program_DoubleWord+0x54>)
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <FLASH_Program_DoubleWord+0x54>)
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <FLASH_Program_DoubleWord+0x54>)
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <FLASH_Program_DoubleWord+0x54>)
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000cf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cf8:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <FLASH_Program_DoubleWord+0x54>)
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <FLASH_Program_DoubleWord+0x54>)
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	461a      	mov	r2, r3
 8000d10:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000d14:	0025      	movs	r5, r4
 8000d16:	2600      	movs	r6, #0
 8000d18:	462b      	mov	r3, r5
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bcf0      	pop	{r4, r5, r6, r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40023c00 	.word	0x40023c00

08000d2c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000d36:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <FLASH_Program_Word+0x40>)
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <FLASH_Program_Word+0x40>)
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <FLASH_Program_Word+0x40>)
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <FLASH_Program_Word+0x40>)
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d4e:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <FLASH_Program_Word+0x40>)
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <FLASH_Program_Word+0x40>)
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	601a      	str	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	40023c00 	.word	0x40023c00

08000d70 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <FLASH_Program_HalfWord+0x44>)
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <FLASH_Program_HalfWord+0x44>)
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <FLASH_Program_HalfWord+0x44>)
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <FLASH_Program_HalfWord+0x44>)
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <FLASH_Program_HalfWord+0x44>)
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <FLASH_Program_HalfWord+0x44>)
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	887a      	ldrh	r2, [r7, #2]
 8000da4:	801a      	strh	r2, [r3, #0]
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00

08000db8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000dc4:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <FLASH_Program_Byte+0x40>)
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <FLASH_Program_Byte+0x40>)
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000dd0:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <FLASH_Program_Byte+0x40>)
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <FLASH_Program_Byte+0x40>)
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <FLASH_Program_Byte+0x40>)
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <FLASH_Program_Byte+0x40>)
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	78fa      	ldrb	r2, [r7, #3]
 8000de8:	701a      	strb	r2, [r3, #0]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000e00:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d008      	beq.n	8000e1e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e0e:	69db      	ldr	r3, [r3, #28]
 8000e10:	f043 0310 	orr.w	r3, r3, #16
 8000e14:	4a2b      	ldr	r2, [pc, #172]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e16:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000e18:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e1a:	2210      	movs	r2, #16
 8000e1c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000e1e:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	f003 0320 	and.w	r3, r3, #32
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d008      	beq.n	8000e3c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000e2a:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f043 0308 	orr.w	r3, r3, #8
 8000e32:	4a24      	ldr	r2, [pc, #144]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e34:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000e36:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e38:	2220      	movs	r2, #32
 8000e3a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000e3c:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d008      	beq.n	8000e5a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e4a:	69db      	ldr	r3, [r3, #28]
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e52:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e56:	2240      	movs	r2, #64	; 0x40
 8000e58:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d008      	beq.n	8000e78 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e70:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d009      	beq.n	8000e98 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e86:	69db      	ldr	r3, [r3, #28]
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000e8e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e96:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d008      	beq.n	8000eb6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000ea6:	69db      	ldr	r3, [r3, #28]
 8000ea8:	f043 0320 	orr.w	r3, r3, #32
 8000eac:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <FLASH_SetErrorCode+0xc8>)
 8000eae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <FLASH_SetErrorCode+0xc4>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	60da      	str	r2, [r3, #12]
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	40023c00 	.word	0x40023c00
 8000ec4:	2000011c 	.word	0x2000011c

08000ec8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <HAL_FLASHEx_Erase+0xd8>)
 8000edc:	7e1b      	ldrb	r3, [r3, #24]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d101      	bne.n	8000ee6 <HAL_FLASHEx_Erase+0x1e>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e058      	b.n	8000f98 <HAL_FLASHEx_Erase+0xd0>
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <HAL_FLASHEx_Erase+0xd8>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000eec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ef0:	f7ff feb0 	bl	8000c54 <FLASH_WaitForLastOperation>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d148      	bne.n	8000f90 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d115      	bne.n	8000f3a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	f000 f844 	bl	8000fa8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f24:	f7ff fe96 	bl	8000c54 <FLASH_WaitForLastOperation>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8000f2c:	4a1d      	ldr	r2, [pc, #116]	; (8000fa4 <HAL_FLASHEx_Erase+0xdc>)
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <HAL_FLASHEx_Erase+0xdc>)
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	f023 0304 	bic.w	r3, r3, #4
 8000f36:	6113      	str	r3, [r2, #16]
 8000f38:	e028      	b.n	8000f8c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	e01c      	b.n	8000f7c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4619      	mov	r1, r3
 8000f4a:	68b8      	ldr	r0, [r7, #8]
 8000f4c:	f000 f850 	bl	8000ff0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f54:	f7ff fe7e 	bl	8000c54 <FLASH_WaitForLastOperation>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000f5c:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <HAL_FLASHEx_Erase+0xdc>)
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_FLASHEx_Erase+0xdc>)
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8000f66:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	601a      	str	r2, [r3, #0]
          break;
 8000f74:	e00a      	b.n	8000f8c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	441a      	add	r2, r3
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8da      	bhi.n	8000f42 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8000f8c:	f000 f878 	bl	8001080 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_FLASHEx_Erase+0xd8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	761a      	strb	r2, [r3, #24]

  return status;
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000011c 	.word	0x2000011c
 8000fa4:	40023c00 	.word	0x40023c00

08000fa8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <FLASH_MassErase+0x44>)
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <FLASH_MassErase+0x44>)
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <FLASH_MassErase+0x44>)
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <FLASH_MassErase+0x44>)
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8000fcc:	4907      	ldr	r1, [pc, #28]	; (8000fec <FLASH_MassErase+0x44>)
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <FLASH_MassErase+0x44>)
 8000fd0:	691a      	ldr	r2, [r3, #16]
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fdc:	610b      	str	r3, [r1, #16]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e010      	b.n	800102e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d103      	bne.n	800101a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e009      	b.n	800102e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d103      	bne.n	8001028 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e002      	b.n	800102e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001028:	f44f 7340 	mov.w	r3, #768	; 0x300
 800102c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800102e:	4a13      	ldr	r2, [pc, #76]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001038:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800103a:	4910      	ldr	r1, [pc, #64]	; (800107c <FLASH_Erase_Sector+0x8c>)
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <FLASH_Erase_Sector+0x8c>)
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001046:	4a0d      	ldr	r2, [pc, #52]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <FLASH_Erase_Sector+0x8c>)
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001050:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001052:	490a      	ldr	r1, [pc, #40]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4313      	orrs	r3, r2
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001064:	4a05      	ldr	r2, [pc, #20]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001066:	4b05      	ldr	r3, [pc, #20]	; (800107c <FLASH_Erase_Sector+0x8c>)
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106e:	6113      	str	r3, [r2, #16]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40023c00 	.word	0x40023c00

08001080 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <FLASH_FlushCaches+0x88>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800108c:	2b00      	cmp	r3, #0
 800108e:	d017      	beq.n	80010c0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001090:	4a1d      	ldr	r2, [pc, #116]	; (8001108 <FLASH_FlushCaches+0x88>)
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <FLASH_FlushCaches+0x88>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800109a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800109c:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <FLASH_FlushCaches+0x88>)
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4a17      	ldr	r2, [pc, #92]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010b2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b4:	4a14      	ldr	r2, [pc, #80]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010be:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d017      	beq.n	80010fc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010d6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80010d8:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4a08      	ldr	r2, [pc, #32]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010ee:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f0:	4a05      	ldr	r2, [pc, #20]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010f2:	4b05      	ldr	r3, [pc, #20]	; (8001108 <FLASH_FlushCaches+0x88>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fa:	6013      	str	r3, [r2, #0]
  }
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023c00 	.word	0x40023c00

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	e165      	b.n	80013f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001128:	2201      	movs	r2, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	f040 8154 	bne.w	80013ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x4a>
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b12      	cmp	r3, #18
 8001154:	d123      	bne.n	800119e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	08da      	lsrs	r2, r3, #3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3208      	adds	r2, #8
 800115e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	691a      	ldr	r2, [r3, #16]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	69b9      	ldr	r1, [r7, #24]
 800119a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	2203      	movs	r2, #3
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0203 	and.w	r2, r3, #3
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d00b      	beq.n	80011f2 <HAL_GPIO_Init+0xe6>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e6:	2b11      	cmp	r3, #17
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b12      	cmp	r3, #18
 80011f0:	d130      	bne.n	8001254 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	091b      	lsrs	r3, r3, #4
 800123e:	f003 0201 	and.w	r2, r3, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80ae 	beq.w	80013ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4a5c      	ldr	r2, [pc, #368]	; (8001408 <HAL_GPIO_Init+0x2fc>)
 8001298:	4b5b      	ldr	r3, [pc, #364]	; (8001408 <HAL_GPIO_Init+0x2fc>)
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b59      	ldr	r3, [pc, #356]	; (8001408 <HAL_GPIO_Init+0x2fc>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ae:	4a57      	ldr	r2, [pc, #348]	; (800140c <HAL_GPIO_Init+0x300>)
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3302      	adds	r3, #2
 80012b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	220f      	movs	r2, #15
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4e      	ldr	r2, [pc, #312]	; (8001410 <HAL_GPIO_Init+0x304>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d025      	beq.n	8001326 <HAL_GPIO_Init+0x21a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4d      	ldr	r2, [pc, #308]	; (8001414 <HAL_GPIO_Init+0x308>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d01f      	beq.n	8001322 <HAL_GPIO_Init+0x216>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4c      	ldr	r2, [pc, #304]	; (8001418 <HAL_GPIO_Init+0x30c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d019      	beq.n	800131e <HAL_GPIO_Init+0x212>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4b      	ldr	r2, [pc, #300]	; (800141c <HAL_GPIO_Init+0x310>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x20e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4a      	ldr	r2, [pc, #296]	; (8001420 <HAL_GPIO_Init+0x314>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x20a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a49      	ldr	r2, [pc, #292]	; (8001424 <HAL_GPIO_Init+0x318>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x206>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a48      	ldr	r2, [pc, #288]	; (8001428 <HAL_GPIO_Init+0x31c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x202>
 800130a:	2306      	movs	r3, #6
 800130c:	e00c      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 800130e:	2307      	movs	r3, #7
 8001310:	e00a      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 8001312:	2305      	movs	r3, #5
 8001314:	e008      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 8001316:	2304      	movs	r3, #4
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 800131a:	2303      	movs	r3, #3
 800131c:	e004      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 800131e:	2302      	movs	r3, #2
 8001320:	e002      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x21c>
 8001326:	2300      	movs	r3, #0
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	f002 0203 	and.w	r2, r2, #3
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4093      	lsls	r3, r2
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001338:	4934      	ldr	r1, [pc, #208]	; (800140c <HAL_GPIO_Init+0x300>)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001346:	4b39      	ldr	r3, [pc, #228]	; (800142c <HAL_GPIO_Init+0x320>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800136a:	4a30      	ldr	r2, [pc, #192]	; (800142c <HAL_GPIO_Init+0x320>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001370:	4b2e      	ldr	r3, [pc, #184]	; (800142c <HAL_GPIO_Init+0x320>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001394:	4a25      	ldr	r2, [pc, #148]	; (800142c <HAL_GPIO_Init+0x320>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_GPIO_Init+0x320>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013be:	4a1b      	ldr	r2, [pc, #108]	; (800142c <HAL_GPIO_Init+0x320>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_GPIO_Init+0x320>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e8:	4a10      	ldr	r2, [pc, #64]	; (800142c <HAL_GPIO_Init+0x320>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b0f      	cmp	r3, #15
 80013f8:	f67f ae96 	bls.w	8001128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013fc:	bf00      	nop
 80013fe:	3724      	adds	r7, #36	; 0x24
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40023800 	.word	0x40023800
 800140c:	40013800 	.word	0x40013800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	40021400 	.word	0x40021400
 8001428:	40021800 	.word	0x40021800
 800142c:	40013c00 	.word	0x40013c00

08001430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
 800143c:	4613      	mov	r3, r2
 800143e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001440:	787b      	ldrb	r3, [r7, #1]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800144c:	e003      	b.n	8001456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800144e:	887b      	ldrh	r3, [r7, #2]
 8001450:	041a      	lsls	r2, r3, #16
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	619a      	str	r2, [r3, #24]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	4013      	ands	r3, r2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800147a:	4a05      	ldr	r2, [pc, #20]	; (8001490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f806 	bl	8001494 <HAL_GPIO_EXTI_Callback>
  }
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40013c00 	.word	0x40013c00

08001494 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{ 
 80014aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ac:	b08d      	sub	sp, #52	; 0x34
 80014ae:	af0a      	add	r7, sp, #40	; 0x28
 80014b0:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if(hhcd == NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e03e      	b.n	800153a <HAL_HCD_Init+0x90>
  }
  
  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
  
  hhcd->State = HAL_HCD_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2203      	movs	r2, #3
 80014c0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_HCD_MspInit(hhcd);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f008 f941 	bl	800974c <HAL_HCD_MspInit>
  
  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 feac 	bl	800422c <USB_DisableGlobalInt>
  
  /* Init the Core (common init.) */
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	687e      	ldr	r6, [r7, #4]
 80014dc:	466d      	mov	r5, sp
 80014de:	f106 0410 	add.w	r4, r6, #16
 80014e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80014f2:	1d33      	adds	r3, r6, #4
 80014f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f6:	6838      	ldr	r0, [r7, #0]
 80014f8:	f002 fe36 	bl	8004168 <USB_CoreInit>
  
  /* Force Host Mode*/
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2101      	movs	r1, #1
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fea3 	bl	800424e <USB_SetCurrentMode>
  
  /* Init Host */
  USB_HostInit(hhcd->Instance, hhcd->Init);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	687e      	ldr	r6, [r7, #4]
 8001510:	466d      	mov	r5, sp
 8001512:	f106 0410 	add.w	r4, r6, #16
 8001516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001522:	e885 0003 	stmia.w	r5, {r0, r1}
 8001526:	1d33      	adds	r3, r6, #4
 8001528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800152a:	6838      	ldr	r0, [r7, #0]
 800152c:	f002 ffb2 	bl	8004494 <USB_HostInit>
  
  hhcd->State= HAL_HCD_STATE_READY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001542 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001542:	b590      	push	{r4, r7, lr}
 8001544:	b089      	sub	sp, #36	; 0x24
 8001546:	af04      	add	r7, sp, #16
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	4608      	mov	r0, r1
 800154c:	4611      	mov	r1, r2
 800154e:	461a      	mov	r2, r3
 8001550:	4603      	mov	r3, r0
 8001552:	70fb      	strb	r3, [r7, #3]
 8001554:	460b      	mov	r3, r1
 8001556:	70bb      	strb	r3, [r7, #2]
 8001558:	4613      	mov	r3, r2
 800155a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
  
  __HAL_LOCK(hhcd); 
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_HCD_HC_Init+0x2c>
 800156a:	2302      	movs	r3, #2
 800156c:	e06c      	b.n	8001648 <HAL_HCD_HC_Init+0x106>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	3338      	adds	r3, #56	; 0x38
 8001586:	787a      	ldrb	r2, [r7, #1]
 8001588:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800158a:	78fa      	ldrb	r2, [r7, #3]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	440b      	add	r3, r1
 8001598:	3340      	adds	r3, #64	; 0x40
 800159a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800159c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800159e:	78fa      	ldrb	r2, [r7, #3]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	3339      	adds	r3, #57	; 0x39
 80015ae:	78fa      	ldrb	r2, [r7, #3]
 80015b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015b2:	78fa      	ldrb	r2, [r7, #3]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	333f      	adds	r3, #63	; 0x3f
 80015c2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 80015c8:	78fa      	ldrb	r2, [r7, #3]
 80015ca:	78bb      	ldrb	r3, [r7, #2]
 80015cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015d0:	b2d8      	uxtb	r0, r3
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	333a      	adds	r3, #58	; 0x3a
 80015e0:	4602      	mov	r2, r0
 80015e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 80015e4:	78fa      	ldrb	r2, [r7, #3]
 80015e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	09db      	lsrs	r3, r3, #7
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	440b      	add	r3, r1
 80015fe:	333b      	adds	r3, #59	; 0x3b
 8001600:	4602      	mov	r2, r0
 8001602:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].speed = speed;
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	333c      	adds	r3, #60	; 0x3c
 8001614:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001618:	701a      	strb	r2, [r3, #0]
  
  status =  USB_HC_Init(hhcd->Instance, 
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	787c      	ldrb	r4, [r7, #1]
 8001620:	78ba      	ldrb	r2, [r7, #2]
 8001622:	78f9      	ldrb	r1, [r7, #3]
 8001624:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	4623      	mov	r3, r4
 8001636:	f003 f885 	bl	8004744 <USB_HC_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  return status;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	bd90      	pop	{r4, r7, pc}

08001650 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]
  
  __HAL_LOCK(hhcd);   
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001666:	2b01      	cmp	r3, #1
 8001668:	d101      	bne.n	800166e <HAL_HCD_HC_Halt+0x1e>
 800166a:	2302      	movs	r3, #2
 800166c:	e00f      	b.n	800168e <HAL_HCD_HC_Halt+0x3e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	78fa      	ldrb	r2, [r7, #3]
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f003 faa9 	bl	8004bd6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  
  return status;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	4608      	mov	r0, r1
 80016a2:	4611      	mov	r1, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	4603      	mov	r3, r0
 80016a8:	70fb      	strb	r3, [r7, #3]
 80016aa:	460b      	mov	r3, r1
 80016ac:	70bb      	strb	r3, [r7, #2]
 80016ae:	4613      	mov	r3, r2
 80016b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	333b      	adds	r3, #59	; 0x3b
 80016c2:	78ba      	ldrb	r2, [r7, #2]
 80016c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type; 
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	333f      	adds	r3, #63	; 0x3f
 80016d6:	787a      	ldrb	r2, [r7, #1]
 80016d8:	701a      	strb	r2, [r3, #0]
  
  if(token == 0)
 80016da:	7c3b      	ldrb	r3, [r7, #16]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10a      	bne.n	80016f6 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	440b      	add	r3, r1
 80016ee:	3342      	adds	r3, #66	; 0x42
 80016f0:	2203      	movs	r2, #3
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	e009      	b.n	800170a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	3342      	adds	r3, #66	; 0x42
 8001706:	2202      	movs	r2, #2
 8001708:	701a      	strb	r2, [r3, #0]
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 800170a:	787b      	ldrb	r3, [r7, #1]
 800170c:	2b03      	cmp	r3, #3
 800170e:	f200 8104 	bhi.w	800191a <HAL_HCD_HC_SubmitRequest+0x282>
 8001712:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001718:	08001729 	.word	0x08001729
 800171c:	080018ff 	.word	0x080018ff
 8001720:	080017c1 	.word	0x080017c1
 8001724:	08001875 	.word	0x08001875
  {
  case EP_TYPE_CTRL:
    if((token == 1) && (direction == 0)) /*send data */
 8001728:	7c3b      	ldrb	r3, [r7, #16]
 800172a:	2b01      	cmp	r3, #1
 800172c:	f040 80f2 	bne.w	8001914 <HAL_HCD_HC_SubmitRequest+0x27c>
 8001730:	78bb      	ldrb	r3, [r7, #2]
 8001732:	2b00      	cmp	r3, #0
 8001734:	f040 80ee 	bne.w	8001914 <HAL_HCD_HC_SubmitRequest+0x27c>
    {
      if (length == 0)
 8001738:	8b3b      	ldrh	r3, [r7, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_HCD_HC_SubmitRequest+0xba>
      { /* For Status OUT stage, Length==0, Status Out PID = 1 */
        hhcd->hc[ch_num].toggle_out = 1;
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	3351      	adds	r3, #81	; 0x51
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
      }
      
      /* Set the Data Toggle bit as per the Flag */
      if (hhcd->hc[ch_num].toggle_out == 0)
 8001752:	78fa      	ldrb	r2, [r7, #3]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	3351      	adds	r3, #81	; 0x51
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10a      	bne.n	800177e <HAL_HCD_HC_SubmitRequest+0xe6>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 8001768:	78fa      	ldrb	r2, [r7, #3]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	3342      	adds	r3, #66	; 0x42
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	e009      	b.n	8001792 <HAL_HCD_HC_SubmitRequest+0xfa>
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	3342      	adds	r3, #66	; 0x42
 800178e:	2202      	movs	r2, #2
 8001790:	701a      	strb	r2, [r3, #0]
      }
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8001792:	78fa      	ldrb	r2, [r7, #3]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	335c      	adds	r3, #92	; 0x5c
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	f000 80b5 	beq.w	8001914 <HAL_HCD_HC_SubmitRequest+0x27c>
      {
        hhcd->hc[ch_num].do_ping = do_ping;
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	440b      	add	r3, r1
 80017b8:	333d      	adds	r3, #61	; 0x3d
 80017ba:	7f3a      	ldrb	r2, [r7, #28]
 80017bc:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 80017be:	e0a9      	b.n	8001914 <HAL_HCD_HC_SubmitRequest+0x27c>
  
  case EP_TYPE_BULK:
    if(direction == 0)
 80017c0:	78bb      	ldrb	r3, [r7, #2]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d135      	bne.n	8001832 <HAL_HCD_HC_SubmitRequest+0x19a>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 80017c6:	78fa      	ldrb	r2, [r7, #3]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	440b      	add	r3, r1
 80017d4:	3351      	adds	r3, #81	; 0x51
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10a      	bne.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x15a>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	3342      	adds	r3, #66	; 0x42
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	e009      	b.n	8001806 <HAL_HCD_HC_SubmitRequest+0x16e>
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	440b      	add	r3, r1
 8001800:	3342      	adds	r3, #66	; 0x42
 8001802:	2202      	movs	r2, #2
 8001804:	701a      	strb	r2, [r3, #0]
      }
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	440b      	add	r3, r1
 8001814:	335c      	adds	r3, #92	; 0x5c
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d07d      	beq.n	8001918 <HAL_HCD_HC_SubmitRequest+0x280>
      {
        hhcd->hc[ch_num].do_ping = do_ping;
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	440b      	add	r3, r1
 800182a:	333d      	adds	r3, #61	; 0x3d
 800182c:	7f3a      	ldrb	r2, [r7, #28]
 800182e:	701a      	strb	r2, [r3, #0]
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    
    break;
 8001830:	e072      	b.n	8001918 <HAL_HCD_HC_SubmitRequest+0x280>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8001832:	78fa      	ldrb	r2, [r7, #3]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	440b      	add	r3, r1
 8001840:	3350      	adds	r3, #80	; 0x50
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10a      	bne.n	800185e <HAL_HCD_HC_SubmitRequest+0x1c6>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	440b      	add	r3, r1
 8001856:	3342      	adds	r3, #66	; 0x42
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
    break;
 800185c:	e05c      	b.n	8001918 <HAL_HCD_HC_SubmitRequest+0x280>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800185e:	78fa      	ldrb	r2, [r7, #3]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	440b      	add	r3, r1
 800186c:	3342      	adds	r3, #66	; 0x42
 800186e:	2202      	movs	r2, #2
 8001870:	701a      	strb	r2, [r3, #0]
    break;
 8001872:	e051      	b.n	8001918 <HAL_HCD_HC_SubmitRequest+0x280>
  case EP_TYPE_INTR:
    if(direction == 0)
 8001874:	78bb      	ldrb	r3, [r7, #2]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d120      	bne.n	80018bc <HAL_HCD_HC_SubmitRequest+0x224>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 800187a:	78fa      	ldrb	r2, [r7, #3]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	440b      	add	r3, r1
 8001888:	3351      	adds	r3, #81	; 0x51
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10a      	bne.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x20e>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;    
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	440b      	add	r3, r1
 800189e:	3342      	adds	r3, #66	; 0x42
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
      else
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    break;
 80018a4:	e039      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x282>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	440b      	add	r3, r1
 80018b4:	3342      	adds	r3, #66	; 0x42
 80018b6:	2202      	movs	r2, #2
 80018b8:	701a      	strb	r2, [r3, #0]
    break;
 80018ba:	e02e      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x282>
      if( hhcd->hc[ch_num].toggle_in == 0)
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	3350      	adds	r3, #80	; 0x50
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10a      	bne.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x250>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	3342      	adds	r3, #66	; 0x42
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
    break;
 80018e6:	e018      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x282>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	3342      	adds	r3, #66	; 0x42
 80018f8:	2202      	movs	r2, #2
 80018fa:	701a      	strb	r2, [r3, #0]
    break;
 80018fc:	e00d      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x282>
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	3342      	adds	r3, #66	; 0x42
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
    break;  
 8001912:	e002      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x282>
    break;
 8001914:	bf00      	nop
 8001916:	e000      	b.n	800191a <HAL_HCD_HC_SubmitRequest+0x282>
    break;
 8001918:	bf00      	nop
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 800191a:	78fa      	ldrb	r2, [r7, #3]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	440b      	add	r3, r1
 8001928:	3344      	adds	r3, #68	; 0x44
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800192e:	78fa      	ldrb	r2, [r7, #3]
 8001930:	8b39      	ldrh	r1, [r7, #24]
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4403      	add	r3, r0
 800193e:	3348      	adds	r3, #72	; 0x48
 8001940:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	335c      	adds	r3, #92	; 0x5c
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0;
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	440b      	add	r3, r1
 8001964:	334c      	adds	r3, #76	; 0x4c
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	440b      	add	r3, r1
 8001978:	3339      	adds	r3, #57	; 0x39
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800197e:	78fa      	ldrb	r2, [r7, #3]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	335d      	adds	r3, #93	; 0x5d
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	78fa      	ldrb	r2, [r7, #3]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	3338      	adds	r3, #56	; 0x38
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	18d1      	adds	r1, r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	f002 ffc5 	bl	800493c <USB_HC_StartXfer>
 80019b2:	4603      	mov	r3, r0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	613b      	str	r3, [r7, #16]
  uint32_t i = 0U , interrupt = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f002 fd19 	bl	800440e <USB_GetMode>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b01      	cmp	r3, #1
 80019e0:	f040 80e9 	bne.w	8001bb6 <HAL_HCD_IRQHandler+0x1fa>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 fcfb 	bl	80043e4 <USB_ReadInterrupts>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80df 	beq.w	8001bb4 <HAL_HCD_IRQHandler+0x1f8>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 fcf2 	bl	80043e4 <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a0a:	d104      	bne.n	8001a16 <HAL_HCD_IRQHandler+0x5a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a14:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 fce2 	bl	80043e4 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a2a:	d104      	bne.n	8001a36 <HAL_HCD_IRQHandler+0x7a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a34:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 fcd2 	bl	80043e4 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a4a:	d104      	bne.n	8001a56 <HAL_HCD_IRQHandler+0x9a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a54:	615a      	str	r2, [r3, #20]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 fcc2 	bl	80043e4 <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d103      	bne.n	8001a72 <HAL_HCD_IRQHandler+0xb6>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	615a      	str	r2, [r3, #20]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f002 fcb4 	bl	80043e4 <USB_ReadInterrupts>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a86:	d118      	bne.n	8001aba <HAL_HCD_IRQHandler+0xfe>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a8e:	461a      	mov	r2, r3
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001a9c:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f007 febc 	bl	800981c <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 fd92 	bl	80045d4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ab8:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fc90 	bl	80043e4 <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ace:	d102      	bne.n	8001ad6 <HAL_HCD_IRQHandler+0x11a>
    {
      HCD_Port_IRQHandler (hhcd);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f001 f805 	bl	8002ae0 <HCD_Port_IRQHandler>
    }
    
    /* Handle Host SOF Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 fc82 	bl	80043e4 <USB_ReadInterrupts>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d106      	bne.n	8001af8 <HAL_HCD_IRQHandler+0x13c>
    {
      HAL_HCD_SOF_Callback(hhcd);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f007 fe7a 	bl	80097e4 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2208      	movs	r2, #8
 8001af6:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host channel Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 fc71 	bl	80043e4 <USB_ReadInterrupts>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b0c:	d134      	bne.n	8001b78 <HAL_HCD_IRQHandler+0x1bc>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 f850 	bl	8004bb8 <USB_HC_ReadInterrupt>
 8001b18:	60f8      	str	r0, [r7, #12]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e021      	b.n	8001b64 <HAL_HCD_IRQHandler+0x1a8>
      {
        if (interrupt & (1U << i))
 8001b20:	2201      	movs	r2, #1
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	409a      	lsls	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d017      	beq.n	8001b5e <HAL_HCD_IRQHandler+0x1a2>
        {
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	015a      	lsls	r2, r3, #5
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <HAL_HCD_IRQHandler+0x196>
          {
            HCD_HC_IN_IRQHandler(hhcd, i);
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	4619      	mov	r1, r3
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f8b5 	bl	8001cba <HCD_HC_IN_IRQHandler>
 8001b50:	e005      	b.n	8001b5e <HAL_HCD_IRQHandler+0x1a2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler (hhcd, i);
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4619      	mov	r1, r3
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 fbee 	bl	800233a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3301      	adds	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d8d8      	bhi.n	8001b20 <HAL_HCD_IRQHandler+0x164>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b76:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Rx Queue Level Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 fc31 	bl	80043e4 <USB_ReadInterrupts>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f003 0310 	and.w	r3, r3, #16
 8001b88:	2b10      	cmp	r3, #16
 8001b8a:	d114      	bne.n	8001bb6 <HAL_HCD_IRQHandler+0x1fa>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	6992      	ldr	r2, [r2, #24]
 8001b96:	f022 0210 	bic.w	r2, r2, #16
 8001b9a:	619a      	str	r2, [r3, #24]
      
      HCD_RXQLVL_IRQHandler (hhcd);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 feed 	bl	800297c <HCD_RXQLVL_IRQHandler>
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	6992      	ldr	r2, [r2, #24]
 8001bac:	f042 0210 	orr.w	r2, r2, #16
 8001bb0:	619a      	str	r2, [r3, #24]
 8001bb2:	e000      	b.n	8001bb6 <HAL_HCD_IRQHandler+0x1fa>
      return;
 8001bb4:	bf00      	nop
    }
  }
}
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{ 
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd); 
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_HCD_Start+0x16>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e013      	b.n	8001bfa <HAL_HCD_Start+0x3e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 fb13 	bl	800420a <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2101      	movs	r1, #1
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fd51 	bl	8004692 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{ 
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd); 
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_HCD_Stop+0x16>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e00d      	b.n	8001c34 <HAL_HCD_Stop+0x32>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 f8fb 	bl	8004e20 <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f002 fcfd 	bl	8004648 <USB_ResetPort>
 8001c4e:	4603      	mov	r3, r0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/ 
  *            URB_ERROR/  
  *            URB_STALL      
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	335c      	adds	r3, #92	; 0x5c
 8001c74:	781b      	ldrb	r3, [r3, #0]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 fd49 	bl	8004726 <USB_GetCurrentFrame>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 fd28 	bl	8004700 <USB_GetHostSpeed>
 8001cb0:	4603      	mov	r3, r0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval None
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cba:	b590      	push	{r4, r7, lr}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	015a      	lsls	r2, r3, #5
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d01a      	beq.n	8001d1c <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	015a      	lsls	r2, r3, #5
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	015a      	lsls	r2, r3, #5
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d04:	4619      	mov	r1, r3
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	60cb      	str	r3, [r1, #12]
 8001d1a:	e094      	b.n	8001e46 <HCD_HC_IN_IRQHandler+0x18c>
  }  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	015a      	lsls	r2, r3, #5
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0320 	and.w	r3, r3, #32
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HCD_HC_IN_IRQHandler+0x8c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	015a      	lsls	r2, r3, #5
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2320      	movs	r3, #32
 8001d42:	6093      	str	r3, [r2, #8]
 8001d44:	e07f      	b.n	8001e46 <HCD_HC_IN_IRQHandler+0x18c>
  }
  
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d034      	beq.n	8001dc6 <HCD_HC_IN_IRQHandler+0x10c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001d5c:	78fb      	ldrb	r3, [r7, #3]
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d68:	4619      	mov	r1, r3
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	440b      	add	r3, r1
 8001d8c:	335d      	adds	r3, #93	; 0x5d
 8001d8e:	2205      	movs	r2, #5
 8001d90:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9e:	461a      	mov	r2, r3
 8001da0:	2310      	movs	r3, #16
 8001da2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db0:	461a      	mov	r2, r3
 8001db2:	2308      	movs	r3, #8
 8001db4:	6093      	str	r3, [r2, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	78fa      	ldrb	r2, [r7, #3]
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f002 ff09 	bl	8004bd6 <USB_HC_Halt>
 8001dc4:	e03f      	b.n	8001e46 <HCD_HC_IN_IRQHandler+0x18c>
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d034      	beq.n	8001e46 <HCD_HC_IN_IRQHandler+0x18c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de8:	4619      	mov	r1, r3
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	78fa      	ldrb	r2, [r7, #3]
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f002 fee5 	bl	8004bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	440b      	add	r3, r1
 8001e2c:	335d      	adds	r3, #93	; 0x5d
 8001e2e:	2208      	movs	r2, #8
 8001e30:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e44:	6093      	str	r3, [r2, #8]
  }    
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d022      	beq.n	8001ea2 <HCD_HC_IN_IRQHandler+0x1e8>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e68:	4619      	mov	r1, r3
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	78fa      	ldrb	r2, [r7, #3]
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 fea5 	bl	8004bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e98:	461a      	mov	r2, r3
 8001e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e9e:	6093      	str	r3, [r2, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
      tmpreg |= USB_OTG_HCCHAR_CHENA;
      USBx_HC(chnum)->HCCHAR = tmpreg;
    }
  }
}
 8001ea0:	e247      	b.n	8002332 <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80c0 	beq.w	800203a <HCD_HC_IN_IRQHandler+0x380>
    if (hhcd->Init.dma_enable)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d01b      	beq.n	8001efa <HCD_HC_IN_IRQHandler+0x240>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	78f9      	ldrb	r1, [r7, #3]
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4403      	add	r3, r0
 8001ed2:	3348      	adds	r3, #72	; 0x48
 8001ed4:	6819      	ldr	r1, [r3, #0]
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	0158      	lsls	r0, r3, #5
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4403      	add	r3, r0
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001ee8:	1ac9      	subs	r1, r1, r3
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4403      	add	r3, r0
 8001ef6:	334c      	adds	r3, #76	; 0x4c
 8001ef8:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XFRC;
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	440b      	add	r3, r1
 8001f08:	335d      	adds	r3, #93	; 0x5d
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	440b      	add	r3, r1
 8001f1c:	3358      	adds	r3, #88	; 0x58
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2301      	movs	r3, #1
 8001f32:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	333f      	adds	r3, #63	; 0x3f
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00a      	beq.n	8001f60 <HCD_HC_IN_IRQHandler+0x2a6>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	440b      	add	r3, r1
 8001f58:	333f      	adds	r3, #63	; 0x3f
 8001f5a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d121      	bne.n	8001fa4 <HCD_HC_IN_IRQHandler+0x2ea>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	015a      	lsls	r2, r3, #5
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f002 fe23 	bl	8004bd6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2310      	movs	r3, #16
 8001fa0:	6093      	str	r3, [r2, #8]
 8001fa2:	e033      	b.n	800200c <HCD_HC_IN_IRQHandler+0x352>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	333f      	adds	r3, #63	; 0x3f
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d128      	bne.n	800200c <HCD_HC_IN_IRQHandler+0x352>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fda:	600b      	str	r3, [r1, #0]
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	440b      	add	r3, r1
 8001fea:	335c      	adds	r3, #92	; 0x5c
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001ff0:	78fa      	ldrb	r2, [r7, #3]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	335c      	adds	r3, #92	; 0x5c
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	4619      	mov	r1, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f007 fc16 	bl	8009838 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[chnum].toggle_in ^= 1U;
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	78f9      	ldrb	r1, [r7, #3]
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	460b      	mov	r3, r1
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4403      	add	r3, r0
 800201c:	3350      	adds	r3, #80	; 0x50
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	f083 0301 	eor.w	r3, r3, #1
 8002024:	b2d8      	uxtb	r0, r3
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	3350      	adds	r3, #80	; 0x50
 8002034:	4602      	mov	r2, r0
 8002036:	701a      	strb	r2, [r3, #0]
}
 8002038:	e17b      	b.n	8002332 <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4413      	add	r3, r2
 8002042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80b7 	beq.w	80021c0 <HCD_HC_IN_IRQHandler+0x506>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4413      	add	r3, r2
 800205a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205e:	4619      	mov	r1, r3
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f023 0302 	bic.w	r3, r3, #2
 8002072:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	335d      	adds	r3, #93	; 0x5d
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d10a      	bne.n	80020a0 <HCD_HC_IN_IRQHandler+0x3e6>
      hhcd->hc[chnum].urb_state  = URB_DONE;      
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	440b      	add	r3, r1
 8002098:	335c      	adds	r3, #92	; 0x5c
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
 800209e:	e077      	b.n	8002190 <HCD_HC_IN_IRQHandler+0x4d6>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	440b      	add	r3, r1
 80020ae:	335d      	adds	r3, #93	; 0x5d
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d10a      	bne.n	80020cc <HCD_HC_IN_IRQHandler+0x412>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	335c      	adds	r3, #92	; 0x5c
 80020c6:	2205      	movs	r2, #5
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	e061      	b.n	8002190 <HCD_HC_IN_IRQHandler+0x4d6>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80020cc:	78fa      	ldrb	r2, [r7, #3]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	440b      	add	r3, r1
 80020da:	335d      	adds	r3, #93	; 0x5d
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d00a      	beq.n	80020f8 <HCD_HC_IN_IRQHandler+0x43e>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	440b      	add	r3, r1
 80020f0:	335d      	adds	r3, #93	; 0x5d
 80020f2:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d14b      	bne.n	8002190 <HCD_HC_IN_IRQHandler+0x4d6>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 80020f8:	78fa      	ldrb	r2, [r7, #3]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	440b      	add	r3, r1
 8002106:	3358      	adds	r3, #88	; 0x58
 8002108:	6819      	ldr	r1, [r3, #0]
 800210a:	1c48      	adds	r0, r1, #1
 800210c:	687c      	ldr	r4, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4423      	add	r3, r4
 8002118:	3358      	adds	r3, #88	; 0x58
 800211a:	6018      	str	r0, [r3, #0]
 800211c:	2903      	cmp	r1, #3
 800211e:	d914      	bls.n	800214a <HCD_HC_IN_IRQHandler+0x490>
        hhcd->hc[chnum].ErrCnt = 0U;
 8002120:	78fa      	ldrb	r2, [r7, #3]
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	3358      	adds	r3, #88	; 0x58
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	335c      	adds	r3, #92	; 0x5c
 8002144:	2204      	movs	r2, #4
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	e009      	b.n	800215e <HCD_HC_IN_IRQHandler+0x4a4>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	335c      	adds	r3, #92	; 0x5c
 800215a:	2202      	movs	r2, #2
 800215c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4413      	add	r3, r2
 8002166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002174:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800217c:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4413      	add	r3, r2
 8002186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218a:	461a      	mov	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219c:	461a      	mov	r2, r3
 800219e:	2302      	movs	r3, #2
 80021a0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	335c      	adds	r3, #92	; 0x5c
 80021b2:	781a      	ldrb	r2, [r3, #0]
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	4619      	mov	r1, r3
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f007 fb3d 	bl	8009838 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021be:	e0b8      	b.n	8002332 <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d03d      	beq.n	8002252 <HCD_HC_IN_IRQHandler+0x598>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	4619      	mov	r1, r3
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	015a      	lsls	r2, r3, #5
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f043 0302 	orr.w	r3, r3, #2
 80021f6:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].ErrCnt++;
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	3358      	adds	r3, #88	; 0x58
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	1c59      	adds	r1, r3, #1
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4403      	add	r3, r0
 8002218:	3358      	adds	r3, #88	; 0x58
 800221a:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XACTERR;
 800221c:	78fa      	ldrb	r2, [r7, #3]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	335d      	adds	r3, #93	; 0x5d
 800222c:	2206      	movs	r2, #6
 800222e:	701a      	strb	r2, [r3, #0]
    USB_HC_Halt(hhcd->Instance, chnum);     
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f002 fccc 	bl	8004bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4413      	add	r3, r2
 8002246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224a:	461a      	mov	r2, r3
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	6093      	str	r3, [r2, #8]
}
 8002250:	e06f      	b.n	8002332 <HCD_HC_IN_IRQHandler+0x678>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4413      	add	r3, r2
 800225a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	2b00      	cmp	r3, #0
 8002266:	d064      	beq.n	8002332 <HCD_HC_IN_IRQHandler+0x678>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	333f      	adds	r3, #63	; 0x3f
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d117      	bne.n	80022ae <HCD_HC_IN_IRQHandler+0x5f4>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	4619      	mov	r1, r3
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f043 0302 	orr.w	r3, r3, #2
 800229e:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f002 fc94 	bl	8004bd6 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	335d      	adds	r3, #93	; 0x5d
 80022be:	2203      	movs	r2, #3
 80022c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ce:	461a      	mov	r2, r3
 80022d0:	2310      	movs	r3, #16
 80022d2:	6093      	str	r3, [r2, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 80022d4:	78fa      	ldrb	r2, [r7, #3]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	440b      	add	r3, r1
 80022e2:	333f      	adds	r3, #63	; 0x3f
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HCD_HC_IN_IRQHandler+0x646>
              (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	440b      	add	r3, r1
 80022f8:	333f      	adds	r3, #63	; 0x3f
 80022fa:	781b      	ldrb	r3, [r3, #0]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d118      	bne.n	8002332 <HCD_HC_IN_IRQHandler+0x678>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4413      	add	r3, r2
 8002308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002316:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800231e:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232c:	461a      	mov	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	6013      	str	r3, [r2, #0]
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bd90      	pop	{r4, r7, pc}

0800233a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval None
  */
static void HCD_HC_OUT_IRQHandler  (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800233a:	b590      	push	{r4, r7, lr}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60fb      	str	r3, [r7, #12]
  
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01a      	beq.n	8002398 <HCD_HC_OUT_IRQHandler+0x5e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236e:	461a      	mov	r2, r3
 8002370:	2304      	movs	r3, #4
 8002372:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	4619      	mov	r1, r3
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4413      	add	r3, r2
 800238a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	60cb      	str	r3, [r1, #12]
    }
    
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
  }
} 
 8002396:	e2ed      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d041      	beq.n	8002432 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ba:	461a      	mov	r2, r3
 80023bc:	2320      	movs	r3, #32
 80023be:	6093      	str	r3, [r2, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	440b      	add	r3, r1
 80023ce:	333d      	adds	r3, #61	; 0x3d
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	f040 82ce 	bne.w	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
      hhcd->hc[chnum].state = HC_NYET;     
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	440b      	add	r3, r1
 80023e6:	335d      	adds	r3, #93	; 0x5d
 80023e8:	2204      	movs	r2, #4
 80023ea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	4619      	mov	r1, r3
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4413      	add	r3, r2
 8002402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f002 fbdd 	bl	8004bd6 <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	335c      	adds	r3, #92	; 0x5c
 800242c:	2202      	movs	r2, #2
 800242e:	701a      	strb	r2, [r3, #0]
} 
 8002430:	e2a0      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d035      	beq.n	80024b4 <HCD_HC_OUT_IRQHandler+0x17a>
    hhcd->hc[chnum].state = HC_NYET;
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	335d      	adds	r3, #93	; 0x5d
 8002458:	2204      	movs	r2, #4
 800245a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt= 0U;    
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	440b      	add	r3, r1
 800246a:	3358      	adds	r3, #88	; 0x58
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247c:	4619      	mov	r1, r3
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f002 fb9b 	bl	8004bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ac:	461a      	mov	r2, r3
 80024ae:	2340      	movs	r3, #64	; 0x40
 80024b0:	6093      	str	r3, [r2, #8]
} 
 80024b2:	e25f      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d022      	beq.n	8002510 <HCD_HC_OUT_IRQHandler+0x1d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d6:	4619      	mov	r1, r3
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f043 0302 	orr.w	r3, r3, #2
 80024ea:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 fb6e 	bl	8004bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4413      	add	r3, r2
 8002502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002506:	461a      	mov	r2, r3
 8002508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800250c:	6093      	str	r3, [r2, #8]
} 
 800250e:	e231      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d035      	beq.n	8002592 <HCD_HC_OUT_IRQHandler+0x258>
      hhcd->hc[chnum].ErrCnt = 0U;  
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	3358      	adds	r3, #88	; 0x58
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800253a:	78fb      	ldrb	r3, [r7, #3]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002546:	4619      	mov	r1, r3
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f043 0302 	orr.w	r3, r3, #2
 800255a:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f002 fb36 	bl	8004bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	461a      	mov	r2, r3
 8002578:	2301      	movs	r3, #1
 800257a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	440b      	add	r3, r1
 800258a:	335d      	adds	r3, #93	; 0x5d
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
} 
 8002590:	e1f0      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4413      	add	r3, r2
 800259a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d02b      	beq.n	8002600 <HCD_HC_OUT_IRQHandler+0x2c6>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b4:	461a      	mov	r2, r3
 80025b6:	2308      	movs	r3, #8
 80025b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c6:	4619      	mov	r1, r3
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f043 0302 	orr.w	r3, r3, #2
 80025da:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 faf6 	bl	8004bd6 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	440b      	add	r3, r1
 80025f8:	335d      	adds	r3, #93	; 0x5d
 80025fa:	2205      	movs	r2, #5
 80025fc:	701a      	strb	r2, [r3, #0]
} 
 80025fe:	e1b9      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b00      	cmp	r3, #0
 8002614:	d035      	beq.n	8002682 <HCD_HC_OUT_IRQHandler+0x348>
    hhcd->hc[chnum].ErrCnt = 0U;  
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	440b      	add	r3, r1
 8002624:	3358      	adds	r3, #88	; 0x58
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	4619      	mov	r1, r3
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f043 0302 	orr.w	r3, r3, #2
 800264a:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f002 fabe 	bl	8004bd6 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	335d      	adds	r3, #93	; 0x5d
 800266a:	2203      	movs	r2, #3
 800266c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4413      	add	r3, r2
 8002676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267a:	461a      	mov	r2, r3
 800267c:	2310      	movs	r3, #16
 800267e:	6093      	str	r3, [r2, #8]
} 
 8002680:	e178      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002694:	2b00      	cmp	r3, #0
 8002696:	d02b      	beq.n	80026f0 <HCD_HC_OUT_IRQHandler+0x3b6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	4619      	mov	r1, r3
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 fa87 	bl	8004bd6 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	440b      	add	r3, r1
 80026d6:	335d      	adds	r3, #93	; 0x5d
 80026d8:	2206      	movs	r2, #6
 80026da:	701a      	strb	r2, [r3, #0]
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	461a      	mov	r2, r3
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	6093      	str	r3, [r2, #8]
} 
 80026ee:	e141      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002702:	2b00      	cmp	r3, #0
 8002704:	d035      	beq.n	8002772 <HCD_HC_OUT_IRQHandler+0x438>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8002706:	78fb      	ldrb	r3, [r7, #3]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002712:	4619      	mov	r1, r3
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f002 fa50 	bl	8004bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	461a      	mov	r2, r3
 8002744:	2310      	movs	r3, #16
 8002746:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	461a      	mov	r2, r3
 8002756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800275a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	440b      	add	r3, r1
 800276a:	335d      	adds	r3, #93	; 0x5d
 800276c:	2208      	movs	r2, #8
 800276e:	701a      	strb	r2, [r3, #0]
} 
 8002770:	e100      	b.n	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80f5 	beq.w	8002974 <HCD_HC_OUT_IRQHandler+0x63a>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4413      	add	r3, r2
 8002792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002796:	4619      	mov	r1, r3
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f023 0302 	bic.w	r3, r3, #2
 80027aa:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	440b      	add	r3, r1
 80027ba:	335d      	adds	r3, #93	; 0x5d
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d12c      	bne.n	800281c <HCD_HC_OUT_IRQHandler+0x4e2>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	440b      	add	r3, r1
 80027d0:	335c      	adds	r3, #92	; 0x5c
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	440b      	add	r3, r1
 80027e4:	333f      	adds	r3, #63	; 0x3f
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	f040 80ac 	bne.w	8002946 <HCD_HC_OUT_IRQHandler+0x60c>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	78f9      	ldrb	r1, [r7, #3]
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4403      	add	r3, r0
 80027fe:	3351      	adds	r3, #81	; 0x51
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	f083 0301 	eor.w	r3, r3, #1
 8002806:	b2d8      	uxtb	r0, r3
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	440b      	add	r3, r1
 8002814:	3351      	adds	r3, #81	; 0x51
 8002816:	4602      	mov	r2, r0
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	e094      	b.n	8002946 <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	440b      	add	r3, r1
 800282a:	335d      	adds	r3, #93	; 0x5d
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d10a      	bne.n	8002848 <HCD_HC_OUT_IRQHandler+0x50e>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	440b      	add	r3, r1
 8002840:	335c      	adds	r3, #92	; 0x5c
 8002842:	2202      	movs	r2, #2
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	e07e      	b.n	8002946 <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	440b      	add	r3, r1
 8002856:	335d      	adds	r3, #93	; 0x5d
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b04      	cmp	r3, #4
 800285c:	d114      	bne.n	8002888 <HCD_HC_OUT_IRQHandler+0x54e>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	440b      	add	r3, r1
 800286c:	335c      	adds	r3, #92	; 0x5c
 800286e:	2202      	movs	r2, #2
 8002870:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].do_ping = 0U;
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	440b      	add	r3, r1
 8002880:	333d      	adds	r3, #61	; 0x3d
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	e05e      	b.n	8002946 <HCD_HC_OUT_IRQHandler+0x60c>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	440b      	add	r3, r1
 8002896:	335d      	adds	r3, #93	; 0x5d
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b05      	cmp	r3, #5
 800289c:	d10a      	bne.n	80028b4 <HCD_HC_OUT_IRQHandler+0x57a>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	440b      	add	r3, r1
 80028ac:	335c      	adds	r3, #92	; 0x5c
 80028ae:	2205      	movs	r2, #5
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	e048      	b.n	8002946 <HCD_HC_OUT_IRQHandler+0x60c>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	440b      	add	r3, r1
 80028c2:	335d      	adds	r3, #93	; 0x5d
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b06      	cmp	r3, #6
 80028c8:	d00a      	beq.n	80028e0 <HCD_HC_OUT_IRQHandler+0x5a6>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	440b      	add	r3, r1
 80028d8:	335d      	adds	r3, #93	; 0x5d
 80028da:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d132      	bne.n	8002946 <HCD_HC_OUT_IRQHandler+0x60c>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	440b      	add	r3, r1
 80028ee:	3358      	adds	r3, #88	; 0x58
 80028f0:	6819      	ldr	r1, [r3, #0]
 80028f2:	1c48      	adds	r0, r1, #1
 80028f4:	687c      	ldr	r4, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4423      	add	r3, r4
 8002900:	3358      	adds	r3, #88	; 0x58
 8002902:	6018      	str	r0, [r3, #0]
 8002904:	2903      	cmp	r1, #3
 8002906:	d914      	bls.n	8002932 <HCD_HC_OUT_IRQHandler+0x5f8>
        hhcd->hc[chnum].ErrCnt = 0U;
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	440b      	add	r3, r1
 8002916:	3358      	adds	r3, #88	; 0x58
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	440b      	add	r3, r1
 800292a:	335c      	adds	r3, #92	; 0x5c
 800292c:	2204      	movs	r2, #4
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e009      	b.n	8002946 <HCD_HC_OUT_IRQHandler+0x60c>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	440b      	add	r3, r1
 8002940:	335c      	adds	r3, #92	; 0x5c
 8002942:	2202      	movs	r2, #2
 8002944:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4413      	add	r3, r2
 800294e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002952:	461a      	mov	r2, r3
 8002954:	2302      	movs	r3, #2
 8002956:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8002958:	78fa      	ldrb	r2, [r7, #3]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	440b      	add	r3, r1
 8002966:	335c      	adds	r3, #92	; 0x5c
 8002968:	781a      	ldrb	r2, [r3, #0]
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f006 ff62 	bl	8009838 <HAL_HCD_HC_NotifyURBChange_Callback>
} 
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	bd90      	pop	{r4, r7, pc}

0800297c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	61fb      	str	r3, [r7, #28]
  uint8_t  channelnum = 0;  
 800298a:	2300      	movs	r3, #0
 800298c:	76fb      	strb	r3, [r7, #27]
  uint32_t pktsts;
  uint32_t pktcnt; 
  uint32_t temp = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
  
  temp = hhcd->Instance->GRXSTSP;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	617b      	str	r3, [r7, #20]
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	76fb      	strb	r3, [r7, #27]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	0c5b      	lsrs	r3, r3, #17
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	60fb      	str	r3, [r7, #12]
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ba:	60bb      	str	r3, [r7, #8]
  
  switch (pktsts)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d003      	beq.n	80029ca <HCD_RXQLVL_IRQHandler+0x4e>
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	f000 8082 	beq.w	8002acc <HCD_RXQLVL_IRQHandler+0x150>
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
    break;
  case GRXSTS_PKTSTS_IN_XFER_COMP:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 80029c8:	e083      	b.n	8002ad2 <HCD_RXQLVL_IRQHandler+0x156>
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d07f      	beq.n	8002ad0 <HCD_RXQLVL_IRQHandler+0x154>
 80029d0:	7efa      	ldrb	r2, [r7, #27]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	440b      	add	r3, r1
 80029de:	3344      	adds	r3, #68	; 0x44
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d074      	beq.n	8002ad0 <HCD_RXQLVL_IRQHandler+0x154>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	7efa      	ldrb	r2, [r7, #27]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	440b      	add	r3, r1
 80029f8:	3344      	adds	r3, #68	; 0x44
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	b292      	uxth	r2, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	f001 fcc8 	bl	8004396 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8002a06:	7efa      	ldrb	r2, [r7, #27]
 8002a08:	7ef9      	ldrb	r1, [r7, #27]
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4403      	add	r3, r0
 8002a16:	3344      	adds	r3, #68	; 0x44
 8002a18:	6819      	ldr	r1, [r3, #0]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	4419      	add	r1, r3
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4403      	add	r3, r0
 8002a2a:	3344      	adds	r3, #68	; 0x44
 8002a2c:	6019      	str	r1, [r3, #0]
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8002a2e:	7efa      	ldrb	r2, [r7, #27]
 8002a30:	7ef9      	ldrb	r1, [r7, #27]
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4403      	add	r3, r0
 8002a3e:	334c      	adds	r3, #76	; 0x4c
 8002a40:	6819      	ldr	r1, [r3, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4419      	add	r1, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4403      	add	r3, r0
 8002a52:	334c      	adds	r3, #76	; 0x4c
 8002a54:	6019      	str	r1, [r3, #0]
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8002a56:	7efb      	ldrb	r3, [r7, #27]
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <HCD_RXQLVL_IRQHandler+0x160>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d031      	beq.n	8002ad0 <HCD_RXQLVL_IRQHandler+0x154>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8002a6c:	7efb      	ldrb	r3, [r7, #27]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a82:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a8a:	613b      	str	r3, [r7, #16]
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8002a8c:	7efb      	ldrb	r3, [r7, #27]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	461a      	mov	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	6013      	str	r3, [r2, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8002a9e:	7efa      	ldrb	r2, [r7, #27]
 8002aa0:	7ef9      	ldrb	r1, [r7, #27]
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4403      	add	r3, r0
 8002aae:	3350      	adds	r3, #80	; 0x50
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	f083 0301 	eor.w	r3, r3, #1
 8002ab6:	b2d8      	uxtb	r0, r3
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3350      	adds	r3, #80	; 0x50
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	701a      	strb	r2, [r3, #0]
    break;
 8002aca:	e001      	b.n	8002ad0 <HCD_RXQLVL_IRQHandler+0x154>
    break;
 8002acc:	bf00      	nop
 8002ace:	e000      	b.n	8002ad2 <HCD_RXQLVL_IRQHandler+0x156>
    break;
 8002ad0:	bf00      	nop
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	3720      	adds	r7, #32
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	1ff80000 	.word	0x1ff80000

08002ae0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	617b      	str	r3, [r7, #20]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	613b      	str	r3, [r7, #16]
  hprt0_dup = USBx_HPRT0;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60fb      	str	r3, [r7, #12]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b08:	60fb      	str	r3, [r7, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d113      	bne.n	8002b3c <HCD_Port_IRQHandler+0x5c>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d10a      	bne.n	8002b34 <HCD_Port_IRQHandler+0x54>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	6992      	ldr	r2, [r2, #24]
 8002b28:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002b2c:	619a      	str	r2, [r3, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f006 fe66 	bl	8009800 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f043 0302 	orr.w	r3, r3, #2
 8002b3a:	60fb      	str	r3, [r7, #12]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d142      	bne.n	8002bcc <HCD_Port_IRQHandler+0xec>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f043 0308 	orr.w	r3, r3, #8
 8002b4c:	60fb      	str	r3, [r7, #12]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d126      	bne.n	8002ba6 <HCD_Port_IRQHandler+0xc6>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d113      	bne.n	8002b88 <HCD_Port_IRQHandler+0xa8>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002b66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b6a:	d106      	bne.n	8002b7a <HCD_Port_IRQHandler+0x9a>
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2102      	movs	r1, #2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f001 fd2e 	bl	80045d4 <USB_InitFSLSPClkSel>
 8002b78:	e011      	b.n	8002b9e <HCD_Port_IRQHandler+0xbe>
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f001 fd27 	bl	80045d4 <USB_InitFSLSPClkSel>
 8002b86:	e00a      	b.n	8002b9e <HCD_Port_IRQHandler+0xbe>
        }
      }
      else
      {
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d106      	bne.n	8002b9e <HCD_Port_IRQHandler+0xbe>
        {
          USBx_HOST->HFIR = 60000U;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b96:	461a      	mov	r2, r3
 8002b98:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002b9c:	6053      	str	r3, [r2, #4]
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f006 fe2e 	bl	8009800 <HAL_HCD_Connect_Callback>
 8002ba4:	e012      	b.n	8002bcc <HCD_Port_IRQHandler+0xec>
    }
    else
    {
      /* Clean up HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bac:	461a      	mov	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002bba:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	6992      	ldr	r2, [r2, #24]
 8002bc6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002bca:	619a      	str	r2, [r3, #24]
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d103      	bne.n	8002bde <HCD_Port_IRQHandler+0xfe>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f043 0320 	orr.w	r3, r3, #32
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002be4:	461a      	mov	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6013      	str	r3, [r2, #0]
}
 8002bea:	bf00      	nop
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0ca      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c08:	4b67      	ldr	r3, [pc, #412]	; (8002da8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 020f 	and.w	r2, r3, #15
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d20c      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b64      	ldr	r3, [pc, #400]	; (8002da8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b62      	ldr	r3, [pc, #392]	; (8002da8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 020f 	and.w	r2, r3, #15
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0b6      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d020      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c48:	4a58      	ldr	r2, [pc, #352]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c4a:	4b58      	ldr	r3, [pc, #352]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c60:	4a52      	ldr	r2, [pc, #328]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c62:	4b52      	ldr	r3, [pc, #328]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6c:	494f      	ldr	r1, [pc, #316]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c6e:	4b4f      	ldr	r3, [pc, #316]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d044      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b46      	ldr	r3, [pc, #280]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d119      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e07d      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d003      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d107      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb2:	4b3e      	ldr	r3, [pc, #248]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e06d      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc2:	4b3a      	ldr	r3, [pc, #232]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e065      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cd2:	4936      	ldr	r1, [pc, #216]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	4b35      	ldr	r3, [pc, #212]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 0203 	bic.w	r2, r3, #3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ce4:	f7fd fdcc 	bl	8000880 <HAL_GetTick>
 8002ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cec:	f7fd fdc8 	bl	8000880 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e04d      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 020c 	and.w	r2, r3, #12
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d1eb      	bne.n	8002cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d14:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d90c      	bls.n	8002d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2a:	4b1f      	ldr	r3, [pc, #124]	; (8002da8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 020f 	and.w	r2, r3, #15
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e030      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d48:	4918      	ldr	r1, [pc, #96]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d4a:	4b18      	ldr	r3, [pc, #96]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d009      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d66:	4911      	ldr	r1, [pc, #68]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d7a:	f000 fb7b 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8002d7e:	4601      	mov	r1, r0
 8002d80:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	5cd3      	ldrb	r3, [r2, r3]
 8002d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002d92:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d96:	2001      	movs	r0, #1
 8002d98:	f7fd fd2e 	bl	80007f8 <HAL_InitTick>

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40023c00 	.word	0x40023c00
 8002dac:	40023800 	.word	0x40023800
 8002db0:	0800a09c 	.word	0x0800a09c
 8002db4:	2000007c 	.word	0x2000007c

08002db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	2000007c 	.word	0x2000007c

08002dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dd4:	f7ff fff0 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8002dd8:	4601      	mov	r1, r0
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	0a9b      	lsrs	r3, r3, #10
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	4a03      	ldr	r2, [pc, #12]	; (8002df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de6:	5cd3      	ldrb	r3, [r2, r3]
 8002de8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40023800 	.word	0x40023800
 8002df4:	0800a0ac 	.word	0x0800a0ac

08002df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dfc:	f7ff ffdc 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8002e00:	4601      	mov	r1, r0
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	0b5b      	lsrs	r3, r3, #13
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	4a03      	ldr	r2, [pc, #12]	; (8002e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e0e:	5cd3      	ldrb	r3, [r2, r3]
 8002e10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	0800a0ac 	.word	0x0800a0ac

08002e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08c      	sub	sp, #48	; 0x30
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002e58:	496f      	ldr	r1, [pc, #444]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e5a:	4b6f      	ldr	r3, [pc, #444]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e60:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002e76:	2301      	movs	r3, #1
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d010      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002e86:	4964      	ldr	r1, [pc, #400]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e88:	4b63      	ldr	r3, [pc, #396]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e8e:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d017      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eb4:	4958      	ldr	r1, [pc, #352]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eb6:	4b58      	ldr	r3, [pc, #352]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ebc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d017      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ef0:	4949      	ldr	r1, [pc, #292]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ef2:	4b49      	ldr	r3, [pc, #292]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ef8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002f10:	2301      	movs	r3, #1
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 808a 	beq.w	8003042 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	4a39      	ldr	r2, [pc, #228]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f34:	4b38      	ldr	r3, [pc, #224]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b36      	ldr	r3, [pc, #216]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f4a:	4a34      	ldr	r2, [pc, #208]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f4c:	4b33      	ldr	r3, [pc, #204]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f56:	f7fd fc93 	bl	8000880 <HAL_GetTick>
 8002f5a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fd fc8f 	bl	8000880 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e278      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f70:	4b2a      	ldr	r3, [pc, #168]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f7c:	4b26      	ldr	r3, [pc, #152]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f84:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d02f      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d028      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f9a:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fa4:	4b1e      	ldr	r3, [pc, #120]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002faa:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002fb0:	4a19      	ldr	r2, [pc, #100]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fb6:	4b18      	ldr	r3, [pc, #96]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d014      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fd fc5d 	bl	8000880 <HAL_GetTick>
 8002fc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fd fc59 	bl	8000880 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e240      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0ee      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff8:	d114      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002ffa:	4907      	ldr	r1, [pc, #28]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800300c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003010:	4313      	orrs	r3, r2
 8003012:	608b      	str	r3, [r1, #8]
 8003014:	e00c      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	40007000 	.word	0x40007000
 8003020:	42470e40 	.word	0x42470e40
 8003024:	4a4a      	ldr	r2, [pc, #296]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003026:	4b4a      	ldr	r3, [pc, #296]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800302e:	6093      	str	r3, [r2, #8]
 8003030:	4947      	ldr	r1, [pc, #284]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003032:	4b47      	ldr	r3, [pc, #284]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003034:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303e:	4313      	orrs	r3, r2
 8003040:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b00      	cmp	r3, #0
 800304c:	d004      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800304e:	4a41      	ldr	r2, [pc, #260]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003056:	6013      	str	r3, [r2, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003064:	493a      	ldr	r1, [pc, #232]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003066:	4b3a      	ldr	r3, [pc, #232]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800306c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003086:	4932      	ldr	r1, [pc, #200]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003088:	4b31      	ldr	r3, [pc, #196]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800308a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800308e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d011      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030a8:	4929      	ldr	r1, [pc, #164]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030aa:	4b29      	ldr	r3, [pc, #164]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030c6:	d101      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80030c8:	2301      	movs	r3, #1
 80030ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80030d8:	491d      	ldr	r1, [pc, #116]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030da:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d011      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80030fa:	4915      	ldr	r1, [pc, #84]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030fc:	4b14      	ldr	r3, [pc, #80]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003102:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003118:	d101      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800311a:	2301      	movs	r3, #1
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	2b01      	cmp	r3, #1
 8003122:	d005      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312c:	f040 80ff 	bne.w	800332e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003136:	f7fd fba3 	bl	8000880 <HAL_GetTick>
 800313a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800313c:	e00e      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800313e:	f7fd fb9f 	bl	8000880 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d907      	bls.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e188      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003150:	40023800 	.word	0x40023800
 8003154:	424711e0 	.word	0x424711e0
 8003158:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800315c:	4b7e      	ldr	r3, [pc, #504]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1ea      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003184:	2b00      	cmp	r3, #0
 8003186:	d028      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d124      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003190:	4b71      	ldr	r3, [pc, #452]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	3301      	adds	r3, #1
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031a2:	4b6d      	ldr	r3, [pc, #436]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a8:	0e1b      	lsrs	r3, r3, #24
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80031b0:	4969      	ldr	r1, [pc, #420]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	019b      	lsls	r3, r3, #6
 80031bc:	431a      	orrs	r2, r3
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	3b01      	subs	r3, #1
 80031c4:	041b      	lsls	r3, r3, #16
 80031c6:	431a      	orrs	r2, r3
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	061b      	lsls	r3, r3, #24
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	071b      	lsls	r3, r3, #28
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d035      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003204:	d130      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003206:	4b54      	ldr	r3, [pc, #336]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	3301      	adds	r3, #1
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003218:	4b4f      	ldr	r3, [pc, #316]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800321a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800321e:	0f1b      	lsrs	r3, r3, #28
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003226:	494c      	ldr	r1, [pc, #304]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	019b      	lsls	r3, r3, #6
 8003232:	431a      	orrs	r2, r3
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	3b01      	subs	r3, #1
 800323a:	041b      	lsls	r3, r3, #16
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	061b      	lsls	r3, r3, #24
 8003244:	431a      	orrs	r2, r3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	071b      	lsls	r3, r3, #28
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003250:	4941      	ldr	r1, [pc, #260]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003252:	4b41      	ldr	r3, [pc, #260]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003258:	f023 021f 	bic.w	r2, r3, #31
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003260:	3b01      	subs	r3, #1
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003270:	2b00      	cmp	r3, #0
 8003272:	d029      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800327c:	d124      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800327e:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	3301      	adds	r3, #1
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003290:	4b31      	ldr	r3, [pc, #196]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003296:	0f1b      	lsrs	r3, r3, #28
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800329e:	492e      	ldr	r1, [pc, #184]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	019b      	lsls	r3, r3, #6
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	3b01      	subs	r3, #1
 80032b4:	041b      	lsls	r3, r3, #16
 80032b6:	431a      	orrs	r2, r3
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	061b      	lsls	r3, r3, #24
 80032bc:	431a      	orrs	r2, r3
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	071b      	lsls	r3, r3, #28
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d016      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032d4:	4920      	ldr	r1, [pc, #128]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	019b      	lsls	r3, r3, #6
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	3b01      	subs	r3, #1
 80032ea:	041b      	lsls	r3, r3, #16
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	061b      	lsls	r3, r3, #24
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	071b      	lsls	r3, r3, #28
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003302:	4b16      	ldr	r3, [pc, #88]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003308:	f7fd faba 	bl	8000880 <HAL_GetTick>
 800330c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003310:	f7fd fab6 	bl	8000880 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e09f      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003322:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	2b01      	cmp	r3, #1
 8003332:	f040 8095 	bne.w	8003460 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003336:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800333c:	f7fd faa0 	bl	8000880 <HAL_GetTick>
 8003340:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003342:	e00f      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003344:	f7fd fa9c 	bl	8000880 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d908      	bls.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e085      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800
 800335c:	42470068 	.word	0x42470068
 8003360:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003364:	4b41      	ldr	r3, [pc, #260]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800336c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003370:	d0e8      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800338e:	2b00      	cmp	r3, #0
 8003390:	d02b      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003396:	2b00      	cmp	r3, #0
 8003398:	d127      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800339a:	4b34      	ldr	r3, [pc, #208]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	3301      	adds	r3, #1
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80033ac:	492f      	ldr	r1, [pc, #188]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	019b      	lsls	r3, r3, #6
 80033b8:	431a      	orrs	r2, r3
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	085b      	lsrs	r3, r3, #1
 80033be:	3b01      	subs	r3, #1
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	061b      	lsls	r3, r3, #24
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80033d0:	4926      	ldr	r1, [pc, #152]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033d2:	4b26      	ldr	r3, [pc, #152]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	3b01      	subs	r3, #1
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d01d      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033fe:	d118      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003400:	4b1a      	ldr	r3, [pc, #104]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	0e1b      	lsrs	r3, r3, #24
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800340e:	4917      	ldr	r1, [pc, #92]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699a      	ldr	r2, [r3, #24]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	019b      	lsls	r3, r3, #6
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	3b01      	subs	r3, #1
 8003424:	041b      	lsls	r3, r3, #16
 8003426:	431a      	orrs	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	061b      	lsls	r3, r3, #24
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003432:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003434:	2201      	movs	r2, #1
 8003436:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003438:	f7fd fa22 	bl	8000880 <HAL_GetTick>
 800343c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003440:	f7fd fa1e 	bl	8000880 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e007      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800345a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800345e:	d1ef      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3730      	adds	r7, #48	; 0x30
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	42470070 	.word	0x42470070

08003474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003478:	b0a1      	sub	sp, #132	; 0x84
 800347a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003490:	4ba0      	ldr	r3, [pc, #640]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 030c 	and.w	r3, r3, #12
 8003498:	2b0c      	cmp	r3, #12
 800349a:	f200 8193 	bhi.w	80037c4 <HAL_RCC_GetSysClockFreq+0x350>
 800349e:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <HAL_RCC_GetSysClockFreq+0x30>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	080034d9 	.word	0x080034d9
 80034a8:	080037c5 	.word	0x080037c5
 80034ac:	080037c5 	.word	0x080037c5
 80034b0:	080037c5 	.word	0x080037c5
 80034b4:	080034df 	.word	0x080034df
 80034b8:	080037c5 	.word	0x080037c5
 80034bc:	080037c5 	.word	0x080037c5
 80034c0:	080037c5 	.word	0x080037c5
 80034c4:	080034e5 	.word	0x080034e5
 80034c8:	080037c5 	.word	0x080037c5
 80034cc:	080037c5 	.word	0x080037c5
 80034d0:	080037c5 	.word	0x080037c5
 80034d4:	08003661 	.word	0x08003661
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034d8:	4b8f      	ldr	r3, [pc, #572]	; (8003718 <HAL_RCC_GetSysClockFreq+0x2a4>)
 80034da:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 80034dc:	e175      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034de:	4b8f      	ldr	r3, [pc, #572]	; (800371c <HAL_RCC_GetSysClockFreq+0x2a8>)
 80034e0:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80034e2:	e172      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e4:	4b8b      	ldr	r3, [pc, #556]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ec:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ee:	4b89      	ldr	r3, [pc, #548]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d056      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fa:	4b86      	ldr	r3, [pc, #536]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	099b      	lsrs	r3, r3, #6
 8003500:	f04f 0400 	mov.w	r4, #0
 8003504:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	ea01 0103 	and.w	r1, r1, r3
 8003510:	ea02 0204 	and.w	r2, r2, r4
 8003514:	460b      	mov	r3, r1
 8003516:	4614      	mov	r4, r2
 8003518:	0160      	lsls	r0, r4, #5
 800351a:	6678      	str	r0, [r7, #100]	; 0x64
 800351c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800351e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003522:	6678      	str	r0, [r7, #100]	; 0x64
 8003524:	015b      	lsls	r3, r3, #5
 8003526:	663b      	str	r3, [r7, #96]	; 0x60
 8003528:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800352c:	1a5b      	subs	r3, r3, r1
 800352e:	eb64 0402 	sbc.w	r4, r4, r2
 8003532:	01a0      	lsls	r0, r4, #6
 8003534:	65f8      	str	r0, [r7, #92]	; 0x5c
 8003536:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003538:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 800353c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800353e:	0198      	lsls	r0, r3, #6
 8003540:	65b8      	str	r0, [r7, #88]	; 0x58
 8003542:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8003546:	1aed      	subs	r5, r5, r3
 8003548:	eb66 0604 	sbc.w	r6, r6, r4
 800354c:	4633      	mov	r3, r6
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	657b      	str	r3, [r7, #84]	; 0x54
 8003552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003554:	4628      	mov	r0, r5
 8003556:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800355a:	657b      	str	r3, [r7, #84]	; 0x54
 800355c:	462b      	mov	r3, r5
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	653b      	str	r3, [r7, #80]	; 0x50
 8003562:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8003566:	461d      	mov	r5, r3
 8003568:	4626      	mov	r6, r4
 800356a:	186b      	adds	r3, r5, r1
 800356c:	eb46 0402 	adc.w	r4, r6, r2
 8003570:	4618      	mov	r0, r3
 8003572:	4621      	mov	r1, r4
 8003574:	460b      	mov	r3, r1
 8003576:	025b      	lsls	r3, r3, #9
 8003578:	64fb      	str	r3, [r7, #76]	; 0x4c
 800357a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800357c:	4602      	mov	r2, r0
 800357e:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 8003582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003584:	4603      	mov	r3, r0
 8003586:	025b      	lsls	r3, r3, #9
 8003588:	64bb      	str	r3, [r7, #72]	; 0x48
 800358a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800358e:	4618      	mov	r0, r3
 8003590:	4621      	mov	r1, r4
 8003592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003594:	f04f 0400 	mov.w	r4, #0
 8003598:	461a      	mov	r2, r3
 800359a:	4623      	mov	r3, r4
 800359c:	f7fc ff82 	bl	80004a4 <__aeabi_uldivmod>
 80035a0:	4603      	mov	r3, r0
 80035a2:	460c      	mov	r4, r1
 80035a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035a6:	e04d      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a8:	4b5a      	ldr	r3, [pc, #360]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	099b      	lsrs	r3, r3, #6
 80035ae:	f04f 0400 	mov.w	r4, #0
 80035b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	ea01 0103 	and.w	r1, r1, r3
 80035be:	ea02 0204 	and.w	r2, r2, r4
 80035c2:	460b      	mov	r3, r1
 80035c4:	4614      	mov	r4, r2
 80035c6:	0160      	lsls	r0, r4, #5
 80035c8:	6478      	str	r0, [r7, #68]	; 0x44
 80035ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80035cc:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80035d0:	6478      	str	r0, [r7, #68]	; 0x44
 80035d2:	015b      	lsls	r3, r3, #5
 80035d4:	643b      	str	r3, [r7, #64]	; 0x40
 80035d6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80035da:	1a5b      	subs	r3, r3, r1
 80035dc:	eb64 0402 	sbc.w	r4, r4, r2
 80035e0:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 80035e4:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 80035e8:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 80035ec:	ebba 0a03 	subs.w	sl, sl, r3
 80035f0:	eb6b 0b04 	sbc.w	fp, fp, r4
 80035f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003602:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8003606:	63bb      	str	r3, [r7, #56]	; 0x38
 8003608:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800360c:	eb1a 0a01 	adds.w	sl, sl, r1
 8003610:	eb4b 0b02 	adc.w	fp, fp, r2
 8003614:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8003618:	637b      	str	r3, [r7, #52]	; 0x34
 800361a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361c:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 8003620:	637b      	str	r3, [r7, #52]	; 0x34
 8003622:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8003626:	633b      	str	r3, [r7, #48]	; 0x30
 8003628:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800362c:	4650      	mov	r0, sl
 800362e:	4659      	mov	r1, fp
 8003630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003632:	f04f 0400 	mov.w	r4, #0
 8003636:	461a      	mov	r2, r3
 8003638:	4623      	mov	r3, r4
 800363a:	f7fc ff33 	bl	80004a4 <__aeabi_uldivmod>
 800363e:	4603      	mov	r3, r0
 8003640:	460c      	mov	r4, r1
 8003642:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003644:	4b33      	ldr	r3, [pc, #204]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	3301      	adds	r3, #1
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8003654:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800365e:	e0b4      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003660:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003668:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800366a:	4b2a      	ldr	r3, [pc, #168]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d054      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003676:	4b27      	ldr	r3, [pc, #156]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	099b      	lsrs	r3, r3, #6
 800367c:	f04f 0400 	mov.w	r4, #0
 8003680:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	ea01 0103 	and.w	r1, r1, r3
 800368c:	ea02 0204 	and.w	r2, r2, r4
 8003690:	460b      	mov	r3, r1
 8003692:	4614      	mov	r4, r2
 8003694:	0160      	lsls	r0, r4, #5
 8003696:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003698:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800369a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800369e:	62f8      	str	r0, [r7, #44]	; 0x2c
 80036a0:	015b      	lsls	r3, r3, #5
 80036a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80036a8:	1a5b      	subs	r3, r3, r1
 80036aa:	eb64 0402 	sbc.w	r4, r4, r2
 80036ae:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80036b2:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80036b6:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80036ba:	ebb8 0803 	subs.w	r8, r8, r3
 80036be:	eb69 0904 	sbc.w	r9, r9, r4
 80036c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
 80036d0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80036d4:	623b      	str	r3, [r7, #32]
 80036d6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036da:	eb18 0801 	adds.w	r8, r8, r1
 80036de:	eb49 0902 	adc.w	r9, r9, r2
 80036e2:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80036e6:	61fb      	str	r3, [r7, #28]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80036fa:	4640      	mov	r0, r8
 80036fc:	4649      	mov	r1, r9
 80036fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003700:	f04f 0400 	mov.w	r4, #0
 8003704:	461a      	mov	r2, r3
 8003706:	4623      	mov	r3, r4
 8003708:	f7fc fecc 	bl	80004a4 <__aeabi_uldivmod>
 800370c:	4603      	mov	r3, r0
 800370e:	460c      	mov	r4, r1
 8003710:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003712:	e04b      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x338>
 8003714:	40023800 	.word	0x40023800
 8003718:	00f42400 	.word	0x00f42400
 800371c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003720:	4b2d      	ldr	r3, [pc, #180]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x364>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	099b      	lsrs	r3, r3, #6
 8003726:	f04f 0400 	mov.w	r4, #0
 800372a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	ea01 0103 	and.w	r1, r1, r3
 8003736:	ea02 0204 	and.w	r2, r2, r4
 800373a:	460b      	mov	r3, r1
 800373c:	4614      	mov	r4, r2
 800373e:	0160      	lsls	r0, r4, #5
 8003740:	6178      	str	r0, [r7, #20]
 8003742:	6978      	ldr	r0, [r7, #20]
 8003744:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003748:	6178      	str	r0, [r7, #20]
 800374a:	015b      	lsls	r3, r3, #5
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003752:	1a5b      	subs	r3, r3, r1
 8003754:	eb64 0402 	sbc.w	r4, r4, r2
 8003758:	01a6      	lsls	r6, r4, #6
 800375a:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800375e:	019d      	lsls	r5, r3, #6
 8003760:	1aed      	subs	r5, r5, r3
 8003762:	eb66 0604 	sbc.w	r6, r6, r4
 8003766:	00f3      	lsls	r3, r6, #3
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	00eb      	lsls	r3, r5, #3
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800377a:	186d      	adds	r5, r5, r1
 800377c:	eb46 0602 	adc.w	r6, r6, r2
 8003780:	02b3      	lsls	r3, r6, #10
 8003782:	607b      	str	r3, [r7, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 800378a:	607b      	str	r3, [r7, #4]
 800378c:	02ab      	lsls	r3, r5, #10
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	e897 0060 	ldmia.w	r7, {r5, r6}
 8003794:	4628      	mov	r0, r5
 8003796:	4631      	mov	r1, r6
 8003798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800379a:	f04f 0400 	mov.w	r4, #0
 800379e:	461a      	mov	r2, r3
 80037a0:	4623      	mov	r3, r4
 80037a2:	f7fc fe7f 	bl	80004a4 <__aeabi_uldivmod>
 80037a6:	4603      	mov	r3, r0
 80037a8:	460c      	mov	r4, r1
 80037aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80037ac:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x364>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	0f1b      	lsrs	r3, r3, #28
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 80037b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80037ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80037c2:	e002      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCC_GetSysClockFreq+0x368>)
 80037c6:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80037c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3784      	adds	r7, #132	; 0x84
 80037d0:	46bd      	mov	sp, r7
 80037d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037d6:	bf00      	nop
 80037d8:	40023800 	.word	0x40023800
 80037dc:	00f42400 	.word	0x00f42400

080037e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8083 	beq.w	8003900 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037fa:	4b95      	ldr	r3, [pc, #596]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b04      	cmp	r3, #4
 8003804:	d019      	beq.n	800383a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003806:	4b92      	ldr	r3, [pc, #584]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800380e:	2b08      	cmp	r3, #8
 8003810:	d106      	bne.n	8003820 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003812:	4b8f      	ldr	r3, [pc, #572]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381e:	d00c      	beq.n	800383a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003820:	4b8b      	ldr	r3, [pc, #556]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003828:	2b0c      	cmp	r3, #12
 800382a:	d112      	bne.n	8003852 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382c:	4b88      	ldr	r3, [pc, #544]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003838:	d10b      	bne.n	8003852 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383a:	4b85      	ldr	r3, [pc, #532]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d05b      	beq.n	80038fe <HAL_RCC_OscConfig+0x11e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d157      	bne.n	80038fe <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e216      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385a:	d106      	bne.n	800386a <HAL_RCC_OscConfig+0x8a>
 800385c:	4a7c      	ldr	r2, [pc, #496]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800385e:	4b7c      	ldr	r3, [pc, #496]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	e01d      	b.n	80038a6 <HAL_RCC_OscConfig+0xc6>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003872:	d10c      	bne.n	800388e <HAL_RCC_OscConfig+0xae>
 8003874:	4a76      	ldr	r2, [pc, #472]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003876:	4b76      	ldr	r3, [pc, #472]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800387e:	6013      	str	r3, [r2, #0]
 8003880:	4a73      	ldr	r2, [pc, #460]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003882:	4b73      	ldr	r3, [pc, #460]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	e00b      	b.n	80038a6 <HAL_RCC_OscConfig+0xc6>
 800388e:	4a70      	ldr	r2, [pc, #448]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003890:	4b6f      	ldr	r3, [pc, #444]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4a6d      	ldr	r2, [pc, #436]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800389c:	4b6c      	ldr	r3, [pc, #432]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d013      	beq.n	80038d6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7fc ffe7 	bl	8000880 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b6:	f7fc ffe3 	bl	8000880 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b64      	cmp	r3, #100	; 0x64
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e1db      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c8:	4b61      	ldr	r3, [pc, #388]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0xd6>
 80038d4:	e014      	b.n	8003900 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d6:	f7fc ffd3 	bl	8000880 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038de:	f7fc ffcf 	bl	8000880 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b64      	cmp	r3, #100	; 0x64
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e1c7      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f0:	4b57      	ldr	r3, [pc, #348]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1f0      	bne.n	80038de <HAL_RCC_OscConfig+0xfe>
 80038fc:	e000      	b.n	8003900 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d06f      	beq.n	80039ec <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800390c:	4b50      	ldr	r3, [pc, #320]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 030c 	and.w	r3, r3, #12
 8003914:	2b00      	cmp	r3, #0
 8003916:	d017      	beq.n	8003948 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003918:	4b4d      	ldr	r3, [pc, #308]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003920:	2b08      	cmp	r3, #8
 8003922:	d105      	bne.n	8003930 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003924:	4b4a      	ldr	r3, [pc, #296]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00b      	beq.n	8003948 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003930:	4b47      	ldr	r3, [pc, #284]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003938:	2b0c      	cmp	r3, #12
 800393a:	d11c      	bne.n	8003976 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800393c:	4b44      	ldr	r3, [pc, #272]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d116      	bne.n	8003976 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003948:	4b41      	ldr	r3, [pc, #260]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_OscConfig+0x180>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d001      	beq.n	8003960 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e18f      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003960:	493b      	ldr	r1, [pc, #236]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003962:	4b3b      	ldr	r3, [pc, #236]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4313      	orrs	r3, r2
 8003972:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003974:	e03a      	b.n	80039ec <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d020      	beq.n	80039c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800397e:	4b35      	ldr	r3, [pc, #212]	; (8003a54 <HAL_RCC_OscConfig+0x274>)
 8003980:	2201      	movs	r2, #1
 8003982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fc ff7c 	bl	8000880 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800398c:	f7fc ff78 	bl	8000880 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e170      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399e:	4b2c      	ldr	r3, [pc, #176]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039aa:	4929      	ldr	r1, [pc, #164]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 80039ac:	4b28      	ldr	r3, [pc, #160]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4313      	orrs	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]
 80039be:	e015      	b.n	80039ec <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c0:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <HAL_RCC_OscConfig+0x274>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c6:	f7fc ff5b 	bl	8000880 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ce:	f7fc ff57 	bl	8000880 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e14f      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e0:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f0      	bne.n	80039ce <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d037      	beq.n	8003a68 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d016      	beq.n	8003a2e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a00:	4b15      	ldr	r3, [pc, #84]	; (8003a58 <HAL_RCC_OscConfig+0x278>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a06:	f7fc ff3b 	bl	8000880 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a0e:	f7fc ff37 	bl	8000880 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e12f      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x22e>
 8003a2c:	e01c      	b.n	8003a68 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <HAL_RCC_OscConfig+0x278>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a34:	f7fc ff24 	bl	8000880 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3a:	e00f      	b.n	8003a5c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a3c:	f7fc ff20 	bl	8000880 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d908      	bls.n	8003a5c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e118      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800
 8003a54:	42470000 	.word	0x42470000
 8003a58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5c:	4b8a      	ldr	r3, [pc, #552]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e9      	bne.n	8003a3c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 8097 	beq.w	8003ba4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a76:	2300      	movs	r3, #0
 8003a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a7a:	4b83      	ldr	r3, [pc, #524]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10f      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	4a7f      	ldr	r2, [pc, #508]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003a8c:	4b7e      	ldr	r3, [pc, #504]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a94:	6413      	str	r3, [r2, #64]	; 0x40
 8003a96:	4b7c      	ldr	r3, [pc, #496]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa6:	4b79      	ldr	r3, [pc, #484]	; (8003c8c <HAL_RCC_OscConfig+0x4ac>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d118      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ab2:	4a76      	ldr	r2, [pc, #472]	; (8003c8c <HAL_RCC_OscConfig+0x4ac>)
 8003ab4:	4b75      	ldr	r3, [pc, #468]	; (8003c8c <HAL_RCC_OscConfig+0x4ac>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003abe:	f7fc fedf 	bl	8000880 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac6:	f7fc fedb 	bl	8000880 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e0d3      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad8:	4b6c      	ldr	r3, [pc, #432]	; (8003c8c <HAL_RCC_OscConfig+0x4ac>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d106      	bne.n	8003afa <HAL_RCC_OscConfig+0x31a>
 8003aec:	4a66      	ldr	r2, [pc, #408]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003aee:	4b66      	ldr	r3, [pc, #408]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6713      	str	r3, [r2, #112]	; 0x70
 8003af8:	e01c      	b.n	8003b34 <HAL_RCC_OscConfig+0x354>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x33c>
 8003b02:	4a61      	ldr	r2, [pc, #388]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b04:	4b60      	ldr	r3, [pc, #384]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b08:	f043 0304 	orr.w	r3, r3, #4
 8003b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0e:	4a5e      	ldr	r2, [pc, #376]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b10:	4b5d      	ldr	r3, [pc, #372]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1a:	e00b      	b.n	8003b34 <HAL_RCC_OscConfig+0x354>
 8003b1c:	4a5a      	ldr	r2, [pc, #360]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b1e:	4b5a      	ldr	r3, [pc, #360]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	6713      	str	r3, [r2, #112]	; 0x70
 8003b28:	4a57      	ldr	r2, [pc, #348]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b2a:	4b57      	ldr	r3, [pc, #348]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	f023 0304 	bic.w	r3, r3, #4
 8003b32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d015      	beq.n	8003b68 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fc fea0 	bl	8000880 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b44:	f7fc fe9c 	bl	8000880 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e092      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5a:	4b4b      	ldr	r3, [pc, #300]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0ee      	beq.n	8003b44 <HAL_RCC_OscConfig+0x364>
 8003b66:	e014      	b.n	8003b92 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b68:	f7fc fe8a 	bl	8000880 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6e:	e00a      	b.n	8003b86 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b70:	f7fc fe86 	bl	8000880 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e07c      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b86:	4b40      	ldr	r3, [pc, #256]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1ee      	bne.n	8003b70 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d105      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b98:	4a3b      	ldr	r2, [pc, #236]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b9a:	4b3b      	ldr	r3, [pc, #236]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d068      	beq.n	8003c7e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bac:	4b36      	ldr	r3, [pc, #216]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d060      	beq.n	8003c7a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d145      	bne.n	8003c4c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc0:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <HAL_RCC_OscConfig+0x4b0>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc6:	f7fc fe5b 	bl	8000880 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bce:	f7fc fe57 	bl	8000880 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e04f      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be0:	4b29      	ldr	r3, [pc, #164]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f0      	bne.n	8003bce <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bec:	4926      	ldr	r1, [pc, #152]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69da      	ldr	r2, [r3, #28]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	019b      	lsls	r3, r3, #6
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c04:	085b      	lsrs	r3, r3, #1
 8003c06:	3b01      	subs	r3, #1
 8003c08:	041b      	lsls	r3, r3, #16
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	061b      	lsls	r3, r3, #24
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	071b      	lsls	r3, r3, #28
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c1e:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <HAL_RCC_OscConfig+0x4b0>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c24:	f7fc fe2c 	bl	8000880 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c2c:	f7fc fe28 	bl	8000880 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e020      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3e:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x44c>
 8003c4a:	e018      	b.n	8003c7e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4c:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <HAL_RCC_OscConfig+0x4b0>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c52:	f7fc fe15 	bl	8000880 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fc fe11 	bl	8000880 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e009      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <HAL_RCC_OscConfig+0x4a8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f0      	bne.n	8003c5a <HAL_RCC_OscConfig+0x47a>
 8003c78:	e001      	b.n	8003c7e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40007000 	.word	0x40007000
 8003c90:	42470060 	.word	0x42470060

08003c94 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e03f      	b.n	8003d26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f005 fc52 	bl	8009564 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	; 0x24
 8003cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	68d2      	ldr	r2, [r2, #12]
 8003cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cd6:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f829 	bl	8003d30 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	6912      	ldr	r2, [r2, #16]
 8003ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	6952      	ldr	r2, [r2, #20]
 8003cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cfc:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	68d2      	ldr	r2, [r2, #12]
 8003d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d0c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d6c:	f023 030c 	bic.w	r3, r3, #12
 8003d70:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da4:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc0:	f040 80e4 	bne.w	8003f8c <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4aab      	ldr	r2, [pc, #684]	; (8004078 <UART_SetConfig+0x348>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d004      	beq.n	8003dd8 <UART_SetConfig+0xa8>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4aaa      	ldr	r2, [pc, #680]	; (800407c <UART_SetConfig+0x34c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d16c      	bne.n	8003eb2 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681c      	ldr	r4, [r3, #0]
 8003ddc:	f7ff f80c 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4613      	mov	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	009a      	lsls	r2, r3, #2
 8003dea:	441a      	add	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df6:	4aa2      	ldr	r2, [pc, #648]	; (8004080 <UART_SetConfig+0x350>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	011d      	lsls	r5, r3, #4
 8003e00:	f7fe fffa 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003e04:	4602      	mov	r2, r0
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009a      	lsls	r2, r3, #2
 8003e0e:	441a      	add	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fbb2 f6f3 	udiv	r6, r2, r3
 8003e1a:	f7fe ffed 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009a      	lsls	r2, r3, #2
 8003e28:	441a      	add	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	4a92      	ldr	r2, [pc, #584]	; (8004080 <UART_SetConfig+0x350>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2264      	movs	r2, #100	; 0x64
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	1af3      	subs	r3, r6, r3
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	3332      	adds	r3, #50	; 0x32
 8003e48:	4a8d      	ldr	r2, [pc, #564]	; (8004080 <UART_SetConfig+0x350>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e56:	441d      	add	r5, r3
 8003e58:	f7fe ffce 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	4613      	mov	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	009a      	lsls	r2, r3, #2
 8003e66:	441a      	add	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003e72:	f7fe ffc1 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003e76:	4602      	mov	r2, r0
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009a      	lsls	r2, r3, #2
 8003e80:	441a      	add	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8c:	4a7c      	ldr	r2, [pc, #496]	; (8004080 <UART_SetConfig+0x350>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	2264      	movs	r2, #100	; 0x64
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	1af3      	subs	r3, r6, r3
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	3332      	adds	r3, #50	; 0x32
 8003ea0:	4a77      	ldr	r2, [pc, #476]	; (8004080 <UART_SetConfig+0x350>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	442b      	add	r3, r5
 8003eae:	60a3      	str	r3, [r4, #8]
 8003eb0:	e154      	b.n	800415c <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681c      	ldr	r4, [r3, #0]
 8003eb6:	f7fe ff8b 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009a      	lsls	r2, r3, #2
 8003ec4:	441a      	add	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed0:	4a6b      	ldr	r2, [pc, #428]	; (8004080 <UART_SetConfig+0x350>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	011d      	lsls	r5, r3, #4
 8003eda:	f7fe ff79 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009a      	lsls	r2, r3, #2
 8003ee8:	441a      	add	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ef4:	f7fe ff6c 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	009a      	lsls	r2, r3, #2
 8003f02:	441a      	add	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0e:	4a5c      	ldr	r2, [pc, #368]	; (8004080 <UART_SetConfig+0x350>)
 8003f10:	fba2 2303 	umull	r2, r3, r2, r3
 8003f14:	095b      	lsrs	r3, r3, #5
 8003f16:	2264      	movs	r2, #100	; 0x64
 8003f18:	fb02 f303 	mul.w	r3, r2, r3
 8003f1c:	1af3      	subs	r3, r6, r3
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	3332      	adds	r3, #50	; 0x32
 8003f22:	4a57      	ldr	r2, [pc, #348]	; (8004080 <UART_SetConfig+0x350>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f30:	441d      	add	r5, r3
 8003f32:	f7fe ff4d 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8003f36:	4602      	mov	r2, r0
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009a      	lsls	r2, r3, #2
 8003f40:	441a      	add	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f4c:	f7fe ff40 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8003f50:	4602      	mov	r2, r0
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009a      	lsls	r2, r3, #2
 8003f5a:	441a      	add	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f66:	4a46      	ldr	r2, [pc, #280]	; (8004080 <UART_SetConfig+0x350>)
 8003f68:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	2264      	movs	r2, #100	; 0x64
 8003f70:	fb02 f303 	mul.w	r3, r2, r3
 8003f74:	1af3      	subs	r3, r6, r3
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	3332      	adds	r3, #50	; 0x32
 8003f7a:	4a41      	ldr	r2, [pc, #260]	; (8004080 <UART_SetConfig+0x350>)
 8003f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	442b      	add	r3, r5
 8003f88:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003f8a:	e0e7      	b.n	800415c <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a39      	ldr	r2, [pc, #228]	; (8004078 <UART_SetConfig+0x348>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d004      	beq.n	8003fa0 <UART_SetConfig+0x270>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a38      	ldr	r2, [pc, #224]	; (800407c <UART_SetConfig+0x34c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d171      	bne.n	8004084 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681c      	ldr	r4, [r3, #0]
 8003fa4:	f7fe ff28 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	009a      	lsls	r2, r3, #2
 8003fb2:	441a      	add	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbe:	4a30      	ldr	r2, [pc, #192]	; (8004080 <UART_SetConfig+0x350>)
 8003fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	011d      	lsls	r5, r3, #4
 8003fc8:	f7fe ff16 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4613      	mov	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009a      	lsls	r2, r3, #2
 8003fd6:	441a      	add	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	fbb2 f6f3 	udiv	r6, r2, r3
 8003fe2:	f7fe ff09 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	009a      	lsls	r2, r3, #2
 8003ff0:	441a      	add	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	4a20      	ldr	r2, [pc, #128]	; (8004080 <UART_SetConfig+0x350>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	2264      	movs	r2, #100	; 0x64
 8004006:	fb02 f303 	mul.w	r3, r2, r3
 800400a:	1af3      	subs	r3, r6, r3
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	3332      	adds	r3, #50	; 0x32
 8004010:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <UART_SetConfig+0x350>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800401c:	441d      	add	r5, r3
 800401e:	f7fe feeb 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8004022:	4602      	mov	r2, r0
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	009a      	lsls	r2, r3, #2
 800402c:	441a      	add	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	fbb2 f6f3 	udiv	r6, r2, r3
 8004038:	f7fe fede 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 800403c:	4602      	mov	r2, r0
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009a      	lsls	r2, r3, #2
 8004046:	441a      	add	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004052:	4a0b      	ldr	r2, [pc, #44]	; (8004080 <UART_SetConfig+0x350>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	2264      	movs	r2, #100	; 0x64
 800405c:	fb02 f303 	mul.w	r3, r2, r3
 8004060:	1af3      	subs	r3, r6, r3
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	3332      	adds	r3, #50	; 0x32
 8004066:	4a06      	ldr	r2, [pc, #24]	; (8004080 <UART_SetConfig+0x350>)
 8004068:	fba2 2303 	umull	r2, r3, r2, r3
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	442b      	add	r3, r5
 8004074:	60a3      	str	r3, [r4, #8]
 8004076:	e071      	b.n	800415c <UART_SetConfig+0x42c>
 8004078:	40011000 	.word	0x40011000
 800407c:	40011400 	.word	0x40011400
 8004080:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681c      	ldr	r4, [r3, #0]
 8004088:	f7fe fea2 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 800408c:	4602      	mov	r2, r0
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	009a      	lsls	r2, r3, #2
 8004096:	441a      	add	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a2:	4a30      	ldr	r2, [pc, #192]	; (8004164 <UART_SetConfig+0x434>)
 80040a4:	fba2 2303 	umull	r2, r3, r2, r3
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	011d      	lsls	r5, r3, #4
 80040ac:	f7fe fe90 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	009a      	lsls	r2, r3, #2
 80040ba:	441a      	add	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80040c6:	f7fe fe83 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 80040ca:	4602      	mov	r2, r0
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	009a      	lsls	r2, r3, #2
 80040d4:	441a      	add	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	4a20      	ldr	r2, [pc, #128]	; (8004164 <UART_SetConfig+0x434>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	2264      	movs	r2, #100	; 0x64
 80040ea:	fb02 f303 	mul.w	r3, r2, r3
 80040ee:	1af3      	subs	r3, r6, r3
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	3332      	adds	r3, #50	; 0x32
 80040f4:	4a1b      	ldr	r2, [pc, #108]	; (8004164 <UART_SetConfig+0x434>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004100:	441d      	add	r5, r3
 8004102:	f7fe fe65 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8004106:	4602      	mov	r2, r0
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	009a      	lsls	r2, r3, #2
 8004110:	441a      	add	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	fbb2 f6f3 	udiv	r6, r2, r3
 800411c:	f7fe fe58 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8004120:	4602      	mov	r2, r0
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	009a      	lsls	r2, r3, #2
 800412a:	441a      	add	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	fbb2 f3f3 	udiv	r3, r2, r3
 8004136:	4a0b      	ldr	r2, [pc, #44]	; (8004164 <UART_SetConfig+0x434>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	2264      	movs	r2, #100	; 0x64
 8004140:	fb02 f303 	mul.w	r3, r2, r3
 8004144:	1af3      	subs	r3, r6, r3
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	3332      	adds	r3, #50	; 0x32
 800414a:	4a06      	ldr	r2, [pc, #24]	; (8004164 <UART_SetConfig+0x434>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	442b      	add	r3, r5
 8004158:	60a3      	str	r3, [r4, #8]
}
 800415a:	e7ff      	b.n	800415c <UART_SetConfig+0x42c>
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004164:	51eb851f 	.word	0x51eb851f

08004168 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004168:	b084      	sub	sp, #16
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	f107 0014 	add.w	r0, r7, #20
 8004176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	2b01      	cmp	r3, #1
 800417e:	d120      	bne.n	80041c2 <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 80041a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d105      	bne.n	80041ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f936 	bl	800442c <USB_CoreReset>
 80041c0:	e00c      	b.n	80041dc <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f92c 	bl	800442c <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041da:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d10b      	bne.n	80041fa <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f043 0206 	orr.w	r2, r3, #6
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004206:	b004      	add	sp, #16
 8004208:	4770      	bx	lr

0800420a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f043 0201 	orr.w	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f023 0201 	bic.w	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	460b      	mov	r3, r1
 8004258:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d106      	bne.n	800427a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	60da      	str	r2, [r3, #12]
 8004278:	e008      	b.n	800428c <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d105      	bne.n	800428c <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 800428c:	2032      	movs	r0, #50	; 0x32
 800428e:	f7fc fb03 	bl	8000898 <HAL_Delay>
  
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	019b      	lsls	r3, r3, #6
 80042ae:	f043 0220 	orr.w	r2, r3, #32
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3301      	adds	r3, #1
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4a09      	ldr	r2, [pc, #36]	; (80042e4 <USB_FlushTxFifo+0x48>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d901      	bls.n	80042c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e006      	b.n	80042d6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d0f0      	beq.n	80042b6 <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	00030d40 	.word	0x00030d40

080042e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2210      	movs	r2, #16
 80042f8:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3301      	adds	r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4a09      	ldr	r2, [pc, #36]	; (8004328 <USB_FlushRxFifo+0x40>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d901      	bls.n	800430c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e006      	b.n	800431a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b10      	cmp	r3, #16
 8004316:	d0f0      	beq.n	80042fa <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	00030d40 	.word	0x00030d40

0800432c <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	4611      	mov	r1, r2
 8004338:	461a      	mov	r2, r3
 800433a:	460b      	mov	r3, r1
 800433c:	71fb      	strb	r3, [r7, #7]
 800433e:	4613      	mov	r3, r2
 8004340:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 800434a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d11a      	bne.n	8004388 <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 8004352:	88bb      	ldrh	r3, [r7, #4]
 8004354:	3303      	adds	r3, #3
 8004356:	089b      	lsrs	r3, r3, #2
 8004358:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	e00f      	b.n	8004380 <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8004360:	79fb      	ldrb	r3, [r7, #7]
 8004362:	031a      	lsls	r2, r3, #12
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800436c:	461a      	mov	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3301      	adds	r3, #1
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	3304      	adds	r3, #4
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	429a      	cmp	r2, r3
 8004386:	d3eb      	bcc.n	8004360 <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004396:	b480      	push	{r7}
 8004398:	b087      	sub	sp, #28
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	4613      	mov	r3, r2
 80043a2:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	3303      	adds	r3, #3
 80043ac:	089b      	lsrs	r3, r3, #2
 80043ae:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	e00b      	b.n	80043ce <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	3301      	adds	r3, #1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	3304      	adds	r3, #4
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d3ef      	bcc.n	80043b6 <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 80043d6:	68bb      	ldr	r3, [r7, #8]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4013      	ands	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
  return v;  
 8004400:	68fb      	ldr	r3, [r7, #12]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f003 0301 	and.w	r3, r3, #1
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3301      	adds	r3, #1
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4a13      	ldr	r2, [pc, #76]	; (8004490 <USB_CoreReset+0x64>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e01b      	b.n	8004482 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	daf2      	bge.n	8004438 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f043 0201 	orr.w	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3301      	adds	r3, #1
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4a09      	ldr	r2, [pc, #36]	; (8004490 <USB_CoreReset+0x64>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d901      	bls.n	8004474 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e006      	b.n	8004482 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b01      	cmp	r3, #1
 800447e:	d0f0      	beq.n	8004462 <USB_CoreReset+0x36>
  
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	00030d40 	.word	0x00030d40

08004494 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004494:	b084      	sub	sp, #16
 8004496:	b580      	push	{r7, lr}
 8004498:	b084      	sub	sp, #16
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	f107 001c 	add.w	r0, r7, #28
 80044a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044ac:	461a      	mov	r2, r3
 80044ae:	2300      	movs	r3, #0
 80044b0:	6013      	str	r3, [r2, #0]
  
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d10f      	bne.n	80044e4 <USB_HostInit+0x50>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044ca:	d00b      	beq.n	80044e4 <USB_HostInit+0x50>
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044d2:	461a      	mov	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e00a      	b.n	80044fa <USB_HostInit+0x66>
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044ea:	461a      	mov	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f023 0304 	bic.w	r3, r3, #4
 80044f8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80044fa:	2110      	movs	r1, #16
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff fecd 	bl	800429c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff fef0 	bl	80042e8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	e015      	b.n	800453a <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4413      	add	r3, r2
 8004516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451a:	461a      	mov	r2, r3
 800451c:	f04f 33ff 	mov.w	r3, #4294967295
 8004520:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4413      	add	r3, r2
 800452a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452e:	461a      	mov	r2, r3
 8004530:	2300      	movs	r3, #0
 8004532:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3301      	adds	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	6a3a      	ldr	r2, [r7, #32]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	429a      	cmp	r2, r3
 8004540:	d8e5      	bhi.n	800450e <USB_HostInit+0x7a>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 8004542:	2101      	movs	r1, #1
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f8a4 	bl	8004692 <USB_DriveVbus>
  
  HAL_Delay(200U);
 800454a:	20c8      	movs	r0, #200	; 0xc8
 800454c:	f7fc f9a4 	bl	8000898 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f04f 32ff 	mov.w	r2, #4294967295
 800455c:	615a      	str	r2, [r3, #20]
  
  if(USBx == USB_OTG_FS)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004564:	d10a      	bne.n	800457c <USB_HostInit+0xe8>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U; 
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2280      	movs	r2, #128	; 0x80
 800456a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <USB_HostInit+0x12c>)
 8004570:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <USB_HostInit+0x130>)
 8004576:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800457a:	e00a      	b.n	8004592 <USB_HostInit+0xfe>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U; 
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004582:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a10      	ldr	r2, [pc, #64]	; (80045c8 <USB_HostInit+0x134>)
 8004588:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a0f      	ldr	r2, [pc, #60]	; (80045cc <USB_HostInit+0x138>)
 800458e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	2b00      	cmp	r3, #0
 8004596:	d105      	bne.n	80045a4 <USB_HostInit+0x110>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	f043 0210 	orr.w	r2, r3, #16
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <USB_HostInit+0x13c>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045bc:	b004      	add	sp, #16
 80045be:	4770      	bx	lr
 80045c0:	00600080 	.word	0x00600080
 80045c4:	004000e0 	.word	0x004000e0
 80045c8:	01000200 	.word	0x01000200
 80045cc:	00e00300 	.word	0x00e00300
 80045d0:	a3200008 	.word	0xa3200008

080045d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock 
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	70fb      	strb	r3, [r7, #3]
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045e6:	461a      	mov	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f023 0303 	bic.w	r3, r3, #3
 80045f4:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045fc:	4619      	mov	r1, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	78fb      	ldrb	r3, [r7, #3]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	4313      	orrs	r3, r2
 800460e:	600b      	str	r3, [r1, #0]
  
  if (freq ==  HCFG_48_MHZ)
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d107      	bne.n	8004626 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800461c:	461a      	mov	r2, r3
 800461e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004622:	6053      	str	r3, [r2, #4]
 8004624:	e009      	b.n	800463a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq ==  HCFG_6_MHZ)
 8004626:	78fb      	ldrb	r3, [r7, #3]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d106      	bne.n	800463a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004632:	461a      	mov	r2, r3
 8004634:	f241 7370 	movw	r3, #6000	; 0x1770
 8004638:	6053      	str	r3, [r2, #4]
  } 
  return HAL_OK;  
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60fb      	str	r3, [r7, #12]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004660:	60fb      	str	r3, [r7, #12]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004668:	461a      	mov	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004670:	6013      	str	r3, [r2, #0]
  HAL_Delay (10U);                                /* See Note #1 */
 8004672:	200a      	movs	r0, #10
 8004674:	f7fc f910 	bl	8000898 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800467e:	461a      	mov	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004686:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	460b      	mov	r3, r1
 800469c:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80046ae:	60fb      	str	r3, [r7, #12]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <USB_DriveVbus+0x3e>
 80046ba:	78fb      	ldrb	r3, [r7, #3]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d107      	bne.n	80046d0 <USB_DriveVbus+0x3e>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046c6:	461a      	mov	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046ce:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046da:	d10a      	bne.n	80046f2 <USB_DriveVbus+0x60>
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d107      	bne.n	80046f2 <USB_DriveVbus+0x60>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046e8:	461a      	mov	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046f0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK; 
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60fb      	str	r3, [r7, #12]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	0c5b      	lsrs	r3, r3, #17
 8004716:	f003 0303 	and.w	r3, r3, #3
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	b29b      	uxth	r3, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	4608      	mov	r0, r1
 800474e:	4611      	mov	r1, r2
 8004750:	461a      	mov	r2, r3
 8004752:	4603      	mov	r3, r0
 8004754:	70fb      	strb	r3, [r7, #3]
 8004756:	460b      	mov	r3, r1
 8004758:	70bb      	strb	r3, [r7, #2]
 800475a:	4613      	mov	r3, r2
 800475c:	707b      	strb	r3, [r7, #1]
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 800475e:	78fb      	ldrb	r3, [r7, #3]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4413      	add	r3, r2
 8004766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476a:	461a      	mov	r2, r3
 800476c:	f04f 33ff 	mov.w	r3, #4294967295
 8004770:	6093      	str	r3, [r2, #8]
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 8004772:	7d3b      	ldrb	r3, [r7, #20]
 8004774:	2b03      	cmp	r3, #3
 8004776:	f200 8086 	bhi.w	8004886 <USB_HC_Init+0x142>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <USB_HC_Init+0x3c>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	08004791 	.word	0x08004791
 8004784:	0800483d 	.word	0x0800483d
 8004788:	08004791 	.word	0x08004791
 800478c:	080047fd 	.word	0x080047fd
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4413      	add	r3, r2
 8004798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479c:	461a      	mov	r2, r3
 800479e:	f240 439d 	movw	r3, #1181	; 0x49d
 80047a2:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 80047a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	da11      	bge.n	80047d0 <USB_HC_Init+0x8c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b8:	4619      	mov	r1, r3
 80047ba:	78fb      	ldrb	r3, [r7, #3]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047cc:	60cb      	str	r3, [r1, #12]
      if(USBx != USB_OTG_FS)
      {
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
      }
    }
    break;
 80047ce:	e055      	b.n	800487c <USB_HC_Init+0x138>
      if(USBx != USB_OTG_FS)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047d6:	d051      	beq.n	800487c <USB_HC_Init+0x138>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e4:	4619      	mov	r1, r3
 80047e6:	78fb      	ldrb	r3, [r7, #3]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047f8:	60cb      	str	r3, [r1, #12]
    break;
 80047fa:	e03f      	b.n	800487c <USB_HC_Init+0x138>
    
  case EP_TYPE_INTR:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4413      	add	r3, r2
 8004804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004808:	461a      	mov	r2, r3
 800480a:	f240 639d 	movw	r3, #1693	; 0x69d
 800480e:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_NAKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
 8004810:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004814:	2b00      	cmp	r3, #0
 8004816:	da33      	bge.n	8004880 <USB_HC_Init+0x13c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4413      	add	r3, r2
 8004820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004824:	4619      	mov	r1, r3
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4413      	add	r3, r2
 800482e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004838:	60cb      	str	r3, [r1, #12]
    }
    
    break;
 800483a:	e021      	b.n	8004880 <USB_HC_Init+0x13c>
  case EP_TYPE_ISOC:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4413      	add	r3, r2
 8004844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004848:	461a      	mov	r2, r3
 800484a:	f240 2325 	movw	r3, #549	; 0x225
 800484e:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_ACKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;   
    
    if (epnum & 0x80U) 
 8004850:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004854:	2b00      	cmp	r3, #0
 8004856:	da15      	bge.n	8004884 <USB_HC_Init+0x140>
    {
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4413      	add	r3, r2
 8004860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004864:	4619      	mov	r1, r3
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4413      	add	r3, r2
 800486e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004878:	60cb      	str	r3, [r1, #12]
    }
    break;
 800487a:	e003      	b.n	8004884 <USB_HC_Init+0x140>
    break;
 800487c:	bf00      	nop
 800487e:	e002      	b.n	8004886 <USB_HC_Init+0x142>
    break;
 8004880:	bf00      	nop
 8004882:	e000      	b.n	8004886 <USB_HC_Init+0x142>
    break;
 8004884:	bf00      	nop
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800488c:	4618      	mov	r0, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	78fa      	ldrb	r2, [r7, #3]
 8004898:	2101      	movs	r1, #1
 800489a:	fa01 f202 	lsl.w	r2, r1, r2
 800489e:	4313      	orrs	r3, r2
 80048a0:	6183      	str	r3, [r0, #24]
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	619a      	str	r2, [r3, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ba:	4619      	mov	r1, r3
 80048bc:	787b      	ldrb	r3, [r7, #1]
 80048be:	059b      	lsls	r3, r3, #22
 80048c0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80048c4:	78bb      	ldrb	r3, [r7, #2]
 80048c6:	02db      	lsls	r3, r3, #11
 80048c8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80048cc:	431a      	orrs	r2, r3
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 80048ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	da02      	bge.n	80048dc <USB_HC_Init+0x198>
 80048d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048da:	e000      	b.n	80048de <USB_HC_Init+0x19a>
 80048dc:	2300      	movs	r3, #0
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80048de:	431a      	orrs	r2, r3
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80048e0:	7c3b      	ldrb	r3, [r7, #16]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d102      	bne.n	80048ec <USB_HC_Init+0x1a8>
 80048e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048ea:	e000      	b.n	80048ee <USB_HC_Init+0x1aa>
 80048ec:	2300      	movs	r3, #0
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 80048ee:	431a      	orrs	r2, r3
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80048f0:	7d3b      	ldrb	r3, [r7, #20]
 80048f2:	049b      	lsls	r3, r3, #18
 80048f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80048f8:	431a      	orrs	r2, r3
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 80048fa:	8b3b      	ldrh	r3, [r7, #24]
 80048fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8004900:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8004902:	600b      	str	r3, [r1, #0]
    
  if (ep_type == EP_TYPE_INTR)
 8004904:	7d3b      	ldrb	r3, [r7, #20]
 8004906:	2b03      	cmp	r3, #3
 8004908:	d110      	bne.n	800492c <USB_HC_Init+0x1e8>
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4413      	add	r3, r2
 8004912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004916:	4619      	mov	r1, r3
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4413      	add	r3, r2
 8004920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800492a:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK; 
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop

0800493c <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	; 0x28
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 800494a:	2300      	movs	r3, #0
 800494c:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 800494e:	2300      	movs	r3, #0
 8004950:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 8004952:	2300      	movs	r3, #0
 8004954:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 8004956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800495a:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004966:	d02b      	beq.n	80049c0 <USB_HC_StartXfer+0x84>
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	791b      	ldrb	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d127      	bne.n	80049c0 <USB_HC_StartXfer+0x84>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10b      	bne.n	800498e <USB_HC_StartXfer+0x52>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	795b      	ldrb	r3, [r3, #5]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d107      	bne.n	800498e <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	785b      	ldrb	r3, [r3, #1]
 8004982:	4619      	mov	r1, r3
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 fa0f 	bl	8004da8 <USB_DoPing>
      return HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	e10d      	b.n	8004baa <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1)
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d115      	bne.n	80049c0 <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	785b      	ldrb	r3, [r3, #1]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4413      	add	r3, r2
 800499e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a2:	4619      	mov	r1, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80049b8:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2200      	movs	r2, #0
 80049be:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d019      	beq.n	80049fc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	8912      	ldrh	r2, [r2, #8]
 80049d0:	4413      	add	r3, r2
 80049d2:	3b01      	subs	r3, #1
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	8912      	ldrh	r2, [r2, #8]
 80049d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049dc:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 80049de:	8bfa      	ldrh	r2, [r7, #30]
 80049e0:	8b3b      	ldrh	r3, [r7, #24]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d90c      	bls.n	8004a00 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80049e6:	8b3b      	ldrh	r3, [r7, #24]
 80049e8:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 80049ea:	8bfb      	ldrh	r3, [r7, #30]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	8912      	ldrh	r2, [r2, #8]
 80049f0:	fb02 f303 	mul.w	r3, r2, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	611a      	str	r2, [r3, #16]
 80049fa:	e001      	b.n	8004a00 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1;
 80049fc:	2301      	movs	r3, #1
 80049fe:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	78db      	ldrb	r3, [r3, #3]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 8004a08:	8bfb      	ldrh	r3, [r7, #30]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	8912      	ldrh	r2, [r2, #8]
 8004a0e:	fb02 f303 	mul.w	r3, r2, r3
 8004a12:	461a      	mov	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	785b      	ldrb	r3, [r3, #1]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a26:	4619      	mov	r1, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004a30:	8bfb      	ldrh	r3, [r7, #30]
 8004a32:	04db      	lsls	r3, r3, #19
 8004a34:	4618      	mov	r0, r3
 8004a36:	4b5f      	ldr	r3, [pc, #380]	; (8004bb4 <USB_HC_StartXfer+0x278>)
 8004a38:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004a3a:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	7a9b      	ldrb	r3, [r3, #10]
 8004a40:	075b      	lsls	r3, r3, #29
 8004a42:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004a46:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004a48:	610b      	str	r3, [r1, #16]
  
  if (dma)
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	785b      	ldrb	r3, [r3, #1]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5e:	461a      	mov	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bf0c      	ite	eq
 8004a76:	2301      	moveq	r3, #1
 8004a78:	2300      	movne	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	785b      	ldrb	r3, [r3, #1]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	785b      	ldrb	r3, [r3, #1]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004aa2:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	785b      	ldrb	r3, [r3, #1]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	785b      	ldrb	r3, [r3, #1]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	7f7a      	ldrb	r2, [r7, #29]
 8004ac6:	0752      	lsls	r2, r2, #29
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	785b      	ldrb	r3, [r3, #1]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ae4:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004aec:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	785b      	ldrb	r3, [r3, #1]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afc:	461a      	mov	r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d14f      	bne.n	8004ba8 <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	78db      	ldrb	r3, [r3, #3]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d14b      	bne.n	8004ba8 <USB_HC_StartXfer+0x26c>
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d047      	beq.n	8004ba8 <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	79db      	ldrb	r3, [r3, #7]
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d831      	bhi.n	8004b84 <USB_HC_StartXfer+0x248>
 8004b20:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <USB_HC_StartXfer+0x1ec>)
 8004b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b26:	bf00      	nop
 8004b28:	08004b39 	.word	0x08004b39
 8004b2c:	08004b5d 	.word	0x08004b5d
 8004b30:	08004b39 	.word	0x08004b39
 8004b34:	08004b5d 	.word	0x08004b5d
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	3303      	adds	r3, #3
 8004b3e:	089b      	lsrs	r3, r3, #2
 8004b40:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 8004b42:	8b7a      	ldrh	r2, [r7, #26]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d91c      	bls.n	8004b88 <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f043 0220 	orr.w	r2, r3, #32
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	619a      	str	r2, [r3, #24]
        }
        break;
 8004b5a:	e015      	b.n	8004b88 <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	3303      	adds	r3, #3
 8004b62:	089b      	lsrs	r3, r3, #2
 8004b64:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 8004b66:	8b7a      	ldrh	r2, [r7, #26]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d90a      	bls.n	8004b8c <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	619a      	str	r2, [r3, #24]
        }
        break;
 8004b82:	e003      	b.n	8004b8c <USB_HC_StartXfer+0x250>
        
      default:
        break;
 8004b84:	bf00      	nop
 8004b86:	e002      	b.n	8004b8e <USB_HC_StartXfer+0x252>
        break;
 8004b88:	bf00      	nop
 8004b8a:	e000      	b.n	8004b8e <USB_HC_StartXfer+0x252>
        break;
 8004b8c:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	68d9      	ldr	r1, [r3, #12]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	785a      	ldrb	r2, [r3, #1]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	b298      	uxth	r0, r3
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff fbc2 	bl	800432c <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3720      	adds	r7, #32
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	1ff80000 	.word	0x1ff80000

08004bb8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	b29b      	uxth	r3, r3
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	460b      	mov	r3, r1
 8004be0:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	0c9b      	lsrs	r3, r3, #18
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00b      	beq.n	8004c16 <USB_HC_Halt+0x40>
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c0a:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8004c0c:	0c9b      	lsrs	r3, r3, #18
 8004c0e:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d160      	bne.n	8004cd8 <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c22:	4619      	mov	r1, r3
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c36:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d135      	bne.n	8004cb0 <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c50:	4619      	mov	r1, r3
 8004c52:	78fb      	ldrb	r3, [r7, #3]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c64:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8004c66:	78fb      	ldrb	r3, [r7, #3]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c72:	4619      	mov	r1, r3
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c86:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c94:	d81e      	bhi.n	8004cd4 <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8004c96:	78fb      	ldrb	r3, [r7, #3]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cac:	d0ec      	beq.n	8004c88 <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004cae:	e074      	b.n	8004d9a <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	78fb      	ldrb	r3, [r7, #3]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cd0:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004cd2:	e062      	b.n	8004d9a <USB_HC_Halt+0x1c4>
          break;
 8004cd4:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004cd6:	e060      	b.n	8004d9a <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	78fb      	ldrb	r3, [r7, #3]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cf8:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d135      	bne.n	8004d74 <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d14:	4619      	mov	r1, r3
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d28:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d36:	4619      	mov	r1, r3
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d4a:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d58:	d81e      	bhi.n	8004d98 <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d70:	d0ec      	beq.n	8004d4c <USB_HC_Halt+0x176>
 8004d72:	e012      	b.n	8004d9a <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d80:	4619      	mov	r1, r3
 8004d82:	78fb      	ldrb	r3, [r7, #3]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d94:	600b      	str	r3, [r1, #0]
 8004d96:	e000      	b.n	8004d9a <USB_HC_Halt+0x1c4>
          break;
 8004d98:	bf00      	nop
    }
  }
  
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 8004db4:	2301      	movs	r3, #1
 8004db6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc8:	461a      	mov	r2, r3
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	04db      	lsls	r3, r3, #19
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <USB_DoPing+0x74>)
 8004dd2:	400b      	ands	r3, r1
 8004dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dd8:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004dda:	78fb      	ldrb	r3, [r7, #3]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004df0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004df8:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e06:	461a      	mov	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	1ff80000 	.word	0x1ff80000

08004e20 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff f9fd 	bl	800422c <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 8004e32:	2110      	movs	r1, #16
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff fa31 	bl	800429c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff fa54 	bl	80042e8 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 8004e40:	2300      	movs	r3, #0
 8004e42:	75fb      	strb	r3, [r7, #23]
 8004e44:	e01f      	b.n	8004e86 <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e5c:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e64:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e6c:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 8004e6e:	7dfb      	ldrb	r3, [r7, #23]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 8004e80:	7dfb      	ldrb	r3, [r7, #23]
 8004e82:	3301      	adds	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
 8004e86:	7dfb      	ldrb	r3, [r7, #23]
 8004e88:	2b0f      	cmp	r3, #15
 8004e8a:	d9dc      	bls.n	8004e46 <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	75fb      	strb	r3, [r7, #23]
 8004e90:	e034      	b.n	8004efc <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ea8:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004eb0:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004eb8:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 8004eba:	7dfb      	ldrb	r3, [r7, #23]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ed8:	d80c      	bhi.n	8004ef4 <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004eda:	7dfb      	ldrb	r3, [r7, #23]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ef0:	d0ec      	beq.n	8004ecc <USB_StopHost+0xac>
 8004ef2:	e000      	b.n	8004ef6 <USB_StopHost+0xd6>
        break;
 8004ef4:	bf00      	nop
  for (i = 0; i <= 15; i++)
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	75fb      	strb	r3, [r7, #23]
 8004efc:	7dfb      	ldrb	r3, [r7, #23]
 8004efe:	2b0f      	cmp	r3, #15
 8004f00:	d9c7      	bls.n	8004e92 <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f08:	461a      	mov	r2, r3
 8004f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f04f 32ff 	mov.w	r2, #4294967295
 8004f16:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7ff f976 	bl	800420a <USB_EnableGlobalInt>
  return HAL_OK;  
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <DetectButtonDS3>:
  USBH_HID_SOFProcess,
  NULL,
};

uint64_t DetectButtonDS3(uint64_t buttons_and_triggers)
{
 8004f28:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	e9c7 0102 	strd	r0, r1, [r7, #8]
	// bit smearing so all bits to the right of the first 1 are also 1
	buttons_and_triggers |= buttons_and_triggers >> 32;
 8004f34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f38:	0012      	movs	r2, r2
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	4614      	mov	r4, r2
 8004f40:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f44:	ea43 0301 	orr.w	r3, r3, r1
 8004f48:	ea44 0402 	orr.w	r4, r4, r2
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4622      	mov	r2, r4
 8004f50:	e9c7 1202 	strd	r1, r2, [r7, #8]
	buttons_and_triggers |= buttons_and_triggers >> 16;
 8004f54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004f5c:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 8004f60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004f64:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f68:	ea41 010a 	orr.w	r1, r1, sl
 8004f6c:	ea42 020b 	orr.w	r2, r2, fp
 8004f70:	e9c7 1202 	strd	r1, r2, [r7, #8]
	buttons_and_triggers |= buttons_and_triggers >> 8;
 8004f74:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f78:	ea4f 2811 	mov.w	r8, r1, lsr #8
 8004f7c:	ea48 6802 	orr.w	r8, r8, r2, lsl #24
 8004f80:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8004f84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f88:	ea41 0108 	orr.w	r1, r1, r8
 8004f8c:	ea42 0209 	orr.w	r2, r2, r9
 8004f90:	e9c7 1202 	strd	r1, r2, [r7, #8]
	buttons_and_triggers |= buttons_and_triggers >> 4;
 8004f94:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f98:	090d      	lsrs	r5, r1, #4
 8004f9a:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
 8004f9e:	0916      	lsrs	r6, r2, #4
 8004fa0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004fa4:	ea41 0105 	orr.w	r1, r1, r5
 8004fa8:	ea42 0206 	orr.w	r2, r2, r6
 8004fac:	e9c7 1202 	strd	r1, r2, [r7, #8]
	buttons_and_triggers |= buttons_and_triggers >> 2;
 8004fb0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004fb4:	088b      	lsrs	r3, r1, #2
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	0893      	lsrs	r3, r2, #2
 8004fc2:	607b      	str	r3, [r7, #4]
 8004fc4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004fc8:	e897 0018 	ldmia.w	r7, {r3, r4}
 8004fcc:	ea43 0301 	orr.w	r3, r3, r1
 8004fd0:	ea44 0402 	orr.w	r4, r4, r2
 8004fd4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	buttons_and_triggers |= buttons_and_triggers >> 1;
 8004fd8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004fdc:	0864      	lsrs	r4, r4, #1
 8004fde:	ea4f 0333 	mov.w	r3, r3, rrx
 8004fe2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004fe6:	ea43 0301 	orr.w	r3, r3, r1
 8004fea:	ea44 0402 	orr.w	r4, r4, r2
 8004fee:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// only leave the highest 1 set
	buttons_and_triggers ^= buttons_and_triggers >> 1;
 8004ff2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004ff6:	0864      	lsrs	r4, r4, #1
 8004ff8:	ea4f 0333 	mov.w	r3, r3, rrx
 8004ffc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005000:	ea83 0301 	eor.w	r3, r3, r1
 8005004:	ea84 0402 	eor.w	r4, r4, r2
 8005008:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// now it is the same as the bitmask we want to return
	return buttons_and_triggers;
 800500c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8005010:	4618      	mov	r0, r3
 8005012:	4621      	mov	r1, r4
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800501c:	4770      	bx	lr
	...

08005020 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit (USBH_HandleTypeDef *phost)
{	
 8005020:	b590      	push	{r4, r7, lr}
 8005022:	b08b      	sub	sp, #44	; 0x2c
 8005024:	af04      	add	r7, sp, #16
 8005026:	6078      	str	r0, [r7, #4]
  uint8_t max_ep;
  uint8_t num = 0;
 8005028:	2300      	movs	r3, #0
 800502a:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;
  
  USBH_StatusTypeDef status = USBH_FAIL ;
 800502c:	2302      	movs	r3, #2
 800502e:	757b      	strb	r3, [r7, #21]
  HID_HandleTypeDef *HID_Handle;
  
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFF);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8005036:	7919      	ldrb	r1, [r3, #4]
 8005038:	23ff      	movs	r3, #255	; 0xff
 800503a:	2201      	movs	r2, #1
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f002 fc11 	bl	8007864 <USBH_FindInterface>
 8005042:	4603      	mov	r3, r0
 8005044:	75bb      	strb	r3, [r7, #22]

  if (interface == 0xFF) // did not find KB or mouse
 8005046:	7dbb      	ldrb	r3, [r7, #22]
 8005048:	2bff      	cmp	r3, #255	; 0xff
 800504a:	d10a      	bne.n	8005062 <USBH_HID_InterfaceInit+0x42>
	  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0, 0xFF); // try looking for ds3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8005052:	7919      	ldrb	r1, [r3, #4]
 8005054:	23ff      	movs	r3, #255	; 0xff
 8005056:	2200      	movs	r2, #0
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f002 fc03 	bl	8007864 <USBH_FindInterface>
 800505e:	4603      	mov	r3, r0
 8005060:	75bb      	strb	r3, [r7, #22]
  
  if(interface == 0xFF) /* No Valid Interface */
 8005062:	7dbb      	ldrb	r3, [r7, #22]
 8005064:	2bff      	cmp	r3, #255	; 0xff
 8005066:	d102      	bne.n	800506e <USBH_HID_InterfaceInit+0x4e>
  {
    status = USBH_FAIL;  
 8005068:	2302      	movs	r3, #2
 800506a:	757b      	strb	r3, [r7, #21]
 800506c:	e129      	b.n	80052c2 <USBH_HID_InterfaceInit+0x2a2>
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);         
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800506e:	7dbb      	ldrb	r3, [r7, #22]
 8005070:	4619      	mov	r1, r3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f002 fbda 	bl	800782c <USBH_SelectInterface>
    phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc (sizeof(HID_HandleTypeDef));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 43ac 	ldr.w	r4, [r3, #940]	; 0x3ac
 800507e:	2034      	movs	r0, #52	; 0x34
 8005080:	f004 fe56 	bl	8009d30 <malloc>
 8005084:	4603      	mov	r3, r0
 8005086:	61e3      	str	r3, [r4, #28]
    HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	613b      	str	r3, [r7, #16]
    HID_Handle->state = HID_ERROR;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2207      	movs	r2, #7
 8005096:	709a      	strb	r2, [r3, #2]
    
    /*Decode Bootclass Protocol: Mouse or Keyboard*/
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800509e:	4619      	mov	r1, r3
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	231a      	movs	r3, #26
 80050a4:	fb03 f301 	mul.w	r3, r3, r1
 80050a8:	4413      	add	r3, r2
 80050aa:	f203 3343 	addw	r3, r3, #835	; 0x343
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d106      	bne.n	80050c2 <USBH_HID_InterfaceInit+0xa2>
    {
      USBH_UsrLog ("KeyBoard device found!"); 
      HID_Handle->Init =  USBH_HID_KeybdInit;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	4a85      	ldr	r2, [pc, #532]	; (80052cc <USBH_HID_InterfaceInit+0x2ac>)
 80050b8:	631a      	str	r2, [r3, #48]	; 0x30
      type = CONTROLLER_KB;
 80050ba:	4b85      	ldr	r3, [pc, #532]	; (80052d0 <USBH_HID_InterfaceInit+0x2b0>)
 80050bc:	2203      	movs	r2, #3
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	e028      	b.n	8005114 <USBH_HID_InterfaceInit+0xf4>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol == HID_MOUSE_BOOT_CODE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80050c8:	4619      	mov	r1, r3
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	231a      	movs	r3, #26
 80050ce:	fb03 f301 	mul.w	r3, r3, r1
 80050d2:	4413      	add	r3, r2
 80050d4:	f203 3343 	addw	r3, r3, #835	; 0x343
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d103      	bne.n	80050e6 <USBH_HID_InterfaceInit+0xc6>
    {
      USBH_UsrLog ("Mouse device found!");         
      HID_Handle->Init =  USBH_HID_MouseInit;     
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	4a7c      	ldr	r2, [pc, #496]	; (80052d4 <USBH_HID_InterfaceInit+0x2b4>)
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30
 80050e4:	e016      	b.n	8005114 <USBH_HID_InterfaceInit+0xf4>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol == HID_DS3_BOOT_CODE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80050ec:	4619      	mov	r1, r3
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	231a      	movs	r3, #26
 80050f2:	fb03 f301 	mul.w	r3, r3, r1
 80050f6:	4413      	add	r3, r2
 80050f8:	f203 3343 	addw	r3, r3, #835	; 0x343
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <USBH_HID_InterfaceInit+0xf0>
	{
	  USBH_UsrLog ("DS3 device found!");
	  HID_Handle->Init =  USBH_HID_DS3Init;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	4a74      	ldr	r2, [pc, #464]	; (80052d8 <USBH_HID_InterfaceInit+0x2b8>)
 8005106:	631a      	str	r2, [r3, #48]	; 0x30
	  type = CONTROLLER_DS3;
 8005108:	4b71      	ldr	r3, [pc, #452]	; (80052d0 <USBH_HID_InterfaceInit+0x2b0>)
 800510a:	2202      	movs	r2, #2
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	e001      	b.n	8005114 <USBH_HID_InterfaceInit+0xf4>
	}
    else
    {
      USBH_UsrLog ("Protocol not supported.");  
      return USBH_FAIL;
 8005110:	2302      	movs	r3, #2
 8005112:	e0d7      	b.n	80052c4 <USBH_HID_InterfaceInit+0x2a4>
    }
    
    HID_Handle->state     = HID_INIT;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	2200      	movs	r2, #0
 8005118:	709a      	strb	r2, [r3, #2]
    HID_Handle->ctl_state = HID_REQ_INIT; 
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2200      	movs	r2, #0
 800511e:	715a      	strb	r2, [r3, #5]
    HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005126:	4619      	mov	r1, r3
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	231a      	movs	r3, #26
 800512c:	fb03 f301 	mul.w	r3, r3, r1
 8005130:	4413      	add	r3, r2
 8005132:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8005136:	781a      	ldrb	r2, [r3, #0]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	769a      	strb	r2, [r3, #26]
    HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005142:	4619      	mov	r1, r3
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	231a      	movs	r3, #26
 8005148:	fb03 f301 	mul.w	r3, r3, r1
 800514c:	4413      	add	r3, r2
 800514e:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005152:	881a      	ldrh	r2, [r3, #0]
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	831a      	strh	r2, [r3, #24]
    HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bInterval ;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800515e:	4619      	mov	r1, r3
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	231a      	movs	r3, #26
 8005164:	fb03 f301 	mul.w	r3, r3, r1
 8005168:	4413      	add	r3, r2
 800516a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	b29a      	uxth	r2, r3
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	839a      	strh	r2, [r3, #28]
    
    if (HID_Handle->poll  < HID_MIN_POLL) 
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	8b9b      	ldrh	r3, [r3, #28]
 800517a:	2b09      	cmp	r3, #9
 800517c:	d802      	bhi.n	8005184 <USBH_HID_InterfaceInit+0x164>
    {
      HID_Handle->poll = HID_MIN_POLL;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	220a      	movs	r2, #10
 8005182:	839a      	strh	r2, [r3, #28]
    
    /* Check for available number of endpoints */
    /* Find the number of EPs in the Interface Descriptor */      
    /* Choose the lower number in order not to overrun the buffer allocated */
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
              phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800518a:	4619      	mov	r1, r3
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	231a      	movs	r3, #26
 8005190:	fb03 f301 	mul.w	r3, r3, r1
 8005194:	4413      	add	r3, r2
 8005196:	f503 7350 	add.w	r3, r3, #832	; 0x340
 800519a:	781b      	ldrb	r3, [r3, #0]
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ? 
 800519c:	2b02      	cmp	r3, #2
 800519e:	bf28      	it	cs
 80051a0:	2302      	movcs	r3, #2
 80051a2:	73fb      	strb	r3, [r7, #15]
                  USBH_MAX_NUM_ENDPOINTS); 
    
    
    /* Decode endpoint IN and OUT address from interface descriptor */
    for ( ;num < max_ep; num++)
 80051a4:	e086      	b.n	80052b4 <USBH_HID_InterfaceInit+0x294>
    {
      if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress & 0x80)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80051ac:	4618      	mov	r0, r3
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	3301      	adds	r3, #1
 80051b4:	00d9      	lsls	r1, r3, #3
 80051b6:	231a      	movs	r3, #26
 80051b8:	fb03 f300 	mul.w	r3, r3, r0
 80051bc:	440b      	add	r3, r1
 80051be:	4413      	add	r3, r2
 80051c0:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	b25b      	sxtb	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	da38      	bge.n	800523e <USBH_HID_InterfaceInit+0x21e>
      {
        HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80051d2:	4618      	mov	r0, r3
 80051d4:	7dfb      	ldrb	r3, [r7, #23]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	3301      	adds	r3, #1
 80051da:	00d9      	lsls	r1, r3, #3
 80051dc:	231a      	movs	r3, #26
 80051de:	fb03 f300 	mul.w	r3, r3, r0
 80051e2:	440b      	add	r3, r1
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80051ea:	781a      	ldrb	r2, [r3, #0]
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	711a      	strb	r2, [r3, #4]
        HID_Handle->InPipe  =\
          USBH_AllocPipe(phost, HID_Handle->InEp);
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	791b      	ldrb	r3, [r3, #4]
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f003 fbcc 	bl	8008994 <USBH_AllocPipe>
 80051fc:	4603      	mov	r3, r0
 80051fe:	461a      	mov	r2, r3
        HID_Handle->InPipe  =\
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	705a      	strb	r2, [r3, #1]
        
        /* Open pipe for IN endpoint */
        USBH_OpenPipe  (phost,
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	7859      	ldrb	r1, [r3, #1]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	7918      	ldrb	r0, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	8b12      	ldrh	r2, [r2, #24]
 800521c:	9202      	str	r2, [sp, #8]
 800521e:	2203      	movs	r2, #3
 8005220:	9201      	str	r2, [sp, #4]
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	4623      	mov	r3, r4
 8005226:	4602      	mov	r2, r0
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f003 fb84 	bl	8008936 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        HID_Handle->length); 
        
        USBH_LL_SetToggle (phost, HID_Handle->InPipe, 0);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	2200      	movs	r2, #0
 8005234:	4619      	mov	r1, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f004 fced 	bl	8009c16 <USBH_LL_SetToggle>
 800523c:	e037      	b.n	80052ae <USBH_HID_InterfaceInit+0x28e>
        
      }
      else
      {
        HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005244:	4618      	mov	r0, r3
 8005246:	7dfb      	ldrb	r3, [r7, #23]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	3301      	adds	r3, #1
 800524c:	00d9      	lsls	r1, r3, #3
 800524e:	231a      	movs	r3, #26
 8005250:	fb03 f300 	mul.w	r3, r3, r0
 8005254:	440b      	add	r3, r1
 8005256:	4413      	add	r3, r2
 8005258:	f503 7350 	add.w	r3, r3, #832	; 0x340
 800525c:	781a      	ldrb	r2, [r3, #0]
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	70da      	strb	r2, [r3, #3]
        HID_Handle->OutPipe  =\
          USBH_AllocPipe(phost, HID_Handle->OutEp);
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	78db      	ldrb	r3, [r3, #3]
 8005266:	4619      	mov	r1, r3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f003 fb93 	bl	8008994 <USBH_AllocPipe>
 800526e:	4603      	mov	r3, r0
 8005270:	461a      	mov	r2, r3
        HID_Handle->OutPipe  =\
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	701a      	strb	r2, [r3, #0]
        
        /* Open pipe for OUT endpoint */
        USBH_OpenPipe  (phost,
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	7819      	ldrb	r1, [r3, #0]
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	78d8      	ldrb	r0, [r3, #3]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	8b12      	ldrh	r2, [r2, #24]
 800528e:	9202      	str	r2, [sp, #8]
 8005290:	2203      	movs	r2, #3
 8005292:	9201      	str	r2, [sp, #4]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	4623      	mov	r3, r4
 8005298:	4602      	mov	r2, r0
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f003 fb4b 	bl	8008936 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        HID_Handle->length); 
        
        USBH_LL_SetToggle (phost, HID_Handle->OutPipe, 0);        
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2200      	movs	r2, #0
 80052a6:	4619      	mov	r1, r3
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f004 fcb4 	bl	8009c16 <USBH_LL_SetToggle>
    for ( ;num < max_ep; num++)
 80052ae:	7dfb      	ldrb	r3, [r7, #23]
 80052b0:	3301      	adds	r3, #1
 80052b2:	75fb      	strb	r3, [r7, #23]
 80052b4:	7dfa      	ldrb	r2, [r7, #23]
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	f4ff af74 	bcc.w	80051a6 <USBH_HID_InterfaceInit+0x186>
      }
      
    }  
    status = USBH_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	757b      	strb	r3, [r7, #21]
  }
  return status;
 80052c2:	7d7b      	ldrb	r3, [r7, #21]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd90      	pop	{r4, r7, pc}
 80052cc:	080063d9 	.word	0x080063d9
 80052d0:	2000010a 	.word	0x2000010a
 80052d4:	080065c1 	.word	0x080065c1
 80052d8:	080061d5 	.word	0x080061d5

080052dc <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_InterfaceDeInit (USBH_HandleTypeDef *phost )
{	
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	60fb      	str	r3, [r7, #12]
  
  if(HID_Handle->InPipe != 0x00)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	785b      	ldrb	r3, [r3, #1]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00e      	beq.n	8005314 <USBH_HID_InterfaceDeInit+0x38>
  {   
    USBH_ClosePipe  (phost, HID_Handle->InPipe);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	785b      	ldrb	r3, [r3, #1]
 80052fa:	4619      	mov	r1, r3
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f003 fb39 	bl	8008974 <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->InPipe);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	785b      	ldrb	r3, [r3, #1]
 8005306:	4619      	mov	r1, r3
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f003 fb63 	bl	80089d4 <USBH_FreePipe>
    HID_Handle->InPipe = 0;     /* Reset the pipe as Free */  
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	705a      	strb	r2, [r3, #1]
  }
  
  if(HID_Handle->OutPipe != 0x00)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00e      	beq.n	800533a <USBH_HID_InterfaceDeInit+0x5e>
  {   
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	4619      	mov	r1, r3
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f003 fb26 	bl	8008974 <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->OutPipe);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	4619      	mov	r1, r3
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f003 fb50 	bl	80089d4 <USBH_FreePipe>
    HID_Handle->OutPipe = 0;     /* Reset the pipe as Free */  
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	701a      	strb	r2, [r3, #0]
  }
  
  if(phost->pActiveClass->pData)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d006      	beq.n	8005354 <USBH_HID_InterfaceDeInit+0x78>
  {
    USBH_free (phost->pActiveClass->pData);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	4618      	mov	r0, r3
 8005350:	f004 fcf6 	bl	8009d40 <free>
  }

  type = CONTROLLER_NONE;
 8005354:	4b03      	ldr	r3, [pc, #12]	; (8005364 <USBH_HID_InterfaceDeInit+0x88>)
 8005356:	2200      	movs	r2, #0
 8005358:	701a      	strb	r2, [r3, #0]

  return USBH_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	2000010a 	.word	0x2000010a

08005368 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{   
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af02      	add	r7, sp, #8
 800536e:	6078      	str	r0, [r7, #4]
  uint8_t enable[4] = {0x42, 0x0C, 0x00, 0x00};
 8005370:	4b59      	ldr	r3, [pc, #356]	; (80054d8 <USBH_HID_ClassRequest+0x170>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef status         = USBH_BUSY;
 8005376:	2301      	movs	r3, #1
 8005378:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 800537a:	2301      	movs	r3, #1
 800537c:	75bb      	strb	r3, [r7, #22]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData; 
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	613b      	str	r3, [r7, #16]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	795b      	ldrb	r3, [r3, #5]
 800538c:	2b08      	cmp	r3, #8
 800538e:	f200 8090 	bhi.w	80054b2 <USBH_HID_ClassRequest+0x14a>
 8005392:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <USBH_HID_ClassRequest+0x30>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053bd 	.word	0x080053bd
 800539c:	080054b3 	.word	0x080054b3
 80053a0:	080053e7 	.word	0x080053e7
 80053a4:	080053bd 	.word	0x080053bd
 80053a8:	08005463 	.word	0x08005463
 80053ac:	0800548d 	.word	0x0800548d
 80053b0:	080054b3 	.word	0x080054b3
 80053b4:	08005423 	.word	0x08005423
 80053b8:	08005445 	.word	0x08005445
  {
  case HID_REQ_INIT:  
  case HID_REQ_GET_HID_DESC:
    
    /* Get HID Desc */ 
    if (USBH_HID_GetHIDDescriptor (phost, USB_HID_DESC_SIZE)== USBH_OK)
 80053bc:	2109      	movs	r1, #9
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f970 	bl	80056a4 <USBH_HID_GetHIDDescriptor>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d175      	bne.n	80054b6 <USBH_HID_ClassRequest+0x14e>
    {
      
      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f000 fa21 	bl	8005820 <USBH_HID_ParseHIDDesc>
      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	2202      	movs	r2, #2
 80053e2:	715a      	strb	r2, [r3, #5]
    }
    
    break;     
 80053e4:	e067      	b.n	80054b6 <USBH_HID_ClassRequest+0x14e>
  case HID_REQ_GET_REPORT_DESC:
    
    
    /* Get Report Desc */ 
    if (USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength) == USBH_OK)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053ea:	4619      	mov	r1, r3
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f940 	bl	8005672 <USBH_HID_GetHIDReportDescriptor>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d160      	bne.n	80054ba <USBH_HID_ClassRequest+0x152>
    {
      /* The descriptor is available in phost->device.Data */
    	if(phost->device.DevDesc.idVendor == 0x054C && phost->device.DevDesc.idProduct == 0x0268) // DS3 Sixaxis
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 80053fe:	f240 524c 	movw	r2, #1356	; 0x54c
 8005402:	4293      	cmp	r3, r2
 8005404:	d109      	bne.n	800541a <USBH_HID_ClassRequest+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
 800540c:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8005410:	d103      	bne.n	800541a <USBH_HID_ClassRequest+0xb2>
    	{
    		HID_Handle->ctl_state = HID_PS3_BOOTCODE;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	2207      	movs	r2, #7
 8005416:	715a      	strb	r2, [r3, #5]
    	}
    	else HID_Handle->ctl_state = HID_REQ_SET_IDLE;
    }
    
    break;
 8005418:	e04f      	b.n	80054ba <USBH_HID_ClassRequest+0x152>
    	else HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2204      	movs	r2, #4
 800541e:	715a      	strb	r2, [r3, #5]
    break;
 8005420:	e04b      	b.n	80054ba <USBH_HID_ClassRequest+0x152>
    
  case HID_PS3_BOOTCODE:
	  if(USBH_HID_SetReport(phost,0x03,0xF4,enable,4) == USBH_OK)  // enable ps3 communication
 8005422:	f107 020c 	add.w	r2, r7, #12
 8005426:	2304      	movs	r3, #4
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	4613      	mov	r3, r2
 800542c:	22f4      	movs	r2, #244	; 0xf4
 800542e:	2103      	movs	r1, #3
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f978 	bl	8005726 <USBH_HID_SetReport>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d140      	bne.n	80054be <USBH_HID_ClassRequest+0x156>
	  {
		  HID_Handle->ctl_state = HID_PS3_LED;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2208      	movs	r2, #8
 8005440:	715a      	strb	r2, [r3, #5]
	  }
	  break;
 8005442:	e03c      	b.n	80054be <USBH_HID_ClassRequest+0x156>
  case HID_PS3_LED:
  	  if(USBH_HID_SetReport(phost,0x02,0x01,led_buffer,48) == USBH_OK)  // turn on p1 LED
 8005444:	2330      	movs	r3, #48	; 0x30
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	4b24      	ldr	r3, [pc, #144]	; (80054dc <USBH_HID_ClassRequest+0x174>)
 800544a:	2201      	movs	r2, #1
 800544c:	2102      	movs	r1, #2
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f969 	bl	8005726 <USBH_HID_SetReport>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d133      	bne.n	80054c2 <USBH_HID_ClassRequest+0x15a>
  	  {
  		  HID_Handle->ctl_state = HID_REQ_IDLE; // move on to normal input processing
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	2201      	movs	r2, #1
 800545e:	715a      	strb	r2, [r3, #5]
  	  }
  	  break;
 8005460:	e02f      	b.n	80054c2 <USBH_HID_ClassRequest+0x15a>

  case HID_REQ_SET_IDLE:
    
    classReqStatus = USBH_HID_SetIdle (phost, 0, 0);
 8005462:	2200      	movs	r2, #0
 8005464:	2100      	movs	r1, #0
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f935 	bl	80056d6 <USBH_HID_SetIdle>
 800546c:	4603      	mov	r3, r0
 800546e:	75bb      	strb	r3, [r7, #22]
    
    /* set Idle */
    if (classReqStatus == USBH_OK)
 8005470:	7dbb      	ldrb	r3, [r7, #22]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d103      	bne.n	800547e <USBH_HID_ClassRequest+0x116>
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;  
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	2205      	movs	r2, #5
 800547a:	715a      	strb	r2, [r3, #5]
    }
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL; // Why if it's not supported would we set it to this state?!
    } 
    break; 
 800547c:	e023      	b.n	80054c6 <USBH_HID_ClassRequest+0x15e>
    else if(classReqStatus == USBH_NOT_SUPPORTED) 
 800547e:	7dbb      	ldrb	r3, [r7, #22]
 8005480:	2b03      	cmp	r3, #3
 8005482:	d120      	bne.n	80054c6 <USBH_HID_ClassRequest+0x15e>
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL; // Why if it's not supported would we set it to this state?!
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	2205      	movs	r2, #5
 8005488:	715a      	strb	r2, [r3, #5]
    break; 
 800548a:	e01c      	b.n	80054c6 <USBH_HID_ClassRequest+0x15e>
    
  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
    if (USBH_HID_SetProtocol (phost, 0) == USBH_OK)
 800548c:	2100      	movs	r1, #0
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f9a1 	bl	80057d6 <USBH_HID_SetProtocol>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d117      	bne.n	80054ca <USBH_HID_ClassRequest+0x162>
    {
      HID_Handle->ctl_state = HID_REQ_IDLE;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	2201      	movs	r2, #1
 800549e:	715a      	strb	r2, [r3, #5]
      
      /* all requests performed*/
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE); 
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80054a6:	2102      	movs	r1, #2
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	4798      	blx	r3
      status = USBH_OK; 
 80054ac:	2300      	movs	r3, #0
 80054ae:	75fb      	strb	r3, [r7, #23]
    } 
    break;
 80054b0:	e00b      	b.n	80054ca <USBH_HID_ClassRequest+0x162>
    
  case HID_REQ_IDLE:
  default:
    break;
 80054b2:	bf00      	nop
 80054b4:	e00a      	b.n	80054cc <USBH_HID_ClassRequest+0x164>
    break;     
 80054b6:	bf00      	nop
 80054b8:	e008      	b.n	80054cc <USBH_HID_ClassRequest+0x164>
    break;
 80054ba:	bf00      	nop
 80054bc:	e006      	b.n	80054cc <USBH_HID_ClassRequest+0x164>
	  break;
 80054be:	bf00      	nop
 80054c0:	e004      	b.n	80054cc <USBH_HID_ClassRequest+0x164>
  	  break;
 80054c2:	bf00      	nop
 80054c4:	e002      	b.n	80054cc <USBH_HID_ClassRequest+0x164>
    break; 
 80054c6:	bf00      	nop
 80054c8:	e000      	b.n	80054cc <USBH_HID_ClassRequest+0x164>
    break;
 80054ca:	bf00      	nop
  }
  
  return status; 
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	08009f2c 	.word	0x08009f2c
 80054dc:	20000008 	.word	0x20000008

080054e0 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80054e8:	2300      	movs	r3, #0
 80054ea:	73fb      	strb	r3, [r7, #15]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	60bb      	str	r3, [r7, #8]
  
  switch (HID_Handle->state)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	789b      	ldrb	r3, [r3, #2]
 80054fa:	2b06      	cmp	r3, #6
 80054fc:	f200 808b 	bhi.w	8005616 <USBH_HID_Process+0x136>
 8005500:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <USBH_HID_Process+0x28>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	08005525 	.word	0x08005525
 800550c:	0800552d 	.word	0x0800552d
 8005510:	08005617 	.word	0x08005617
 8005514:	08005617 	.word	0x08005617
 8005518:	0800557d 	.word	0x0800557d
 800551c:	08005567 	.word	0x08005567
 8005520:	080055ab 	.word	0x080055ab
  {
  case HID_INIT:
    HID_Handle->Init(phost); 
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
  case HID_IDLE:
    if(USBH_HID_GetReport (phost,
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	695a      	ldr	r2, [r3, #20]
                           0x01,
                            0,
                            HID_Handle->pData,
                            HID_Handle->length) == USBH_OK)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	8b1b      	ldrh	r3, [r3, #24]
    if(USBH_HID_GetReport (phost,
 8005534:	b2db      	uxtb	r3, r3
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	4613      	mov	r3, r2
 800553a:	2200      	movs	r2, #0
 800553c:	2101      	movs	r1, #1
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f91d 	bl	800577e <USBH_HID_GetReport>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d167      	bne.n	800561a <USBH_HID_Process+0x13a>
    {
      
      fifo_write(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);  
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f103 0008 	add.w	r0, r3, #8
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	6959      	ldr	r1, [r3, #20]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	8b1b      	ldrh	r3, [r3, #24]
 8005558:	461a      	mov	r2, r3
 800555a:	f000 fa45 	bl	80059e8 <fifo_write>
      HID_Handle->state = HID_SYNC;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2205      	movs	r2, #5
 8005562:	709a      	strb	r2, [r3, #2]
    }
    
    break;
 8005564:	e059      	b.n	800561a <USBH_HID_Process+0x13a>
    
  case HID_SYNC:

    /* Sync with start of Even Frame */
    if(phost->Timer & 1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d054      	beq.n	800561e <USBH_HID_Process+0x13e>
    {
      HID_Handle->state = HID_GET_DATA; 
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2204      	movs	r2, #4
 8005578:	709a      	strb	r2, [r3, #2]
    }
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif   
    break;
 800557a:	e050      	b.n	800561e <USBH_HID_Process+0x13e>
    
  case HID_GET_DATA:

    USBH_InterruptReceiveData(phost, 
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	6959      	ldr	r1, [r3, #20]
                              HID_Handle->pData,
                              HID_Handle->length,
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	8b1b      	ldrh	r3, [r3, #24]
    USBH_InterruptReceiveData(phost, 
 8005584:	b2da      	uxtb	r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	785b      	ldrb	r3, [r3, #1]
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f003 f995 	bl	80088ba <USBH_InterruptReceiveData>
                              HID_Handle->InPipe);
    
    HID_Handle->state = HID_POLL;
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2206      	movs	r2, #6
 8005594:	709a      	strb	r2, [r3, #2]
    HID_Handle->timer = phost->Timer;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	; 0x3f0
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	621a      	str	r2, [r3, #32]
    HID_Handle->DataReady = 0;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    break;
 80055a8:	e03c      	b.n	8005624 <USBH_HID_Process+0x144>
    
  case HID_POLL:
    
    if(USBH_LL_GetURBState(phost , HID_Handle->InPipe) == USBH_URB_DONE)
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	785b      	ldrb	r3, [r3, #1]
 80055ae:	4619      	mov	r1, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f004 fb0f 	bl	8009bd4 <USBH_LL_GetURBState>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d116      	bne.n	80055ea <USBH_HID_Process+0x10a>
    {
      if(HID_Handle->DataReady == 0)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d12d      	bne.n	8005622 <USBH_HID_Process+0x142>
      {
        fifo_write(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f103 0008 	add.w	r0, r3, #8
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	6959      	ldr	r1, [r3, #20]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	8b1b      	ldrh	r3, [r3, #24]
 80055d4:	461a      	mov	r2, r3
 80055d6:	f000 fa07 	bl	80059e8 <fifo_write>
        HID_Handle->DataReady = 1;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        USBH_HID_EventCallback(phost);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fa54 	bl	8005a90 <USBH_HID_EventCallback>
        HID_Handle->state = HID_GET_DATA;
      }
    } 
    

    break;
 80055e8:	e01b      	b.n	8005622 <USBH_HID_Process+0x142>
    else if(USBH_LL_GetURBState(phost , HID_Handle->InPipe) == USBH_URB_STALL) /* IN Endpoint Stalled */
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	785b      	ldrb	r3, [r3, #1]
 80055ee:	4619      	mov	r1, r3
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f004 faef 	bl	8009bd4 <USBH_LL_GetURBState>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b05      	cmp	r3, #5
 80055fa:	d112      	bne.n	8005622 <USBH_HID_Process+0x142>
      if(USBH_ClrFeature(phost,
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	7e9b      	ldrb	r3, [r3, #26]
 8005600:	4619      	mov	r1, r3
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f002 fd71 	bl	80080ea <USBH_ClrFeature>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <USBH_HID_Process+0x142>
        HID_Handle->state = HID_GET_DATA;
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2204      	movs	r2, #4
 8005612:	709a      	strb	r2, [r3, #2]
    break;
 8005614:	e005      	b.n	8005622 <USBH_HID_Process+0x142>
    
  default:
    break;
 8005616:	bf00      	nop
 8005618:	e004      	b.n	8005624 <USBH_HID_Process+0x144>
    break;
 800561a:	bf00      	nop
 800561c:	e002      	b.n	8005624 <USBH_HID_Process+0x144>
    break;
 800561e:	bf00      	nop
 8005620:	e000      	b.n	8005624 <USBH_HID_Process+0x144>
    break;
 8005622:	bf00      	nop
  }
  return status;
 8005624:	7bfb      	ldrb	r3, [r7, #15]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop

08005630 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	60fb      	str	r3, [r7, #12]
  
  if(HID_Handle->state == HID_POLL)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	789b      	ldrb	r3, [r3, #2]
 8005646:	2b06      	cmp	r3, #6
 8005648:	d10c      	bne.n	8005664 <USBH_HID_SOFProcess+0x34>
  {
    if(( phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	; 0x3f0
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	8b92      	ldrh	r2, [r2, #28]
 800565a:	4293      	cmp	r3, r2
 800565c:	d302      	bcc.n	8005664 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2204      	movs	r2, #4
 8005662:	709a      	strb	r2, [r3, #2]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
  }
  return USBH_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor (USBH_HandleTypeDef *phost,
                                                         uint16_t length)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b086      	sub	sp, #24
 8005676:	af02      	add	r7, sp, #8
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	460b      	mov	r3, r1
 800567c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  
  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,                                  
                              USB_DESC_HID_REPORT, 
                              phost->device.Data,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8005684:	887b      	ldrh	r3, [r7, #2]
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	4613      	mov	r3, r2
 800568a:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800568e:	2101      	movs	r1, #1
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f002 fcae 	bl	8007ff2 <USBH_GetDescriptor>
 8005696:	4603      	mov	r3, r0
 8005698:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/
  
  
  return status;
 800569a:	7bfb      	ldrb	r3, [r7, #15]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <USBH_HID_GetHIDDescriptor>:
  * @param  Length : HID Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor (USBH_HandleTypeDef *phost,
                                            uint16_t length)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af02      	add	r7, sp, #8
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  
  status = USBH_GetDescriptor( phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,                                  
                              USB_DESC_HID,
                              phost->device.Data,
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor( phost,
 80056b6:	887b      	ldrh	r3, [r7, #2]
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	4613      	mov	r3, r2
 80056bc:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 80056c0:	2101      	movs	r1, #1
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f002 fc95 	bl	8007ff2 <USBH_GetDescriptor>
 80056c8:	4603      	mov	r3, r0
 80056ca:	73fb      	strb	r3, [r7, #15]
                              length);
 
  return status;
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle (USBH_HandleTypeDef *phost,
                                         uint8_t duration,
                                         uint8_t reportId)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	460b      	mov	r3, r1
 80056e0:	70fb      	strb	r3, [r7, #3]
 80056e2:	4613      	mov	r3, r2
 80056e4:	70bb      	strb	r3, [r7, #2]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2221      	movs	r2, #33	; 0x21
 80056ea:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	220a      	movs	r2, #10
 80056f0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (duration << 8 ) | reportId;
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	b21a      	sxth	r2, r3
 80056f8:	78bb      	ldrb	r3, [r7, #2]
 80056fa:	b21b      	sxth	r3, r3
 80056fc:	4313      	orrs	r3, r2
 80056fe:	b21b      	sxth	r3, r3
 8005700:	b29a      	uxth	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	825a      	strh	r2, [r3, #18]
  
  phost->Control.setup.b.wIndex.w = 0;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );
 8005712:	2200      	movs	r2, #0
 8005714:	2100      	movs	r1, #0
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f002 fecb 	bl	80084b2 <USBH_CtlReq>
 800571c:	4603      	mov	r3, r0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <USBH_HID_SetReport>:
USBH_StatusTypeDef USBH_HID_SetReport (USBH_HandleTypeDef *phost,
                                    uint8_t reportType,
                                    uint8_t reportId,
                                    uint8_t* reportBuff,
                                    uint8_t reportLen)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	607b      	str	r3, [r7, #4]
 8005730:	460b      	mov	r3, r1
 8005732:	72fb      	strb	r3, [r7, #11]
 8005734:	4613      	mov	r3, r2
 8005736:	72bb      	strb	r3, [r7, #10]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2221      	movs	r2, #33	; 0x21
 800573c:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_REPORT;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2209      	movs	r2, #9
 8005742:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (reportType << 8 ) | reportId;
 8005744:	7afb      	ldrb	r3, [r7, #11]
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	b21a      	sxth	r2, r3
 800574a:	7abb      	ldrb	r3, [r7, #10]
 800574c:	b21b      	sxth	r3, r3
 800574e:	4313      	orrs	r3, r2
 8005750:	b21b      	sxth	r3, r3
 8005752:	b29a      	uxth	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	825a      	strh	r2, [r3, #18]
  
  phost->Control.setup.b.wIndex.w = 0;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800575e:	7e3b      	ldrb	r3, [r7, #24]
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, reportBuff , reportLen );
 8005766:	7e3b      	ldrb	r3, [r7, #24]
 8005768:	b29b      	uxth	r3, r3
 800576a:	461a      	mov	r2, r3
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f002 fe9f 	bl	80084b2 <USBH_CtlReq>
 8005774:	4603      	mov	r3, r0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport (USBH_HandleTypeDef *phost,
                                    uint8_t reportType,
                                    uint8_t reportId,
                                    uint8_t* reportBuff,
                                    uint8_t reportLen)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	607b      	str	r3, [r7, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	72fb      	strb	r3, [r7, #11]
 800578c:	4613      	mov	r3, r2
 800578e:	72bb      	strb	r3, [r7, #10]
  
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE |\
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	22a1      	movs	r2, #161	; 0xa1
 8005794:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (reportType << 8 ) | reportId;
 800579c:	7afb      	ldrb	r3, [r7, #11]
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	b21a      	sxth	r2, r3
 80057a2:	7abb      	ldrb	r3, [r7, #10]
 80057a4:	b21b      	sxth	r3, r3
 80057a6:	4313      	orrs	r3, r2
 80057a8:	b21b      	sxth	r3, r3
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	825a      	strh	r2, [r3, #18]
  
  phost->Control.setup.b.wIndex.w = 0;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80057b6:	7e3b      	ldrb	r3, [r7, #24]
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, reportBuff , reportLen );
 80057be:	7e3b      	ldrb	r3, [r7, #24]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f002 fe73 	bl	80084b2 <USBH_CtlReq>
 80057cc:	4603      	mov	r3, r0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                            uint8_t protocol)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	460b      	mov	r3, r1
 80057e0:	70fb      	strb	r3, [r7, #3]
  
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2221      	movs	r2, #33	; 0x21
 80057e6:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;
  
  
  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	220b      	movs	r2, #11
 80057ec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = protocol != 0 ? 0 : 1;
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	bf0c      	ite	eq
 80057f4:	2301      	moveq	r3, #1
 80057f6:	2300      	movne	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );
 800580c:	2200      	movs	r2, #0
 800580e:	2100      	movs	r1, #0
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f002 fe4e 	bl	80084b2 <USBH_CtlReq>
 8005816:	4603      	mov	r3, r0
  
}
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc (HID_DescTypeDef *desc, uint8_t *buf)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  
  desc->bLength                  = *(uint8_t  *) (buf + 0);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781a      	ldrb	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	701a      	strb	r2, [r3, #0]
  desc->bDescriptorType          = *(uint8_t  *) (buf + 1);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	785a      	ldrb	r2, [r3, #1]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	705a      	strb	r2, [r3, #1]
  desc->bcdHID                   =  LE16  (buf + 2);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	3302      	adds	r3, #2
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	b29a      	uxth	r2, r3
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	3303      	adds	r3, #3
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	b29b      	uxth	r3, r3
 800584a:	021b      	lsls	r3, r3, #8
 800584c:	b29b      	uxth	r3, r3
 800584e:	4413      	add	r3, r2
 8005850:	b29a      	uxth	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	805a      	strh	r2, [r3, #2]
  desc->bCountryCode             = *(uint8_t  *) (buf + 4);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	791a      	ldrb	r2, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	711a      	strb	r2, [r3, #4]
  desc->bNumDescriptors          = *(uint8_t  *) (buf + 5);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	795a      	ldrb	r2, [r3, #5]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	715a      	strb	r2, [r3, #5]
  desc->bReportDescriptorType    = *(uint8_t  *) (buf + 6);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	799a      	ldrb	r2, [r3, #6]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	719a      	strb	r2, [r3, #6]
  desc->wItemLength              =  LE16  (buf + 7);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	3307      	adds	r3, #7
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	b29a      	uxth	r2, r3
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	3308      	adds	r3, #8
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	b29b      	uxth	r3, r3
 800587e:	021b      	lsls	r3, r3, #8
 8005880:	b29b      	uxth	r3, r3
 8005882:	4413      	add	r3, r2
 8005884:	b29a      	uxth	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	811a      	strh	r2, [r3, #8]
} 
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 8005896:	b480      	push	{r7}
 8005898:	b085      	sub	sp, #20
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 800589e:	23ff      	movs	r3, #255	; 0xff
 80058a0:	73fb      	strb	r3, [r7, #15]
  
  if(phost->gState == HOST_CLASS)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b0a      	cmp	r3, #10
 80058aa:	d131      	bne.n	8005910 <USBH_HID_GetDeviceType+0x7a>
  {
    
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol \
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80058b2:	4619      	mov	r1, r3
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	231a      	movs	r3, #26
 80058b8:	fb03 f301 	mul.w	r3, r3, r1
 80058bc:	4413      	add	r3, r2
 80058be:	f203 3343 	addw	r3, r3, #835	; 0x343
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d102      	bne.n	80058ce <USBH_HID_GetDeviceType+0x38>
      == HID_KEYBRD_BOOT_CODE)
    {
      type = HID_KEYBOARD;  
 80058c8:	2302      	movs	r3, #2
 80058ca:	73fb      	strb	r3, [r7, #15]
 80058cc:	e020      	b.n	8005910 <USBH_HID_GetDeviceType+0x7a>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol \
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80058d4:	4619      	mov	r1, r3
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	231a      	movs	r3, #26
 80058da:	fb03 f301 	mul.w	r3, r3, r1
 80058de:	4413      	add	r3, r2
 80058e0:	f203 3343 	addw	r3, r3, #835	; 0x343
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d102      	bne.n	80058f0 <USBH_HID_GetDeviceType+0x5a>
      == HID_MOUSE_BOOT_CODE)		  
    {
      type=  HID_MOUSE;  
 80058ea:	2301      	movs	r3, #1
 80058ec:	73fb      	strb	r3, [r7, #15]
 80058ee:	e00f      	b.n	8005910 <USBH_HID_GetDeviceType+0x7a>
    }
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol \
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80058f6:	4619      	mov	r1, r3
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	231a      	movs	r3, #26
 80058fc:	fb03 f301 	mul.w	r3, r3, r1
 8005900:	4413      	add	r3, r2
 8005902:	f203 3343 	addw	r3, r3, #835	; 0x343
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <USBH_HID_GetDeviceType+0x7a>
	  == HID_DS3_BOOT_CODE)
	{
	  type=  HID_DS3;
 800590c:	2303      	movs	r3, #3
 800590e:	73fb      	strb	r3, [r7, #15]
	}
  }
  return type;
 8005910:	7bfb      	ldrb	r3, [r7, #15]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <fifo_init>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void fifo_init(FIFO_TypeDef * f, uint8_t * buf, uint16_t size)
{
 800591e:	b480      	push	{r7}
 8005920:	b085      	sub	sp, #20
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	4613      	mov	r3, r2
 800592a:	80fb      	strh	r3, [r7, #6]
     f->head = 0;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	809a      	strh	r2, [r3, #4]
     f->tail = 0;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	80da      	strh	r2, [r3, #6]
     f->lock = 0;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	729a      	strb	r2, [r3, #10]
     f->size = size;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	88fa      	ldrh	r2, [r7, #6]
 8005942:	811a      	strh	r2, [r3, #8]
     f->buf = buf;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	601a      	str	r2, [r3, #0]
}
 800594a:	bf00      	nop
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <fifo_read>:
  * @param  buf: read buffer 
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t  fifo_read(FIFO_TypeDef * f, void * buf, uint16_t  nbytes)
{
 8005956:	b480      	push	{r7}
 8005958:	b087      	sub	sp, #28
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	4613      	mov	r3, r2
 8005962:	80fb      	strh	r3, [r7, #6]
  uint16_t  i;
  uint8_t * p;
  p = (uint8_t*) buf;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	613b      	str	r3, [r7, #16]
  
  if(f->lock == 0)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	7a9b      	ldrb	r3, [r3, #10]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d131      	bne.n	80059d4 <fifo_read+0x7e>
  {
    f->lock = 1;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	729a      	strb	r2, [r3, #10]
    for(i=0; i < nbytes; i++)
 8005976:	2300      	movs	r3, #0
 8005978:	82fb      	strh	r3, [r7, #22]
 800597a:	e027      	b.n	80059cc <fifo_read+0x76>
    {
      if( f->tail != f->head )
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	88da      	ldrh	r2, [r3, #6]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	889b      	ldrh	r3, [r3, #4]
 8005984:	429a      	cmp	r2, r3
 8005986:	d019      	beq.n	80059bc <fifo_read+0x66>
      { 
        *p++ = f->buf[f->tail];  
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	613a      	str	r2, [r7, #16]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	6812      	ldr	r2, [r2, #0]
 8005992:	68f9      	ldr	r1, [r7, #12]
 8005994:	88c9      	ldrh	r1, [r1, #6]
 8005996:	440a      	add	r2, r1
 8005998:	7812      	ldrb	r2, [r2, #0]
 800599a:	701a      	strb	r2, [r3, #0]
        f->tail++;  
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	88db      	ldrh	r3, [r3, #6]
 80059a0:	3301      	adds	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	80da      	strh	r2, [r3, #6]
        if( f->tail == f->size )
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	88da      	ldrh	r2, [r3, #6]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	891b      	ldrh	r3, [r3, #8]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d108      	bne.n	80059c6 <fifo_read+0x70>
        {  
          f->tail = 0;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	80da      	strh	r2, [r3, #6]
 80059ba:	e004      	b.n	80059c6 <fifo_read+0x70>
        }
      } else 
      {
        f->lock = 0;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	729a      	strb	r2, [r3, #10]
        return i; 
 80059c2:	8afb      	ldrh	r3, [r7, #22]
 80059c4:	e00a      	b.n	80059dc <fifo_read+0x86>
    for(i=0; i < nbytes; i++)
 80059c6:	8afb      	ldrh	r3, [r7, #22]
 80059c8:	3301      	adds	r3, #1
 80059ca:	82fb      	strh	r3, [r7, #22]
 80059cc:	8afa      	ldrh	r2, [r7, #22]
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d3d3      	bcc.n	800597c <fifo_read+0x26>
      }
    }
  }
  f->lock = 0;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	729a      	strb	r2, [r3, #10]
  return nbytes;
 80059da:	88fb      	ldrh	r3, [r7, #6]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	371c      	adds	r7, #28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <fifo_write>:
  * @param  buf: read buffer 
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t  fifo_write(FIFO_TypeDef * f, const void * buf, uint16_t  nbytes)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	4613      	mov	r3, r2
 80059f4:	80fb      	strh	r3, [r7, #6]
  uint16_t  i;
  const uint8_t * p;
  p = (const uint8_t*) buf;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	613b      	str	r3, [r7, #16]
  if(f->lock == 0)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	7a9b      	ldrb	r3, [r3, #10]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d13c      	bne.n	8005a7c <fifo_write+0x94>
  {
    f->lock = 1;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2201      	movs	r2, #1
 8005a06:	729a      	strb	r2, [r3, #10]
    for(i=0; i < nbytes; i++)
 8005a08:	2300      	movs	r3, #0
 8005a0a:	82fb      	strh	r3, [r7, #22]
 8005a0c:	e032      	b.n	8005a74 <fifo_write+0x8c>
    {
      if( (f->head + 1 == f->tail) ||
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	889b      	ldrh	r3, [r3, #4]
 8005a12:	3301      	adds	r3, #1
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	88d2      	ldrh	r2, [r2, #6]
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00a      	beq.n	8005a32 <fifo_write+0x4a>
         ( (f->head + 1 == f->size) && (f->tail == 0)) )
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	889b      	ldrh	r3, [r3, #4]
 8005a20:	3301      	adds	r3, #1
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	8912      	ldrh	r2, [r2, #8]
      if( (f->head + 1 == f->tail) ||
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d108      	bne.n	8005a3c <fifo_write+0x54>
         ( (f->head + 1 == f->size) && (f->tail == 0)) )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	88db      	ldrh	r3, [r3, #6]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d104      	bne.n	8005a3c <fifo_write+0x54>
      {
        f->lock = 0;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	729a      	strb	r2, [r3, #10]
        return i;
 8005a38:	8afb      	ldrh	r3, [r7, #22]
 8005a3a:	e023      	b.n	8005a84 <fifo_write+0x9c>
      } 
      else 
      {
        f->buf[f->head] = *p++;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	8892      	ldrh	r2, [r2, #4]
 8005a44:	441a      	add	r2, r3
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1c59      	adds	r1, r3, #1
 8005a4a:	6139      	str	r1, [r7, #16]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	7013      	strb	r3, [r2, #0]
        f->head++;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	889b      	ldrh	r3, [r3, #4]
 8005a54:	3301      	adds	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	809a      	strh	r2, [r3, #4]
        if( f->head == f->size )
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	889a      	ldrh	r2, [r3, #4]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	891b      	ldrh	r3, [r3, #8]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d102      	bne.n	8005a6e <fifo_write+0x86>
        {
          f->head = 0;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	809a      	strh	r2, [r3, #4]
    for(i=0; i < nbytes; i++)
 8005a6e:	8afb      	ldrh	r3, [r7, #22]
 8005a70:	3301      	adds	r3, #1
 8005a72:	82fb      	strh	r3, [r7, #22]
 8005a74:	8afa      	ldrh	r2, [r7, #22]
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d3c8      	bcc.n	8005a0e <fifo_write+0x26>
        }
      }
    }
  }
  f->lock = 0;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	729a      	strb	r2, [r3, #10]
  return nbytes;
 8005a82:	88fb      	ldrh	r3, [r7, #6]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <USBH_HID_EventCallback>:
*  @param  phost: Selected device
* @retval None
*/

__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 8005a90:	b590      	push	{r4, r7, lr}
 8005a92:	b095      	sub	sp, #84	; 0x54
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
	HID_TypeTypeDef type = HID_UNKNOWN;
 8005a98:	23ff      	movs	r3, #255	; 0xff
 8005a9a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	HID_KEYBD_Info_TypeDef* kb_state = NULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	647b      	str	r3, [r7, #68]	; 0x44
	HID_DS3_Info_TypeDef* ds3_state = NULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	643b      	str	r3, [r7, #64]	; 0x40
	N64ControllerData new_data;

	type = USBH_HID_GetDeviceType(phost);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff fef5 	bl	8005896 <USBH_HID_GetDeviceType>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

	switch(type)
 8005ab2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d003      	beq.n	8005ac2 <USBH_HID_EventCallback+0x32>
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	f000 8156 	beq.w	8005d6c <USBH_HID_EventCallback+0x2dc>
					ds3ButtonPressed = 0;
				}
			}
			break;
		default:
			break;
 8005ac0:	e380      	b.n	80061c4 <USBH_HID_EventCallback+0x734>
			kb_state = USBH_HID_GetKeybdInfo(phost);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fcd8 	bl	8006478 <USBH_HID_GetKeybdInfo>
 8005ac8:	6478      	str	r0, [r7, #68]	; 0x44
			if(kb_state->keys[2] == kb_state->keys[3] && kb_state->keys[2] == 1)
 8005aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005acc:	7ada      	ldrb	r2, [r3, #11]
 8005ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad0:	7b1b      	ldrb	r3, [r3, #12]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d104      	bne.n	8005ae0 <USBH_HID_EventCallback+0x50>
 8005ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad8:	7adb      	ldrb	r3, [r3, #11]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	f000 836d 	beq.w	80061ba <USBH_HID_EventCallback+0x72a>
			if(state == NORMAL) //used to check state variable for changing controls
 8005ae0:	4b9e      	ldr	r3, [pc, #632]	; (8005d5c <USBH_HID_EventCallback+0x2cc>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f040 811d 	bne.w	8005d24 <USBH_HID_EventCallback+0x294>
				memset(&new_data,0,4);
 8005aea:	f107 030c 	add.w	r3, r7, #12
 8005aee:	2204      	movs	r2, #4
 8005af0:	2100      	movs	r1, #0
 8005af2:	4618      	mov	r0, r3
 8005af4:	f004 f937 	bl	8009d66 <memset>
				for(int index = 0;index < 6;index++)
 8005af8:	2300      	movs	r3, #0
 8005afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005afc:	e108      	b.n	8005d10 <USBH_HID_EventCallback+0x280>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_a_up)
 8005afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b02:	4413      	add	r3, r2
 8005b04:	3309      	adds	r3, #9
 8005b06:	781a      	ldrb	r2, [r3, #0]
 8005b08:	4b95      	ldr	r3, [pc, #596]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005b0a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d102      	bne.n	8005b18 <USBH_HID_EventCallback+0x88>
						new_data.y_axis = 0xFE; // -128 bit reversed (100% range)
 8005b12:	23fe      	movs	r3, #254	; 0xfe
 8005b14:	73fb      	strb	r3, [r7, #15]
						continue;
 8005b16:	e0f8      	b.n	8005d0a <USBH_HID_EventCallback+0x27a>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_a_down)
 8005b18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b1c:	4413      	add	r3, r2
 8005b1e:	3309      	adds	r3, #9
 8005b20:	781a      	ldrb	r2, [r3, #0]
 8005b22:	4b8f      	ldr	r3, [pc, #572]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005b24:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d102      	bne.n	8005b32 <USBH_HID_EventCallback+0xa2>
						new_data.y_axis = 0x01; // +127 bit reversed (100% range)
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	73fb      	strb	r3, [r7, #15]
						continue;
 8005b30:	e0eb      	b.n	8005d0a <USBH_HID_EventCallback+0x27a>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_a_left)
 8005b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b36:	4413      	add	r3, r2
 8005b38:	3309      	adds	r3, #9
 8005b3a:	781a      	ldrb	r2, [r3, #0]
 8005b3c:	4b88      	ldr	r3, [pc, #544]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005b3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d102      	bne.n	8005b4c <USBH_HID_EventCallback+0xbc>
						new_data.x_axis = 0x01; // +127 bit reversed (100% range)
 8005b46:	2301      	movs	r3, #1
 8005b48:	73bb      	strb	r3, [r7, #14]
						continue;
 8005b4a:	e0de      	b.n	8005d0a <USBH_HID_EventCallback+0x27a>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_a_right)
 8005b4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b50:	4413      	add	r3, r2
 8005b52:	3309      	adds	r3, #9
 8005b54:	781a      	ldrb	r2, [r3, #0]
 8005b56:	4b82      	ldr	r3, [pc, #520]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005b58:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d102      	bne.n	8005b66 <USBH_HID_EventCallback+0xd6>
						new_data.x_axis = 0xFE; // -128 bit reversed (100% range)
 8005b60:	23fe      	movs	r3, #254	; 0xfe
 8005b62:	73bb      	strb	r3, [r7, #14]
						continue;
 8005b64:	e0d1      	b.n	8005d0a <USBH_HID_EventCallback+0x27a>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_d_up)
 8005b66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6a:	4413      	add	r3, r2
 8005b6c:	3309      	adds	r3, #9
 8005b6e:	781a      	ldrb	r2, [r3, #0]
 8005b70:	4b7b      	ldr	r3, [pc, #492]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005b72:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d104      	bne.n	8005b84 <USBH_HID_EventCallback+0xf4>
						new_data.up = 1;
 8005b7a:	7b3b      	ldrb	r3, [r7, #12]
 8005b7c:	f043 0310 	orr.w	r3, r3, #16
 8005b80:	733b      	strb	r3, [r7, #12]
						continue;
 8005b82:	e0c2      	b.n	8005d0a <USBH_HID_EventCallback+0x27a>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_d_down)
 8005b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b88:	4413      	add	r3, r2
 8005b8a:	3309      	adds	r3, #9
 8005b8c:	781a      	ldrb	r2, [r3, #0]
 8005b8e:	4b74      	ldr	r3, [pc, #464]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005b90:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d104      	bne.n	8005ba2 <USBH_HID_EventCallback+0x112>
						new_data.down = 1;
 8005b98:	7b3b      	ldrb	r3, [r7, #12]
 8005b9a:	f043 0320 	orr.w	r3, r3, #32
 8005b9e:	733b      	strb	r3, [r7, #12]
						continue;
 8005ba0:	e0b3      	b.n	8005d0a <USBH_HID_EventCallback+0x27a>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_d_left)
 8005ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3309      	adds	r3, #9
 8005baa:	781a      	ldrb	r2, [r3, #0]
 8005bac:	4b6c      	ldr	r3, [pc, #432]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005bae:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d104      	bne.n	8005bc0 <USBH_HID_EventCallback+0x130>
						new_data.left = 1;
 8005bb6:	7b3b      	ldrb	r3, [r7, #12]
 8005bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bbc:	733b      	strb	r3, [r7, #12]
						continue;
 8005bbe:	e0a4      	b.n	8005d0a <USBH_HID_EventCallback+0x27a>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_d_right)
 8005bc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc4:	4413      	add	r3, r2
 8005bc6:	3309      	adds	r3, #9
 8005bc8:	781a      	ldrb	r2, [r3, #0]
 8005bca:	4b65      	ldr	r3, [pc, #404]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005bcc:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d104      	bne.n	8005bde <USBH_HID_EventCallback+0x14e>
						new_data.right = 1;
 8005bd4:	7b3b      	ldrb	r3, [r7, #12]
 8005bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bda:	733b      	strb	r3, [r7, #12]
						continue;
 8005bdc:	e095      	b.n	8005d0a <USBH_HID_EventCallback+0x27a>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_a)
 8005bde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be2:	4413      	add	r3, r2
 8005be4:	3309      	adds	r3, #9
 8005be6:	781a      	ldrb	r2, [r3, #0]
 8005be8:	4b5d      	ldr	r3, [pc, #372]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005bea:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d104      	bne.n	8005bfc <USBH_HID_EventCallback+0x16c>
						new_data.a = 1;
 8005bf2:	7b3b      	ldrb	r3, [r7, #12]
 8005bf4:	f043 0301 	orr.w	r3, r3, #1
 8005bf8:	733b      	strb	r3, [r7, #12]
						continue;
 8005bfa:	e086      	b.n	8005d0a <USBH_HID_EventCallback+0x27a>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_b)
 8005bfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c00:	4413      	add	r3, r2
 8005c02:	3309      	adds	r3, #9
 8005c04:	781a      	ldrb	r2, [r3, #0]
 8005c06:	4b56      	ldr	r3, [pc, #344]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005c08:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d104      	bne.n	8005c1a <USBH_HID_EventCallback+0x18a>
						new_data.b = 1;
 8005c10:	7b3b      	ldrb	r3, [r7, #12]
 8005c12:	f043 0302 	orr.w	r3, r3, #2
 8005c16:	733b      	strb	r3, [r7, #12]
						continue;
 8005c18:	e077      	b.n	8005d0a <USBH_HID_EventCallback+0x27a>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_l)
 8005c1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c1e:	4413      	add	r3, r2
 8005c20:	3309      	adds	r3, #9
 8005c22:	781a      	ldrb	r2, [r3, #0]
 8005c24:	4b4e      	ldr	r3, [pc, #312]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005c26:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d104      	bne.n	8005c38 <USBH_HID_EventCallback+0x1a8>
						new_data.l = 1;
 8005c2e:	7b7b      	ldrb	r3, [r7, #13]
 8005c30:	f043 0304 	orr.w	r3, r3, #4
 8005c34:	737b      	strb	r3, [r7, #13]
						continue;
 8005c36:	e068      	b.n	8005d0a <USBH_HID_EventCallback+0x27a>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_r)
 8005c38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3c:	4413      	add	r3, r2
 8005c3e:	3309      	adds	r3, #9
 8005c40:	781a      	ldrb	r2, [r3, #0]
 8005c42:	4b47      	ldr	r3, [pc, #284]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005c44:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d104      	bne.n	8005c56 <USBH_HID_EventCallback+0x1c6>
						new_data.r = 1;
 8005c4c:	7b7b      	ldrb	r3, [r7, #13]
 8005c4e:	f043 0308 	orr.w	r3, r3, #8
 8005c52:	737b      	strb	r3, [r7, #13]
						continue;
 8005c54:	e059      	b.n	8005d0a <USBH_HID_EventCallback+0x27a>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_z)
 8005c56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c5a:	4413      	add	r3, r2
 8005c5c:	3309      	adds	r3, #9
 8005c5e:	781a      	ldrb	r2, [r3, #0]
 8005c60:	4b3f      	ldr	r3, [pc, #252]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005c62:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d104      	bne.n	8005c74 <USBH_HID_EventCallback+0x1e4>
						new_data.z = 1;
 8005c6a:	7b3b      	ldrb	r3, [r7, #12]
 8005c6c:	f043 0304 	orr.w	r3, r3, #4
 8005c70:	733b      	strb	r3, [r7, #12]
						continue;
 8005c72:	e04a      	b.n	8005d0a <USBH_HID_EventCallback+0x27a>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_start)
 8005c74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c78:	4413      	add	r3, r2
 8005c7a:	3309      	adds	r3, #9
 8005c7c:	781a      	ldrb	r2, [r3, #0]
 8005c7e:	4b38      	ldr	r3, [pc, #224]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005c80:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d104      	bne.n	8005c92 <USBH_HID_EventCallback+0x202>
						new_data.start = 1;
 8005c88:	7b3b      	ldrb	r3, [r7, #12]
 8005c8a:	f043 0308 	orr.w	r3, r3, #8
 8005c8e:	733b      	strb	r3, [r7, #12]
						continue;
 8005c90:	e03b      	b.n	8005d0a <USBH_HID_EventCallback+0x27a>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_c_up)
 8005c92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c96:	4413      	add	r3, r2
 8005c98:	3309      	adds	r3, #9
 8005c9a:	781a      	ldrb	r2, [r3, #0]
 8005c9c:	4b30      	ldr	r3, [pc, #192]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005c9e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d104      	bne.n	8005cb0 <USBH_HID_EventCallback+0x220>
						new_data.c_up = 1;
 8005ca6:	7b7b      	ldrb	r3, [r7, #13]
 8005ca8:	f043 0310 	orr.w	r3, r3, #16
 8005cac:	737b      	strb	r3, [r7, #13]
						continue;
 8005cae:	e02c      	b.n	8005d0a <USBH_HID_EventCallback+0x27a>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_c_down)
 8005cb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb4:	4413      	add	r3, r2
 8005cb6:	3309      	adds	r3, #9
 8005cb8:	781a      	ldrb	r2, [r3, #0]
 8005cba:	4b29      	ldr	r3, [pc, #164]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005cbc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d104      	bne.n	8005cce <USBH_HID_EventCallback+0x23e>
						new_data.c_down = 1;
 8005cc4:	7b7b      	ldrb	r3, [r7, #13]
 8005cc6:	f043 0320 	orr.w	r3, r3, #32
 8005cca:	737b      	strb	r3, [r7, #13]
						continue;
 8005ccc:	e01d      	b.n	8005d0a <USBH_HID_EventCallback+0x27a>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_c_left)
 8005cce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd2:	4413      	add	r3, r2
 8005cd4:	3309      	adds	r3, #9
 8005cd6:	781a      	ldrb	r2, [r3, #0]
 8005cd8:	4b21      	ldr	r3, [pc, #132]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005cda:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d104      	bne.n	8005cec <USBH_HID_EventCallback+0x25c>
						new_data.c_left = 1;
 8005ce2:	7b7b      	ldrb	r3, [r7, #13]
 8005ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ce8:	737b      	strb	r3, [r7, #13]
						continue;
 8005cea:	e00e      	b.n	8005d0a <USBH_HID_EventCallback+0x27a>
					if(kb_state->keys[index] == controls.KBControls.KEYBOARD_c_right)
 8005cec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf0:	4413      	add	r3, r2
 8005cf2:	3309      	adds	r3, #9
 8005cf4:	781a      	ldrb	r2, [r3, #0]
 8005cf6:	4b1a      	ldr	r3, [pc, #104]	; (8005d60 <USBH_HID_EventCallback+0x2d0>)
 8005cf8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d104      	bne.n	8005d0a <USBH_HID_EventCallback+0x27a>
						new_data.c_right = 1;
 8005d00:	7b7b      	ldrb	r3, [r7, #13]
 8005d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d06:	737b      	strb	r3, [r7, #13]
						continue;
 8005d08:	bf00      	nop
				for(int index = 0;index < 6;index++)
 8005d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d12:	2b05      	cmp	r3, #5
 8005d14:	f77f aef3 	ble.w	8005afe <USBH_HID_EventCallback+0x6e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005d18:	b672      	cpsid	i
				memcpy(&n64_data, &new_data,4);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4a11      	ldr	r2, [pc, #68]	; (8005d64 <USBH_HID_EventCallback+0x2d4>)
 8005d1e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005d20:	b662      	cpsie	i
			break;
 8005d22:	e24c      	b.n	80061be <USBH_HID_EventCallback+0x72e>
				uint8_t b = kb_state->keys[0]; // read for button presses (just take first pressed if many are pressed)
 8005d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d26:	7a5b      	ldrb	r3, [r3, #9]
 8005d28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if(b != 0) /*button was actually is pressed*/
 8005d2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00f      	beq.n	8005d54 <USBH_HID_EventCallback+0x2c4>
					if(keyboardButtonPressed == 0)
 8005d34:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <USBH_HID_EventCallback+0x2d8>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f040 8240 	bne.w	80061be <USBH_HID_EventCallback+0x72e>
						keyboardButtonPressed = 1;
 8005d3e:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <USBH_HID_EventCallback+0x2d8>)
 8005d40:	2201      	movs	r2, #1
 8005d42:	701a      	strb	r2, [r3, #0]
						ChangeButtonMappingKB(b);
 8005d44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f002 fe87 	bl	8008a5c <ChangeButtonMappingKB>
						AdvanceState();
 8005d4e:	f003 f833 	bl	8008db8 <AdvanceState>
			break;
 8005d52:	e234      	b.n	80061be <USBH_HID_EventCallback+0x72e>
					keyboardButtonPressed = 0;
 8005d54:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <USBH_HID_EventCallback+0x2d8>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	701a      	strb	r2, [r3, #0]
			break;
 8005d5a:	e230      	b.n	80061be <USBH_HID_EventCallback+0x72e>
 8005d5c:	20000108 	.word	0x20000108
 8005d60:	200001f4 	.word	0x200001f4
 8005d64:	20000278 	.word	0x20000278
 8005d68:	20000100 	.word	0x20000100
			ds3_state = USBH_HID_GetDS3Info(phost);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 faa5 	bl	80062bc <USBH_HID_GetDS3Info>
 8005d72:	6438      	str	r0, [r7, #64]	; 0x40
			uint64_t buttons_and_triggers = USBH_HID_GetDS3ButtonsAndTriggers();
 8005d74:	f000 fab6 	bl	80062e4 <USBH_HID_GetDS3ButtonsAndTriggers>
 8005d78:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
			if(state == NORMAL)
 8005d7c:	4b98      	ldr	r3, [pc, #608]	; (8005fe0 <USBH_HID_EventCallback+0x550>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f040 81fe 	bne.w	8006182 <USBH_HID_EventCallback+0x6f2>
				memset(&new_data,0,4);
 8005d86:	f107 030c 	add.w	r3, r7, #12
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f003 ffe9 	bl	8009d66 <memset>
				if(buttons_and_triggers & controls.XpadControls.up)
 8005d94:	4a93      	ldr	r2, [pc, #588]	; (8005fe4 <USBH_HID_EventCallback+0x554>)
 8005d96:	6a13      	ldr	r3, [r2, #32]
 8005d98:	6a54      	ldr	r4, [r2, #36]	; 0x24
 8005d9a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005d9e:	ea03 0301 	and.w	r3, r3, r1
 8005da2:	ea04 0402 	and.w	r4, r4, r2
 8005da6:	4323      	orrs	r3, r4
 8005da8:	d003      	beq.n	8005db2 <USBH_HID_EventCallback+0x322>
					new_data.up = 1;
 8005daa:	7b3b      	ldrb	r3, [r7, #12]
 8005dac:	f043 0310 	orr.w	r3, r3, #16
 8005db0:	733b      	strb	r3, [r7, #12]
				if(buttons_and_triggers & controls.XpadControls.down)
 8005db2:	4a8c      	ldr	r2, [pc, #560]	; (8005fe4 <USBH_HID_EventCallback+0x554>)
 8005db4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005db6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005db8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005dbc:	ea03 0301 	and.w	r3, r3, r1
 8005dc0:	ea04 0402 	and.w	r4, r4, r2
 8005dc4:	4323      	orrs	r3, r4
 8005dc6:	d003      	beq.n	8005dd0 <USBH_HID_EventCallback+0x340>
					new_data.down = 1;
 8005dc8:	7b3b      	ldrb	r3, [r7, #12]
 8005dca:	f043 0320 	orr.w	r3, r3, #32
 8005dce:	733b      	strb	r3, [r7, #12]
				if(buttons_and_triggers & controls.XpadControls.left)
 8005dd0:	4a84      	ldr	r2, [pc, #528]	; (8005fe4 <USBH_HID_EventCallback+0x554>)
 8005dd2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005dd4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005dd6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005dda:	ea03 0301 	and.w	r3, r3, r1
 8005dde:	ea04 0402 	and.w	r4, r4, r2
 8005de2:	4323      	orrs	r3, r4
 8005de4:	d003      	beq.n	8005dee <USBH_HID_EventCallback+0x35e>
					new_data.left = 1;
 8005de6:	7b3b      	ldrb	r3, [r7, #12]
 8005de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dec:	733b      	strb	r3, [r7, #12]
				if(buttons_and_triggers & controls.XpadControls.right)
 8005dee:	4a7d      	ldr	r2, [pc, #500]	; (8005fe4 <USBH_HID_EventCallback+0x554>)
 8005df0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005df2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8005df4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005df8:	ea03 0301 	and.w	r3, r3, r1
 8005dfc:	ea04 0402 	and.w	r4, r4, r2
 8005e00:	4323      	orrs	r3, r4
 8005e02:	d003      	beq.n	8005e0c <USBH_HID_EventCallback+0x37c>
					new_data.right = 1;
 8005e04:	7b3b      	ldrb	r3, [r7, #12]
 8005e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e0a:	733b      	strb	r3, [r7, #12]
				if(buttons_and_triggers & controls.XpadControls.c_up)
 8005e0c:	4a75      	ldr	r2, [pc, #468]	; (8005fe4 <USBH_HID_EventCallback+0x554>)
 8005e0e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005e10:	6d54      	ldr	r4, [r2, #84]	; 0x54
 8005e12:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005e16:	ea03 0301 	and.w	r3, r3, r1
 8005e1a:	ea04 0402 	and.w	r4, r4, r2
 8005e1e:	4323      	orrs	r3, r4
 8005e20:	d003      	beq.n	8005e2a <USBH_HID_EventCallback+0x39a>
					new_data.c_up = 1;
 8005e22:	7b7b      	ldrb	r3, [r7, #13]
 8005e24:	f043 0310 	orr.w	r3, r3, #16
 8005e28:	737b      	strb	r3, [r7, #13]
				if(buttons_and_triggers & controls.XpadControls.c_down)
 8005e2a:	4a6e      	ldr	r2, [pc, #440]	; (8005fe4 <USBH_HID_EventCallback+0x554>)
 8005e2c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005e2e:	6dd4      	ldr	r4, [r2, #92]	; 0x5c
 8005e30:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005e34:	ea03 0301 	and.w	r3, r3, r1
 8005e38:	ea04 0402 	and.w	r4, r4, r2
 8005e3c:	4323      	orrs	r3, r4
 8005e3e:	d003      	beq.n	8005e48 <USBH_HID_EventCallback+0x3b8>
					new_data.c_down = 1;
 8005e40:	7b7b      	ldrb	r3, [r7, #13]
 8005e42:	f043 0320 	orr.w	r3, r3, #32
 8005e46:	737b      	strb	r3, [r7, #13]
				if(buttons_and_triggers & controls.XpadControls.c_left)
 8005e48:	4a66      	ldr	r2, [pc, #408]	; (8005fe4 <USBH_HID_EventCallback+0x554>)
 8005e4a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8005e4c:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005e4e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005e52:	ea03 0301 	and.w	r3, r3, r1
 8005e56:	ea04 0402 	and.w	r4, r4, r2
 8005e5a:	4323      	orrs	r3, r4
 8005e5c:	d003      	beq.n	8005e66 <USBH_HID_EventCallback+0x3d6>
					new_data.c_left = 1;
 8005e5e:	7b7b      	ldrb	r3, [r7, #13]
 8005e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e64:	737b      	strb	r3, [r7, #13]
				if(buttons_and_triggers & controls.XpadControls.c_right)
 8005e66:	4a5f      	ldr	r2, [pc, #380]	; (8005fe4 <USBH_HID_EventCallback+0x554>)
 8005e68:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8005e6a:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 8005e6c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005e70:	ea03 0301 	and.w	r3, r3, r1
 8005e74:	ea04 0402 	and.w	r4, r4, r2
 8005e78:	4323      	orrs	r3, r4
 8005e7a:	d003      	beq.n	8005e84 <USBH_HID_EventCallback+0x3f4>
					new_data.c_right = 1;
 8005e7c:	7b7b      	ldrb	r3, [r7, #13]
 8005e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e82:	737b      	strb	r3, [r7, #13]
				if(buttons_and_triggers & controls.XpadControls.l)
 8005e84:	4a57      	ldr	r2, [pc, #348]	; (8005fe4 <USBH_HID_EventCallback+0x554>)
 8005e86:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005e88:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8005e8a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005e8e:	ea03 0301 	and.w	r3, r3, r1
 8005e92:	ea04 0402 	and.w	r4, r4, r2
 8005e96:	4323      	orrs	r3, r4
 8005e98:	d003      	beq.n	8005ea2 <USBH_HID_EventCallback+0x412>
					new_data.l = 1;
 8005e9a:	7b7b      	ldrb	r3, [r7, #13]
 8005e9c:	f043 0304 	orr.w	r3, r3, #4
 8005ea0:	737b      	strb	r3, [r7, #13]
				if(buttons_and_triggers & controls.XpadControls.r)
 8005ea2:	4a50      	ldr	r2, [pc, #320]	; (8005fe4 <USBH_HID_EventCallback+0x554>)
 8005ea4:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8005ea6:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
 8005ea8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005eac:	ea03 0301 	and.w	r3, r3, r1
 8005eb0:	ea04 0402 	and.w	r4, r4, r2
 8005eb4:	4323      	orrs	r3, r4
 8005eb6:	d003      	beq.n	8005ec0 <USBH_HID_EventCallback+0x430>
					new_data.r = 1;
 8005eb8:	7b7b      	ldrb	r3, [r7, #13]
 8005eba:	f043 0308 	orr.w	r3, r3, #8
 8005ebe:	737b      	strb	r3, [r7, #13]
				if(buttons_and_triggers & controls.XpadControls.z)
 8005ec0:	4a48      	ldr	r2, [pc, #288]	; (8005fe4 <USBH_HID_EventCallback+0x554>)
 8005ec2:	6913      	ldr	r3, [r2, #16]
 8005ec4:	6954      	ldr	r4, [r2, #20]
 8005ec6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005eca:	ea03 0301 	and.w	r3, r3, r1
 8005ece:	ea04 0402 	and.w	r4, r4, r2
 8005ed2:	4323      	orrs	r3, r4
 8005ed4:	d003      	beq.n	8005ede <USBH_HID_EventCallback+0x44e>
					new_data.z = 1;
 8005ed6:	7b3b      	ldrb	r3, [r7, #12]
 8005ed8:	f043 0304 	orr.w	r3, r3, #4
 8005edc:	733b      	strb	r3, [r7, #12]
				if(buttons_and_triggers & controls.XpadControls.a)
 8005ede:	4a41      	ldr	r2, [pc, #260]	; (8005fe4 <USBH_HID_EventCallback+0x554>)
 8005ee0:	6813      	ldr	r3, [r2, #0]
 8005ee2:	6854      	ldr	r4, [r2, #4]
 8005ee4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005ee8:	ea03 0301 	and.w	r3, r3, r1
 8005eec:	ea04 0402 	and.w	r4, r4, r2
 8005ef0:	4323      	orrs	r3, r4
 8005ef2:	d003      	beq.n	8005efc <USBH_HID_EventCallback+0x46c>
					new_data.a = 1;
 8005ef4:	7b3b      	ldrb	r3, [r7, #12]
 8005ef6:	f043 0301 	orr.w	r3, r3, #1
 8005efa:	733b      	strb	r3, [r7, #12]
				if(buttons_and_triggers & controls.XpadControls.b)
 8005efc:	4a39      	ldr	r2, [pc, #228]	; (8005fe4 <USBH_HID_EventCallback+0x554>)
 8005efe:	6893      	ldr	r3, [r2, #8]
 8005f00:	68d4      	ldr	r4, [r2, #12]
 8005f02:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005f06:	ea03 0301 	and.w	r3, r3, r1
 8005f0a:	ea04 0402 	and.w	r4, r4, r2
 8005f0e:	4323      	orrs	r3, r4
 8005f10:	d003      	beq.n	8005f1a <USBH_HID_EventCallback+0x48a>
					new_data.b = 1;
 8005f12:	7b3b      	ldrb	r3, [r7, #12]
 8005f14:	f043 0302 	orr.w	r3, r3, #2
 8005f18:	733b      	strb	r3, [r7, #12]
				if(buttons_and_triggers & controls.XpadControls.start)
 8005f1a:	4a32      	ldr	r2, [pc, #200]	; (8005fe4 <USBH_HID_EventCallback+0x554>)
 8005f1c:	6993      	ldr	r3, [r2, #24]
 8005f1e:	69d4      	ldr	r4, [r2, #28]
 8005f20:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005f24:	ea03 0301 	and.w	r3, r3, r1
 8005f28:	ea04 0402 	and.w	r4, r4, r2
 8005f2c:	4323      	orrs	r3, r4
 8005f2e:	d003      	beq.n	8005f38 <USBH_HID_EventCallback+0x4a8>
					new_data.start = 1;
 8005f30:	7b3b      	ldrb	r3, [r7, #12]
 8005f32:	f043 0308 	orr.w	r3, r3, #8
 8005f36:	733b      	strb	r3, [r7, #12]
				const float N64_MAX = (sensitivity > 0) ? 127*(sensitivity/100.0f) : 0;
 8005f38:	4b2b      	ldr	r3, [pc, #172]	; (8005fe8 <USBH_HID_EventCallback+0x558>)
 8005f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
				float deadzoneValue = (dead_zone/100.0f) * DS3_MAX;
 8005f3c:	4b2b      	ldr	r3, [pc, #172]	; (8005fec <USBH_HID_EventCallback+0x55c>)
 8005f3e:	62bb      	str	r3, [r7, #40]	; 0x28
				float deadzoneRelation = DS3_MAX / (DS3_MAX - deadzoneValue);
 8005f40:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005ff0 <USBH_HID_EventCallback+0x560>
 8005f44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005f48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f4c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8005ff0 <USBH_HID_EventCallback+0x560>
 8005f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f54:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				int8_t LSX = 0, LSY = 0; // -128 to +127...
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				float unscaled_result = 0;
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	623b      	str	r3, [r7, #32]
				int8_t stick_lx = ds3_state->LAnalogX - 128;
 8005f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f6c:	799b      	ldrb	r3, [r3, #6]
 8005f6e:	3b80      	subs	r3, #128	; 0x80
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
				int8_t stick_ly = ds3_state->LAnalogY - 128;
 8005f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f78:	79db      	ldrb	r3, [r3, #7]
 8005f7a:	3b80      	subs	r3, #128	; 0x80
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	77fb      	strb	r3, [r7, #31]
				if(stick_lx >= deadzoneValue) // positive = right
 8005f80:	f997 3049 	ldrsb.w	r3, [r7, #73]	; 0x49
 8005f84:	ee07 3a90 	vmov	s15, r3
 8005f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005f90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f98:	db2c      	blt.n	8005ff4 <USBH_HID_EventCallback+0x564>
					unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 8005f9a:	f997 3049 	ldrsb.w	r3, [r7, #73]	; 0x49
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fa6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005faa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005fae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb6:	edc7 7a08 	vstr	s15, [r7, #32]
					LSX = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 8005fba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005fbe:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8005ff0 <USBH_HID_EventCallback+0x560>
 8005fc2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005fc6:	edd7 7a08 	vldr	s15, [r7, #32]
 8005fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fd2:	edc7 7a00 	vstr	s15, [r7]
 8005fd6:	783b      	ldrb	r3, [r7, #0]
 8005fd8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8005fdc:	e04d      	b.n	800607a <USBH_HID_EventCallback+0x5ea>
 8005fde:	bf00      	nop
 8005fe0:	20000108 	.word	0x20000108
 8005fe4:	200001f4 	.word	0x200001f4
 8005fe8:	42fe0000 	.word	0x42fe0000
 8005fec:	41cb3333 	.word	0x41cb3333
 8005ff0:	42fe0000 	.word	0x42fe0000
				else if(stick_lx <= (-deadzoneValue)) // negative = left
 8005ff4:	f997 3049 	ldrsb.w	r3, [r7, #73]	; 0x49
 8005ff8:	ee07 3a90 	vmov	s15, r3
 8005ffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006000:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006004:	eef1 7a67 	vneg.f32	s15, s15
 8006008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800600c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006010:	d833      	bhi.n	800607a <USBH_HID_EventCallback+0x5ea>
					stick_lx++; // just in case it's -128 it cannot be negated. otherwise the 1 is negligible.
 8006012:	f997 3049 	ldrsb.w	r3, [r7, #73]	; 0x49
 8006016:	b2db      	uxtb	r3, r3
 8006018:	3301      	adds	r3, #1
 800601a:	b2db      	uxtb	r3, r3
 800601c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
					stick_lx = -stick_lx; // compute as positive, then negate at the end
 8006020:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8006024:	425b      	negs	r3, r3
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
					unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 800602c:	f997 3049 	ldrsb.w	r3, [r7, #73]	; 0x49
 8006030:	ee07 3a90 	vmov	s15, r3
 8006034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006038:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800603c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006040:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006048:	edc7 7a08 	vstr	s15, [r7, #32]
					LSX = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 800604c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006050:	ed5f 6a19 	vldr	s13, [pc, #-100]	; 8005ff0 <USBH_HID_EventCallback+0x560>
 8006054:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006058:	edd7 7a08 	vldr	s15, [r7, #32]
 800605c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006064:	edc7 7a00 	vstr	s15, [r7]
 8006068:	783b      	ldrb	r3, [r7, #0]
 800606a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
					LSX = -LSX;
 800606e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006072:	425b      	negs	r3, r3
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
				if(stick_ly >= deadzoneValue) // DS3 positive = down
 800607a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800607e:	ee07 3a90 	vmov	s15, r3
 8006082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006086:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800608a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800608e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006092:	db27      	blt.n	80060e4 <USBH_HID_EventCallback+0x654>
					unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 8006094:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006098:	ee07 3a90 	vmov	s15, r3
 800609c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80060a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060a8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80060ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b0:	edc7 7a08 	vstr	s15, [r7, #32]
					LSY = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 80060b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80060b8:	ed5f 6a33 	vldr	s13, [pc, #-204]	; 8005ff0 <USBH_HID_EventCallback+0x560>
 80060bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80060c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80060c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060cc:	edc7 7a00 	vstr	s15, [r7]
 80060d0:	783b      	ldrb	r3, [r7, #0]
 80060d2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
					LSY = -LSY; // for n64 down is negative
 80060d6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80060da:	425b      	negs	r3, r3
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80060e2:	e03a      	b.n	800615a <USBH_HID_EventCallback+0x6ca>
				else if(stick_ly <= (-deadzoneValue)) // DS3 negative = up
 80060e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80060e8:	ee07 3a90 	vmov	s15, r3
 80060ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80060f4:	eef1 7a67 	vneg.f32	s15, s15
 80060f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006100:	d82b      	bhi.n	800615a <USBH_HID_EventCallback+0x6ca>
					stick_lx++; // just in case it's -128 it cannot be negated. otherwise the 1 is negligible.
 8006102:	f997 3049 	ldrsb.w	r3, [r7, #73]	; 0x49
 8006106:	b2db      	uxtb	r3, r3
 8006108:	3301      	adds	r3, #1
 800610a:	b2db      	uxtb	r3, r3
 800610c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
					stick_ly = -stick_ly; // compute as positive
 8006110:	7ffb      	ldrb	r3, [r7, #31]
 8006112:	425b      	negs	r3, r3
 8006114:	b2db      	uxtb	r3, r3
 8006116:	77fb      	strb	r3, [r7, #31]
					unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 8006118:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800611c:	ee07 3a90 	vmov	s15, r3
 8006120:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006124:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006128:	ee37 7a67 	vsub.f32	s14, s14, s15
 800612c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006134:	edc7 7a08 	vstr	s15, [r7, #32]
					LSY = (int8_t)(unscaled_result * (N64_MAX / DS3_MAX));
 8006138:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800613c:	ed5f 6a54 	vldr	s13, [pc, #-336]	; 8005ff0 <USBH_HID_EventCallback+0x560>
 8006140:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006144:	edd7 7a08 	vldr	s15, [r7, #32]
 8006148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006150:	edc7 7a00 	vstr	s15, [r7]
 8006154:	783b      	ldrb	r3, [r7, #0]
 8006156:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				new_data.x_axis = reverse((uint8_t)LSX);
 800615a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800615e:	4618      	mov	r0, r3
 8006160:	f002 fe40 	bl	8008de4 <reverse>
 8006164:	4603      	mov	r3, r0
 8006166:	73bb      	strb	r3, [r7, #14]
				new_data.y_axis = reverse((uint8_t)LSY);
 8006168:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800616c:	4618      	mov	r0, r3
 800616e:	f002 fe39 	bl	8008de4 <reverse>
 8006172:	4603      	mov	r3, r0
 8006174:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8006176:	b672      	cpsid	i
				memcpy(&n64_data, &new_data,4);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4a14      	ldr	r2, [pc, #80]	; (80061cc <USBH_HID_EventCallback+0x73c>)
 800617c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800617e:	b662      	cpsie	i
			break;
 8006180:	e01f      	b.n	80061c2 <USBH_HID_EventCallback+0x732>
				uint64_t b = DetectButtonDS3(buttons_and_triggers); // read for button presses (just do linear search)
 8006182:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006186:	f7fe fecf 	bl	8004f28 <DetectButtonDS3>
 800618a:	e9c7 0104 	strd	r0, r1, [r7, #16]
				if(b != 0) /*button was actually is pressed*/
 800618e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006192:	4323      	orrs	r3, r4
 8006194:	d00d      	beq.n	80061b2 <USBH_HID_EventCallback+0x722>
					if(ds3ButtonPressed == 0)
 8006196:	4b0e      	ldr	r3, [pc, #56]	; (80061d0 <USBH_HID_EventCallback+0x740>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d111      	bne.n	80061c2 <USBH_HID_EventCallback+0x732>
						ds3ButtonPressed = 1;
 800619e:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <USBH_HID_EventCallback+0x740>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	701a      	strb	r2, [r3, #0]
						ChangeButtonMappingController(b);
 80061a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80061a8:	f002 fd08 	bl	8008bbc <ChangeButtonMappingController>
						AdvanceState();
 80061ac:	f002 fe04 	bl	8008db8 <AdvanceState>
			break;
 80061b0:	e007      	b.n	80061c2 <USBH_HID_EventCallback+0x732>
					ds3ButtonPressed = 0;
 80061b2:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <USBH_HID_EventCallback+0x740>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	701a      	strb	r2, [r3, #0]
			break;
 80061b8:	e003      	b.n	80061c2 <USBH_HID_EventCallback+0x732>
				return;
 80061ba:	bf00      	nop
 80061bc:	e002      	b.n	80061c4 <USBH_HID_EventCallback+0x734>
			break;
 80061be:	bf00      	nop
 80061c0:	e000      	b.n	80061c4 <USBH_HID_EventCallback+0x734>
			break;
 80061c2:	bf00      	nop
	}
}
 80061c4:	3754      	adds	r7, #84	; 0x54
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd90      	pop	{r4, r7, pc}
 80061ca:	bf00      	nop
 80061cc:	20000278 	.word	0x20000278
 80061d0:	20000101 	.word	0x20000101

080061d4 <USBH_HID_DS3Init>:
  255,   /*max value device can report*/
  1      /*resolution*/
};

USBH_StatusTypeDef USBH_HID_DS3Init(USBH_HandleTypeDef *phost)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
	  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	60fb      	str	r3, [r7, #12]

	  memset(&ds3_data,0,sizeof(HID_DS3_Info_TypeDef));
 80061e6:	2230      	movs	r2, #48	; 0x30
 80061e8:	2100      	movs	r1, #0
 80061ea:	4811      	ldr	r0, [pc, #68]	; (8006230 <USBH_HID_DS3Init+0x5c>)
 80061ec:	f003 fdbb 	bl	8009d66 <memset>
	  memset(ds3_report_data,0,sizeof(uint32_t)*12);
 80061f0:	2230      	movs	r2, #48	; 0x30
 80061f2:	2100      	movs	r1, #0
 80061f4:	480f      	ldr	r0, [pc, #60]	; (8006234 <USBH_HID_DS3Init+0x60>)
 80061f6:	f003 fdb6 	bl	8009d66 <memset>

	  if(HID_Handle->length > (sizeof(ds3_report_data)/sizeof(uint32_t)))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8b1b      	ldrh	r3, [r3, #24]
 80061fe:	2b0c      	cmp	r3, #12
 8006200:	d902      	bls.n	8006208 <USBH_HID_DS3Init+0x34>
	  {
	    HID_Handle->length = (sizeof(ds3_report_data)/sizeof(uint32_t));
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	220c      	movs	r2, #12
 8006206:	831a      	strh	r2, [r3, #24]
	  }
	  HID_Handle->pData = (uint8_t*)ds3_report_data;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4a0a      	ldr	r2, [pc, #40]	; (8006234 <USBH_HID_DS3Init+0x60>)
 800620c:	615a      	str	r2, [r3, #20]
	  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(ds3_report_data));
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f103 0008 	add.w	r0, r3, #8
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800621a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800621e:	4619      	mov	r1, r3
 8006220:	f7ff fb7d 	bl	800591e <fifo_init>

	  return USBH_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	2000016c 	.word	0x2000016c
 8006234:	2000013c 	.word	0x2000013c

08006238 <USBH_HID_DS3Decode>:


static USBH_StatusTypeDef USBH_HID_DS3Decode(USBH_HandleTypeDef *phost)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  int x;

  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	60bb      	str	r3, [r7, #8]
  if(HID_Handle->length == 0)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	8b1b      	ldrh	r3, [r3, #24]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <USBH_HID_DS3Decode+0x1e>
  {
    return USBH_FAIL;
 8006252:	2302      	movs	r3, #2
 8006254:	e027      	b.n	80062a6 <USBH_HID_DS3Decode+0x6e>
  }
  /*Fill report */
  if(fifo_read(&HID_Handle->fifo, &ds3_report_data, HID_Handle->length) ==  HID_Handle->length)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f103 0008 	add.w	r0, r3, #8
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	8b1b      	ldrh	r3, [r3, #24]
 8006260:	461a      	mov	r2, r3
 8006262:	4913      	ldr	r1, [pc, #76]	; (80062b0 <USBH_HID_DS3Decode+0x78>)
 8006264:	f7ff fb77 	bl	8005956 <fifo_read>
 8006268:	4603      	mov	r3, r0
 800626a:	461a      	mov	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	8b1b      	ldrh	r3, [r3, #24]
 8006270:	429a      	cmp	r2, r3
 8006272:	d117      	bne.n	80062a4 <USBH_HID_DS3Decode+0x6c>
  {
	for(x=0; x < sizeof(HID_DS3_Info_TypeDef); x++)
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	e00f      	b.n	800629a <USBH_HID_DS3Decode+0x62>
	{
		ds3_data.data[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ds3_byte, x);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	b2db      	uxtb	r3, r3
 800627e:	4619      	mov	r1, r3
 8006280:	480c      	ldr	r0, [pc, #48]	; (80062b4 <USBH_HID_DS3Decode+0x7c>)
 8006282:	f000 f9d5 	bl	8006630 <HID_ReadItem>
 8006286:	4603      	mov	r3, r0
 8006288:	b2d9      	uxtb	r1, r3
 800628a:	4a0b      	ldr	r2, [pc, #44]	; (80062b8 <USBH_HID_DS3Decode+0x80>)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	460a      	mov	r2, r1
 8006292:	701a      	strb	r2, [r3, #0]
	for(x=0; x < sizeof(HID_DS3_Info_TypeDef); x++)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3301      	adds	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b2f      	cmp	r3, #47	; 0x2f
 800629e:	d9ec      	bls.n	800627a <USBH_HID_DS3Decode+0x42>
	}

    return USBH_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	e000      	b.n	80062a6 <USBH_HID_DS3Decode+0x6e>
  }
  return   USBH_FAIL;
 80062a4:	2302      	movs	r3, #2
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	2000013c 	.word	0x2000013c
 80062b4:	08009f5c 	.word	0x08009f5c
 80062b8:	2000016c 	.word	0x2000016c

080062bc <USBH_HID_GetDS3Info>:

HID_DS3_Info_TypeDef *USBH_HID_GetDS3Info(USBH_HandleTypeDef *phost)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 if(USBH_HID_DS3Decode(phost) == USBH_OK)
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7ff ffb7 	bl	8006238 <USBH_HID_DS3Decode>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <USBH_HID_GetDS3Info+0x18>
 {
  return &ds3_data;
 80062d0:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <USBH_HID_GetDS3Info+0x24>)
 80062d2:	e000      	b.n	80062d6 <USBH_HID_GetDS3Info+0x1a>
 }
 else
 {
  return NULL;
 80062d4:	2300      	movs	r3, #0
 }
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	2000016c 	.word	0x2000016c

080062e4 <USBH_HID_GetDS3ButtonsAndTriggers>:

// bit order  ds3: many 0s|r2|l2|triangle|square|circle|X|?|?|R1|L1|R3|L3|select|start|dright|dleft|ddown|dup
uint64_t USBH_HID_GetDS3ButtonsAndTriggers()
{
 80062e4:	b490      	push	{r4, r7}
 80062e6:	af00      	add	r7, sp, #0
	return ds3_data.d_up | (ds3_data.d_down << 1) | (ds3_data.d_left << 2) | (ds3_data.d_right << 3) |
 80062e8:	4b3a      	ldr	r3, [pc, #232]	; (80063d4 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 80062ea:	789b      	ldrb	r3, [r3, #2]
 80062ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	4b37      	ldr	r3, [pc, #220]	; (80063d4 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 80062f6:	789b      	ldrb	r3, [r3, #2]
 80062f8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	431a      	orrs	r2, r3
 8006302:	4b34      	ldr	r3, [pc, #208]	; (80063d4 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 8006304:	789b      	ldrb	r3, [r3, #2]
 8006306:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800630a:	b2db      	uxtb	r3, r3
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	431a      	orrs	r2, r3
 8006310:	4b30      	ldr	r3, [pc, #192]	; (80063d4 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 8006312:	789b      	ldrb	r3, [r3, #2]
 8006314:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006318:	b2db      	uxtb	r3, r3
 800631a:	00db      	lsls	r3, r3, #3
 800631c:	431a      	orrs	r2, r3
			(ds3_data.start << 4) | (ds3_data.select << 5) | (ds3_data.L3 << 6) | (ds3_data.R3 << 7) |
 800631e:	4b2d      	ldr	r3, [pc, #180]	; (80063d4 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 8006320:	789b      	ldrb	r3, [r3, #2]
 8006322:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006326:	b2db      	uxtb	r3, r3
 8006328:	011b      	lsls	r3, r3, #4
	return ds3_data.d_up | (ds3_data.d_down << 1) | (ds3_data.d_left << 2) | (ds3_data.d_right << 3) |
 800632a:	431a      	orrs	r2, r3
			(ds3_data.start << 4) | (ds3_data.select << 5) | (ds3_data.L3 << 6) | (ds3_data.R3 << 7) |
 800632c:	4b29      	ldr	r3, [pc, #164]	; (80063d4 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 800632e:	789b      	ldrb	r3, [r3, #2]
 8006330:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006334:	b2db      	uxtb	r3, r3
 8006336:	015b      	lsls	r3, r3, #5
 8006338:	431a      	orrs	r2, r3
 800633a:	4b26      	ldr	r3, [pc, #152]	; (80063d4 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 800633c:	789b      	ldrb	r3, [r3, #2]
 800633e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006342:	b2db      	uxtb	r3, r3
 8006344:	019b      	lsls	r3, r3, #6
 8006346:	431a      	orrs	r2, r3
 8006348:	4b22      	ldr	r3, [pc, #136]	; (80063d4 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 800634a:	789b      	ldrb	r3, [r3, #2]
 800634c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006350:	b2db      	uxtb	r3, r3
 8006352:	01db      	lsls	r3, r3, #7
 8006354:	431a      	orrs	r2, r3
			(ds3_data.L1 << 8) | (ds3_data.R1 << 9) | // next two bits unused
 8006356:	4b1f      	ldr	r3, [pc, #124]	; (80063d4 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 8006358:	78db      	ldrb	r3, [r3, #3]
 800635a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800635e:	b2db      	uxtb	r3, r3
 8006360:	021b      	lsls	r3, r3, #8
			(ds3_data.start << 4) | (ds3_data.select << 5) | (ds3_data.L3 << 6) | (ds3_data.R3 << 7) |
 8006362:	431a      	orrs	r2, r3
			(ds3_data.L1 << 8) | (ds3_data.R1 << 9) | // next two bits unused
 8006364:	4b1b      	ldr	r3, [pc, #108]	; (80063d4 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 8006366:	78db      	ldrb	r3, [r3, #3]
 8006368:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800636c:	b2db      	uxtb	r3, r3
 800636e:	025b      	lsls	r3, r3, #9
 8006370:	431a      	orrs	r2, r3
			(ds3_data.x << 12) | (ds3_data.circle << 13) | (ds3_data.square << 14) | (ds3_data.triangle << 15) |
 8006372:	4b18      	ldr	r3, [pc, #96]	; (80063d4 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 8006374:	78db      	ldrb	r3, [r3, #3]
 8006376:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800637a:	b2db      	uxtb	r3, r3
 800637c:	031b      	lsls	r3, r3, #12
			(ds3_data.L1 << 8) | (ds3_data.R1 << 9) | // next two bits unused
 800637e:	431a      	orrs	r2, r3
			(ds3_data.x << 12) | (ds3_data.circle << 13) | (ds3_data.square << 14) | (ds3_data.triangle << 15) |
 8006380:	4b14      	ldr	r3, [pc, #80]	; (80063d4 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 8006382:	78db      	ldrb	r3, [r3, #3]
 8006384:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006388:	b2db      	uxtb	r3, r3
 800638a:	035b      	lsls	r3, r3, #13
 800638c:	431a      	orrs	r2, r3
 800638e:	4b11      	ldr	r3, [pc, #68]	; (80063d4 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 8006390:	78db      	ldrb	r3, [r3, #3]
 8006392:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006396:	b2db      	uxtb	r3, r3
 8006398:	039b      	lsls	r3, r3, #14
 800639a:	431a      	orrs	r2, r3
 800639c:	4b0d      	ldr	r3, [pc, #52]	; (80063d4 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 800639e:	78db      	ldrb	r3, [r3, #3]
 80063a0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	03db      	lsls	r3, r3, #15
 80063a8:	431a      	orrs	r2, r3
			(ds3_data.L2 << 16) | (ds3_data.R2 << 17);
 80063aa:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 80063ac:	78db      	ldrb	r3, [r3, #3]
 80063ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	041b      	lsls	r3, r3, #16
			(ds3_data.x << 12) | (ds3_data.circle << 13) | (ds3_data.square << 14) | (ds3_data.triangle << 15) |
 80063b6:	431a      	orrs	r2, r3
			(ds3_data.L2 << 16) | (ds3_data.R2 << 17);
 80063b8:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <USBH_HID_GetDS3ButtonsAndTriggers+0xf0>)
 80063ba:	78db      	ldrb	r3, [r3, #3]
 80063bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	045b      	lsls	r3, r3, #17
 80063c4:	4313      	orrs	r3, r2
 80063c6:	ea4f 74e3 	mov.w	r4, r3, asr #31
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	4621      	mov	r1, r4
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bc90      	pop	{r4, r7}
 80063d2:	4770      	bx	lr
 80063d4:	2000016c 	.word	0x2000016c

080063d8 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;  
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	60bb      	str	r3, [r7, #8]
    
  keybd_info.lctrl=keybd_info.lshift= 0;
 80063ea:	4b21      	ldr	r3, [pc, #132]	; (8006470 <USBH_HID_KeybdInit+0x98>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	709a      	strb	r2, [r3, #2]
 80063f0:	4b1f      	ldr	r3, [pc, #124]	; (8006470 <USBH_HID_KeybdInit+0x98>)
 80063f2:	789a      	ldrb	r2, [r3, #2]
 80063f4:	4b1e      	ldr	r3, [pc, #120]	; (8006470 <USBH_HID_KeybdInit+0x98>)
 80063f6:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt=keybd_info.lgui= 0;
 80063f8:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <USBH_HID_KeybdInit+0x98>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	711a      	strb	r2, [r3, #4]
 80063fe:	4b1c      	ldr	r3, [pc, #112]	; (8006470 <USBH_HID_KeybdInit+0x98>)
 8006400:	791a      	ldrb	r2, [r3, #4]
 8006402:	4b1b      	ldr	r3, [pc, #108]	; (8006470 <USBH_HID_KeybdInit+0x98>)
 8006404:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl=keybd_info.rshift= 0;
 8006406:	4b1a      	ldr	r3, [pc, #104]	; (8006470 <USBH_HID_KeybdInit+0x98>)
 8006408:	2200      	movs	r2, #0
 800640a:	719a      	strb	r2, [r3, #6]
 800640c:	4b18      	ldr	r3, [pc, #96]	; (8006470 <USBH_HID_KeybdInit+0x98>)
 800640e:	799a      	ldrb	r2, [r3, #6]
 8006410:	4b17      	ldr	r3, [pc, #92]	; (8006470 <USBH_HID_KeybdInit+0x98>)
 8006412:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt=keybd_info.rgui=0;
 8006414:	4b16      	ldr	r3, [pc, #88]	; (8006470 <USBH_HID_KeybdInit+0x98>)
 8006416:	2200      	movs	r2, #0
 8006418:	721a      	strb	r2, [r3, #8]
 800641a:	4b15      	ldr	r3, [pc, #84]	; (8006470 <USBH_HID_KeybdInit+0x98>)
 800641c:	7a1a      	ldrb	r2, [r3, #8]
 800641e:	4b14      	ldr	r3, [pc, #80]	; (8006470 <USBH_HID_KeybdInit+0x98>)
 8006420:	71da      	strb	r2, [r3, #7]
  
  
  for(x=0; x< (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	e007      	b.n	8006438 <USBH_HID_KeybdInit+0x60>
  {
    keybd_report_data[x]=0;
 8006428:	4a12      	ldr	r2, [pc, #72]	; (8006474 <USBH_HID_KeybdInit+0x9c>)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2100      	movs	r1, #0
 800642e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(x=0; x< (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3301      	adds	r3, #1
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d9f4      	bls.n	8006428 <USBH_HID_KeybdInit+0x50>
  }
  
  if(HID_Handle->length > (sizeof(keybd_report_data)/sizeof(uint32_t)))
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	8b1b      	ldrh	r3, [r3, #24]
 8006442:	2b02      	cmp	r3, #2
 8006444:	d902      	bls.n	800644c <USBH_HID_KeybdInit+0x74>
  {
    HID_Handle->length = (sizeof(keybd_report_data)/sizeof(uint32_t));
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2202      	movs	r2, #2
 800644a:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t*)keybd_report_data;
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4a09      	ldr	r2, [pc, #36]	; (8006474 <USBH_HID_KeybdInit+0x9c>)
 8006450:	615a      	str	r2, [r3, #20]
  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f103 0008 	add.w	r0, r3, #8
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800645e:	2250      	movs	r2, #80	; 0x50
 8006460:	4619      	mov	r1, r3
 8006462:	f7ff fa5c 	bl	800591e <fifo_init>
  
  return USBH_OK;    
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	200001a4 	.word	0x200001a4
 8006474:	2000019c 	.word	0x2000019c

08006478 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  if(USBH_HID_KeybdDecode(phost) == USBH_OK)
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f80d 	bl	80064a0 <USBH_HID_KeybdDecode>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <USBH_HID_GetKeybdInfo+0x18>
 {
  return &keybd_info;
 800648c:	4b03      	ldr	r3, [pc, #12]	; (800649c <USBH_HID_GetKeybdInfo+0x24>)
 800648e:	e000      	b.n	8006492 <USBH_HID_GetKeybdInfo+0x1a>
 }
 else
 {
  return NULL; 
 8006490:	2300      	movs	r3, #0
 }  
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	200001a4 	.word	0x200001a4

080064a0 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 80064a0:	b590      	push	{r4, r7, lr}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint8_t x;
  
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	60bb      	str	r3, [r7, #8]
  if(HID_Handle->length == 0)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	8b1b      	ldrh	r3, [r3, #24]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 80064ba:	2302      	movs	r3, #2
 80064bc:	e065      	b.n	800658a <USBH_HID_KeybdDecode+0xea>
  }
  /*Fill report */
  if(fifo_read(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f103 0008 	add.w	r0, r3, #8
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	8b1b      	ldrh	r3, [r3, #24]
 80064c8:	461a      	mov	r2, r3
 80064ca:	4932      	ldr	r1, [pc, #200]	; (8006594 <USBH_HID_KeybdDecode+0xf4>)
 80064cc:	f7ff fa43 	bl	8005956 <fifo_read>
 80064d0:	4603      	mov	r3, r0
 80064d2:	461a      	mov	r2, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	8b1b      	ldrh	r3, [r3, #24]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d155      	bne.n	8006588 <USBH_HID_KeybdDecode+0xe8>
  {
    
    keybd_info.lctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0);
 80064dc:	2100      	movs	r1, #0
 80064de:	482e      	ldr	r0, [pc, #184]	; (8006598 <USBH_HID_KeybdDecode+0xf8>)
 80064e0:	f000 f8a6 	bl	8006630 <HID_ReadItem>
 80064e4:	4603      	mov	r3, r0
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	4b2c      	ldr	r3, [pc, #176]	; (800659c <USBH_HID_KeybdDecode+0xfc>)
 80064ea:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0);
 80064ec:	2100      	movs	r1, #0
 80064ee:	482c      	ldr	r0, [pc, #176]	; (80065a0 <USBH_HID_KeybdDecode+0x100>)
 80064f0:	f000 f89e 	bl	8006630 <HID_ReadItem>
 80064f4:	4603      	mov	r3, r0
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	4b28      	ldr	r3, [pc, #160]	; (800659c <USBH_HID_KeybdDecode+0xfc>)
 80064fa:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0);
 80064fc:	2100      	movs	r1, #0
 80064fe:	4829      	ldr	r0, [pc, #164]	; (80065a4 <USBH_HID_KeybdDecode+0x104>)
 8006500:	f000 f896 	bl	8006630 <HID_ReadItem>
 8006504:	4603      	mov	r3, r0
 8006506:	b2da      	uxtb	r2, r3
 8006508:	4b24      	ldr	r3, [pc, #144]	; (800659c <USBH_HID_KeybdDecode+0xfc>)
 800650a:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0);
 800650c:	2100      	movs	r1, #0
 800650e:	4826      	ldr	r0, [pc, #152]	; (80065a8 <USBH_HID_KeybdDecode+0x108>)
 8006510:	f000 f88e 	bl	8006630 <HID_ReadItem>
 8006514:	4603      	mov	r3, r0
 8006516:	b2da      	uxtb	r2, r3
 8006518:	4b20      	ldr	r3, [pc, #128]	; (800659c <USBH_HID_KeybdDecode+0xfc>)
 800651a:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0);
 800651c:	2100      	movs	r1, #0
 800651e:	4823      	ldr	r0, [pc, #140]	; (80065ac <USBH_HID_KeybdDecode+0x10c>)
 8006520:	f000 f886 	bl	8006630 <HID_ReadItem>
 8006524:	4603      	mov	r3, r0
 8006526:	b2da      	uxtb	r2, r3
 8006528:	4b1c      	ldr	r3, [pc, #112]	; (800659c <USBH_HID_KeybdDecode+0xfc>)
 800652a:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0);
 800652c:	2100      	movs	r1, #0
 800652e:	4820      	ldr	r0, [pc, #128]	; (80065b0 <USBH_HID_KeybdDecode+0x110>)
 8006530:	f000 f87e 	bl	8006630 <HID_ReadItem>
 8006534:	4603      	mov	r3, r0
 8006536:	b2da      	uxtb	r2, r3
 8006538:	4b18      	ldr	r3, [pc, #96]	; (800659c <USBH_HID_KeybdDecode+0xfc>)
 800653a:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0);
 800653c:	2100      	movs	r1, #0
 800653e:	481d      	ldr	r0, [pc, #116]	; (80065b4 <USBH_HID_KeybdDecode+0x114>)
 8006540:	f000 f876 	bl	8006630 <HID_ReadItem>
 8006544:	4603      	mov	r3, r0
 8006546:	b2da      	uxtb	r2, r3
 8006548:	4b14      	ldr	r3, [pc, #80]	; (800659c <USBH_HID_KeybdDecode+0xfc>)
 800654a:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0);
 800654c:	2100      	movs	r1, #0
 800654e:	481a      	ldr	r0, [pc, #104]	; (80065b8 <USBH_HID_KeybdDecode+0x118>)
 8006550:	f000 f86e 	bl	8006630 <HID_ReadItem>
 8006554:	4603      	mov	r3, r0
 8006556:	b2da      	uxtb	r2, r3
 8006558:	4b10      	ldr	r3, [pc, #64]	; (800659c <USBH_HID_KeybdDecode+0xfc>)
 800655a:	721a      	strb	r2, [r3, #8]
    
    for(x=0; x < sizeof(keybd_info.keys); x++)
 800655c:	2300      	movs	r3, #0
 800655e:	73fb      	strb	r3, [r7, #15]
 8006560:	e00d      	b.n	800657e <USBH_HID_KeybdDecode+0xde>
    {    
      keybd_info.keys[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 8006562:	7bfc      	ldrb	r4, [r7, #15]
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	4619      	mov	r1, r3
 8006568:	4814      	ldr	r0, [pc, #80]	; (80065bc <USBH_HID_KeybdDecode+0x11c>)
 800656a:	f000 f861 	bl	8006630 <HID_ReadItem>
 800656e:	4603      	mov	r3, r0
 8006570:	b2da      	uxtb	r2, r3
 8006572:	4b0a      	ldr	r3, [pc, #40]	; (800659c <USBH_HID_KeybdDecode+0xfc>)
 8006574:	4423      	add	r3, r4
 8006576:	725a      	strb	r2, [r3, #9]
    for(x=0; x < sizeof(keybd_info.keys); x++)
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	3301      	adds	r3, #1
 800657c:	73fb      	strb	r3, [r7, #15]
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	2b05      	cmp	r3, #5
 8006582:	d9ee      	bls.n	8006562 <USBH_HID_KeybdDecode+0xc2>
    }
    
    return USBH_OK; 
 8006584:	2300      	movs	r3, #0
 8006586:	e000      	b.n	800658a <USBH_HID_KeybdDecode+0xea>
  }
  return   USBH_FAIL;  
 8006588:	2302      	movs	r3, #2
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	bd90      	pop	{r4, r7, pc}
 8006592:	bf00      	nop
 8006594:	2000019c 	.word	0x2000019c
 8006598:	08009f7c 	.word	0x08009f7c
 800659c:	200001a4 	.word	0x200001a4
 80065a0:	08009f9c 	.word	0x08009f9c
 80065a4:	08009fbc 	.word	0x08009fbc
 80065a8:	08009fdc 	.word	0x08009fdc
 80065ac:	08009ffc 	.word	0x08009ffc
 80065b0:	0800a01c 	.word	0x0800a01c
 80065b4:	0800a03c 	.word	0x0800a03c
 80065b8:	0800a05c 	.word	0x0800a05c
 80065bc:	0800a07c 	.word	0x0800a07c

080065c0 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	60fb      	str	r3, [r7, #12]

  mouse_info.x=0;
 80065d2:	4b15      	ldr	r3, [pc, #84]	; (8006628 <USBH_HID_MouseInit+0x68>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	701a      	strb	r2, [r3, #0]
  mouse_info.y=0;
 80065d8:	4b13      	ldr	r3, [pc, #76]	; (8006628 <USBH_HID_MouseInit+0x68>)
 80065da:	2200      	movs	r2, #0
 80065dc:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0]=0;
 80065de:	4b12      	ldr	r3, [pc, #72]	; (8006628 <USBH_HID_MouseInit+0x68>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1]=0;
 80065e4:	4b10      	ldr	r3, [pc, #64]	; (8006628 <USBH_HID_MouseInit+0x68>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2]=0;
 80065ea:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <USBH_HID_MouseInit+0x68>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	711a      	strb	r2, [r3, #4]
  
  mouse_report_data[0]=0;
 80065f0:	4b0e      	ldr	r3, [pc, #56]	; (800662c <USBH_HID_MouseInit+0x6c>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
  
  if(HID_Handle->length > sizeof(mouse_report_data))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8b1b      	ldrh	r3, [r3, #24]
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d902      	bls.n	8006604 <USBH_HID_MouseInit+0x44>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2204      	movs	r2, #4
 8006602:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)mouse_report_data;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4a09      	ldr	r2, [pc, #36]	; (800662c <USBH_HID_MouseInit+0x6c>)
 8006608:	615a      	str	r2, [r3, #20]
  fifo_init(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f103 0008 	add.w	r0, r3, #8
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006616:	2228      	movs	r2, #40	; 0x28
 8006618:	4619      	mov	r1, r3
 800661a:	f7ff f980 	bl	800591e <fifo_init>

  return USBH_OK;  
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	200001b4 	.word	0x200001b4
 800662c:	200001bc 	.word	0x200001bc

08006630 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8006630:	b480      	push	{r7}
 8006632:	b089      	sub	sp, #36	; 0x24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	70fb      	strb	r3, [r7, #3]
  uint32_t val=0;
 800663c:	2300      	movs	r3, #0
 800663e:	61fb      	str	r3, [r7, #28]
  uint32_t x=0;
 8006640:	2300      	movs	r3, #0
 8006642:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data=ri->data;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	617b      	str	r3, [r7, #20]
  uint8_t shift=ri->shift;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	7a1b      	ldrb	r3, [r3, #8]
 800664e:	74fb      	strb	r3, [r7, #19]
  
  /* get the logical value of the item */
  
  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	7a5b      	ldrb	r3, [r3, #9]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d01a      	beq.n	800668e <HID_ReadItem+0x5e>
  { 
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	7a5b      	ldrb	r3, [r3, #9]
 800665c:	78fa      	ldrb	r2, [r7, #3]
 800665e:	429a      	cmp	r2, r3
 8006660:	d301      	bcc.n	8006666 <HID_ReadItem+0x36>
    {
      return(0);
 8006662:	2300      	movs	r3, #0
 8006664:	e07a      	b.n	800675c <HID_ReadItem+0x12c>
    }
    
    /* calculate bit offset */
    bofs = ndx*ri->size;
 8006666:	78fb      	ldrb	r3, [r7, #3]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	6852      	ldr	r2, [r2, #4]
 800666c:	fb02 f303 	mul.w	r3, r2, r3
 8006670:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 8006672:	7cfb      	ldrb	r3, [r7, #19]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */    
    data+=bofs/8;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	08db      	lsrs	r3, r3, #3
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4413      	add	r3, r2
 8006682:	617b      	str	r3, [r7, #20]
    shift=(uint8_t)(bofs%8);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for(x=0; x < ((ri->size & 0x7) ? (ri->size/8)+1 : (ri->size/8)); x++)
 800668e:	2300      	movs	r3, #0
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	e00a      	b.n	80066aa <HID_ReadItem+0x7a>
  {
    val=(uint32_t)(*data << (x*8));
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	461a      	mov	r2, r3
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	00db      	lsls	r3, r3, #3
 800669e:	fa02 f303 	lsl.w	r3, r2, r3
 80066a2:	61fb      	str	r3, [r7, #28]
  for(x=0; x < ((ri->size & 0x7) ? (ri->size/8)+1 : (ri->size/8)); x++)
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	3301      	adds	r3, #1
 80066a8:	61bb      	str	r3, [r7, #24]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d004      	beq.n	80066c0 <HID_ReadItem+0x90>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	08db      	lsrs	r3, r3, #3
 80066bc:	3301      	adds	r3, #1
 80066be:	e002      	b.n	80066c6 <HID_ReadItem+0x96>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	08db      	lsrs	r3, r3, #3
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d8e3      	bhi.n	8006694 <HID_ReadItem+0x64>
  }    
  val=(val >> shift) & ((1<<ri->size)-1);
 80066cc:	7cfb      	ldrb	r3, [r7, #19]
 80066ce:	69fa      	ldr	r2, [r7, #28]
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6852      	ldr	r2, [r2, #4]
 80066d8:	2101      	movs	r1, #1
 80066da:	fa01 f202 	lsl.w	r2, r1, r2
 80066de:	3a01      	subs	r2, #1
 80066e0:	4013      	ands	r3, r2
 80066e2:	61fb      	str	r3, [r7, #28]
  
  if (val < ri->logical_min || val > ri->logical_max)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d804      	bhi.n	80066f8 <HID_ReadItem+0xc8>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691a      	ldr	r2, [r3, #16]
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d201      	bcs.n	80066fc <HID_ReadItem+0xcc>
  {
    return(0);
 80066f8:	2300      	movs	r3, #0
 80066fa:	e02f      	b.n	800675c <HID_ReadItem+0x12c>
  }
  
  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1<<(ri->size-1))))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	7a9b      	ldrb	r3, [r3, #10]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d020      	beq.n	8006746 <HID_ReadItem+0x116>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	3b01      	subs	r3, #1
 800670a:	2201      	movs	r2, #1
 800670c:	fa02 f303 	lsl.w	r3, r2, r3
 8006710:	461a      	mov	r2, r3
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	4013      	ands	r3, r2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d015      	beq.n	8006746 <HID_ReadItem+0x116>
  {
    /* yes, so sign extend value to 32 bits. */
    int vs=(int)((-1 & ~((1<<(ri->size))-1)) | val);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	fa02 f303 	lsl.w	r3, r2, r3
 8006724:	425b      	negs	r3, r3
 8006726:	461a      	mov	r2, r3
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	4313      	orrs	r3, r2
 800672c:	60bb      	str	r3, [r7, #8]
    
    if(ri->resolution == 1)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d101      	bne.n	800673a <HID_ReadItem+0x10a>
    {
      return((uint32_t)vs);
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	e010      	b.n	800675c <HID_ReadItem+0x12c>
    }
    return((uint32_t)(vs*ri->resolution));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	fb02 f303 	mul.w	r3, r2, r3
 8006744:	e00a      	b.n	800675c <HID_ReadItem+0x12c>
  }
  else
  {
    if(ri->resolution == 1)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d101      	bne.n	8006752 <HID_ReadItem+0x122>
    {
      return(val);
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	e004      	b.n	800675c <HID_ReadItem+0x12c>
    }
    return(val*ri->resolution);    
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	69fa      	ldr	r2, [r7, #28]
 8006758:	fb02 f303 	mul.w	r3, r2, r3
  }  
}
 800675c:	4618      	mov	r0, r3
 800675e:	3724      	adds	r7, #36	; 0x24
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <DetectButton>:
/** @defgroup USBH_XPAD_CORE_Private_Functions
* @{
*/

uint64_t DetectButton()
{
 8006768:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800676c:	b086      	sub	sp, #24
 800676e:	af00      	add	r7, sp, #0
    uint64_t buttons_and_triggers = buttons;
 8006770:	4b53      	ldr	r3, [pc, #332]	; (80068c0 <DetectButton+0x158>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f04f 0400 	mov.w	r4, #0
 8006778:	e9c7 3404 	strd	r3, r4, [r7, #16]

    if(Lt > TRIGGER_THRESHOLD)
 800677c:	4b51      	ldr	r3, [pc, #324]	; (80068c4 <DetectButton+0x15c>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b05      	cmp	r3, #5
 8006782:	d90f      	bls.n	80067a4 <DetectButton+0x3c>
	{
		buttons_and_triggers |= LT_MASK;
 8006784:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006788:	f04f 0400 	mov.w	r4, #0
 800678c:	4619      	mov	r1, r3
 800678e:	4622      	mov	r2, r4
 8006790:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006794:	ea41 0103 	orr.w	r1, r1, r3
 8006798:	ea42 0204 	orr.w	r2, r2, r4
 800679c:	460b      	mov	r3, r1
 800679e:	4614      	mov	r4, r2
 80067a0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}
	if(Rt > TRIGGER_THRESHOLD)
 80067a4:	4b48      	ldr	r3, [pc, #288]	; (80068c8 <DetectButton+0x160>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b05      	cmp	r3, #5
 80067aa:	d90f      	bls.n	80067cc <DetectButton+0x64>
	{
		buttons_and_triggers |= RT_MASK;
 80067ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067b0:	f04f 0400 	mov.w	r4, #0
 80067b4:	4619      	mov	r1, r3
 80067b6:	4622      	mov	r2, r4
 80067b8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80067bc:	ea41 0103 	orr.w	r1, r1, r3
 80067c0:	ea42 0204 	orr.w	r2, r2, r4
 80067c4:	460b      	mov	r3, r1
 80067c6:	4614      	mov	r4, r2
 80067c8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}

	// bit smearing so all bits to the right of the first 1 are also 1
	buttons_and_triggers |= buttons_and_triggers >> 32;
 80067cc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80067d0:	0023      	movs	r3, r4
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	2300      	movs	r3, #0
 80067d6:	607b      	str	r3, [r7, #4]
 80067d8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80067dc:	e897 0006 	ldmia.w	r7, {r1, r2}
 80067e0:	ea41 0103 	orr.w	r1, r1, r3
 80067e4:	ea42 0204 	orr.w	r2, r2, r4
 80067e8:	460b      	mov	r3, r1
 80067ea:	4614      	mov	r4, r2
 80067ec:	e9c7 3404 	strd	r3, r4, [r7, #16]
	buttons_and_triggers |= buttons_and_triggers >> 16;
 80067f0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80067f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067f8:	ea4a 4a04 	orr.w	sl, sl, r4, lsl #16
 80067fc:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8006800:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006804:	ea43 030a 	orr.w	r3, r3, sl
 8006808:	ea44 040b 	orr.w	r4, r4, fp
 800680c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	buttons_and_triggers |= buttons_and_triggers >> 8;
 8006810:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006814:	ea4f 2813 	mov.w	r8, r3, lsr #8
 8006818:	ea48 6804 	orr.w	r8, r8, r4, lsl #24
 800681c:	ea4f 2914 	mov.w	r9, r4, lsr #8
 8006820:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006824:	ea43 0308 	orr.w	r3, r3, r8
 8006828:	ea44 0409 	orr.w	r4, r4, r9
 800682c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	buttons_and_triggers |= buttons_and_triggers >> 4;
 8006830:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006834:	091d      	lsrs	r5, r3, #4
 8006836:	ea45 7504 	orr.w	r5, r5, r4, lsl #28
 800683a:	0926      	lsrs	r6, r4, #4
 800683c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006840:	ea43 0305 	orr.w	r3, r3, r5
 8006844:	ea44 0406 	orr.w	r4, r4, r6
 8006848:	e9c7 3404 	strd	r3, r4, [r7, #16]
	buttons_and_triggers |= buttons_and_triggers >> 2;
 800684c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006850:	089a      	lsrs	r2, r3, #2
 8006852:	60ba      	str	r2, [r7, #8]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	ea42 7284 	orr.w	r2, r2, r4, lsl #30
 800685a:	60ba      	str	r2, [r7, #8]
 800685c:	08a3      	lsrs	r3, r4, #2
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006864:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006868:	ea41 0103 	orr.w	r1, r1, r3
 800686c:	ea42 0204 	orr.w	r2, r2, r4
 8006870:	460b      	mov	r3, r1
 8006872:	4614      	mov	r4, r2
 8006874:	e9c7 3404 	strd	r3, r4, [r7, #16]
	buttons_and_triggers |= buttons_and_triggers >> 1;
 8006878:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800687c:	0864      	lsrs	r4, r4, #1
 800687e:	ea4f 0333 	mov.w	r3, r3, rrx
 8006882:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006886:	ea43 0301 	orr.w	r3, r3, r1
 800688a:	ea44 0402 	orr.w	r4, r4, r2
 800688e:	e9c7 3404 	strd	r3, r4, [r7, #16]

	// only leave the highest 1 set
	buttons_and_triggers ^= buttons_and_triggers >> 1;
 8006892:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006896:	0864      	lsrs	r4, r4, #1
 8006898:	ea4f 0333 	mov.w	r3, r3, rrx
 800689c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80068a0:	ea83 0301 	eor.w	r3, r3, r1
 80068a4:	ea84 0402 	eor.w	r4, r4, r2
 80068a8:	e9c7 3404 	strd	r3, r4, [r7, #16]

	// now it is the same as the bitmask we want to return
	return buttons_and_triggers;
 80068ac:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	4621      	mov	r1, r4
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	200001c8 	.word	0x200001c8
 80068c4:	20000104 	.word	0x20000104
 80068c8:	20000105 	.word	0x20000105

080068cc <parseMessage>:

void parseMessage(USBH_HandleTypeDef *phost)
{
 80068cc:	b590      	push	{r4, r7, lr}
 80068ce:	b091      	sub	sp, #68	; 0x44
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	XPAD_HandleTypeDef *XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t *data = report;
 80068de:	4b62      	ldr	r3, [pc, #392]	; (8006a68 <parseMessage+0x19c>)
 80068e0:	63fb      	str	r3, [r7, #60]	; 0x3c

    switch (XPAD_Handle->xpad_type) {
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068e8:	3b01      	subs	r3, #1
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	f200 83d0 	bhi.w	8007090 <parseMessage+0x7c4>
 80068f0:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <parseMessage+0x2c>)
 80068f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f6:	bf00      	nop
 80068f8:	08006909 	.word	0x08006909
 80068fc:	080069d3 	.word	0x080069d3
 8006900:	080069d9 	.word	0x080069d9
 8006904:	08006a89 	.word	0x08006a89
    case XPAD_ORIGINAL:
        buttons = ((uint32_t)report[3] << 8) | report[2];
 8006908:	4b57      	ldr	r3, [pc, #348]	; (8006a68 <parseMessage+0x19c>)
 800690a:	78db      	ldrb	r3, [r3, #3]
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	4a56      	ldr	r2, [pc, #344]	; (8006a68 <parseMessage+0x19c>)
 8006910:	7892      	ldrb	r2, [r2, #2]
 8006912:	4313      	orrs	r3, r2
 8006914:	4a55      	ldr	r2, [pc, #340]	; (8006a6c <parseMessage+0x1a0>)
 8006916:	6013      	str	r3, [r2, #0]
        if (report[4]) buttons |= XPAD_PAD_A;
 8006918:	4b53      	ldr	r3, [pc, #332]	; (8006a68 <parseMessage+0x19c>)
 800691a:	791b      	ldrb	r3, [r3, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <parseMessage+0x60>
 8006920:	4b52      	ldr	r3, [pc, #328]	; (8006a6c <parseMessage+0x1a0>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006928:	4a50      	ldr	r2, [pc, #320]	; (8006a6c <parseMessage+0x1a0>)
 800692a:	6013      	str	r3, [r2, #0]
        if (report[5]) buttons |= XPAD_PAD_B;
 800692c:	4b4e      	ldr	r3, [pc, #312]	; (8006a68 <parseMessage+0x19c>)
 800692e:	795b      	ldrb	r3, [r3, #5]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d005      	beq.n	8006940 <parseMessage+0x74>
 8006934:	4b4d      	ldr	r3, [pc, #308]	; (8006a6c <parseMessage+0x1a0>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800693c:	4a4b      	ldr	r2, [pc, #300]	; (8006a6c <parseMessage+0x1a0>)
 800693e:	6013      	str	r3, [r2, #0]
        if (report[6]) buttons |= XPAD_PAD_X;
 8006940:	4b49      	ldr	r3, [pc, #292]	; (8006a68 <parseMessage+0x19c>)
 8006942:	799b      	ldrb	r3, [r3, #6]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d005      	beq.n	8006954 <parseMessage+0x88>
 8006948:	4b48      	ldr	r3, [pc, #288]	; (8006a6c <parseMessage+0x1a0>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006950:	4a46      	ldr	r2, [pc, #280]	; (8006a6c <parseMessage+0x1a0>)
 8006952:	6013      	str	r3, [r2, #0]
        if (report[7]) buttons |= XPAD_PAD_Y;
 8006954:	4b44      	ldr	r3, [pc, #272]	; (8006a68 <parseMessage+0x19c>)
 8006956:	79db      	ldrb	r3, [r3, #7]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <parseMessage+0x9c>
 800695c:	4b43      	ldr	r3, [pc, #268]	; (8006a6c <parseMessage+0x1a0>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006964:	4a41      	ldr	r2, [pc, #260]	; (8006a6c <parseMessage+0x1a0>)
 8006966:	6013      	str	r3, [r2, #0]
        trigger_l = report[10];
 8006968:	4b3f      	ldr	r3, [pc, #252]	; (8006a68 <parseMessage+0x19c>)
 800696a:	7a9a      	ldrb	r2, [r3, #10]
 800696c:	4b40      	ldr	r3, [pc, #256]	; (8006a70 <parseMessage+0x1a4>)
 800696e:	701a      	strb	r2, [r3, #0]
        trigger_r = report[11];
 8006970:	4b3d      	ldr	r3, [pc, #244]	; (8006a68 <parseMessage+0x19c>)
 8006972:	7ada      	ldrb	r2, [r3, #11]
 8006974:	4b3f      	ldr	r3, [pc, #252]	; (8006a74 <parseMessage+0x1a8>)
 8006976:	701a      	strb	r2, [r3, #0]

        stick_lx = ((int16_t)report[13] << 8) | report[12];
 8006978:	4b3b      	ldr	r3, [pc, #236]	; (8006a68 <parseMessage+0x19c>)
 800697a:	7b5b      	ldrb	r3, [r3, #13]
 800697c:	021b      	lsls	r3, r3, #8
 800697e:	b21a      	sxth	r2, r3
 8006980:	4b39      	ldr	r3, [pc, #228]	; (8006a68 <parseMessage+0x19c>)
 8006982:	7b1b      	ldrb	r3, [r3, #12]
 8006984:	b21b      	sxth	r3, r3
 8006986:	4313      	orrs	r3, r2
 8006988:	b21a      	sxth	r2, r3
 800698a:	4b3b      	ldr	r3, [pc, #236]	; (8006a78 <parseMessage+0x1ac>)
 800698c:	801a      	strh	r2, [r3, #0]
        stick_ly = ((int16_t)report[15] << 8) | report[14];
 800698e:	4b36      	ldr	r3, [pc, #216]	; (8006a68 <parseMessage+0x19c>)
 8006990:	7bdb      	ldrb	r3, [r3, #15]
 8006992:	021b      	lsls	r3, r3, #8
 8006994:	b21a      	sxth	r2, r3
 8006996:	4b34      	ldr	r3, [pc, #208]	; (8006a68 <parseMessage+0x19c>)
 8006998:	7b9b      	ldrb	r3, [r3, #14]
 800699a:	b21b      	sxth	r3, r3
 800699c:	4313      	orrs	r3, r2
 800699e:	b21a      	sxth	r2, r3
 80069a0:	4b36      	ldr	r3, [pc, #216]	; (8006a7c <parseMessage+0x1b0>)
 80069a2:	801a      	strh	r2, [r3, #0]
        stick_rx = ((int16_t)report[17] << 8) | report[16];
 80069a4:	4b30      	ldr	r3, [pc, #192]	; (8006a68 <parseMessage+0x19c>)
 80069a6:	7c5b      	ldrb	r3, [r3, #17]
 80069a8:	021b      	lsls	r3, r3, #8
 80069aa:	b21a      	sxth	r2, r3
 80069ac:	4b2e      	ldr	r3, [pc, #184]	; (8006a68 <parseMessage+0x19c>)
 80069ae:	7c1b      	ldrb	r3, [r3, #16]
 80069b0:	b21b      	sxth	r3, r3
 80069b2:	4313      	orrs	r3, r2
 80069b4:	b21a      	sxth	r2, r3
 80069b6:	4b32      	ldr	r3, [pc, #200]	; (8006a80 <parseMessage+0x1b4>)
 80069b8:	801a      	strh	r2, [r3, #0]
        stick_ry = ((int16_t)report[19] << 8) | report[18];
 80069ba:	4b2b      	ldr	r3, [pc, #172]	; (8006a68 <parseMessage+0x19c>)
 80069bc:	7cdb      	ldrb	r3, [r3, #19]
 80069be:	021b      	lsls	r3, r3, #8
 80069c0:	b21a      	sxth	r2, r3
 80069c2:	4b29      	ldr	r3, [pc, #164]	; (8006a68 <parseMessage+0x19c>)
 80069c4:	7c9b      	ldrb	r3, [r3, #18]
 80069c6:	b21b      	sxth	r3, r3
 80069c8:	4313      	orrs	r3, r2
 80069ca:	b21a      	sxth	r2, r3
 80069cc:	4b2d      	ldr	r3, [pc, #180]	; (8006a84 <parseMessage+0x1b8>)
 80069ce:	801a      	strh	r2, [r3, #0]
        break;
 80069d0:	e0d3      	b.n	8006b7a <parseMessage+0x2ae>
    case XPAD_360_WIRELESS:
        data += 4;
 80069d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d4:	3304      	adds	r3, #4
 80069d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    case XPAD_360_WIRED:
        buttons = ((uint32_t)data[3] << 8) | data[2];
 80069d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069da:	3303      	adds	r3, #3
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	021b      	lsls	r3, r3, #8
 80069e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069e2:	3202      	adds	r2, #2
 80069e4:	7812      	ldrb	r2, [r2, #0]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	4a20      	ldr	r2, [pc, #128]	; (8006a6c <parseMessage+0x1a0>)
 80069ea:	6013      	str	r3, [r2, #0]
        trigger_l = data[4];
 80069ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ee:	791a      	ldrb	r2, [r3, #4]
 80069f0:	4b1f      	ldr	r3, [pc, #124]	; (8006a70 <parseMessage+0x1a4>)
 80069f2:	701a      	strb	r2, [r3, #0]
        trigger_r = data[5];
 80069f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f6:	795a      	ldrb	r2, [r3, #5]
 80069f8:	4b1e      	ldr	r3, [pc, #120]	; (8006a74 <parseMessage+0x1a8>)
 80069fa:	701a      	strb	r2, [r3, #0]

        stick_lx = ((int16_t)data[7] << 8) | data[6];
 80069fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fe:	3307      	adds	r3, #7
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	b21a      	sxth	r2, r3
 8006a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a08:	3306      	adds	r3, #6
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	b21b      	sxth	r3, r3
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	b21a      	sxth	r2, r3
 8006a12:	4b19      	ldr	r3, [pc, #100]	; (8006a78 <parseMessage+0x1ac>)
 8006a14:	801a      	strh	r2, [r3, #0]
        stick_ly = ((int16_t)data[9] << 8) | data[8];
 8006a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a18:	3309      	adds	r3, #9
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	021b      	lsls	r3, r3, #8
 8006a1e:	b21a      	sxth	r2, r3
 8006a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a22:	3308      	adds	r3, #8
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	b21b      	sxth	r3, r3
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	b21a      	sxth	r2, r3
 8006a2c:	4b13      	ldr	r3, [pc, #76]	; (8006a7c <parseMessage+0x1b0>)
 8006a2e:	801a      	strh	r2, [r3, #0]
        stick_rx = ((int16_t)data[11] << 8) | data[10];
 8006a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a32:	330b      	adds	r3, #11
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	021b      	lsls	r3, r3, #8
 8006a38:	b21a      	sxth	r2, r3
 8006a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3c:	330a      	adds	r3, #10
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	b21b      	sxth	r3, r3
 8006a42:	4313      	orrs	r3, r2
 8006a44:	b21a      	sxth	r2, r3
 8006a46:	4b0e      	ldr	r3, [pc, #56]	; (8006a80 <parseMessage+0x1b4>)
 8006a48:	801a      	strh	r2, [r3, #0]
        stick_ry = ((int16_t)data[13] << 8) | data[12];
 8006a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a4c:	330d      	adds	r3, #13
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	021b      	lsls	r3, r3, #8
 8006a52:	b21a      	sxth	r2, r3
 8006a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a56:	330c      	adds	r3, #12
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	b21b      	sxth	r3, r3
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	b21a      	sxth	r2, r3
 8006a60:	4b08      	ldr	r3, [pc, #32]	; (8006a84 <parseMessage+0x1b8>)
 8006a62:	801a      	strh	r2, [r3, #0]
        break;
 8006a64:	e089      	b.n	8006b7a <parseMessage+0x2ae>
 8006a66:	bf00      	nop
 8006a68:	200001d0 	.word	0x200001d0
 8006a6c:	200001c8 	.word	0x200001c8
 8006a70:	200001c2 	.word	0x200001c2
 8006a74:	200001cc 	.word	0x200001cc
 8006a78:	200001c6 	.word	0x200001c6
 8006a7c:	200001c0 	.word	0x200001c0
 8006a80:	200001f0 	.word	0x200001f0
 8006a84:	200001c4 	.word	0x200001c4
    case XPAD_XBONE:
        buttons = 0;
 8006a88:	4bb0      	ldr	r3, [pc, #704]	; (8006d4c <parseMessage+0x480>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]
        buttons = (report[4] & 0x0C) << 2; // correctly place start and back
 8006a8e:	4bb0      	ldr	r3, [pc, #704]	; (8006d50 <parseMessage+0x484>)
 8006a90:	791b      	ldrb	r3, [r3, #4]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a98:	4aac      	ldr	r2, [pc, #688]	; (8006d4c <parseMessage+0x480>)
 8006a9a:	6013      	str	r3, [r2, #0]
        buttons |= (report[4] & 0xF0) << 8; // correctly place AXYB
 8006a9c:	4bac      	ldr	r3, [pc, #688]	; (8006d50 <parseMessage+0x484>)
 8006a9e:	791b      	ldrb	r3, [r3, #4]
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8006aa6:	4ba9      	ldr	r3, [pc, #676]	; (8006d4c <parseMessage+0x480>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	4aa7      	ldr	r2, [pc, #668]	; (8006d4c <parseMessage+0x480>)
 8006aae:	6013      	str	r3, [r2, #0]
        buttons |= report[5] & 0x0F; // correctly place DPad
 8006ab0:	4ba7      	ldr	r3, [pc, #668]	; (8006d50 <parseMessage+0x484>)
 8006ab2:	795b      	ldrb	r3, [r3, #5]
 8006ab4:	f003 020f 	and.w	r2, r3, #15
 8006ab8:	4ba4      	ldr	r3, [pc, #656]	; (8006d4c <parseMessage+0x480>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	4aa3      	ldr	r2, [pc, #652]	; (8006d4c <parseMessage+0x480>)
 8006ac0:	6013      	str	r3, [r2, #0]
        buttons |= (report[5] & 0x30) << 4; // correctly place bumpers
 8006ac2:	4ba3      	ldr	r3, [pc, #652]	; (8006d50 <parseMessage+0x484>)
 8006ac4:	795b      	ldrb	r3, [r3, #5]
 8006ac6:	011b      	lsls	r3, r3, #4
 8006ac8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006acc:	4b9f      	ldr	r3, [pc, #636]	; (8006d4c <parseMessage+0x480>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	4a9e      	ldr	r2, [pc, #632]	; (8006d4c <parseMessage+0x480>)
 8006ad4:	6013      	str	r3, [r2, #0]
        buttons |= (report[5] & 0xC0); // correctly analog stick buttons
 8006ad6:	4b9e      	ldr	r3, [pc, #632]	; (8006d50 <parseMessage+0x484>)
 8006ad8:	795b      	ldrb	r3, [r3, #5]
 8006ada:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8006ade:	4b9b      	ldr	r3, [pc, #620]	; (8006d4c <parseMessage+0x480>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	4a99      	ldr	r2, [pc, #612]	; (8006d4c <parseMessage+0x480>)
 8006ae6:	6013      	str	r3, [r2, #0]


        trigger_l = (((uint32_t)report[7] << 8) | report[6]) >> 2; // max is 1024 instead of 256, so >> 2 to divide by 4
 8006ae8:	4b99      	ldr	r3, [pc, #612]	; (8006d50 <parseMessage+0x484>)
 8006aea:	79db      	ldrb	r3, [r3, #7]
 8006aec:	021b      	lsls	r3, r3, #8
 8006aee:	4a98      	ldr	r2, [pc, #608]	; (8006d50 <parseMessage+0x484>)
 8006af0:	7992      	ldrb	r2, [r2, #6]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	089b      	lsrs	r3, r3, #2
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	4b96      	ldr	r3, [pc, #600]	; (8006d54 <parseMessage+0x488>)
 8006afa:	701a      	strb	r2, [r3, #0]
		trigger_r = (((uint32_t)report[9] << 8) | report[8]) >> 2; // max is 1024 instead of 256, so >> 2 to divide by 4
 8006afc:	4b94      	ldr	r3, [pc, #592]	; (8006d50 <parseMessage+0x484>)
 8006afe:	7a5b      	ldrb	r3, [r3, #9]
 8006b00:	021b      	lsls	r3, r3, #8
 8006b02:	4a93      	ldr	r2, [pc, #588]	; (8006d50 <parseMessage+0x484>)
 8006b04:	7a12      	ldrb	r2, [r2, #8]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	089b      	lsrs	r3, r3, #2
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	4b92      	ldr	r3, [pc, #584]	; (8006d58 <parseMessage+0x48c>)
 8006b0e:	701a      	strb	r2, [r3, #0]

        stick_lx = ((int16_t)data[11] << 8) | data[10];
 8006b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b12:	330b      	adds	r3, #11
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	021b      	lsls	r3, r3, #8
 8006b18:	b21a      	sxth	r2, r3
 8006b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b1c:	330a      	adds	r3, #10
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	b21b      	sxth	r3, r3
 8006b22:	4313      	orrs	r3, r2
 8006b24:	b21a      	sxth	r2, r3
 8006b26:	4b8d      	ldr	r3, [pc, #564]	; (8006d5c <parseMessage+0x490>)
 8006b28:	801a      	strh	r2, [r3, #0]
        stick_ly = ((int16_t)data[13] << 8) | data[12];
 8006b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2c:	330d      	adds	r3, #13
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	021b      	lsls	r3, r3, #8
 8006b32:	b21a      	sxth	r2, r3
 8006b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b36:	330c      	adds	r3, #12
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	b21b      	sxth	r3, r3
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	b21a      	sxth	r2, r3
 8006b40:	4b87      	ldr	r3, [pc, #540]	; (8006d60 <parseMessage+0x494>)
 8006b42:	801a      	strh	r2, [r3, #0]
        stick_rx = ((int16_t)data[15] << 8) | data[14];
 8006b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b46:	330f      	adds	r3, #15
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	021b      	lsls	r3, r3, #8
 8006b4c:	b21a      	sxth	r2, r3
 8006b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b50:	330e      	adds	r3, #14
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	b21b      	sxth	r3, r3
 8006b56:	4313      	orrs	r3, r2
 8006b58:	b21a      	sxth	r2, r3
 8006b5a:	4b82      	ldr	r3, [pc, #520]	; (8006d64 <parseMessage+0x498>)
 8006b5c:	801a      	strh	r2, [r3, #0]
        stick_ry = ((int16_t)data[17] << 8) | data[16];
 8006b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b60:	3311      	adds	r3, #17
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	b21a      	sxth	r2, r3
 8006b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b6a:	3310      	adds	r3, #16
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	b21b      	sxth	r3, r3
 8006b70:	4313      	orrs	r3, r2
 8006b72:	b21a      	sxth	r2, r3
 8006b74:	4b7c      	ldr	r3, [pc, #496]	; (8006d68 <parseMessage+0x49c>)
 8006b76:	801a      	strh	r2, [r3, #0]

        break;
 8006b78:	bf00      	nop
    default:
        return;
    }

    // normalize the trigger values to be 10 max
    Lt=trigger_l*tN;
 8006b7a:	4b76      	ldr	r3, [pc, #472]	; (8006d54 <parseMessage+0x488>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	ee07 3a90 	vmov	s15, r3
 8006b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b86:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8006d6c <parseMessage+0x4a0>
 8006b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b92:	edc7 7a00 	vstr	s15, [r7]
 8006b96:	783b      	ldrb	r3, [r7, #0]
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	4b75      	ldr	r3, [pc, #468]	; (8006d70 <parseMessage+0x4a4>)
 8006b9c:	701a      	strb	r2, [r3, #0]
    Rt=trigger_r*tN;
 8006b9e:	4b6e      	ldr	r3, [pc, #440]	; (8006d58 <parseMessage+0x48c>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006baa:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8006d6c <parseMessage+0x4a0>
 8006bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bb6:	edc7 7a00 	vstr	s15, [r7]
 8006bba:	783b      	ldrb	r3, [r7, #0]
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	4b6d      	ldr	r3, [pc, #436]	; (8006d74 <parseMessage+0x4a8>)
 8006bc0:	701a      	strb	r2, [r3, #0]

    if(state == NORMAL) //used to check state variable for changing controls
 8006bc2:	4b6d      	ldr	r3, [pc, #436]	; (8006d78 <parseMessage+0x4ac>)
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f040 8248 	bne.w	800705c <parseMessage+0x790>
    {
    	N64ControllerData new_data;
    	memset(&new_data,0,4); // clear controller state
 8006bcc:	f107 030c 	add.w	r3, r7, #12
 8006bd0:	2204      	movs	r2, #4
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f003 f8c6 	bl	8009d66 <memset>

    	uint64_t buttons_and_triggers = buttons;
 8006bda:	4b5c      	ldr	r3, [pc, #368]	; (8006d4c <parseMessage+0x480>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f04f 0400 	mov.w	r4, #0
 8006be2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    	if(Lt > TRIGGER_THRESHOLD)
 8006be6:	4b62      	ldr	r3, [pc, #392]	; (8006d70 <parseMessage+0x4a4>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b05      	cmp	r3, #5
 8006bec:	d90b      	bls.n	8006c06 <parseMessage+0x33a>
    	{
    		buttons_and_triggers |= LT_MASK;
 8006bee:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006bf2:	f04f 0200 	mov.w	r2, #0
 8006bf6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8006bfa:	ea43 0301 	orr.w	r3, r3, r1
 8006bfe:	ea44 0402 	orr.w	r4, r4, r2
 8006c02:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    	}
    	if(Rt > TRIGGER_THRESHOLD)
 8006c06:	4b5b      	ldr	r3, [pc, #364]	; (8006d74 <parseMessage+0x4a8>)
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	2b05      	cmp	r3, #5
 8006c0c:	d90b      	bls.n	8006c26 <parseMessage+0x35a>
    	{
    		buttons_and_triggers |= RT_MASK;
 8006c0e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8006c12:	f04f 0200 	mov.w	r2, #0
 8006c16:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8006c1a:	ea43 0301 	orr.w	r3, r3, r1
 8006c1e:	ea44 0402 	orr.w	r4, r4, r2
 8006c22:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    	}

    	if(buttons_and_triggers & controls.XpadControls.up)
 8006c26:	4a55      	ldr	r2, [pc, #340]	; (8006d7c <parseMessage+0x4b0>)
 8006c28:	6a13      	ldr	r3, [r2, #32]
 8006c2a:	6a54      	ldr	r4, [r2, #36]	; 0x24
 8006c2c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006c30:	ea03 0301 	and.w	r3, r3, r1
 8006c34:	ea04 0402 	and.w	r4, r4, r2
 8006c38:	4323      	orrs	r3, r4
 8006c3a:	d003      	beq.n	8006c44 <parseMessage+0x378>
		{
    		new_data.up = 1;
 8006c3c:	7b3b      	ldrb	r3, [r7, #12]
 8006c3e:	f043 0310 	orr.w	r3, r3, #16
 8006c42:	733b      	strb	r3, [r7, #12]
		}
		if(buttons_and_triggers & controls.XpadControls.down)
 8006c44:	4a4d      	ldr	r2, [pc, #308]	; (8006d7c <parseMessage+0x4b0>)
 8006c46:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006c48:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8006c4a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006c4e:	ea03 0301 	and.w	r3, r3, r1
 8006c52:	ea04 0402 	and.w	r4, r4, r2
 8006c56:	4323      	orrs	r3, r4
 8006c58:	d003      	beq.n	8006c62 <parseMessage+0x396>
		{
			new_data.down = 1;
 8006c5a:	7b3b      	ldrb	r3, [r7, #12]
 8006c5c:	f043 0320 	orr.w	r3, r3, #32
 8006c60:	733b      	strb	r3, [r7, #12]
		}
		if(buttons_and_triggers & controls.XpadControls.left)
 8006c62:	4a46      	ldr	r2, [pc, #280]	; (8006d7c <parseMessage+0x4b0>)
 8006c64:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006c66:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8006c68:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006c6c:	ea03 0301 	and.w	r3, r3, r1
 8006c70:	ea04 0402 	and.w	r4, r4, r2
 8006c74:	4323      	orrs	r3, r4
 8006c76:	d003      	beq.n	8006c80 <parseMessage+0x3b4>
		{
			new_data.left = 1;
 8006c78:	7b3b      	ldrb	r3, [r7, #12]
 8006c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c7e:	733b      	strb	r3, [r7, #12]
		}
		if(buttons_and_triggers & controls.XpadControls.right)
 8006c80:	4a3e      	ldr	r2, [pc, #248]	; (8006d7c <parseMessage+0x4b0>)
 8006c82:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006c84:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8006c86:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006c8a:	ea03 0301 	and.w	r3, r3, r1
 8006c8e:	ea04 0402 	and.w	r4, r4, r2
 8006c92:	4323      	orrs	r3, r4
 8006c94:	d003      	beq.n	8006c9e <parseMessage+0x3d2>
		{
			new_data.right = 1;
 8006c96:	7b3b      	ldrb	r3, [r7, #12]
 8006c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c9c:	733b      	strb	r3, [r7, #12]
		}
		if(buttons_and_triggers & controls.XpadControls.c_up)
 8006c9e:	4a37      	ldr	r2, [pc, #220]	; (8006d7c <parseMessage+0x4b0>)
 8006ca0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006ca2:	6d54      	ldr	r4, [r2, #84]	; 0x54
 8006ca4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006ca8:	ea03 0301 	and.w	r3, r3, r1
 8006cac:	ea04 0402 	and.w	r4, r4, r2
 8006cb0:	4323      	orrs	r3, r4
 8006cb2:	d003      	beq.n	8006cbc <parseMessage+0x3f0>
		{
			new_data.c_up = 1;
 8006cb4:	7b7b      	ldrb	r3, [r7, #13]
 8006cb6:	f043 0310 	orr.w	r3, r3, #16
 8006cba:	737b      	strb	r3, [r7, #13]
		}
		if(buttons_and_triggers & controls.XpadControls.c_down)
 8006cbc:	4a2f      	ldr	r2, [pc, #188]	; (8006d7c <parseMessage+0x4b0>)
 8006cbe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006cc0:	6dd4      	ldr	r4, [r2, #92]	; 0x5c
 8006cc2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006cc6:	ea03 0301 	and.w	r3, r3, r1
 8006cca:	ea04 0402 	and.w	r4, r4, r2
 8006cce:	4323      	orrs	r3, r4
 8006cd0:	d003      	beq.n	8006cda <parseMessage+0x40e>
		{
			new_data.c_down = 1;
 8006cd2:	7b7b      	ldrb	r3, [r7, #13]
 8006cd4:	f043 0320 	orr.w	r3, r3, #32
 8006cd8:	737b      	strb	r3, [r7, #13]
		}
		if(buttons_and_triggers & controls.XpadControls.c_left)
 8006cda:	4a28      	ldr	r2, [pc, #160]	; (8006d7c <parseMessage+0x4b0>)
 8006cdc:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8006cde:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8006ce0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006ce4:	ea03 0301 	and.w	r3, r3, r1
 8006ce8:	ea04 0402 	and.w	r4, r4, r2
 8006cec:	4323      	orrs	r3, r4
 8006cee:	d003      	beq.n	8006cf8 <parseMessage+0x42c>
		{
			new_data.c_left = 1;
 8006cf0:	7b7b      	ldrb	r3, [r7, #13]
 8006cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cf6:	737b      	strb	r3, [r7, #13]
		}
		if(buttons_and_triggers & controls.XpadControls.c_right)
 8006cf8:	4a20      	ldr	r2, [pc, #128]	; (8006d7c <parseMessage+0x4b0>)
 8006cfa:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8006cfc:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 8006cfe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006d02:	ea03 0301 	and.w	r3, r3, r1
 8006d06:	ea04 0402 	and.w	r4, r4, r2
 8006d0a:	4323      	orrs	r3, r4
 8006d0c:	d003      	beq.n	8006d16 <parseMessage+0x44a>
		{
			new_data.c_right = 1;
 8006d0e:	7b7b      	ldrb	r3, [r7, #13]
 8006d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d14:	737b      	strb	r3, [r7, #13]
		}
		if(buttons_and_triggers & controls.XpadControls.l)
 8006d16:	4a19      	ldr	r2, [pc, #100]	; (8006d7c <parseMessage+0x4b0>)
 8006d18:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006d1a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8006d1c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006d20:	ea03 0301 	and.w	r3, r3, r1
 8006d24:	ea04 0402 	and.w	r4, r4, r2
 8006d28:	4323      	orrs	r3, r4
 8006d2a:	d003      	beq.n	8006d34 <parseMessage+0x468>
		{
			new_data.l = 1;
 8006d2c:	7b7b      	ldrb	r3, [r7, #13]
 8006d2e:	f043 0304 	orr.w	r3, r3, #4
 8006d32:	737b      	strb	r3, [r7, #13]
		}
		if(buttons_and_triggers & controls.XpadControls.r)
 8006d34:	4a11      	ldr	r2, [pc, #68]	; (8006d7c <parseMessage+0x4b0>)
 8006d36:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8006d38:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
 8006d3a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006d3e:	ea03 0301 	and.w	r3, r3, r1
 8006d42:	ea04 0402 	and.w	r4, r4, r2
 8006d46:	4323      	orrs	r3, r4
 8006d48:	e01a      	b.n	8006d80 <parseMessage+0x4b4>
 8006d4a:	bf00      	nop
 8006d4c:	200001c8 	.word	0x200001c8
 8006d50:	200001d0 	.word	0x200001d0
 8006d54:	200001c2 	.word	0x200001c2
 8006d58:	200001cc 	.word	0x200001cc
 8006d5c:	200001c6 	.word	0x200001c6
 8006d60:	200001c0 	.word	0x200001c0
 8006d64:	200001f0 	.word	0x200001f0
 8006d68:	200001c4 	.word	0x200001c4
 8006d6c:	3d20a0a1 	.word	0x3d20a0a1
 8006d70:	20000104 	.word	0x20000104
 8006d74:	20000105 	.word	0x20000105
 8006d78:	20000108 	.word	0x20000108
 8006d7c:	200001f4 	.word	0x200001f4
 8006d80:	d003      	beq.n	8006d8a <parseMessage+0x4be>
		{
			new_data.r = 1;
 8006d82:	7b7b      	ldrb	r3, [r7, #13]
 8006d84:	f043 0308 	orr.w	r3, r3, #8
 8006d88:	737b      	strb	r3, [r7, #13]
		}
		if(buttons_and_triggers & controls.XpadControls.z)
 8006d8a:	4ac3      	ldr	r2, [pc, #780]	; (8007098 <parseMessage+0x7cc>)
 8006d8c:	6913      	ldr	r3, [r2, #16]
 8006d8e:	6954      	ldr	r4, [r2, #20]
 8006d90:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006d94:	ea03 0301 	and.w	r3, r3, r1
 8006d98:	ea04 0402 	and.w	r4, r4, r2
 8006d9c:	4323      	orrs	r3, r4
 8006d9e:	d003      	beq.n	8006da8 <parseMessage+0x4dc>
		{
			new_data.z = 1;
 8006da0:	7b3b      	ldrb	r3, [r7, #12]
 8006da2:	f043 0304 	orr.w	r3, r3, #4
 8006da6:	733b      	strb	r3, [r7, #12]
		}
		if(buttons_and_triggers & controls.XpadControls.a)
 8006da8:	4abb      	ldr	r2, [pc, #748]	; (8007098 <parseMessage+0x7cc>)
 8006daa:	6813      	ldr	r3, [r2, #0]
 8006dac:	6854      	ldr	r4, [r2, #4]
 8006dae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006db2:	ea03 0301 	and.w	r3, r3, r1
 8006db6:	ea04 0402 	and.w	r4, r4, r2
 8006dba:	4323      	orrs	r3, r4
 8006dbc:	d004      	beq.n	8006dc8 <parseMessage+0x4fc>
		{
			new_data.a = 1;
 8006dbe:	7b3b      	ldrb	r3, [r7, #12]
 8006dc0:	f043 0301 	orr.w	r3, r3, #1
 8006dc4:	733b      	strb	r3, [r7, #12]
 8006dc6:	e003      	b.n	8006dd0 <parseMessage+0x504>
			//TODO: TEMPORARY BREAKPOINT WHILE *NOT* HOLDING A.
			// 		Hold A on the controller and TO SEE IF/WHY IT WOULD MAKE IT HERE.
			// 		THIS else clause CAN BE REMOVED AFTER.
			//TODO: Also consider limiting polling rate IF NEED BE... thats the only big
			//		difference between this version and the previous version
			new_data.a = 0;
 8006dc8:	7b3b      	ldrb	r3, [r7, #12]
 8006dca:	f36f 0300 	bfc	r3, #0, #1
 8006dce:	733b      	strb	r3, [r7, #12]
		}
		if(buttons_and_triggers & controls.XpadControls.b)
 8006dd0:	4ab1      	ldr	r2, [pc, #708]	; (8007098 <parseMessage+0x7cc>)
 8006dd2:	6893      	ldr	r3, [r2, #8]
 8006dd4:	68d4      	ldr	r4, [r2, #12]
 8006dd6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006dda:	ea03 0301 	and.w	r3, r3, r1
 8006dde:	ea04 0402 	and.w	r4, r4, r2
 8006de2:	4323      	orrs	r3, r4
 8006de4:	d003      	beq.n	8006dee <parseMessage+0x522>
		{
			new_data.b = 1;
 8006de6:	7b3b      	ldrb	r3, [r7, #12]
 8006de8:	f043 0302 	orr.w	r3, r3, #2
 8006dec:	733b      	strb	r3, [r7, #12]
		}
		if(buttons_and_triggers & controls.XpadControls.start)
 8006dee:	4aaa      	ldr	r2, [pc, #680]	; (8007098 <parseMessage+0x7cc>)
 8006df0:	6993      	ldr	r3, [r2, #24]
 8006df2:	69d4      	ldr	r4, [r2, #28]
 8006df4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006df8:	ea03 0301 	and.w	r3, r3, r1
 8006dfc:	ea04 0402 	and.w	r4, r4, r2
 8006e00:	4323      	orrs	r3, r4
 8006e02:	d003      	beq.n	8006e0c <parseMessage+0x540>
		{
			new_data.start = 1;
 8006e04:	7b3b      	ldrb	r3, [r7, #12]
 8006e06:	f043 0308 	orr.w	r3, r3, #8
 8006e0a:	733b      	strb	r3, [r7, #12]
		}

    	// ----- begin nrage replication analog code -----
		const float N64_MAX = (sensitivity > 0) ? 127*(sensitivity/100.0f) : 0;
 8006e0c:	4ba3      	ldr	r3, [pc, #652]	; (800709c <parseMessage+0x7d0>)
 8006e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    	float deadzoneValue = (dead_zone/100.0f) * XPAD_MAX;
 8006e10:	4ba3      	ldr	r3, [pc, #652]	; (80070a0 <parseMessage+0x7d4>)
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
    	float deadzoneRelation = XPAD_MAX / (XPAD_MAX - deadzoneValue);
 8006e14:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80070a4 <parseMessage+0x7d8>
 8006e18:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006e1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e20:	eddf 6aa0 	vldr	s13, [pc, #640]	; 80070a4 <parseMessage+0x7d8>
 8006e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e28:	edc7 7a08 	vstr	s15, [r7, #32]

    	LSX = LSY = 0; // -128 to +127...
 8006e2c:	4b9e      	ldr	r3, [pc, #632]	; (80070a8 <parseMessage+0x7dc>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	4b9d      	ldr	r3, [pc, #628]	; (80070a8 <parseMessage+0x7dc>)
 8006e34:	781a      	ldrb	r2, [r3, #0]
 8006e36:	4b9d      	ldr	r3, [pc, #628]	; (80070ac <parseMessage+0x7e0>)
 8006e38:	701a      	strb	r2, [r3, #0]
    	float unscaled_result = 0;
 8006e3a:	f04f 0300 	mov.w	r3, #0
 8006e3e:	61fb      	str	r3, [r7, #28]

    	if(stick_lx >= deadzoneValue) // positive = right
 8006e40:	4b9b      	ldr	r3, [pc, #620]	; (80070b0 <parseMessage+0x7e4>)
 8006e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006e52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e5a:	db23      	blt.n	8006ea4 <parseMessage+0x5d8>
    	{
    		unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 8006e5c:	4b94      	ldr	r3, [pc, #592]	; (80070b0 <parseMessage+0x7e4>)
 8006e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e6a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006e6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e72:	edd7 7a08 	vldr	s15, [r7, #32]
 8006e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e7a:	edc7 7a07 	vstr	s15, [r7, #28]
    		LSX = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8006e7e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006e82:	eddf 6a88 	vldr	s13, [pc, #544]	; 80070a4 <parseMessage+0x7d8>
 8006e86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006e8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8006e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e96:	edc7 7a00 	vstr	s15, [r7]
 8006e9a:	783b      	ldrb	r3, [r7, #0]
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	4b83      	ldr	r3, [pc, #524]	; (80070ac <parseMessage+0x7e0>)
 8006ea0:	701a      	strb	r2, [r3, #0]
 8006ea2:	e04a      	b.n	8006f3a <parseMessage+0x66e>
    	}
    	else if(stick_lx <= (-deadzoneValue)) // negative = left
 8006ea4:	4b82      	ldr	r3, [pc, #520]	; (80070b0 <parseMessage+0x7e4>)
 8006ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006eb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006eb6:	eef1 7a67 	vneg.f32	s15, s15
 8006eba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec2:	d83a      	bhi.n	8006f3a <parseMessage+0x66e>
    	{
    		stick_lx++; // just in case it's -32768 it cannot be negated. otherwise the 1 is negligible.
 8006ec4:	4b7a      	ldr	r3, [pc, #488]	; (80070b0 <parseMessage+0x7e4>)
 8006ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3301      	adds	r3, #1
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	b21a      	sxth	r2, r3
 8006ed2:	4b77      	ldr	r3, [pc, #476]	; (80070b0 <parseMessage+0x7e4>)
 8006ed4:	801a      	strh	r2, [r3, #0]
    		stick_lx = -stick_lx; // compute as positive, then negate at the end
 8006ed6:	4b76      	ldr	r3, [pc, #472]	; (80070b0 <parseMessage+0x7e4>)
 8006ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	425b      	negs	r3, r3
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	b21a      	sxth	r2, r3
 8006ee4:	4b72      	ldr	r3, [pc, #456]	; (80070b0 <parseMessage+0x7e4>)
 8006ee6:	801a      	strh	r2, [r3, #0]
    		unscaled_result = (stick_lx - deadzoneValue) * deadzoneRelation;
 8006ee8:	4b71      	ldr	r3, [pc, #452]	; (80070b0 <parseMessage+0x7e4>)
 8006eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ef6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006efa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006efe:	edd7 7a08 	vldr	s15, [r7, #32]
 8006f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f06:	edc7 7a07 	vstr	s15, [r7, #28]
    		LSX = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8006f0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006f0e:	eddf 6a65 	vldr	s13, [pc, #404]	; 80070a4 <parseMessage+0x7d8>
 8006f12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006f16:	edd7 7a07 	vldr	s15, [r7, #28]
 8006f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f22:	edc7 7a00 	vstr	s15, [r7]
 8006f26:	783b      	ldrb	r3, [r7, #0]
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	4b60      	ldr	r3, [pc, #384]	; (80070ac <parseMessage+0x7e0>)
 8006f2c:	701a      	strb	r2, [r3, #0]
    		LSX = -LSX;
 8006f2e:	4b5f      	ldr	r3, [pc, #380]	; (80070ac <parseMessage+0x7e0>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	425b      	negs	r3, r3
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	4b5d      	ldr	r3, [pc, #372]	; (80070ac <parseMessage+0x7e0>)
 8006f38:	701a      	strb	r2, [r3, #0]
    	}

    	if(stick_ly >= deadzoneValue) // positive = up
 8006f3a:	4b5e      	ldr	r3, [pc, #376]	; (80070b4 <parseMessage+0x7e8>)
 8006f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f40:	ee07 3a90 	vmov	s15, r3
 8006f44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f48:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006f4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f54:	db23      	blt.n	8006f9e <parseMessage+0x6d2>
    	{
    		unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 8006f56:	4b57      	ldr	r3, [pc, #348]	; (80070b4 <parseMessage+0x7e8>)
 8006f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f5c:	ee07 3a90 	vmov	s15, r3
 8006f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f64:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006f68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f6c:	edd7 7a08 	vldr	s15, [r7, #32]
 8006f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f74:	edc7 7a07 	vstr	s15, [r7, #28]
    		LSY = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8006f78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006f7c:	eddf 6a49 	vldr	s13, [pc, #292]	; 80070a4 <parseMessage+0x7d8>
 8006f80:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006f84:	edd7 7a07 	vldr	s15, [r7, #28]
 8006f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f90:	edc7 7a00 	vstr	s15, [r7]
 8006f94:	783b      	ldrb	r3, [r7, #0]
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	4b43      	ldr	r3, [pc, #268]	; (80070a8 <parseMessage+0x7dc>)
 8006f9a:	701a      	strb	r2, [r3, #0]
 8006f9c:	e04a      	b.n	8007034 <parseMessage+0x768>
    	}
    	else if(stick_ly <= (-deadzoneValue)) // negative = down
 8006f9e:	4b45      	ldr	r3, [pc, #276]	; (80070b4 <parseMessage+0x7e8>)
 8006fa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fa4:	ee07 3a90 	vmov	s15, r3
 8006fa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006fb0:	eef1 7a67 	vneg.f32	s15, s15
 8006fb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fbc:	d83a      	bhi.n	8007034 <parseMessage+0x768>
    	{
    		stick_ly++; // just in case it's -32768 it cannot be negated. otherwise the 1 is negligible.
 8006fbe:	4b3d      	ldr	r3, [pc, #244]	; (80070b4 <parseMessage+0x7e8>)
 8006fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	b21a      	sxth	r2, r3
 8006fcc:	4b39      	ldr	r3, [pc, #228]	; (80070b4 <parseMessage+0x7e8>)
 8006fce:	801a      	strh	r2, [r3, #0]
    		stick_ly = -stick_ly; // compute as positive, then negate at the end
 8006fd0:	4b38      	ldr	r3, [pc, #224]	; (80070b4 <parseMessage+0x7e8>)
 8006fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	425b      	negs	r3, r3
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	b21a      	sxth	r2, r3
 8006fde:	4b35      	ldr	r3, [pc, #212]	; (80070b4 <parseMessage+0x7e8>)
 8006fe0:	801a      	strh	r2, [r3, #0]
    		unscaled_result = (stick_ly - deadzoneValue) * deadzoneRelation;
 8006fe2:	4b34      	ldr	r3, [pc, #208]	; (80070b4 <parseMessage+0x7e8>)
 8006fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fe8:	ee07 3a90 	vmov	s15, r3
 8006fec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ff0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006ff4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ff8:	edd7 7a08 	vldr	s15, [r7, #32]
 8006ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007000:	edc7 7a07 	vstr	s15, [r7, #28]
    		LSY = (uint8_t)(unscaled_result * (N64_MAX / XPAD_MAX));
 8007004:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007008:	eddf 6a26 	vldr	s13, [pc, #152]	; 80070a4 <parseMessage+0x7d8>
 800700c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007010:	edd7 7a07 	vldr	s15, [r7, #28]
 8007014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800701c:	edc7 7a00 	vstr	s15, [r7]
 8007020:	783b      	ldrb	r3, [r7, #0]
 8007022:	b2da      	uxtb	r2, r3
 8007024:	4b20      	ldr	r3, [pc, #128]	; (80070a8 <parseMessage+0x7dc>)
 8007026:	701a      	strb	r2, [r3, #0]
    		LSY = -LSY;
 8007028:	4b1f      	ldr	r3, [pc, #124]	; (80070a8 <parseMessage+0x7dc>)
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	425b      	negs	r3, r3
 800702e:	b2da      	uxtb	r2, r3
 8007030:	4b1d      	ldr	r3, [pc, #116]	; (80070a8 <parseMessage+0x7dc>)
 8007032:	701a      	strb	r2, [r3, #0]
    	}
    	new_data.x_axis = reverse(LSX);
 8007034:	4b1d      	ldr	r3, [pc, #116]	; (80070ac <parseMessage+0x7e0>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	4618      	mov	r0, r3
 800703a:	f001 fed3 	bl	8008de4 <reverse>
 800703e:	4603      	mov	r3, r0
 8007040:	73bb      	strb	r3, [r7, #14]
    	new_data.y_axis = reverse(LSY);
 8007042:	4b19      	ldr	r3, [pc, #100]	; (80070a8 <parseMessage+0x7dc>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	4618      	mov	r0, r3
 8007048:	f001 fecc 	bl	8008de4 <reverse>
 800704c:	4603      	mov	r3, r0
 800704e:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8007050:	b672      	cpsid	i

    	// ----- end nrage replication analog code -----

    	__disable_irq();
		memcpy(&n64_data, &new_data,4);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	4a18      	ldr	r2, [pc, #96]	; (80070b8 <parseMessage+0x7ec>)
 8007056:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007058:	b662      	cpsie	i
 800705a:	e01a      	b.n	8007092 <parseMessage+0x7c6>
		__enable_irq();
    }
    else // state > 0 so we are in the process of changing controls
    {
    	uint64_t b = DetectButton(); // read for button presses (just do linear search)
 800705c:	f7ff fb84 	bl	8006768 <DetectButton>
 8007060:	e9c7 0104 	strd	r0, r1, [r7, #16]
    	if(b != 0) /*button was actually is pressed*/
 8007064:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007068:	4323      	orrs	r3, r4
 800706a:	d00d      	beq.n	8007088 <parseMessage+0x7bc>
    	{
    		if(xpadButtonPressed == 0)
 800706c:	4b13      	ldr	r3, [pc, #76]	; (80070bc <parseMessage+0x7f0>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10e      	bne.n	8007092 <parseMessage+0x7c6>
    		{
    			xpadButtonPressed = 1;
 8007074:	4b11      	ldr	r3, [pc, #68]	; (80070bc <parseMessage+0x7f0>)
 8007076:	2201      	movs	r2, #1
 8007078:	701a      	strb	r2, [r3, #0]
    			ChangeButtonMappingController(b);
 800707a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800707e:	f001 fd9d 	bl	8008bbc <ChangeButtonMappingController>
    			AdvanceState();
 8007082:	f001 fe99 	bl	8008db8 <AdvanceState>
 8007086:	e004      	b.n	8007092 <parseMessage+0x7c6>
    		}
    	}
    	else
    	{
    		xpadButtonPressed = 0;
 8007088:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <parseMessage+0x7f0>)
 800708a:	2200      	movs	r2, #0
 800708c:	701a      	strb	r2, [r3, #0]
 800708e:	e000      	b.n	8007092 <parseMessage+0x7c6>
        return;
 8007090:	bf00      	nop
    	}
    }
}
 8007092:	3744      	adds	r7, #68	; 0x44
 8007094:	46bd      	mov	sp, r7
 8007096:	bd90      	pop	{r4, r7, pc}
 8007098:	200001f4 	.word	0x200001f4
 800709c:	42fe0000 	.word	0x42fe0000
 80070a0:	45cccb33 	.word	0x45cccb33
 80070a4:	46fffe00 	.word	0x46fffe00
 80070a8:	20000102 	.word	0x20000102
 80070ac:	20000103 	.word	0x20000103
 80070b0:	200001c6 	.word	0x200001c6
 80070b4:	200001c0 	.word	0x200001c0
 80070b8:	20000278 	.word	0x20000278
 80070bc:	20000107 	.word	0x20000107

080070c0 <XPAD_360_WIRELESS_ProcessInputData>:

void XPAD_360_WIRELESS_ProcessInputData(USBH_HandleTypeDef *phost)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
	if(report[0] == 0x00)
 80070c8:	4b1b      	ldr	r3, [pc, #108]	; (8007138 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d123      	bne.n	8007118 <XPAD_360_WIRELESS_ProcessInputData+0x58>
	{
		if (report[1] == 0x01 && report[2] == 0x00 && report[3] == 0xf0 && report[4] == 0x00 && report[5] == 0x13)
 80070d0:	4b19      	ldr	r3, [pc, #100]	; (8007138 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 80070d2:	785b      	ldrb	r3, [r3, #1]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d113      	bne.n	8007100 <XPAD_360_WIRELESS_ProcessInputData+0x40>
 80070d8:	4b17      	ldr	r3, [pc, #92]	; (8007138 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 80070da:	789b      	ldrb	r3, [r3, #2]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10f      	bne.n	8007100 <XPAD_360_WIRELESS_ProcessInputData+0x40>
 80070e0:	4b15      	ldr	r3, [pc, #84]	; (8007138 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 80070e2:	78db      	ldrb	r3, [r3, #3]
 80070e4:	2bf0      	cmp	r3, #240	; 0xf0
 80070e6:	d10b      	bne.n	8007100 <XPAD_360_WIRELESS_ProcessInputData+0x40>
 80070e8:	4b13      	ldr	r3, [pc, #76]	; (8007138 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 80070ea:	791b      	ldrb	r3, [r3, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d107      	bne.n	8007100 <XPAD_360_WIRELESS_ProcessInputData+0x40>
 80070f0:	4b11      	ldr	r3, [pc, #68]	; (8007138 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 80070f2:	795b      	ldrb	r3, [r3, #5]
 80070f4:	2b13      	cmp	r3, #19
 80070f6:	d103      	bne.n	8007100 <XPAD_360_WIRELESS_ProcessInputData+0x40>
		{
			// Event data
			parseMessage(phost);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff fbe7 	bl	80068cc <parseMessage>
		 {
			 //USBH_XPAD_Led(phost, LED1_ON);
			 USBH_XPAD_Start(phost);
		 }
	}
}
 80070fe:	e016      	b.n	800712e <XPAD_360_WIRELESS_ProcessInputData+0x6e>
		else if(report[1] == 0x0f)
 8007100:	4b0d      	ldr	r3, [pc, #52]	; (8007138 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 8007102:	785b      	ldrb	r3, [r3, #1]
 8007104:	2b0f      	cmp	r3, #15
 8007106:	d112      	bne.n	800712e <XPAD_360_WIRELESS_ProcessInputData+0x6e>
			USBH_XPAD_Led(phost, LED1_ON);
 8007108:	2106      	movs	r1, #6
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f8ba 	bl	8007284 <USBH_XPAD_Led>
			USBH_XPAD_Start(phost);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f847 	bl	80071a4 <USBH_XPAD_Start>
}
 8007116:	e00a      	b.n	800712e <XPAD_360_WIRELESS_ProcessInputData+0x6e>
	else if(report[0] == 0x08)
 8007118:	4b07      	ldr	r3, [pc, #28]	; (8007138 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	2b08      	cmp	r3, #8
 800711e:	d106      	bne.n	800712e <XPAD_360_WIRELESS_ProcessInputData+0x6e>
		 if(report[1] == 0x80)
 8007120:	4b05      	ldr	r3, [pc, #20]	; (8007138 <XPAD_360_WIRELESS_ProcessInputData+0x78>)
 8007122:	785b      	ldrb	r3, [r3, #1]
 8007124:	2b80      	cmp	r3, #128	; 0x80
 8007126:	d102      	bne.n	800712e <XPAD_360_WIRELESS_ProcessInputData+0x6e>
			 USBH_XPAD_Start(phost);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f83b 	bl	80071a4 <USBH_XPAD_Start>
}
 800712e:	bf00      	nop
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	200001d0 	.word	0x200001d0

0800713c <XPAD_360_WIRED_ProcessInputData>:

void XPAD_360_WIRED_ProcessInputData(USBH_HandleTypeDef *phost)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
	if(report[0] == 0x00)
 8007144:	4b07      	ldr	r3, [pc, #28]	; (8007164 <XPAD_360_WIRED_ProcessInputData+0x28>)
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d106      	bne.n	800715a <XPAD_360_WIRED_ProcessInputData+0x1e>
	{
		if(report[1] == 0x14)
 800714c:	4b05      	ldr	r3, [pc, #20]	; (8007164 <XPAD_360_WIRED_ProcessInputData+0x28>)
 800714e:	785b      	ldrb	r3, [r3, #1]
 8007150:	2b14      	cmp	r3, #20
 8007152:	d102      	bne.n	800715a <XPAD_360_WIRED_ProcessInputData+0x1e>
		{
			// Event data
			parseMessage(phost);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7ff fbb9 	bl	80068cc <parseMessage>
		}
	}
}
 800715a:	bf00      	nop
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	200001d0 	.word	0x200001d0

08007168 <XPAD_XBONE_ProcessInputData>:

void XPAD_XBONE_ProcessInputData(USBH_HandleTypeDef *phost)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
	if(report[0] == 0x02) // auth
 8007170:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <XPAD_XBONE_ProcessInputData+0x38>)
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2b02      	cmp	r3, #2
 8007176:	d107      	bne.n	8007188 <XPAD_XBONE_ProcessInputData+0x20>
	{
		if(report[1] == 0x20) // request
 8007178:	4b09      	ldr	r3, [pc, #36]	; (80071a0 <XPAD_XBONE_ProcessInputData+0x38>)
 800717a:	785b      	ldrb	r3, [r3, #1]
 800717c:	2b20      	cmp	r3, #32
 800717e:	d10a      	bne.n	8007196 <XPAD_XBONE_ProcessInputData+0x2e>
		{
			USBH_XPAD_Start(phost);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f80f 	bl	80071a4 <USBH_XPAD_Start>
	else if(report[0] == 0x20)
	{
		// buttons update
		parseMessage(phost);
	}
}
 8007186:	e006      	b.n	8007196 <XPAD_XBONE_ProcessInputData+0x2e>
	else if(report[0] == 0x20)
 8007188:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <XPAD_XBONE_ProcessInputData+0x38>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b20      	cmp	r3, #32
 800718e:	d102      	bne.n	8007196 <XPAD_XBONE_ProcessInputData+0x2e>
		parseMessage(phost);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff fb9b 	bl	80068cc <parseMessage>
}
 8007196:	bf00      	nop
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	200001d0 	.word	0x200001d0

080071a4 <USBH_XPAD_Start>:

static USBH_StatusTypeDef USBH_XPAD_Start(USBH_HandleTypeDef *phost)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08c      	sub	sp, #48	; 0x30
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
	XPAD_HandleTypeDef *XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t odata[32];
	memset(odata, 0, sizeof(odata));
 80071b6:	f107 030c 	add.w	r3, r7, #12
 80071ba:	2220      	movs	r2, #32
 80071bc:	2100      	movs	r1, #0
 80071be:	4618      	mov	r0, r3
 80071c0:	f002 fdd1 	bl	8009d66 <memset>
	switch(XPAD_Handle->xpad_type)
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	db52      	blt.n	8007274 <USBH_XPAD_Start+0xd0>
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	dd02      	ble.n	80071d8 <USBH_XPAD_Start+0x34>
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d00c      	beq.n	80071f0 <USBH_XPAD_Start+0x4c>
			odata[3] = 0x01;
			odata[4] = 0x00;
			return USBH_InterruptSendData(phost,odata,5,XPAD_Handle->OutPipe);
			break;
		default:
			break;
 80071d6:	e04d      	b.n	8007274 <USBH_XPAD_Start+0xd0>
			odata[3] = 0x40;
 80071d8:	2340      	movs	r3, #64	; 0x40
 80071da:	73fb      	strb	r3, [r7, #15]
			return USBH_InterruptSendData(phost,odata,12,XPAD_Handle->OutPipe);
 80071dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	f107 010c 	add.w	r1, r7, #12
 80071e4:	220c      	movs	r2, #12
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 fb86 	bl	80088f8 <USBH_InterruptSendData>
 80071ec:	4603      	mov	r3, r0
 80071ee:	e043      	b.n	8007278 <USBH_XPAD_Start+0xd4>
			memset(odata, 0, sizeof(odata));
 80071f0:	f107 030c 	add.w	r3, r7, #12
 80071f4:	2220      	movs	r2, #32
 80071f6:	2100      	movs	r1, #0
 80071f8:	4618      	mov	r0, r3
 80071fa:	f002 fdb4 	bl	8009d66 <memset>
			odata[0] = 0x05;
 80071fe:	2305      	movs	r3, #5
 8007200:	733b      	strb	r3, [r7, #12]
			odata[1] = 0x20;
 8007202:	2320      	movs	r3, #32
 8007204:	737b      	strb	r3, [r7, #13]
			odata[2] = serial++;
 8007206:	4b1e      	ldr	r3, [pc, #120]	; (8007280 <USBH_XPAD_Start+0xdc>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	b2d1      	uxtb	r1, r2
 800720e:	4a1c      	ldr	r2, [pc, #112]	; (8007280 <USBH_XPAD_Start+0xdc>)
 8007210:	7011      	strb	r1, [r2, #0]
 8007212:	73bb      	strb	r3, [r7, #14]
			odata[3] = 0x09;
 8007214:	2309      	movs	r3, #9
 8007216:	73fb      	strb	r3, [r7, #15]
			odata[4] = 0x06;
 8007218:	2306      	movs	r3, #6
 800721a:	743b      	strb	r3, [r7, #16]
			odata[11] = 0x55;
 800721c:	2355      	movs	r3, #85	; 0x55
 800721e:	75fb      	strb	r3, [r7, #23]
			odata[12] = 0x53;
 8007220:	2353      	movs	r3, #83	; 0x53
 8007222:	763b      	strb	r3, [r7, #24]
			USBH_InterruptSendData(phost,odata,13,XPAD_Handle->OutPipe);
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	f107 010c 	add.w	r1, r7, #12
 800722c:	220d      	movs	r2, #13
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 fb62 	bl	80088f8 <USBH_InterruptSendData>
			memset(odata, 0, sizeof(odata));
 8007234:	f107 030c 	add.w	r3, r7, #12
 8007238:	2220      	movs	r2, #32
 800723a:	2100      	movs	r1, #0
 800723c:	4618      	mov	r0, r3
 800723e:	f002 fd92 	bl	8009d66 <memset>
			odata[0] = 0x05;
 8007242:	2305      	movs	r3, #5
 8007244:	733b      	strb	r3, [r7, #12]
			odata[1] = 0x20;
 8007246:	2320      	movs	r3, #32
 8007248:	737b      	strb	r3, [r7, #13]
			odata[2] = serial++;
 800724a:	4b0d      	ldr	r3, [pc, #52]	; (8007280 <USBH_XPAD_Start+0xdc>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	b2d1      	uxtb	r1, r2
 8007252:	4a0b      	ldr	r2, [pc, #44]	; (8007280 <USBH_XPAD_Start+0xdc>)
 8007254:	7011      	strb	r1, [r2, #0]
 8007256:	73bb      	strb	r3, [r7, #14]
			odata[3] = 0x01;
 8007258:	2301      	movs	r3, #1
 800725a:	73fb      	strb	r3, [r7, #15]
			odata[4] = 0x00;
 800725c:	2300      	movs	r3, #0
 800725e:	743b      	strb	r3, [r7, #16]
			return USBH_InterruptSendData(phost,odata,5,XPAD_Handle->OutPipe);
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	f107 010c 	add.w	r1, r7, #12
 8007268:	2205      	movs	r2, #5
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 fb44 	bl	80088f8 <USBH_InterruptSendData>
 8007270:	4603      	mov	r3, r0
 8007272:	e001      	b.n	8007278 <USBH_XPAD_Start+0xd4>
			break;
 8007274:	bf00      	nop
	}
	return USBH_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3730      	adds	r7, #48	; 0x30
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	20000106 	.word	0x20000106

08007284 <USBH_XPAD_Led>:

static USBH_StatusTypeDef USBH_XPAD_Led(USBH_HandleTypeDef *phost,XPAD_LED cmd)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08c      	sub	sp, #48	; 0x30
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	70fb      	strb	r3, [r7, #3]
	XPAD_HandleTypeDef *XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t odata[32];
	memset(odata, 0, sizeof(odata));
 800729a:	f107 030c 	add.w	r3, r7, #12
 800729e:	2220      	movs	r2, #32
 80072a0:	2100      	movs	r1, #0
 80072a2:	4618      	mov	r0, r3
 80072a4:	f002 fd5f 	bl	8009d66 <memset>

	switch(XPAD_Handle->xpad_type)
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d014      	beq.n	80072dc <USBH_XPAD_Led+0x58>
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d002      	beq.n	80072bc <USBH_XPAD_Led+0x38>
			return USBH_InterruptSendData(phost,odata,4,XPAD_Handle->OutPipe);
			break;
		case XPAD_ORIGINAL:
		case XPAD_XBONE:
		default:
			break;
 80072b6:	bf00      	nop
	}
	return USBH_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	e029      	b.n	8007310 <USBH_XPAD_Led+0x8c>
			odata[0] = 0x01;
 80072bc:	2301      	movs	r3, #1
 80072be:	733b      	strb	r3, [r7, #12]
			odata[1] = 0x03;
 80072c0:	2303      	movs	r3, #3
 80072c2:	737b      	strb	r3, [r7, #13]
			odata[2] = cmd;
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	73bb      	strb	r3, [r7, #14]
			return USBH_InterruptSendData(phost,odata,3,XPAD_Handle->OutPipe);
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	f107 010c 	add.w	r1, r7, #12
 80072d0:	2203      	movs	r2, #3
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 fb10 	bl	80088f8 <USBH_InterruptSendData>
 80072d8:	4603      	mov	r3, r0
 80072da:	e019      	b.n	8007310 <USBH_XPAD_Led+0x8c>
			odata[2] = 0x08;
 80072dc:	2308      	movs	r3, #8
 80072de:	73bb      	strb	r3, [r7, #14]
			odata[3] = 0x40 + (cmd % 0x0e);
 80072e0:	78fa      	ldrb	r2, [r7, #3]
 80072e2:	0853      	lsrs	r3, r2, #1
 80072e4:	490c      	ldr	r1, [pc, #48]	; (8007318 <USBH_XPAD_Led+0x94>)
 80072e6:	fba1 1303 	umull	r1, r3, r1, r3
 80072ea:	0899      	lsrs	r1, r3, #2
 80072ec:	460b      	mov	r3, r1
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	1a5b      	subs	r3, r3, r1
 80072f2:	005b      	lsls	r3, r3, #1
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	3340      	adds	r3, #64	; 0x40
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	73fb      	strb	r3, [r7, #15]
			return USBH_InterruptSendData(phost,odata,4,XPAD_Handle->OutPipe);
 80072fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	f107 010c 	add.w	r1, r7, #12
 8007306:	2204      	movs	r2, #4
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 faf5 	bl	80088f8 <USBH_InterruptSendData>
 800730e:	4603      	mov	r3, r0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3730      	adds	r7, #48	; 0x30
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	92492493 	.word	0x92492493

0800731c <USBH_XPAD_InterfaceInit>:
  *         The function init the XPAD class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_XPAD_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800731c:	b590      	push	{r4, r7, lr}
 800731e:	b08b      	sub	sp, #44	; 0x2c
 8007320:	af04      	add	r7, sp, #16
 8007322:	6078      	str	r0, [r7, #4]
	uint8_t max_ep;
	uint8_t num = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	75fb      	strb	r3, [r7, #23]
	uint8_t interface;

	XPAD_HandleTypeDef *XPAD_Handle;
	XPAD_TypeTypeDef ctype = XPAD_UNKNOWN;
 8007328:	23ff      	movs	r3, #255	; 0xff
 800732a:	757b      	strb	r3, [r7, #21]

	memset(report,0,sizeof(report));
 800732c:	2220      	movs	r2, #32
 800732e:	2100      	movs	r1, #0
 8007330:	4891      	ldr	r0, [pc, #580]	; (8007578 <USBH_XPAD_InterfaceInit+0x25c>)
 8007332:	f002 fd18 	bl	8009d66 <memset>

	// phost, class, subclass, protocol
	interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0x5D, 0x81); // X360 wireless
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 800733c:	7919      	ldrb	r1, [r3, #4]
 800733e:	2381      	movs	r3, #129	; 0x81
 8007340:	225d      	movs	r2, #93	; 0x5d
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fa8e 	bl	8007864 <USBH_FindInterface>
 8007348:	4603      	mov	r3, r0
 800734a:	75bb      	strb	r3, [r7, #22]

	if (interface == 0xFF)
 800734c:	7dbb      	ldrb	r3, [r7, #22]
 800734e:	2bff      	cmp	r3, #255	; 0xff
 8007350:	d123      	bne.n	800739a <USBH_XPAD_InterfaceInit+0x7e>
	{
		interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0x5D, 0x01); // X360 wired
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8007358:	7919      	ldrb	r1, [r3, #4]
 800735a:	2301      	movs	r3, #1
 800735c:	225d      	movs	r2, #93	; 0x5d
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fa80 	bl	8007864 <USBH_FindInterface>
 8007364:	4603      	mov	r3, r0
 8007366:	75bb      	strb	r3, [r7, #22]

		if (interface == 0xFF)
 8007368:	7dbb      	ldrb	r3, [r7, #22]
 800736a:	2bff      	cmp	r3, #255	; 0xff
 800736c:	d112      	bne.n	8007394 <USBH_XPAD_InterfaceInit+0x78>
		{
			  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0x47, 0xD0); // XBONE wired
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8007374:	7919      	ldrb	r1, [r3, #4]
 8007376:	23d0      	movs	r3, #208	; 0xd0
 8007378:	2247      	movs	r2, #71	; 0x47
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fa72 	bl	8007864 <USBH_FindInterface>
 8007380:	4603      	mov	r3, r0
 8007382:	75bb      	strb	r3, [r7, #22]

			  if(interface == 0xFF) /* No Valid Interface */
 8007384:	7dbb      	ldrb	r3, [r7, #22]
 8007386:	2bff      	cmp	r3, #255	; 0xff
 8007388:	d101      	bne.n	800738e <USBH_XPAD_InterfaceInit+0x72>
			  {
				USBH_DbgLog ("Cannot Find any valid interface for %s class.", phost->pActiveClass->Name);
				return USBH_FAIL;
 800738a:	2302      	movs	r3, #2
 800738c:	e0ef      	b.n	800756e <USBH_XPAD_InterfaceInit+0x252>
			  }
			  else
			  {
				  ctype = XPAD_XBONE;
 800738e:	2304      	movs	r3, #4
 8007390:	757b      	strb	r3, [r7, #21]
 8007392:	e004      	b.n	800739e <USBH_XPAD_InterfaceInit+0x82>
			  }
		}
		else
		{
			ctype = XPAD_360_WIRED;
 8007394:	2303      	movs	r3, #3
 8007396:	757b      	strb	r3, [r7, #21]
 8007398:	e001      	b.n	800739e <USBH_XPAD_InterfaceInit+0x82>
		}
	}
	else
	{
		ctype = XPAD_360_WIRELESS;
 800739a:	2302      	movs	r3, #2
 800739c:	757b      	strb	r3, [r7, #21]
	}
	type = CONTROLLER_XPAD;
 800739e:	4b77      	ldr	r3, [pc, #476]	; (800757c <USBH_XPAD_InterfaceInit+0x260>)
 80073a0:	2201      	movs	r2, #1
 80073a2:	701a      	strb	r2, [r3, #0]

	// open endpoints and stuff
	serial = 0;
 80073a4:	4b76      	ldr	r3, [pc, #472]	; (8007580 <USBH_XPAD_InterfaceInit+0x264>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	701a      	strb	r2, [r3, #0]
	USBH_SelectInterface (phost, interface);
 80073aa:	7dbb      	ldrb	r3, [r7, #22]
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fa3c 	bl	800782c <USBH_SelectInterface>
	phost->pActiveClass->pData = (XPAD_HandleTypeDef *)USBH_malloc (sizeof(XPAD_HandleTypeDef));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 43ac 	ldr.w	r4, [r3, #940]	; 0x3ac
 80073ba:	2024      	movs	r0, #36	; 0x24
 80073bc:	f002 fcb8 	bl	8009d30 <malloc>
 80073c0:	4603      	mov	r3, r0
 80073c2:	61e3      	str	r3, [r4, #28]
	XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	613b      	str	r3, [r7, #16]

	XPAD_Handle->state     = XPAD_INIT;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2200      	movs	r2, #0
 80073d2:	709a      	strb	r2, [r3, #2]
	XPAD_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073da:	4619      	mov	r1, r3
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	231a      	movs	r3, #26
 80073e0:	fb03 f301 	mul.w	r3, r3, r1
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80073ea:	781a      	ldrb	r2, [r3, #0]
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	739a      	strb	r2, [r3, #14]
	XPAD_Handle->length    = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073f6:	4619      	mov	r1, r3
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	231a      	movs	r3, #26
 80073fc:	fb03 f301 	mul.w	r3, r3, r1
 8007400:	4413      	add	r3, r2
 8007402:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8007406:	881a      	ldrh	r2, [r3, #0]
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	819a      	strh	r2, [r3, #12]
	XPAD_Handle->poll      = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bInterval;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007412:	4619      	mov	r1, r3
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	231a      	movs	r3, #26
 8007418:	fb03 f301 	mul.w	r3, r3, r1
 800741c:	4413      	add	r3, r2
 800741e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	b29a      	uxth	r2, r3
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	821a      	strh	r2, [r3, #16]
	XPAD_Handle->xpad_type = ctype;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	7d7a      	ldrb	r2, [r7, #21]
 800742e:	f883 2020 	strb.w	r2, [r3, #32]

	/* Check for available number of endpoints */
	/* Find the number of EPs in the Interface Descriptor */
	/* Choose the lower number in order not to overrun the buffer allocated */
	max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
			  phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007438:	4619      	mov	r1, r3
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	231a      	movs	r3, #26
 800743e:	fb03 f301 	mul.w	r3, r3, r1
 8007442:	4413      	add	r3, r2
 8007444:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8007448:	781b      	ldrb	r3, [r3, #0]
	max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800744a:	2b02      	cmp	r3, #2
 800744c:	bf28      	it	cs
 800744e:	2302      	movcs	r3, #2
 8007450:	73fb      	strb	r3, [r7, #15]
				  USBH_MAX_NUM_ENDPOINTS);


	/* Decode endpoint IN and OUT address from interface descriptor */
	for ( ;num < max_ep; num++)
 8007452:	e086      	b.n	8007562 <USBH_XPAD_InterfaceInit+0x246>
	{
	  if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress & 0x80)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800745a:	4618      	mov	r0, r3
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	3301      	adds	r3, #1
 8007462:	00d9      	lsls	r1, r3, #3
 8007464:	231a      	movs	r3, #26
 8007466:	fb03 f300 	mul.w	r3, r3, r0
 800746a:	440b      	add	r3, r1
 800746c:	4413      	add	r3, r2
 800746e:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	b25b      	sxtb	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	da38      	bge.n	80074ec <USBH_XPAD_InterfaceInit+0x1d0>
	  {
		  XPAD_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007480:	4618      	mov	r0, r3
 8007482:	7dfb      	ldrb	r3, [r7, #23]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	3301      	adds	r3, #1
 8007488:	00d9      	lsls	r1, r3, #3
 800748a:	231a      	movs	r3, #26
 800748c:	fb03 f300 	mul.w	r3, r3, r0
 8007490:	440b      	add	r3, r1
 8007492:	4413      	add	r3, r2
 8007494:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8007498:	781a      	ldrb	r2, [r3, #0]
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	711a      	strb	r2, [r3, #4]
		  XPAD_Handle->InPipe  =\
		  USBH_AllocPipe(phost, XPAD_Handle->InEp);
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	791b      	ldrb	r3, [r3, #4]
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 fa75 	bl	8008994 <USBH_AllocPipe>
 80074aa:	4603      	mov	r3, r0
 80074ac:	461a      	mov	r2, r3
		  XPAD_Handle->InPipe  =\
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	705a      	strb	r2, [r3, #1]

		/* Open pipe for IN endpoint */
		USBH_OpenPipe  (phost,
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	7859      	ldrb	r1, [r3, #1]
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	7918      	ldrb	r0, [r3, #4]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	8992      	ldrh	r2, [r2, #12]
 80074ca:	9202      	str	r2, [sp, #8]
 80074cc:	2203      	movs	r2, #3
 80074ce:	9201      	str	r2, [sp, #4]
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	4623      	mov	r3, r4
 80074d4:	4602      	mov	r2, r0
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f001 fa2d 	bl	8008936 <USBH_OpenPipe>
						phost->device.address,
						phost->device.speed,
						USB_EP_TYPE_INTR,
						XPAD_Handle->length);

		USBH_LL_SetToggle (phost, XPAD_Handle->InPipe, 0);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	785b      	ldrb	r3, [r3, #1]
 80074e0:	2200      	movs	r2, #0
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f002 fb96 	bl	8009c16 <USBH_LL_SetToggle>
 80074ea:	e037      	b.n	800755c <USBH_XPAD_InterfaceInit+0x240>

	  }
	  else
	  {
		  XPAD_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80074f2:	4618      	mov	r0, r3
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	3301      	adds	r3, #1
 80074fa:	00d9      	lsls	r1, r3, #3
 80074fc:	231a      	movs	r3, #26
 80074fe:	fb03 f300 	mul.w	r3, r3, r0
 8007502:	440b      	add	r3, r1
 8007504:	4413      	add	r3, r2
 8007506:	f503 7350 	add.w	r3, r3, #832	; 0x340
 800750a:	781a      	ldrb	r2, [r3, #0]
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	70da      	strb	r2, [r3, #3]
		  XPAD_Handle->OutPipe  =\
		  USBH_AllocPipe(phost, XPAD_Handle->OutEp);
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	78db      	ldrb	r3, [r3, #3]
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f001 fa3c 	bl	8008994 <USBH_AllocPipe>
 800751c:	4603      	mov	r3, r0
 800751e:	461a      	mov	r2, r3
		  XPAD_Handle->OutPipe  =\
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	701a      	strb	r2, [r3, #0]

		/* Open pipe for OUT endpoint */
		USBH_OpenPipe  (phost,
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	7819      	ldrb	r1, [r3, #0]
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	78d8      	ldrb	r0, [r3, #3]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	8992      	ldrh	r2, [r2, #12]
 800753c:	9202      	str	r2, [sp, #8]
 800753e:	2203      	movs	r2, #3
 8007540:	9201      	str	r2, [sp, #4]
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	4623      	mov	r3, r4
 8007546:	4602      	mov	r2, r0
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f001 f9f4 	bl	8008936 <USBH_OpenPipe>
						phost->device.address,
						phost->device.speed,
						USB_EP_TYPE_INTR,
						XPAD_Handle->length);

		USBH_LL_SetToggle (phost, XPAD_Handle->OutPipe, 0);
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2200      	movs	r2, #0
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f002 fb5d 	bl	8009c16 <USBH_LL_SetToggle>
	for ( ;num < max_ep; num++)
 800755c:	7dfb      	ldrb	r3, [r7, #23]
 800755e:	3301      	adds	r3, #1
 8007560:	75fb      	strb	r3, [r7, #23]
 8007562:	7dfa      	ldrb	r2, [r7, #23]
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	429a      	cmp	r2, r3
 8007568:	f4ff af74 	bcc.w	8007454 <USBH_XPAD_InterfaceInit+0x138>
	  }

	}

	return USBH_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	371c      	adds	r7, #28
 8007572:	46bd      	mov	sp, r7
 8007574:	bd90      	pop	{r4, r7, pc}
 8007576:	bf00      	nop
 8007578:	200001d0 	.word	0x200001d0
 800757c:	2000010a 	.word	0x2000010a
 8007580:	20000106 	.word	0x20000106

08007584 <USBH_XPAD_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the XPAD class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_XPAD_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  XPAD_HandleTypeDef *XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	60fb      	str	r3, [r7, #12]

  if(XPAD_Handle->InPipe != 0x00)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00e      	beq.n	80075bc <USBH_XPAD_InterfaceDeInit+0x38>
  {
	USBH_ClosePipe  (phost, XPAD_Handle->InPipe);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	785b      	ldrb	r3, [r3, #1]
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 f9e5 	bl	8008974 <USBH_ClosePipe>
	USBH_FreePipe  (phost, XPAD_Handle->InPipe);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	785b      	ldrb	r3, [r3, #1]
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f001 fa0f 	bl	80089d4 <USBH_FreePipe>
	XPAD_Handle->InPipe = 0;     /* Reset the pipe as Free */
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	705a      	strb	r2, [r3, #1]
  }

  if(XPAD_Handle->OutPipe != 0x00)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00e      	beq.n	80075e2 <USBH_XPAD_InterfaceDeInit+0x5e>
  {
	USBH_ClosePipe(phost, XPAD_Handle->OutPipe);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f001 f9d2 	bl	8008974 <USBH_ClosePipe>
	USBH_FreePipe  (phost, XPAD_Handle->OutPipe);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 f9fc 	bl	80089d4 <USBH_FreePipe>
	XPAD_Handle->OutPipe = 0;     /* Reset the pipe as Free */
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	701a      	strb	r2, [r3, #0]
  }

  if(phost->pActiveClass->pData)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d006      	beq.n	80075fc <USBH_XPAD_InterfaceDeInit+0x78>
  {
	USBH_free(phost->pActiveClass->pData);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f002 fba2 	bl	8009d40 <free>
  }

  serial = 0;
 80075fc:	4b05      	ldr	r3, [pc, #20]	; (8007614 <USBH_XPAD_InterfaceDeInit+0x90>)
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
  type = CONTROLLER_NONE;
 8007602:	4b05      	ldr	r3, [pc, #20]	; (8007618 <USBH_XPAD_InterfaceDeInit+0x94>)
 8007604:	2200      	movs	r2, #0
 8007606:	701a      	strb	r2, [r3, #0]

  return USBH_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000106 	.word	0x20000106
 8007618:	2000010a 	.word	0x2000010a

0800761c <USBH_XPAD_ClassRequest>:
  *         for XPAD class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_XPAD_ClassRequest (USBH_HandleTypeDef *phost)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
	// should be fine to keep this blank since there are no standard class requests for a custom class!
	return USBH_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
	...

08007634 <USBH_XPAD_Process>:
  *         The function is for managing state machine for XPAD data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_XPAD_Process (USBH_HandleTypeDef *phost)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
	XPAD_HandleTypeDef *XPAD_Handle =  (XPAD_HandleTypeDef *) phost->pActiveClass->pData;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8007642:	69db      	ldr	r3, [r3, #28]
 8007644:	60fb      	str	r3, [r7, #12]

	switch(XPAD_Handle->state)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	789b      	ldrb	r3, [r3, #2]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <USBH_XPAD_Process+0x20>
 800764e:	2b01      	cmp	r3, #1
 8007650:	d01d      	beq.n	800768e <USBH_XPAD_Process+0x5a>
				default:
					break;
			}
			break;
		default:
			break;
 8007652:	e03a      	b.n	80076ca <USBH_XPAD_Process+0x96>
			USBH_InterruptReceiveData(phost,report,32,XPAD_Handle->InPipe);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	785b      	ldrb	r3, [r3, #1]
 8007658:	2220      	movs	r2, #32
 800765a:	491e      	ldr	r1, [pc, #120]	; (80076d4 <USBH_XPAD_Process+0xa0>)
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 f92c 	bl	80088ba <USBH_InterruptReceiveData>
			USBH_Delay(100);
 8007662:	2064      	movs	r0, #100	; 0x64
 8007664:	f002 fb0a 	bl	8009c7c <USBH_Delay>
			switch(XPAD_Handle->xpad_type)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800766e:	2b03      	cmp	r3, #3
 8007670:	d104      	bne.n	800767c <USBH_XPAD_Process+0x48>
					USBH_XPAD_Led(phost, LED1_ON);
 8007672:	2106      	movs	r1, #6
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7ff fe05 	bl	8007284 <USBH_XPAD_Led>
					break;
 800767a:	e004      	b.n	8007686 <USBH_XPAD_Process+0x52>
					USBH_XPAD_Led(phost, LED_OFF);
 800767c:	2100      	movs	r1, #0
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff fe00 	bl	8007284 <USBH_XPAD_Led>
					break;
 8007684:	bf00      	nop
			XPAD_Handle->state = XPAD_IDLE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2201      	movs	r2, #1
 800768a:	709a      	strb	r2, [r3, #2]
			break;
 800768c:	e01d      	b.n	80076ca <USBH_XPAD_Process+0x96>
			USBH_InterruptReceiveData(phost,report,32,XPAD_Handle->InPipe);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	785b      	ldrb	r3, [r3, #1]
 8007692:	2220      	movs	r2, #32
 8007694:	490f      	ldr	r1, [pc, #60]	; (80076d4 <USBH_XPAD_Process+0xa0>)
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 f90f 	bl	80088ba <USBH_InterruptReceiveData>
			switch(XPAD_Handle->xpad_type)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d008      	beq.n	80076b8 <USBH_XPAD_Process+0x84>
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d00a      	beq.n	80076c0 <USBH_XPAD_Process+0x8c>
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d000      	beq.n	80076b0 <USBH_XPAD_Process+0x7c>
					break;
 80076ae:	e00b      	b.n	80076c8 <USBH_XPAD_Process+0x94>
					XPAD_360_WIRELESS_ProcessInputData(phost);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff fd05 	bl	80070c0 <XPAD_360_WIRELESS_ProcessInputData>
					break;
 80076b6:	e007      	b.n	80076c8 <USBH_XPAD_Process+0x94>
					XPAD_360_WIRED_ProcessInputData(phost);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7ff fd3f 	bl	800713c <XPAD_360_WIRED_ProcessInputData>
					break;
 80076be:	e003      	b.n	80076c8 <USBH_XPAD_Process+0x94>
					XPAD_XBONE_ProcessInputData(phost);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7ff fd51 	bl	8007168 <XPAD_XBONE_ProcessInputData>
					break;
 80076c6:	bf00      	nop
			break;
 80076c8:	bf00      	nop
	}
 
	return USBH_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	200001d0 	.word	0x200001d0

080076d8 <USBH_XPAD_SOFProcess>:

static USBH_StatusTypeDef USBH_XPAD_SOFProcess (USBH_HandleTypeDef *phost)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  
  return USBH_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t ), uint8_t id)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b084      	sub	sp, #16
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	60b9      	str	r1, [r7, #8]
 80076f8:	4613      	mov	r3, r2
 80076fa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL; 
 8007702:	2302      	movs	r3, #2
 8007704:	e019      	b.n	800773a <USBH_Init+0x4c>
  }
  
  /* Set DRiver ID */
  phost->id = id;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	79fa      	ldrb	r2, [r7, #7]
 800770a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  
  /* Unlink class*/
  phost->pActiveClass = NULL;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
  phost->ClassNumber = 0;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
  
  /* Restore default states and prepare EP0 */ 
  DeInitStateMachine(phost);
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 f80f 	bl	8007742 <DeInitStateMachine>
  
  /* Assign User process */
  if(pUsrFunc != NULL)
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
#endif  
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
#endif  
  
  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f002 f88e 	bl	8009854 <USBH_LL_Init>
  return USBH_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007742:	b480      	push	{r7}
 8007744:	b085      	sub	sp, #20
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800774e:	e009      	b.n	8007764 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0;
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	33ec      	adds	r3, #236	; 0xec
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	2200      	movs	r2, #0
 800775c:	605a      	str	r2, [r3, #4]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3301      	adds	r3, #1
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b0e      	cmp	r3, #14
 8007768:	d9f2      	bls.n	8007750 <DeInitStateMachine+0xe>
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	e009      	b.n	8007784 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0;
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4413      	add	r3, r2
 8007776:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800777a:	2200      	movs	r2, #0
 800777c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3301      	adds	r3, #1
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800778a:	d3f1      	bcc.n	8007770 <DeInitStateMachine+0x2e>
  }
  
  phost->gState = HOST_IDLE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0;  
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
  
  phost->Control.state = CTRL_SETUP;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2240      	movs	r2, #64	; 0x40
 80077b0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	765a      	strb	r2, [r3, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  
  return USBH_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b085      	sub	sp, #20
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	73fb      	strb	r3, [r7, #15]
  
  if(pclass != 0)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d017      	beq.n	800781a <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d80f      	bhi.n	8007814 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 80077fa:	1c59      	adds	r1, r3, #1
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	f8c2 13b0 	str.w	r1, [r2, #944]	; 0x3b0
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	33e8      	adds	r3, #232	; 0xe8
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
 8007812:	e004      	b.n	800781e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL; 
 8007814:	2302      	movs	r3, #2
 8007816:	73fb      	strb	r3, [r7, #15]
 8007818:	e001      	b.n	800781e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 800781a:	2302      	movs	r3, #2
 800781c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800781e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	73fb      	strb	r3, [r7, #15]
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007842:	78fa      	ldrb	r2, [r7, #3]
 8007844:	429a      	cmp	r2, r3
 8007846:	d204      	bcs.n	8007852 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	78fa      	ldrb	r2, [r7, #3]
 800784c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8007850:	e001      	b.n	8007856 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 8007852:	2302      	movs	r3, #2
 8007854:	73fb      	strb	r3, [r7, #15]
  }
  return status;  
 8007856:	7bfb      	ldrb	r3, [r7, #15]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	4608      	mov	r0, r1
 800786e:	4611      	mov	r1, r2
 8007870:	461a      	mov	r2, r3
 8007872:	4603      	mov	r3, r0
 8007874:	70fb      	strb	r3, [r7, #3]
 8007876:	460b      	mov	r3, r1
 8007878:	70bb      	strb	r3, [r7, #2]
 800787a:	4613      	mov	r3, r2
 800787c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  int8_t                        if_ix = 0;
 800787e:	2300      	movs	r3, #0
 8007880:	75fb      	strb	r3, [r7, #23]
  
  pif = (USBH_InterfaceDescTypeDef *)0;
 8007882:	2300      	movs	r3, #0
 8007884:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;  
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f203 3332 	addw	r3, r3, #818	; 0x332
 800788c:	60fb      	str	r3, [r7, #12]
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800788e:	e029      	b.n	80078e4 <USBH_FindInterface+0x80>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007894:	221a      	movs	r2, #26
 8007896:	fb02 f303 	mul.w	r3, r2, r3
 800789a:	3308      	adds	r3, #8
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	4413      	add	r3, r2
 80078a0:	3302      	adds	r3, #2
 80078a2:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	795b      	ldrb	r3, [r3, #5]
 80078a8:	78fa      	ldrb	r2, [r7, #3]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d002      	beq.n	80078b4 <USBH_FindInterface+0x50>
 80078ae:	78fb      	ldrb	r3, [r7, #3]
 80078b0:	2bff      	cmp	r3, #255	; 0xff
 80078b2:	d111      	bne.n	80078d8 <USBH_FindInterface+0x74>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 80078b8:	78ba      	ldrb	r2, [r7, #2]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d002      	beq.n	80078c4 <USBH_FindInterface+0x60>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 80078be:	78bb      	ldrb	r3, [r7, #2]
 80078c0:	2bff      	cmp	r3, #255	; 0xff
 80078c2:	d109      	bne.n	80078d8 <USBH_FindInterface+0x74>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 80078c8:	787a      	ldrb	r2, [r7, #1]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d002      	beq.n	80078d4 <USBH_FindInterface+0x70>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 80078ce:	787b      	ldrb	r3, [r7, #1]
 80078d0:	2bff      	cmp	r3, #255	; 0xff
 80078d2:	d101      	bne.n	80078d8 <USBH_FindInterface+0x74>
    {
      return  if_ix;
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
 80078d6:	e00a      	b.n	80078ee <USBH_FindInterface+0x8a>
    }
    if_ix++;
 80078d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	3301      	adds	r3, #1
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80078e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	ddd1      	ble.n	8007890 <USBH_FindInterface+0x2c>
  }
  return 0xFF;
 80078ec:	23ff      	movs	r3, #255	; 0xff
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	371c      	adds	r7, #28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b082      	sub	sp, #8
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f001 ffe6 	bl	80098d4 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 8007908:	2101      	movs	r1, #1
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f002 f975 	bl	8009bfa <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
	...

0800791c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af04      	add	r7, sp, #16
 8007922:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007924:	2302      	movs	r3, #2
 8007926:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->gState)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b0a      	cmp	r3, #10
 8007934:	f200 812a 	bhi.w	8007b8c <USBH_Process+0x270>
 8007938:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <USBH_Process+0x24>)
 800793a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793e:	bf00      	nop
 8007940:	0800796d 	.word	0x0800796d
 8007944:	08007b8d 	.word	0x08007b8d
 8007948:	0800798f 	.word	0x0800798f
 800794c:	08007b67 	.word	0x08007b67
 8007950:	08007b8d 	.word	0x08007b8d
 8007954:	08007a1d 	.word	0x08007a1d
 8007958:	08007b1d 	.word	0x08007b1d
 800795c:	08007a4d 	.word	0x08007a4d
 8007960:	08007a6d 	.word	0x08007a6d
 8007964:	08007a8d 	.word	0x08007a8d
 8007968:	08007b4f 	.word	0x08007b4f
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 810b 	beq.w	8007b90 <USBH_Process+0x274>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200); 
 8007980:	20c8      	movs	r0, #200	; 0xc8
 8007982:	f002 f97b 	bl	8009c7c <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f002 f82e 	bl	80099e8 <USBH_LL_ResetPort>
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif
    }
    break;
 800798c:	e100      	b.n	8007b90 <USBH_Process+0x274>
  case HOST_DEV_ATTACHED :
    
    USBH_UsrLog("USB Device Attached");  
      
    /* Wait for 100 ms after Reset */
    USBH_Delay(100); 
 800798e:	2064      	movs	r0, #100	; 0x64
 8007990:	f002 f974 	bl	8009c7c <USBH_Delay>
          
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f002 f801 	bl	800999c <USBH_LL_GetSpeed>
 800799a:	4603      	mov	r3, r0
 800799c:	461a      	mov	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
    
    phost->gState = HOST_ENUMERATION;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2205      	movs	r2, #5
 80079a8:	701a      	strb	r2, [r3, #0]
    
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 80079aa:	2100      	movs	r1, #0
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fff1 	bl	8008994 <USBH_AllocPipe>
 80079b2:	4603      	mov	r3, r0
 80079b4:	461a      	mov	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80079ba:	2180      	movs	r1, #128	; 0x80
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 ffe9 	bl	8008994 <USBH_AllocPipe>
 80079c2:	4603      	mov	r3, r0
 80079c4:	461a      	mov	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	711a      	strb	r2, [r3, #4]
    
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	7919      	ldrb	r1, [r3, #4]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size); 
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80079de:	b292      	uxth	r2, r2
 80079e0:	9202      	str	r2, [sp, #8]
 80079e2:	2200      	movs	r2, #0
 80079e4:	9201      	str	r2, [sp, #4]
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	4603      	mov	r3, r0
 80079ea:	2280      	movs	r2, #128	; 0x80
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 ffa2 	bl	8008936 <USBH_OpenPipe>
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7959      	ldrb	r1, [r3, #5]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size);
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8007a06:	b292      	uxth	r2, r2
 8007a08:	9202      	str	r2, [sp, #8]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	9201      	str	r2, [sp, #4]
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	4603      	mov	r3, r0
 8007a12:	2200      	movs	r2, #0
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 ff8e 	bl	8008936 <USBH_OpenPipe>
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif    
    
    break;
 8007a1a:	e0c8      	b.n	8007bae <USBH_Process+0x292>
    
  case HOST_ENUMERATION:     
    /* Check for enumeration status */  
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f8cb 	bl	8007bb8 <USBH_HandleEnum>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f040 80b5 	bne.w	8007b94 <USBH_Process+0x278>
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d103      	bne.n	8007a44 <USBH_Process+0x128>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;        
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2208      	movs	r2, #8
 8007a40:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT; 
      }
          
    }
    break;
 8007a42:	e0a7      	b.n	8007b94 <USBH_Process+0x278>
        phost->gState  = HOST_INPUT; 
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2207      	movs	r2, #7
 8007a48:	701a      	strb	r2, [r3, #0]
    break;
 8007a4a:	e0a3      	b.n	8007b94 <USBH_Process+0x278>
    
  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 80a0 	beq.w	8007b98 <USBH_Process+0x27c>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007a5e:	2101      	movs	r1, #1
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2208      	movs	r2, #8
 8007a68:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1)
        osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif         
      }
    }
    break;
 8007a6a:	e095      	b.n	8007b98 <USBH_Process+0x27c>
    
  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fb14 	bl	80080a4 <USBH_SetCfg>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f040 808c 	bne.w	8007b9c <USBH_Process+0x280>
    {
      phost->gState  = HOST_CHECK_CLASS;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2209      	movs	r2, #9
 8007a88:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
      
    }      
    
    break;
 8007a8a:	e087      	b.n	8007b9c <USBH_Process+0x280>
    
  case HOST_CHECK_CLASS:
    
    if(phost->ClassNumber == 0)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 8084 	beq.w	8007ba0 <USBH_Process+0x284>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
      
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	73fb      	strb	r3, [r7, #15]
 8007aa4:	e017      	b.n	8007ad6 <USBH_Process+0x1ba>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	33e8      	adds	r3, #232	; 0xe8
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	791a      	ldrb	r2, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d108      	bne.n	8007ad0 <USBH_Process+0x1b4>
        {
          phost->pActiveClass = phost->pClass[idx];
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	33e8      	adds	r3, #232	; 0xe8
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	73fb      	strb	r3, [r7, #15]
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d9e4      	bls.n	8007aa6 <USBH_Process+0x18a>
        }
      }
      
      if(phost->pActiveClass != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d016      	beq.n	8007b14 <USBH_Process+0x1f8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	4798      	blx	r3
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d109      	bne.n	8007b0c <USBH_Process+0x1f0>
        {
          phost->gState  = HOST_CLASS_REQUEST; 
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2206      	movs	r2, #6
 8007afc:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
          
          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007b04:	2103      	movs	r1, #3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	4798      	blx	r3
    }
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif 
    break;    
 8007b0a:	e049      	b.n	8007ba0 <USBH_Process+0x284>
          phost->gState  = HOST_ABORT_STATE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	220c      	movs	r2, #12
 8007b10:	701a      	strb	r2, [r3, #0]
    break;    
 8007b12:	e045      	b.n	8007ba0 <USBH_Process+0x284>
        phost->gState  = HOST_ABORT_STATE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	220c      	movs	r2, #12
 8007b18:	701a      	strb	r2, [r3, #0]
    break;    
 8007b1a:	e041      	b.n	8007ba0 <USBH_Process+0x284>
    
  case HOST_CLASS_REQUEST:  
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00f      	beq.n	8007b46 <USBH_Process+0x22a>
    {
      status = phost->pActiveClass->Requests(phost);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	4798      	blx	r3
 8007b32:	4603      	mov	r3, r0
 8007b34:	73bb      	strb	r3, [r7, #14]
      
      if(status == USBH_OK)
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d132      	bne.n	8007ba4 <USBH_Process+0x288>
      {
        phost->gState  = HOST_CLASS;        
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	220a      	movs	r2, #10
 8007b42:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    
    break;    
 8007b44:	e02e      	b.n	8007ba4 <USBH_Process+0x288>
      phost->gState  = HOST_ABORT_STATE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	220c      	movs	r2, #12
 8007b4a:	701a      	strb	r2, [r3, #0]
    break;    
 8007b4c:	e02a      	b.n	8007ba4 <USBH_Process+0x288>
  case HOST_CLASS:   
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d027      	beq.n	8007ba8 <USBH_Process+0x28c>
    { 
      phost->pActiveClass->BgndProcess(phost);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	4798      	blx	r3
    }
    break;       
 8007b64:	e020      	b.n	8007ba8 <USBH_Process+0x28c>

  case HOST_DEV_DISCONNECTED :
    
    DeInitStateMachine(phost);  
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7ff fdeb 	bl	8007742 <DeInitStateMachine>
    
    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d01a      	beq.n	8007bac <USBH_Process+0x290>
    {
      phost->pActiveClass->DeInit(phost); 
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    }     
    break;
 8007b8a:	e00f      	b.n	8007bac <USBH_Process+0x290>
    
  case HOST_ABORT_STATE:
  default :
    break;
 8007b8c:	bf00      	nop
 8007b8e:	e00e      	b.n	8007bae <USBH_Process+0x292>
    break;
 8007b90:	bf00      	nop
 8007b92:	e00c      	b.n	8007bae <USBH_Process+0x292>
    break;
 8007b94:	bf00      	nop
 8007b96:	e00a      	b.n	8007bae <USBH_Process+0x292>
    break;
 8007b98:	bf00      	nop
 8007b9a:	e008      	b.n	8007bae <USBH_Process+0x292>
    break;
 8007b9c:	bf00      	nop
 8007b9e:	e006      	b.n	8007bae <USBH_Process+0x292>
    break;    
 8007ba0:	bf00      	nop
 8007ba2:	e004      	b.n	8007bae <USBH_Process+0x292>
    break;    
 8007ba4:	bf00      	nop
 8007ba6:	e002      	b.n	8007bae <USBH_Process+0x292>
    break;       
 8007ba8:	bf00      	nop
 8007baa:	e000      	b.n	8007bae <USBH_Process+0x292>
    break;
 8007bac:	bf00      	nop
  }
 return USBH_OK;  
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af04      	add	r7, sp, #16
 8007bbe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;  
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->EnumState)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	785b      	ldrb	r3, [r3, #1]
 8007bc8:	2b07      	cmp	r3, #7
 8007bca:	f200 80f8 	bhi.w	8007dbe <USBH_HandleEnum+0x206>
 8007bce:	a201      	add	r2, pc, #4	; (adr r2, 8007bd4 <USBH_HandleEnum+0x1c>)
 8007bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd4:	08007bf5 	.word	0x08007bf5
 8007bd8:	08007c67 	.word	0x08007c67
 8007bdc:	08007c7f 	.word	0x08007c7f
 8007be0:	08007cf5 	.word	0x08007cf5
 8007be4:	08007d0b 	.word	0x08007d0b
 8007be8:	08007d27 	.word	0x08007d27
 8007bec:	08007d5b 	.word	0x08007d5b
 8007bf0:	08007d8f 	.word	0x08007d8f
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 8007bf4:	2108      	movs	r1, #8
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f984 	bl	8007f04 <USBH_Get_DevDesc>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f040 80df 	bne.w	8007dc2 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	7919      	ldrb	r1, [r3, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007c28:	b292      	uxth	r2, r2
 8007c2a:	9202      	str	r2, [sp, #8]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	9201      	str	r2, [sp, #4]
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	4603      	mov	r3, r0
 8007c34:	2280      	movs	r2, #128	; 0x80
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fe7d 	bl	8008936 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	7959      	ldrb	r1, [r3, #5]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);           
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007c50:	b292      	uxth	r2, r2
 8007c52:	9202      	str	r2, [sp, #8]
 8007c54:	2200      	movs	r2, #0
 8007c56:	9201      	str	r2, [sp, #4]
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fe69 	bl	8008936 <USBH_OpenPipe>
      
    }
    break;
 8007c64:	e0ad      	b.n	8007dc2 <USBH_HandleEnum+0x20a>
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8007c66:	2112      	movs	r1, #18
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f94b 	bl	8007f04 <USBH_Get_DevDesc>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f040 80a8 	bne.w	8007dc6 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
      
      phost->EnumState = ENUM_SET_ADDR;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	705a      	strb	r2, [r3, #1]
       
    }
    break;
 8007c7c:	e0a3      	b.n	8007dc6 <USBH_HandleEnum+0x20e>
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8007c7e:	2101      	movs	r1, #1
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f9eb 	bl	800805c <USBH_SetAddress>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f040 809e 	bne.w	8007dca <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2);
 8007c8e:	2002      	movs	r0, #2
 8007c90:	f001 fff4 	bl	8009c7c <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
      
      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2203      	movs	r2, #3
 8007ca0:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	7919      	ldrb	r1, [r3, #4]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007cb6:	b292      	uxth	r2, r2
 8007cb8:	9202      	str	r2, [sp, #8]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	9201      	str	r2, [sp, #4]
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2280      	movs	r2, #128	; 0x80
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fe36 	bl	8008936 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	7959      	ldrb	r1, [r3, #5]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);        
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007cde:	b292      	uxth	r2, r2
 8007ce0:	9202      	str	r2, [sp, #8]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	9201      	str	r2, [sp, #4]
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2200      	movs	r2, #0
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fe22 	bl	8008936 <USBH_OpenPipe>
    }
    break;
 8007cf2:	e06a      	b.n	8007dca <USBH_HandleEnum+0x212>
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
 8007cf4:	2109      	movs	r1, #9
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f92c 	bl	8007f54 <USBH_Get_CfgDesc>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d165      	bne.n	8007dce <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2204      	movs	r2, #4
 8007d06:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007d08:	e061      	b.n	8007dce <USBH_HandleEnum+0x216>
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f91e 	bl	8007f54 <USBH_Get_CfgDesc>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d159      	bne.n	8007dd2 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2205      	movs	r2, #5
 8007d22:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007d24:	e055      	b.n	8007dd2 <USBH_HandleEnum+0x21a>
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d010      	beq.n	8007d52 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 132e 	ldrb.w	r1, [r3, #814]	; 0x32e
                               phost->device.DevDesc.iManufacturer, 
                                phost->device.Data , 
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007d3c:	23ff      	movs	r3, #255	; 0xff
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f92c 	bl	8007f9c <USBH_Get_StringDesc>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d145      	bne.n	8007dd6 <USBH_HandleEnum+0x21e>
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2206      	movs	r2, #6
 8007d4e:	705a      	strb	r2, [r3, #1]
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    break;
 8007d50:	e041      	b.n	8007dd6 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2206      	movs	r2, #6
 8007d56:	705a      	strb	r2, [r3, #1]
    break;
 8007d58:	e03d      	b.n	8007dd6 <USBH_HandleEnum+0x21e>
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d010      	beq.n	8007d86 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 132f 	ldrb.w	r1, [r3, #815]	; 0x32f
                               phost->device.DevDesc.iProduct, 
                               phost->device.Data, 
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007d70:	23ff      	movs	r3, #255	; 0xff
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f912 	bl	8007f9c <USBH_Get_StringDesc>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d12d      	bne.n	8007dda <USBH_HandleEnum+0x222>
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2207      	movs	r2, #7
 8007d82:	705a      	strb	r2, [r3, #1]
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    } 
    break;
 8007d84:	e029      	b.n	8007dda <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2207      	movs	r2, #7
 8007d8a:	705a      	strb	r2, [r3, #1]
    break;
 8007d8c:	e025      	b.n	8007dda <USBH_HandleEnum+0x222>
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00f      	beq.n	8007db8 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iSerialNumber, 
                               phost->device.Data, 
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007da4:	23ff      	movs	r3, #255	; 0xff
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f8f8 	bl	8007f9c <USBH_Get_StringDesc>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d115      	bne.n	8007dde <USBH_HandleEnum+0x226>
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)phost->device.Data);
        Status = USBH_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	73fb      	strb	r3, [r7, #15]
      Status = USBH_OK;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    }  
    break;
 8007db6:	e012      	b.n	8007dde <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8007db8:	2300      	movs	r3, #0
 8007dba:	73fb      	strb	r3, [r7, #15]
    break;
 8007dbc:	e00f      	b.n	8007dde <USBH_HandleEnum+0x226>
    
  default:
    break;
 8007dbe:	bf00      	nop
 8007dc0:	e00e      	b.n	8007de0 <USBH_HandleEnum+0x228>
    break;
 8007dc2:	bf00      	nop
 8007dc4:	e00c      	b.n	8007de0 <USBH_HandleEnum+0x228>
    break;
 8007dc6:	bf00      	nop
 8007dc8:	e00a      	b.n	8007de0 <USBH_HandleEnum+0x228>
    break;
 8007dca:	bf00      	nop
 8007dcc:	e008      	b.n	8007de0 <USBH_HandleEnum+0x228>
    break;
 8007dce:	bf00      	nop
 8007dd0:	e006      	b.n	8007de0 <USBH_HandleEnum+0x228>
    break;
 8007dd2:	bf00      	nop
 8007dd4:	e004      	b.n	8007de0 <USBH_HandleEnum+0x228>
    break;
 8007dd6:	bf00      	nop
 8007dd8:	e002      	b.n	8007de0 <USBH_HandleEnum+0x228>
    break;
 8007dda:	bf00      	nop
 8007ddc:	e000      	b.n	8007de0 <USBH_HandleEnum+0x228>
    break;
 8007dde:	bf00      	nop
  }  
  return Status;
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop

08007dec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8007e18:	1c5a      	adds	r2, r3, #1
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
  USBH_HandleSof(phost);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f804 	bl	8007e2e <USBH_HandleSof>
}
 8007e26:	bf00      	nop
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b082      	sub	sp, #8
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b0a      	cmp	r3, #10
 8007e3e:	d10a      	bne.n	8007e56 <USBH_HandleSof+0x28>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d005      	beq.n	8007e56 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 33ac 	ldr.w	r3, [r3, #940]	; 0x3ac
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	4798      	blx	r3
  }
}
 8007e56:	bf00      	nop
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b082      	sub	sp, #8
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10f      	bne.n	8007e90 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
    
    if(phost->pUser != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00e      	beq.n	8007ea0 <USBH_LL_Connect+0x42>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007e88:	2104      	movs	r1, #4
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	4798      	blx	r3
 8007e8e:	e007      	b.n	8007ea0 <USBH_LL_Connect+0x42>
    }
  } 
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d102      	bne.n	8007ea0 <USBH_LL_Connect+0x42>
  {
    phost->gState = HOST_DEV_ATTACHED ;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	701a      	strb	r2, [r3, #0]
  }
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 fd40 	bl	8009938 <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	791b      	ldrb	r3, [r3, #4]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fd88 	bl	80089d4 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	795b      	ldrb	r3, [r3, #5]
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fd82 	bl	80089d4 <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d005      	beq.n	8007eee <USBH_LL_Disconnect+0x44>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007ee8:	2105      	movs	r1, #5
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 fcf0 	bl	80098d4 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2203      	movs	r2, #3
 8007ef8:	701a      	strb	r2, [r3, #0]
  
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;
  
  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  phost->device.Data,
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007f16:	78fb      	ldrb	r3, [r7, #3]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f22:	2100      	movs	r1, #0
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f864 	bl	8007ff2 <USBH_GetDescriptor>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73fb      	strb	r3, [r7, #15]
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10a      	bne.n	8007f4a <USBH_Get_DevDesc+0x46>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data, length);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f503 7048 	add.w	r0, r3, #800	; 0x320
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f40:	78fa      	ldrb	r2, [r7, #3]
 8007f42:	b292      	uxth	r2, r2
 8007f44:	4619      	mov	r1, r3
 8007f46:	f000 f8f4 	bl	8008132 <USBH_ParseDevDesc>
  }
  return status;      
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,                      
                             uint16_t length)

{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af02      	add	r7, sp, #8
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1)  
  pData = phost->device.CfgDesc_Raw;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	331c      	adds	r3, #28
 8007f64:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif  
  if((status = USBH_GetDescriptor(phost,
 8007f66:	887b      	ldrh	r3, [r7, #2]
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f70:	2100      	movs	r1, #0
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f83d 	bl	8007ff2 <USBH_GetDescriptor>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	72fb      	strb	r3, [r7, #11]
 8007f7c:	7afb      	ldrb	r3, [r7, #11]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d107      	bne.n	8007f92 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {
    
    /* Commands successfully sent and Response Received  */       
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f203 3332 	addw	r3, r3, #818	; 0x332
 8007f88:	887a      	ldrh	r2, [r7, #2]
 8007f8a:	68f9      	ldr	r1, [r7, #12]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 f940 	bl	8008212 <USBH_ParseCfgDesc>
                       pData,
                       length); 
    
  }
  return status;
 8007f92:	7afb      	ldrb	r3, [r7, #11]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b088      	sub	sp, #32
 8007fa0:	af02      	add	r7, sp, #8
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	607a      	str	r2, [r7, #4]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	460b      	mov	r3, r1
 8007faa:	72fb      	strb	r3, [r7, #11]
 8007fac:	4613      	mov	r3, r2
 8007fae:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8007fb0:	7afb      	ldrb	r3, [r7, #11]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007fb8:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  phost->device.Data,
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007fc0:	893b      	ldrh	r3, [r7, #8]
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 f812 	bl	8007ff2 <USBH_GetDescriptor>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	75fb      	strb	r3, [r7, #23]
 8007fd2:	7dfb      	ldrb	r3, [r7, #23]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d107      	bne.n	8007fe8 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(phost->device.Data,buff, length);    
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007fde:	893a      	ldrh	r2, [r7, #8]
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 fa17 	bl	8008416 <USBH_ParseStringDesc>
  }
  return status;
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,                          
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b084      	sub	sp, #16
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	60f8      	str	r0, [r7, #12]
 8007ffa:	607b      	str	r3, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	72fb      	strb	r3, [r7, #11]
 8008000:	4613      	mov	r3, r2
 8008002:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	789b      	ldrb	r3, [r3, #2]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d11c      	bne.n	8008046 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800800c:	7afb      	ldrb	r3, [r7, #11]
 800800e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008012:	b2da      	uxtb	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2206      	movs	r2, #6
 800801c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	893a      	ldrh	r2, [r7, #8]
 8008022:	825a      	strh	r2, [r3, #18]
    
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 8008024:	893b      	ldrh	r3, [r7, #8]
 8008026:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800802a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800802e:	d104      	bne.n	800803a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f240 4209 	movw	r2, #1033	; 0x409
 8008036:	829a      	strh	r2, [r3, #20]
 8008038:	e002      	b.n	8008040 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length; 
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	8b3a      	ldrh	r2, [r7, #24]
 8008044:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff , length );     
 8008046:	8b3b      	ldrh	r3, [r7, #24]
 8008048:	461a      	mov	r2, r3
 800804a:	6879      	ldr	r1, [r7, #4]
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 fa30 	bl	80084b2 <USBH_CtlReq>
 8008052:	4603      	mov	r3, r0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost, 
                                   uint8_t DeviceAddress)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	789b      	ldrb	r3, [r3, #2]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d10f      	bne.n	8008090 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2205      	movs	r2, #5
 800807a:	745a      	strb	r2, [r3, #17]
    
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	b29a      	uxth	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );
 8008090:	2200      	movs	r2, #0
 8008092:	2100      	movs	r1, #0
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fa0c 	bl	80084b2 <USBH_CtlReq>
 800809a:	4603      	mov	r3, r0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBH_SetCfg>:
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, 
                               uint16_t cfg_idx)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	460b      	mov	r3, r1
 80080ae:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	789b      	ldrb	r3, [r3, #2]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d10e      	bne.n	80080d6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2209      	movs	r2, #9
 80080c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	887a      	ldrh	r2, [r7, #2]
 80080c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0; 
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	82da      	strh	r2, [r3, #22]
  }
  
  return USBH_CtlReq(phost, 0 , 0 );      
 80080d6:	2200      	movs	r2, #0
 80080d8:	2100      	movs	r1, #0
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f9e9 	bl	80084b2 <USBH_CtlReq>
 80080e0:	4603      	mov	r3, r0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBH_ClrFeature>:
  * @param  hc_num: Host channel number 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost,
                                   uint8_t ep_num) 
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	789b      	ldrb	r3, [r3, #2]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d10f      	bne.n	800811e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2202      	movs	r2, #2
 8008102:	741a      	strb	r2, [r3, #16]
      USB_REQ_RECIPIENT_ENDPOINT |
        USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	b29a      	uxth	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;           
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );   
 800811e:	2200      	movs	r2, #0
 8008120:	2100      	movs	r1, #0
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f9c5 	bl	80084b2 <USBH_CtlReq>
 8008128:	4603      	mov	r3, r0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
 8008132:	b480      	push	{r7}
 8008134:	b085      	sub	sp, #20
 8008136:	af00      	add	r7, sp, #0
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	60b9      	str	r1, [r7, #8]
 800813c:	4613      	mov	r3, r2
 800813e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	781a      	ldrb	r2, [r3, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	785a      	ldrb	r2, [r3, #1]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	3302      	adds	r3, #2
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	b29a      	uxth	r2, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	3303      	adds	r3, #3
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	b29b      	uxth	r3, r3
 8008160:	021b      	lsls	r3, r3, #8
 8008162:	b29b      	uxth	r3, r3
 8008164:	4413      	add	r3, r2
 8008166:	b29a      	uxth	r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	791a      	ldrb	r2, [r3, #4]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	795a      	ldrb	r2, [r3, #5]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	799a      	ldrb	r2, [r3, #6]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	79da      	ldrb	r2, [r3, #7]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	71da      	strb	r2, [r3, #7]
  
  if (length > 8)
 800818c:	88fb      	ldrh	r3, [r7, #6]
 800818e:	2b08      	cmp	r3, #8
 8008190:	d939      	bls.n	8008206 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	3308      	adds	r3, #8
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	b29a      	uxth	r2, r3
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	3309      	adds	r3, #9
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	021b      	lsls	r3, r3, #8
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	4413      	add	r3, r2
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	330a      	adds	r3, #10
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	330b      	adds	r3, #11
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	021b      	lsls	r3, r3, #8
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	4413      	add	r3, r2
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	330c      	adds	r3, #12
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	330d      	adds	r3, #13
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	021b      	lsls	r3, r3, #8
 80081dc:	b29b      	uxth	r3, r3
 80081de:	4413      	add	r3, r2
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	7b9a      	ldrb	r2, [r3, #14]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	7bda      	ldrb	r2, [r3, #15]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	7c1a      	ldrb	r2, [r3, #16]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	7c5a      	ldrb	r2, [r3, #17]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	745a      	strb	r2, [r3, #17]
  }
}
 8008206:	bf00      	nop
 8008208:	3714      	adds	r7, #20
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <USBH_ParseCfgDesc>:
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc,
                               uint8_t *buf, 
                               uint16_t length)
{  
 8008212:	b580      	push	{r7, lr}
 8008214:	b08a      	sub	sp, #40	; 0x28
 8008216:	af00      	add	r7, sp, #0
 8008218:	60f8      	str	r0, [r7, #12]
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	4613      	mov	r3, r2
 800821e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;  
  USBH_DescHeader_t             *pdesc = (USBH_DescHeader_t *)buf;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                      ptr;
  int8_t                        if_ix = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  int8_t                        ep_ix = 0;  
 800822a:	2300      	movs	r3, #0
 800822c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  
  pdesc   = (USBH_DescHeader_t *)buf;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	781a      	ldrb	r2, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	785a      	ldrb	r2, [r3, #1]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	3302      	adds	r3, #2
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	b29a      	uxth	r2, r3
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	3303      	adds	r3, #3
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	b29b      	uxth	r3, r3
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	b29b      	uxth	r3, r3
 8008258:	4413      	add	r3, r2
 800825a:	b29a      	uxth	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	791a      	ldrb	r2, [r3, #4]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	795a      	ldrb	r2, [r3, #5]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	799a      	ldrb	r2, [r3, #6]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	79da      	ldrb	r2, [r3, #7]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	7a1a      	ldrb	r2, [r3, #8]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	721a      	strb	r2, [r3, #8]
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008288:	88fb      	ldrh	r3, [r7, #6]
 800828a:	2b09      	cmp	r3, #9
 800828c:	d963      	bls.n	8008356 <USBH_ParseCfgDesc+0x144>
  {
    ptr = USB_LEN_CFG_DESC;
 800828e:	2309      	movs	r3, #9
 8008290:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008292:	2300      	movs	r3, #0
 8008294:	61fb      	str	r3, [r7, #28]
    
    
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 8008296:	e055      	b.n	8008344 <USBH_ParseCfgDesc+0x132>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008298:	f107 0316 	add.w	r3, r7, #22
 800829c:	4619      	mov	r1, r3
 800829e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082a0:	f000 f8ec 	bl	800847c <USBH_GetNextDesc>
 80082a4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	785b      	ldrb	r3, [r3, #1]
 80082aa:	2b04      	cmp	r3, #4
 80082ac:	d14a      	bne.n	8008344 <USBH_ParseCfgDesc+0x132>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80082ae:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80082b2:	221a      	movs	r2, #26
 80082b4:	fb02 f303 	mul.w	r3, r2, r3
 80082b8:	3308      	adds	r3, #8
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	4413      	add	r3, r2
 80082be:	3302      	adds	r3, #2
 80082c0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)pdesc);            
 80082c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082c4:	69f8      	ldr	r0, [r7, #28]
 80082c6:	f000 f84a 	bl	800835e <USBH_ParseInterfaceDesc>
        
        ep_ix = 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;        
 80082d0:	2300      	movs	r3, #0
 80082d2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082d4:	e024      	b.n	8008320 <USBH_ParseCfgDesc+0x10e>
        {
          pdesc = USBH_GetNextDesc((uint8_t*) pdesc, &ptr);
 80082d6:	f107 0316 	add.w	r3, r7, #22
 80082da:	4619      	mov	r1, r3
 80082dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082de:	f000 f8cd 	bl	800847c <USBH_GetNextDesc>
 80082e2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	2b05      	cmp	r3, #5
 80082ea:	d119      	bne.n	8008320 <USBH_ParseCfgDesc+0x10e>
          {  
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80082ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80082f0:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 80082f4:	3201      	adds	r2, #1
 80082f6:	00d2      	lsls	r2, r2, #3
 80082f8:	211a      	movs	r1, #26
 80082fa:	fb01 f303 	mul.w	r3, r1, r3
 80082fe:	4413      	add	r3, r2
 8008300:	3308      	adds	r3, #8
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	4413      	add	r3, r2
 8008306:	3304      	adds	r3, #4
 8008308:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
 800830a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800830c:	69b8      	ldr	r0, [r7, #24]
 800830e:	f000 f855 	bl	80083bc <USBH_ParseEPDesc>
            ep_ix++;
 8008312:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8008316:	b2db      	uxtb	r3, r3
 8008318:	3301      	adds	r3, #1
 800831a:	b2db      	uxtb	r3, r3
 800831c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008320:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8008324:	69fa      	ldr	r2, [r7, #28]
 8008326:	7912      	ldrb	r2, [r2, #4]
 8008328:	4293      	cmp	r3, r2
 800832a:	da04      	bge.n	8008336 <USBH_ParseCfgDesc+0x124>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	885a      	ldrh	r2, [r3, #2]
 8008330:	8afb      	ldrh	r3, [r7, #22]
 8008332:	429a      	cmp	r2, r3
 8008334:	d8cf      	bhi.n	80082d6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008336:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800833a:	b2db      	uxtb	r3, r3
 800833c:	3301      	adds	r3, #1
 800833e:	b2db      	uxtb	r3, r3
 8008340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 8008344:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008348:	2b03      	cmp	r3, #3
 800834a:	dc04      	bgt.n	8008356 <USBH_ParseCfgDesc+0x144>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	885a      	ldrh	r2, [r3, #2]
 8008350:	8afb      	ldrh	r3, [r7, #22]
 8008352:	429a      	cmp	r2, r3
 8008354:	d8a0      	bhi.n	8008298 <USBH_ParseCfgDesc+0x86>
      }
    }
  }  
}
 8008356:	bf00      	nop
 8008358:	3728      	adds	r7, #40	; 0x28
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor, 
                                      uint8_t *buf)
{
 800835e:	b480      	push	{r7}
 8008360:	b083      	sub	sp, #12
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	781a      	ldrb	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	785a      	ldrb	r2, [r3, #1]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	789a      	ldrb	r2, [r3, #2]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	78da      	ldrb	r2, [r3, #3]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	791a      	ldrb	r2, [r3, #4]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	795a      	ldrb	r2, [r3, #5]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	799a      	ldrb	r2, [r3, #6]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	79da      	ldrb	r2, [r3, #7]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	7a1a      	ldrb	r2, [r3, #8]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	721a      	strb	r2, [r3, #8]
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	781a      	ldrb	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	785a      	ldrb	r2, [r3, #1]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	789a      	ldrb	r2, [r3, #2]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	78da      	ldrb	r2, [r3, #3]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	3304      	adds	r3, #4
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	3305      	adds	r3, #5
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	021b      	lsls	r3, r3, #8
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	4413      	add	r3, r2
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	799a      	ldrb	r2, [r3, #6]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	719a      	strb	r2, [r3, #6]
}
 800840a:	bf00      	nop
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <USBH_ParseStringDesc>:
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, 
                                  uint8_t* pdest, 
                                  uint16_t length)
{
 8008416:	b480      	push	{r7}
 8008418:	b087      	sub	sp, #28
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	4613      	mov	r3, r2
 8008422:	80fb      	strh	r3, [r7, #6]
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3301      	adds	r3, #1
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b03      	cmp	r3, #3
 800842c:	d120      	bne.n	8008470 <USBH_ParseStringDesc+0x5a>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	1e9a      	subs	r2, r3, #2
 8008434:	88fb      	ldrh	r3, [r7, #6]
 8008436:	4293      	cmp	r3, r2
 8008438:	bfa8      	it	ge
 800843a:	4613      	movge	r3, r2
 800843c:	82bb      	strh	r3, [r7, #20]
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	3302      	adds	r3, #2
 8008442:	60fb      	str	r3, [r7, #12]
    
    for (idx = 0; idx < strlength; idx+=2 )
 8008444:	2300      	movs	r3, #0
 8008446:	82fb      	strh	r3, [r7, #22]
 8008448:	e00b      	b.n	8008462 <USBH_ParseStringDesc+0x4c>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800844a:	8afb      	ldrh	r3, [r7, #22]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	4413      	add	r3, r2
 8008450:	781a      	ldrb	r2, [r3, #0]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	3301      	adds	r3, #1
 800845a:	60bb      	str	r3, [r7, #8]
    for (idx = 0; idx < strlength; idx+=2 )
 800845c:	8afb      	ldrh	r3, [r7, #22]
 800845e:	3302      	adds	r3, #2
 8008460:	82fb      	strh	r3, [r7, #22]
 8008462:	8afa      	ldrh	r2, [r7, #22]
 8008464:	8abb      	ldrh	r3, [r7, #20]
 8008466:	429a      	cmp	r2, r3
 8008468:	d3ef      	bcc.n	800844a <USBH_ParseStringDesc+0x34>
    }  
    *pdest = 0; /* mark end of string */  
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2200      	movs	r2, #0
 800846e:	701a      	strb	r2, [r3, #0]
  }
}
 8008470:	bf00      	nop
 8008472:	371c      	adds	r7, #28
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	881a      	ldrh	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	b29b      	uxth	r3, r3
 8008490:	4413      	add	r3, r2
 8008492:	b29a      	uxth	r2, r3
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
         ((USBH_DescHeader_t *)pbuf)->bLength);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4413      	add	r3, r2
 80084a2:	60fb      	str	r3, [r7, #12]
 
  return(pnext);
 80084a4:	68fb      	ldr	r3, [r7, #12]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b086      	sub	sp, #24
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	4613      	mov	r3, r2
 80084be:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80084c0:	2301      	movs	r3, #1
 80084c2:	75fb      	strb	r3, [r7, #23]
  
  switch (phost->RequestState)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	789b      	ldrb	r3, [r3, #2]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d002      	beq.n	80084d2 <USBH_CtlReq+0x20>
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d00f      	beq.n	80084f0 <USBH_CtlReq+0x3e>
      status = USBH_FAIL;
    }   
    break;
    
  default:
    break; 
 80084d0:	e028      	b.n	8008524 <USBH_CtlReq+0x72>
    phost->Control.buff = buff; 
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	88fa      	ldrh	r2, [r7, #6]
 80084dc:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;  
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2201      	movs	r2, #1
 80084e2:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2202      	movs	r2, #2
 80084e8:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 80084ea:	2301      	movs	r3, #1
 80084ec:	75fb      	strb	r3, [r7, #23]
    break;
 80084ee:	e019      	b.n	8008524 <USBH_CtlReq+0x72>
    status = USBH_HandleControl(phost);
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 f81d 	bl	8008530 <USBH_HandleControl>
 80084f6:	4603      	mov	r3, r0
 80084f8:	75fb      	strb	r3, [r7, #23]
     if (status == USBH_OK) 
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d108      	bne.n	8008512 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2201      	movs	r2, #1
 8008504:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;  
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;      
 800850c:	2300      	movs	r3, #0
 800850e:	75fb      	strb	r3, [r7, #23]
    break;
 8008510:	e007      	b.n	8008522 <USBH_CtlReq+0x70>
    else if  (status == USBH_FAIL)
 8008512:	7dfb      	ldrb	r3, [r7, #23]
 8008514:	2b02      	cmp	r3, #2
 8008516:	d104      	bne.n	8008522 <USBH_CtlReq+0x70>
      phost->RequestState = CMD_SEND;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2201      	movs	r2, #1
 800851c:	709a      	strb	r2, [r3, #2]
      status = USBH_FAIL;
 800851e:	2302      	movs	r3, #2
 8008520:	75fb      	strb	r3, [r7, #23]
    break;
 8008522:	bf00      	nop
  }
  return status;
 8008524:	7dfb      	ldrb	r3, [r7, #23]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
	...

08008530 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af02      	add	r7, sp, #8
 8008536:	6078      	str	r0, [r7, #4]
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8008538:	2301      	movs	r3, #1
 800853a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800853c:	2300      	movs	r3, #0
 800853e:	73bb      	strb	r3, [r7, #14]
  
  switch (phost->Control.state)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	7e1b      	ldrb	r3, [r3, #24]
 8008544:	3b01      	subs	r3, #1
 8008546:	2b0a      	cmp	r3, #10
 8008548:	f200 8149 	bhi.w	80087de <USBH_HandleControl+0x2ae>
 800854c:	a201      	add	r2, pc, #4	; (adr r2, 8008554 <USBH_HandleControl+0x24>)
 800854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008552:	bf00      	nop
 8008554:	08008581 	.word	0x08008581
 8008558:	0800859b 	.word	0x0800859b
 800855c:	080085ff 	.word	0x080085ff
 8008560:	08008625 	.word	0x08008625
 8008564:	0800865d 	.word	0x0800865d
 8008568:	08008689 	.word	0x08008689
 800856c:	080086db 	.word	0x080086db
 8008570:	080086fd 	.word	0x080086fd
 8008574:	08008739 	.word	0x08008739
 8008578:	08008761 	.word	0x08008761
 800857c:	0800879f 	.word	0x0800879f
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
	                   (uint8_t *)phost->Control.setup.d8 , 
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f103 0110 	add.w	r1, r3, #16
    USBH_CtlSendSetup     (phost, 
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	795b      	ldrb	r3, [r3, #5]
 800858a:	461a      	mov	r2, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f937 	bl	8008800 <USBH_CtlSendSetup>
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2202      	movs	r2, #2
 8008596:	761a      	strb	r2, [r3, #24]
    break; 
 8008598:	e12c      	b.n	80087f4 <USBH_HandleControl+0x2c4>
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	795b      	ldrb	r3, [r3, #5]
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 fb17 	bl	8009bd4 <USBH_LL_GetURBState>
 80085a6:	4603      	mov	r3, r0
 80085a8:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d11e      	bne.n	80085ee <USBH_HandleControl+0xbe>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	7c1b      	ldrb	r3, [r3, #16]
 80085b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085b8:	737b      	strb	r3, [r7, #13]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	8adb      	ldrh	r3, [r3, #22]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <USBH_HandleControl+0xa8>
      {        
        if (direction == USB_D2H)
 80085c2:	7b7b      	ldrb	r3, [r7, #13]
 80085c4:	2b80      	cmp	r3, #128	; 0x80
 80085c6:	d103      	bne.n	80085d0 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2203      	movs	r2, #3
 80085cc:	761a      	strb	r2, [r3, #24]
      phost->Control.state = CTRL_ERROR;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }    
    break;
 80085ce:	e108      	b.n	80087e2 <USBH_HandleControl+0x2b2>
          phost->Control.state = CTRL_DATA_OUT;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2205      	movs	r2, #5
 80085d4:	761a      	strb	r2, [r3, #24]
    break;
 80085d6:	e104      	b.n	80087e2 <USBH_HandleControl+0x2b2>
        if (direction == USB_D2H)
 80085d8:	7b7b      	ldrb	r3, [r7, #13]
 80085da:	2b80      	cmp	r3, #128	; 0x80
 80085dc:	d103      	bne.n	80085e6 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2209      	movs	r2, #9
 80085e2:	761a      	strb	r2, [r3, #24]
    break;
 80085e4:	e0fd      	b.n	80087e2 <USBH_HandleControl+0x2b2>
          phost->Control.state = CTRL_STATUS_IN;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2207      	movs	r2, #7
 80085ea:	761a      	strb	r2, [r3, #24]
    break;
 80085ec:	e0f9      	b.n	80087e2 <USBH_HandleControl+0x2b2>
    else if(URB_Status == USBH_URB_ERROR)
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
 80085f0:	2b04      	cmp	r3, #4
 80085f2:	f040 80f6 	bne.w	80087e2 <USBH_HandleControl+0x2b2>
      phost->Control.state = CTRL_ERROR;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	220b      	movs	r2, #11
 80085fa:	761a      	strb	r2, [r3, #24]
    break;
 80085fc:	e0f1      	b.n	80087e2 <USBH_HandleControl+0x2b2>
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
     phost->Control.timer = phost->Timer;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8008604:	b29a      	uxth	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6899      	ldr	r1, [r3, #8]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	899a      	ldrh	r2, [r3, #12]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	791b      	ldrb	r3, [r3, #4]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f931 	bl	800887e <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.pipe_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2204      	movs	r2, #4
 8008620:	761a      	strb	r2, [r3, #24]
    break;    
 8008622:	e0e7      	b.n	80087f4 <USBH_HandleControl+0x2c4>
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	791b      	ldrb	r3, [r3, #4]
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f001 fad2 	bl	8009bd4 <USBH_LL_GetURBState>
 8008630:	4603      	mov	r3, r0
 8008632:	73bb      	strb	r3, [r7, #14]
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8008634:	7bbb      	ldrb	r3, [r7, #14]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d102      	bne.n	8008640 <USBH_HandleControl+0x110>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2209      	movs	r2, #9
 800863e:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	2b05      	cmp	r3, #5
 8008644:	d102      	bne.n	800864c <USBH_HandleControl+0x11c>
    { 
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8008646:	2303      	movs	r3, #3
 8008648:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_ERROR;  
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 800864a:	e0cc      	b.n	80087e6 <USBH_HandleControl+0x2b6>
    else if (URB_Status == USBH_URB_ERROR)
 800864c:	7bbb      	ldrb	r3, [r7, #14]
 800864e:	2b04      	cmp	r3, #4
 8008650:	f040 80c9 	bne.w	80087e6 <USBH_HandleControl+0x2b6>
      phost->Control.state = CTRL_ERROR;  
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	220b      	movs	r2, #11
 8008658:	761a      	strb	r2, [r3, #24]
    break;
 800865a:	e0c4      	b.n	80087e6 <USBH_HandleControl+0x2b6>
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6899      	ldr	r1, [r3, #8]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	899a      	ldrh	r2, [r3, #12]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	7958      	ldrb	r0, [r3, #5]
 8008668:	2301      	movs	r3, #1
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	4603      	mov	r3, r0
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f8e0 	bl	8008834 <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 800867a:	b29a      	uxth	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2206      	movs	r2, #6
 8008684:	761a      	strb	r2, [r3, #24]
    break;
 8008686:	e0b5      	b.n	80087f4 <USBH_HandleControl+0x2c4>
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	795b      	ldrb	r3, [r3, #5]
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f001 faa0 	bl	8009bd4 <USBH_LL_GetURBState>
 8008694:	4603      	mov	r3, r0
 8008696:	73bb      	strb	r3, [r7, #14]
    
    if  (URB_Status == USBH_URB_DONE)
 8008698:	7bbb      	ldrb	r3, [r7, #14]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d103      	bne.n	80086a6 <USBH_HandleControl+0x176>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2207      	movs	r2, #7
 80086a2:	761a      	strb	r2, [r3, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    } 
    break;
 80086a4:	e0a1      	b.n	80087ea <USBH_HandleControl+0x2ba>
    else if  (URB_Status == USBH_URB_STALL) 
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	2b05      	cmp	r3, #5
 80086aa:	d105      	bne.n	80086b8 <USBH_HandleControl+0x188>
      phost->Control.state = CTRL_STALLED; 
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	220c      	movs	r2, #12
 80086b0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80086b2:	2303      	movs	r3, #3
 80086b4:	73fb      	strb	r3, [r7, #15]
    break;
 80086b6:	e098      	b.n	80087ea <USBH_HandleControl+0x2ba>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80086b8:	7bbb      	ldrb	r3, [r7, #14]
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d103      	bne.n	80086c6 <USBH_HandleControl+0x196>
      phost->Control.state = CTRL_DATA_OUT;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2205      	movs	r2, #5
 80086c2:	761a      	strb	r2, [r3, #24]
    break;
 80086c4:	e091      	b.n	80087ea <USBH_HandleControl+0x2ba>
    else if (URB_Status == USBH_URB_ERROR)
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	f040 808e 	bne.w	80087ea <USBH_HandleControl+0x2ba>
      phost->Control.state = CTRL_ERROR;  
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	220b      	movs	r2, #11
 80086d2:	761a      	strb	r2, [r3, #24]
      status = USBH_FAIL;    
 80086d4:	2302      	movs	r3, #2
 80086d6:	73fb      	strb	r3, [r7, #15]
    break;
 80086d8:	e087      	b.n	80087ea <USBH_HandleControl+0x2ba>
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	791b      	ldrb	r3, [r3, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	2100      	movs	r1, #0
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f8cb 	bl	800887e <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.pipe_in);
    phost->Control.timer = phost->Timer;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2208      	movs	r2, #8
 80086f8:	761a      	strb	r2, [r3, #24]
    
    break;
 80086fa:	e07b      	b.n	80087f4 <USBH_HandleControl+0x2c4>
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	791b      	ldrb	r3, [r3, #4]
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f001 fa66 	bl	8009bd4 <USBH_LL_GetURBState>
 8008708:	4603      	mov	r3, r0
 800870a:	73bb      	strb	r3, [r7, #14]
    
    if  ( URB_Status == USBH_URB_DONE)
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d105      	bne.n	800871e <USBH_HandleControl+0x1ee>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	220d      	movs	r2, #13
 8008716:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	73fb      	strb	r3, [r7, #15]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 800871c:	e067      	b.n	80087ee <USBH_HandleControl+0x2be>
    else if (URB_Status == USBH_URB_ERROR)
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	2b04      	cmp	r3, #4
 8008722:	d103      	bne.n	800872c <USBH_HandleControl+0x1fc>
      phost->Control.state = CTRL_ERROR;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	220b      	movs	r2, #11
 8008728:	761a      	strb	r2, [r3, #24]
    break;
 800872a:	e060      	b.n	80087ee <USBH_HandleControl+0x2be>
     else if(URB_Status == USBH_URB_STALL)
 800872c:	7bbb      	ldrb	r3, [r7, #14]
 800872e:	2b05      	cmp	r3, #5
 8008730:	d15d      	bne.n	80087ee <USBH_HandleControl+0x2be>
      status = USBH_NOT_SUPPORTED;
 8008732:	2303      	movs	r3, #3
 8008734:	73fb      	strb	r3, [r7, #15]
    break;
 8008736:	e05a      	b.n	80087ee <USBH_HandleControl+0x2be>
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	795a      	ldrb	r2, [r3, #5]
 800873c:	2301      	movs	r3, #1
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	4613      	mov	r3, r2
 8008742:	2200      	movs	r2, #0
 8008744:	2100      	movs	r1, #0
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f874 	bl	8008834 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8008752:	b29a      	uxth	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	220a      	movs	r2, #10
 800875c:	761a      	strb	r2, [r3, #24]
    break;
 800875e:	e049      	b.n	80087f4 <USBH_HandleControl+0x2c4>
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	795b      	ldrb	r3, [r3, #5]
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 fa34 	bl	8009bd4 <USBH_LL_GetURBState>
 800876c:	4603      	mov	r3, r0
 800876e:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8008770:	7bbb      	ldrb	r3, [r7, #14]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d105      	bne.n	8008782 <USBH_HandleControl+0x252>
    { 
      status = USBH_OK;      
 8008776:	2300      	movs	r3, #0
 8008778:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE; 
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	220d      	movs	r2, #13
 800877e:	761a      	strb	r2, [r3, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 8008780:	e037      	b.n	80087f2 <USBH_HandleControl+0x2c2>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008782:	7bbb      	ldrb	r3, [r7, #14]
 8008784:	2b02      	cmp	r3, #2
 8008786:	d103      	bne.n	8008790 <USBH_HandleControl+0x260>
      phost->Control.state = CTRL_STATUS_OUT;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2209      	movs	r2, #9
 800878c:	761a      	strb	r2, [r3, #24]
    break;
 800878e:	e030      	b.n	80087f2 <USBH_HandleControl+0x2c2>
    else if (URB_Status == USBH_URB_ERROR)
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	2b04      	cmp	r3, #4
 8008794:	d12d      	bne.n	80087f2 <USBH_HandleControl+0x2c2>
      phost->Control.state = CTRL_ERROR; 
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	220b      	movs	r2, #11
 800879a:	761a      	strb	r2, [r3, #24]
    break;
 800879c:	e029      	b.n	80087f2 <USBH_HandleControl+0x2c2>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	7e5b      	ldrb	r3, [r3, #25]
 80087a2:	3301      	adds	r3, #1
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	765a      	strb	r2, [r3, #25]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	7e5b      	ldrb	r3, [r3, #25]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d809      	bhi.n	80087c6 <USBH_HandleControl+0x296>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f001 f8c0 	bl	8009938 <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80087c4:	e016      	b.n	80087f4 <USBH_HandleControl+0x2c4>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80087cc:	2106      	movs	r1, #6
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	4798      	blx	r3
      phost->Control.errorcount = 0;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80087d8:	2302      	movs	r3, #2
 80087da:	73fb      	strb	r3, [r7, #15]
    break;
 80087dc:	e00a      	b.n	80087f4 <USBH_HandleControl+0x2c4>
    
  default:
    break;
 80087de:	bf00      	nop
 80087e0:	e008      	b.n	80087f4 <USBH_HandleControl+0x2c4>
    break;
 80087e2:	bf00      	nop
 80087e4:	e006      	b.n	80087f4 <USBH_HandleControl+0x2c4>
    break;
 80087e6:	bf00      	nop
 80087e8:	e004      	b.n	80087f4 <USBH_HandleControl+0x2c4>
    break;
 80087ea:	bf00      	nop
 80087ec:	e002      	b.n	80087f4 <USBH_HandleControl+0x2c4>
    break;
 80087ee:	bf00      	nop
 80087f0:	e000      	b.n	80087f4 <USBH_HandleControl+0x2c4>
    break;
 80087f2:	bf00      	nop
  }
  return status;
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop

08008800 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b088      	sub	sp, #32
 8008804:	af04      	add	r7, sp, #16
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	4613      	mov	r3, r2
 800880c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800880e:	79f9      	ldrb	r1, [r7, #7]
 8008810:	2300      	movs	r3, #0
 8008812:	9303      	str	r3, [sp, #12]
 8008814:	2308      	movs	r3, #8
 8008816:	9302      	str	r3, [sp, #8]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	2300      	movs	r3, #0
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	2300      	movs	r3, #0
 8008822:	2200      	movs	r2, #0
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f001 f98d 	bl	8009b44 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b088      	sub	sp, #32
 8008838:	af04      	add	r7, sp, #16
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	4611      	mov	r1, r2
 8008840:	461a      	mov	r2, r3
 8008842:	460b      	mov	r3, r1
 8008844:	80fb      	strh	r3, [r7, #6]
 8008846:	4613      	mov	r3, r2
 8008848:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <USBH_CtlSendData+0x24>
  {
    do_ping = 0;
 8008854:	2300      	movs	r3, #0
 8008856:	763b      	strb	r3, [r7, #24]
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008858:	7979      	ldrb	r1, [r7, #5]
 800885a:	7e3b      	ldrb	r3, [r7, #24]
 800885c:	9303      	str	r3, [sp, #12]
 800885e:	88fb      	ldrh	r3, [r7, #6]
 8008860:	9302      	str	r3, [sp, #8]
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	9301      	str	r3, [sp, #4]
 8008866:	2301      	movs	r3, #1
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	2300      	movs	r3, #0
 800886c:	2200      	movs	r2, #0
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f001 f968 	bl	8009b44 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b088      	sub	sp, #32
 8008882:	af04      	add	r7, sp, #16
 8008884:	60f8      	str	r0, [r7, #12]
 8008886:	60b9      	str	r1, [r7, #8]
 8008888:	4611      	mov	r1, r2
 800888a:	461a      	mov	r2, r3
 800888c:	460b      	mov	r3, r1
 800888e:	80fb      	strh	r3, [r7, #6]
 8008890:	4613      	mov	r3, r2
 8008892:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008894:	7979      	ldrb	r1, [r7, #5]
 8008896:	2300      	movs	r3, #0
 8008898:	9303      	str	r3, [sp, #12]
 800889a:	88fb      	ldrh	r3, [r7, #6]
 800889c:	9302      	str	r3, [sp, #8]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	2301      	movs	r3, #1
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	2300      	movs	r3, #0
 80088a8:	2201      	movs	r2, #1
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f001 f94a 	bl	8009b44 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
 80088b0:	2300      	movs	r3, #0
  
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t pipe_num)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b088      	sub	sp, #32
 80088be:	af04      	add	r7, sp, #16
 80088c0:	60f8      	str	r0, [r7, #12]
 80088c2:	60b9      	str	r1, [r7, #8]
 80088c4:	4611      	mov	r1, r2
 80088c6:	461a      	mov	r2, r3
 80088c8:	460b      	mov	r3, r1
 80088ca:	71fb      	strb	r3, [r7, #7]
 80088cc:	4613      	mov	r3, r2
 80088ce:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	79b9      	ldrb	r1, [r7, #6]
 80088d6:	2200      	movs	r2, #0
 80088d8:	9203      	str	r2, [sp, #12]
 80088da:	9302      	str	r3, [sp, #8]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	9301      	str	r3, [sp, #4]
 80088e0:	2301      	movs	r3, #1
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	2303      	movs	r3, #3
 80088e6:	2201      	movs	r2, #1
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f001 f92b 	bl	8009b44 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0); 
  
  return USBH_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBH_InterruptSendData>:
  */
USBH_StatusTypeDef USBH_InterruptSendData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t length,
                                uint8_t pipe_num)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af04      	add	r7, sp, #16
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	4611      	mov	r1, r2
 8008904:	461a      	mov	r2, r3
 8008906:	460b      	mov	r3, r1
 8008908:	71fb      	strb	r3, [r7, #7]
 800890a:	4613      	mov	r3, r2
 800890c:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800890e:	79fb      	ldrb	r3, [r7, #7]
 8008910:	b29b      	uxth	r3, r3
 8008912:	79b9      	ldrb	r1, [r7, #6]
 8008914:	2200      	movs	r2, #0
 8008916:	9203      	str	r2, [sp, #12]
 8008918:	9302      	str	r3, [sp, #8]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	2301      	movs	r3, #1
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	2303      	movs	r3, #3
 8008924:	2200      	movs	r2, #0
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f001 f90c 	bl	8009b44 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);  
  
  return USBH_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b086      	sub	sp, #24
 800893a:	af04      	add	r7, sp, #16
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	4608      	mov	r0, r1
 8008940:	4611      	mov	r1, r2
 8008942:	461a      	mov	r2, r3
 8008944:	4603      	mov	r3, r0
 8008946:	70fb      	strb	r3, [r7, #3]
 8008948:	460b      	mov	r3, r1
 800894a:	70bb      	strb	r3, [r7, #2]
 800894c:	4613      	mov	r3, r2
 800894e:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8008950:	7878      	ldrb	r0, [r7, #1]
 8008952:	78ba      	ldrb	r2, [r7, #2]
 8008954:	78f9      	ldrb	r1, [r7, #3]
 8008956:	8b3b      	ldrh	r3, [r7, #24]
 8008958:	9302      	str	r3, [sp, #8]
 800895a:	7d3b      	ldrb	r3, [r7, #20]
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	7c3b      	ldrb	r3, [r7, #16]
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	4603      	mov	r3, r0
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f001 f871 	bl	8009a4c <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  
  return USBH_OK; 
 800896a:	2300      	movs	r3, #0

}
 800896c:	4618      	mov	r0, r3
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	460b      	mov	r3, r1
 800897e:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8008980:	78fb      	ldrb	r3, [r7, #3]
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 f8a7 	bl	8009ad8 <USBH_LL_ClosePipe>
  
  return USBH_OK; 
 800898a:	2300      	movs	r3, #0

}
 800898c:	4618      	mov	r0, r3
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;
  
  pipe =  USBH_GetFreePipe(phost);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f836 	bl	8008a12 <USBH_GetFreePipe>
 80089a6:	4603      	mov	r3, r0
 80089a8:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFF)
 80089aa:	89fb      	ldrh	r3, [r7, #14]
 80089ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d009      	beq.n	80089c8 <USBH_AllocPipe+0x34>
  {
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 80089b4:	89fb      	ldrh	r3, [r7, #14]
 80089b6:	78fa      	ldrb	r2, [r7, #3]
 80089b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089bc:	4611      	mov	r1, r2
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	33ec      	adds	r3, #236	; 0xec
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	6059      	str	r1, [r3, #4]
  }
  return pipe;
 80089c8:	89fb      	ldrh	r3, [r7, #14]
 80089ca:	b2db      	uxtb	r3, r3
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	460b      	mov	r3, r1
 80089de:	70fb      	strb	r3, [r7, #3]
   if(idx < 11)
 80089e0:	78fb      	ldrb	r3, [r7, #3]
 80089e2:	2b0a      	cmp	r3, #10
 80089e4:	d80e      	bhi.n	8008a04 <USBH_FreePipe+0x30>
   {
	 phost->Pipes[idx] &= 0x7FFF;
 80089e6:	78f8      	ldrb	r0, [r7, #3]
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	33ec      	adds	r3, #236	; 0xec
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80089f8:	6879      	ldr	r1, [r7, #4]
 80089fa:	f100 03ec 	add.w	r3, r0, #236	; 0xec
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	440b      	add	r3, r1
 8008a02:	605a      	str	r2, [r3, #4]
   }
   return USBH_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b085      	sub	sp, #20
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	73fb      	strb	r3, [r7, #15]
  
  for (idx = 0 ; idx < 11 ; idx++)
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]
 8008a22:	e00f      	b.n	8008a44 <USBH_GetFreePipe+0x32>
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	33ec      	adds	r3, #236	; 0xec
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d102      	bne.n	8008a3e <USBH_GetFreePipe+0x2c>
	{
	   return idx;
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	e007      	b.n	8008a4e <USBH_GetFreePipe+0x3c>
  for (idx = 0 ; idx < 11 ; idx++)
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	3301      	adds	r3, #1
 8008a42:	73fb      	strb	r3, [r7, #15]
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	2b0a      	cmp	r3, #10
 8008a48:	d9ec      	bls.n	8008a24 <USBH_GetFreePipe+0x12>
	} 
  }
  return 0xFFFF;
 8008a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
	...

08008a5c <ChangeButtonMappingKB>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void ChangeButtonMappingKB(uint8_t bt)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	4603      	mov	r3, r0
 8008a64:	71fb      	strb	r3, [r7, #7]
    if(state == A_UP) // state = 1 --> analog up
 8008a66:	4b53      	ldr	r3, [pc, #332]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d104      	bne.n	8008a78 <ChangeButtonMappingKB+0x1c>
    {
        controls.KBControls.KEYBOARD_a_up = bt;
 8008a6e:	4a52      	ldr	r2, [pc, #328]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008a70:	79fb      	ldrb	r3, [r7, #7]
 8008a72:	f882 307e 	strb.w	r3, [r2, #126]	; 0x7e
    }
    else if(state == BUTTON_Z) // state = 18 --> Z
    {
        controls.KBControls.KEYBOARD_z = bt;
    }
}
 8008a76:	e097      	b.n	8008ba8 <ChangeButtonMappingKB+0x14c>
    else if(state == A_DOWN) // state = 2 --> analog up
 8008a78:	4b4e      	ldr	r3, [pc, #312]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d104      	bne.n	8008a8a <ChangeButtonMappingKB+0x2e>
        controls.KBControls.KEYBOARD_a_down = bt;
 8008a80:	4a4d      	ldr	r2, [pc, #308]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008a82:	79fb      	ldrb	r3, [r7, #7]
 8008a84:	f882 307f 	strb.w	r3, [r2, #127]	; 0x7f
}
 8008a88:	e08e      	b.n	8008ba8 <ChangeButtonMappingKB+0x14c>
    else if(state == A_LEFT) // state = 3 --> analog up
 8008a8a:	4b4a      	ldr	r3, [pc, #296]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d104      	bne.n	8008a9c <ChangeButtonMappingKB+0x40>
        controls.KBControls.KEYBOARD_a_left = bt;
 8008a92:	4a49      	ldr	r2, [pc, #292]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008a94:	79fb      	ldrb	r3, [r7, #7]
 8008a96:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
}
 8008a9a:	e085      	b.n	8008ba8 <ChangeButtonMappingKB+0x14c>
    else if(state == A_RIGHT) // state = 4 --> analog up
 8008a9c:	4b45      	ldr	r3, [pc, #276]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	d104      	bne.n	8008aae <ChangeButtonMappingKB+0x52>
        controls.KBControls.KEYBOARD_a_right = bt;
 8008aa4:	4a44      	ldr	r2, [pc, #272]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008aa6:	79fb      	ldrb	r3, [r7, #7]
 8008aa8:	f882 3081 	strb.w	r3, [r2, #129]	; 0x81
}
 8008aac:	e07c      	b.n	8008ba8 <ChangeButtonMappingKB+0x14c>
    else if(state == DPAD_UP) // state = 5 --> dpad up
 8008aae:	4b41      	ldr	r3, [pc, #260]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b05      	cmp	r3, #5
 8008ab4:	d104      	bne.n	8008ac0 <ChangeButtonMappingKB+0x64>
        controls.KBControls.KEYBOARD_d_up = bt;
 8008ab6:	4a40      	ldr	r2, [pc, #256]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008ab8:	79fb      	ldrb	r3, [r7, #7]
 8008aba:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
}
 8008abe:	e073      	b.n	8008ba8 <ChangeButtonMappingKB+0x14c>
    else if(state == DPAD_DOWN) // state = 6 --> dpad down
 8008ac0:	4b3c      	ldr	r3, [pc, #240]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	2b06      	cmp	r3, #6
 8008ac6:	d104      	bne.n	8008ad2 <ChangeButtonMappingKB+0x76>
        controls.KBControls.KEYBOARD_d_down = bt;
 8008ac8:	4a3b      	ldr	r2, [pc, #236]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008aca:	79fb      	ldrb	r3, [r7, #7]
 8008acc:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
}
 8008ad0:	e06a      	b.n	8008ba8 <ChangeButtonMappingKB+0x14c>
    else if(state == DPAD_LEFT) // state = 7 --> dpad left
 8008ad2:	4b38      	ldr	r3, [pc, #224]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b07      	cmp	r3, #7
 8008ad8:	d104      	bne.n	8008ae4 <ChangeButtonMappingKB+0x88>
        controls.KBControls.KEYBOARD_d_left = bt;
 8008ada:	4a37      	ldr	r2, [pc, #220]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008adc:	79fb      	ldrb	r3, [r7, #7]
 8008ade:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
}
 8008ae2:	e061      	b.n	8008ba8 <ChangeButtonMappingKB+0x14c>
    else if(state == DPAD_RIGHT) // state = 8 --> dpad right
 8008ae4:	4b33      	ldr	r3, [pc, #204]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	2b08      	cmp	r3, #8
 8008aea:	d104      	bne.n	8008af6 <ChangeButtonMappingKB+0x9a>
        controls.KBControls.KEYBOARD_d_right = bt;
 8008aec:	4a32      	ldr	r2, [pc, #200]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008aee:	79fb      	ldrb	r3, [r7, #7]
 8008af0:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77
}
 8008af4:	e058      	b.n	8008ba8 <ChangeButtonMappingKB+0x14c>
    else if(state == BUTTON_START) // state = 9 --> start
 8008af6:	4b2f      	ldr	r3, [pc, #188]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2b09      	cmp	r3, #9
 8008afc:	d104      	bne.n	8008b08 <ChangeButtonMappingKB+0xac>
        controls.KBControls.KEYBOARD_start = bt;
 8008afe:	4a2e      	ldr	r2, [pc, #184]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008b00:	79fb      	ldrb	r3, [r7, #7]
 8008b02:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
}
 8008b06:	e04f      	b.n	8008ba8 <ChangeButtonMappingKB+0x14c>
    else if(state == BUTTON_B) // state = 10 --> B
 8008b08:	4b2a      	ldr	r3, [pc, #168]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	2b0a      	cmp	r3, #10
 8008b0e:	d104      	bne.n	8008b1a <ChangeButtonMappingKB+0xbe>
        controls.KBControls.KEYBOARD_b = bt;
 8008b10:	4a29      	ldr	r2, [pc, #164]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008b12:	79fb      	ldrb	r3, [r7, #7]
 8008b14:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
}
 8008b18:	e046      	b.n	8008ba8 <ChangeButtonMappingKB+0x14c>
    else if(state == BUTTON_A) // state = 11 --> A
 8008b1a:	4b26      	ldr	r3, [pc, #152]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	2b0b      	cmp	r3, #11
 8008b20:	d104      	bne.n	8008b2c <ChangeButtonMappingKB+0xd0>
        controls.KBControls.KEYBOARD_a = bt;
 8008b22:	4a25      	ldr	r2, [pc, #148]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008b24:	79fb      	ldrb	r3, [r7, #7]
 8008b26:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
}
 8008b2a:	e03d      	b.n	8008ba8 <ChangeButtonMappingKB+0x14c>
    else if(state == C_UP) // state = 12 --> c up
 8008b2c:	4b21      	ldr	r3, [pc, #132]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	2b0c      	cmp	r3, #12
 8008b32:	d104      	bne.n	8008b3e <ChangeButtonMappingKB+0xe2>
        controls.KBControls.KEYBOARD_c_up = bt;
 8008b34:	4a20      	ldr	r2, [pc, #128]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008b36:	79fb      	ldrb	r3, [r7, #7]
 8008b38:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
}
 8008b3c:	e034      	b.n	8008ba8 <ChangeButtonMappingKB+0x14c>
    else if(state == C_DOWN) // state = 13 --> c down
 8008b3e:	4b1d      	ldr	r3, [pc, #116]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	2b0d      	cmp	r3, #13
 8008b44:	d104      	bne.n	8008b50 <ChangeButtonMappingKB+0xf4>
        controls.KBControls.KEYBOARD_c_down = bt;
 8008b46:	4a1c      	ldr	r2, [pc, #112]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008b48:	79fb      	ldrb	r3, [r7, #7]
 8008b4a:	f882 307b 	strb.w	r3, [r2, #123]	; 0x7b
}
 8008b4e:	e02b      	b.n	8008ba8 <ChangeButtonMappingKB+0x14c>
    else if(state == C_LEFT) // state = 14 --> c left
 8008b50:	4b18      	ldr	r3, [pc, #96]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	2b0e      	cmp	r3, #14
 8008b56:	d104      	bne.n	8008b62 <ChangeButtonMappingKB+0x106>
        controls.KBControls.KEYBOARD_c_left = bt;
 8008b58:	4a17      	ldr	r2, [pc, #92]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008b5a:	79fb      	ldrb	r3, [r7, #7]
 8008b5c:	f882 307c 	strb.w	r3, [r2, #124]	; 0x7c
}
 8008b60:	e022      	b.n	8008ba8 <ChangeButtonMappingKB+0x14c>
    else if(state == C_RIGHT) // state = 15 --> c right
 8008b62:	4b14      	ldr	r3, [pc, #80]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	2b0f      	cmp	r3, #15
 8008b68:	d104      	bne.n	8008b74 <ChangeButtonMappingKB+0x118>
        controls.KBControls.KEYBOARD_c_right = bt;
 8008b6a:	4a13      	ldr	r2, [pc, #76]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008b6c:	79fb      	ldrb	r3, [r7, #7]
 8008b6e:	f882 307d 	strb.w	r3, [r2, #125]	; 0x7d
}
 8008b72:	e019      	b.n	8008ba8 <ChangeButtonMappingKB+0x14c>
    else if(state == BUTTON_L) // state = 16 --> L
 8008b74:	4b0f      	ldr	r3, [pc, #60]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	2b10      	cmp	r3, #16
 8008b7a:	d104      	bne.n	8008b86 <ChangeButtonMappingKB+0x12a>
        controls.KBControls.KEYBOARD_l = bt;
 8008b7c:	4a0e      	ldr	r2, [pc, #56]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008b7e:	79fb      	ldrb	r3, [r7, #7]
 8008b80:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
}
 8008b84:	e010      	b.n	8008ba8 <ChangeButtonMappingKB+0x14c>
    else if(state == BUTTON_R) // state = 17 --> R
 8008b86:	4b0b      	ldr	r3, [pc, #44]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	2b11      	cmp	r3, #17
 8008b8c:	d104      	bne.n	8008b98 <ChangeButtonMappingKB+0x13c>
        controls.KBControls.KEYBOARD_r = bt;
 8008b8e:	4a0a      	ldr	r2, [pc, #40]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008b90:	79fb      	ldrb	r3, [r7, #7]
 8008b92:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
}
 8008b96:	e007      	b.n	8008ba8 <ChangeButtonMappingKB+0x14c>
    else if(state == BUTTON_Z) // state = 18 --> Z
 8008b98:	4b06      	ldr	r3, [pc, #24]	; (8008bb4 <ChangeButtonMappingKB+0x158>)
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b12      	cmp	r3, #18
 8008b9e:	d103      	bne.n	8008ba8 <ChangeButtonMappingKB+0x14c>
        controls.KBControls.KEYBOARD_z = bt;
 8008ba0:	4a05      	ldr	r2, [pc, #20]	; (8008bb8 <ChangeButtonMappingKB+0x15c>)
 8008ba2:	79fb      	ldrb	r3, [r7, #7]
 8008ba4:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	20000108 	.word	0x20000108
 8008bb8:	200001f4 	.word	0x200001f4

08008bbc <ChangeButtonMappingController>:

void ChangeButtonMappingController(uint64_t bt)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	e9c7 0100 	strd	r0, r1, [r7]
    // analog settings must be hardcoded, cannot change on the fly

    if(state == DPAD_UP) // state = 5 --> dpad up
 8008bc6:	4b48      	ldr	r3, [pc, #288]	; (8008ce8 <ChangeButtonMappingController+0x12c>)
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	2b05      	cmp	r3, #5
 8008bcc:	d105      	bne.n	8008bda <ChangeButtonMappingController+0x1e>
    {
    	controls.XpadControls.up = bt;
 8008bce:	4b47      	ldr	r3, [pc, #284]	; (8008cec <ChangeButtonMappingController+0x130>)
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	621a      	str	r2, [r3, #32]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	625a      	str	r2, [r3, #36]	; 0x24
    }
    else if(state == BUTTON_Z) // state = 18 --> Z
    {
        controls.XpadControls.z = bt;
    }
}
 8008bd8:	e080      	b.n	8008cdc <ChangeButtonMappingController+0x120>
    else if(state == DPAD_DOWN) // state = 6 --> dpad down
 8008bda:	4b43      	ldr	r3, [pc, #268]	; (8008ce8 <ChangeButtonMappingController+0x12c>)
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	2b06      	cmp	r3, #6
 8008be0:	d105      	bne.n	8008bee <ChangeButtonMappingController+0x32>
    	controls.XpadControls.down = bt;
 8008be2:	4b42      	ldr	r3, [pc, #264]	; (8008cec <ChangeButtonMappingController+0x130>)
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	629a      	str	r2, [r3, #40]	; 0x28
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008bec:	e076      	b.n	8008cdc <ChangeButtonMappingController+0x120>
    else if(state == DPAD_LEFT) // state = 7 --> dpad left
 8008bee:	4b3e      	ldr	r3, [pc, #248]	; (8008ce8 <ChangeButtonMappingController+0x12c>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b07      	cmp	r3, #7
 8008bf4:	d105      	bne.n	8008c02 <ChangeButtonMappingController+0x46>
        controls.XpadControls.left = bt;
 8008bf6:	4b3d      	ldr	r3, [pc, #244]	; (8008cec <ChangeButtonMappingController+0x130>)
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	631a      	str	r2, [r3, #48]	; 0x30
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8008c00:	e06c      	b.n	8008cdc <ChangeButtonMappingController+0x120>
    else if(state == DPAD_RIGHT) // state = 8 --> dpad right
 8008c02:	4b39      	ldr	r3, [pc, #228]	; (8008ce8 <ChangeButtonMappingController+0x12c>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b08      	cmp	r3, #8
 8008c08:	d105      	bne.n	8008c16 <ChangeButtonMappingController+0x5a>
        controls.XpadControls.right = bt;
 8008c0a:	4b38      	ldr	r3, [pc, #224]	; (8008cec <ChangeButtonMappingController+0x130>)
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	639a      	str	r2, [r3, #56]	; 0x38
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008c14:	e062      	b.n	8008cdc <ChangeButtonMappingController+0x120>
    else if(state == BUTTON_START) // state = 9 --> start
 8008c16:	4b34      	ldr	r3, [pc, #208]	; (8008ce8 <ChangeButtonMappingController+0x12c>)
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	2b09      	cmp	r3, #9
 8008c1c:	d105      	bne.n	8008c2a <ChangeButtonMappingController+0x6e>
        controls.XpadControls.start = bt;
 8008c1e:	4b33      	ldr	r3, [pc, #204]	; (8008cec <ChangeButtonMappingController+0x130>)
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	619a      	str	r2, [r3, #24]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	61da      	str	r2, [r3, #28]
}
 8008c28:	e058      	b.n	8008cdc <ChangeButtonMappingController+0x120>
    else if(state == BUTTON_B) // state = 10 --> B
 8008c2a:	4b2f      	ldr	r3, [pc, #188]	; (8008ce8 <ChangeButtonMappingController+0x12c>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b0a      	cmp	r3, #10
 8008c30:	d105      	bne.n	8008c3e <ChangeButtonMappingController+0x82>
        controls.XpadControls.b = bt;
 8008c32:	4b2e      	ldr	r3, [pc, #184]	; (8008cec <ChangeButtonMappingController+0x130>)
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	609a      	str	r2, [r3, #8]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	60da      	str	r2, [r3, #12]
}
 8008c3c:	e04e      	b.n	8008cdc <ChangeButtonMappingController+0x120>
    else if(state == BUTTON_A) // state = 11 --> A
 8008c3e:	4b2a      	ldr	r3, [pc, #168]	; (8008ce8 <ChangeButtonMappingController+0x12c>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	2b0b      	cmp	r3, #11
 8008c44:	d105      	bne.n	8008c52 <ChangeButtonMappingController+0x96>
        controls.XpadControls.a = bt;
 8008c46:	4b29      	ldr	r3, [pc, #164]	; (8008cec <ChangeButtonMappingController+0x130>)
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	601a      	str	r2, [r3, #0]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	605a      	str	r2, [r3, #4]
}
 8008c50:	e044      	b.n	8008cdc <ChangeButtonMappingController+0x120>
    else if(state == C_UP) // state = 12 --> c up
 8008c52:	4b25      	ldr	r3, [pc, #148]	; (8008ce8 <ChangeButtonMappingController+0x12c>)
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	2b0c      	cmp	r3, #12
 8008c58:	d105      	bne.n	8008c66 <ChangeButtonMappingController+0xaa>
        controls.XpadControls.c_up = bt;
 8008c5a:	4b24      	ldr	r3, [pc, #144]	; (8008cec <ChangeButtonMappingController+0x130>)
 8008c5c:	683a      	ldr	r2, [r7, #0]
 8008c5e:	651a      	str	r2, [r3, #80]	; 0x50
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	655a      	str	r2, [r3, #84]	; 0x54
}
 8008c64:	e03a      	b.n	8008cdc <ChangeButtonMappingController+0x120>
    else if(state == C_DOWN) // state = 13 --> c down
 8008c66:	4b20      	ldr	r3, [pc, #128]	; (8008ce8 <ChangeButtonMappingController+0x12c>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b0d      	cmp	r3, #13
 8008c6c:	d105      	bne.n	8008c7a <ChangeButtonMappingController+0xbe>
        controls.XpadControls.c_down = bt;
 8008c6e:	4b1f      	ldr	r3, [pc, #124]	; (8008cec <ChangeButtonMappingController+0x130>)
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	659a      	str	r2, [r3, #88]	; 0x58
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008c78:	e030      	b.n	8008cdc <ChangeButtonMappingController+0x120>
    else if(state == C_LEFT) // state = 14 --> c left
 8008c7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ce8 <ChangeButtonMappingController+0x12c>)
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	2b0e      	cmp	r3, #14
 8008c80:	d105      	bne.n	8008c8e <ChangeButtonMappingController+0xd2>
        controls.XpadControls.c_left = bt;
 8008c82:	4b1a      	ldr	r3, [pc, #104]	; (8008cec <ChangeButtonMappingController+0x130>)
 8008c84:	683a      	ldr	r2, [r7, #0]
 8008c86:	661a      	str	r2, [r3, #96]	; 0x60
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008c8c:	e026      	b.n	8008cdc <ChangeButtonMappingController+0x120>
    else if(state == C_RIGHT) // state = 15 --> c right
 8008c8e:	4b16      	ldr	r3, [pc, #88]	; (8008ce8 <ChangeButtonMappingController+0x12c>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	2b0f      	cmp	r3, #15
 8008c94:	d105      	bne.n	8008ca2 <ChangeButtonMappingController+0xe6>
        controls.XpadControls.c_right = bt;
 8008c96:	4b15      	ldr	r3, [pc, #84]	; (8008cec <ChangeButtonMappingController+0x130>)
 8008c98:	683a      	ldr	r2, [r7, #0]
 8008c9a:	669a      	str	r2, [r3, #104]	; 0x68
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008ca0:	e01c      	b.n	8008cdc <ChangeButtonMappingController+0x120>
    else if(state == BUTTON_L) // state = 16 --> L
 8008ca2:	4b11      	ldr	r3, [pc, #68]	; (8008ce8 <ChangeButtonMappingController+0x12c>)
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2b10      	cmp	r3, #16
 8008ca8:	d105      	bne.n	8008cb6 <ChangeButtonMappingController+0xfa>
        controls.XpadControls.l = bt;
 8008caa:	4b10      	ldr	r3, [pc, #64]	; (8008cec <ChangeButtonMappingController+0x130>)
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	641a      	str	r2, [r3, #64]	; 0x40
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	645a      	str	r2, [r3, #68]	; 0x44
}
 8008cb4:	e012      	b.n	8008cdc <ChangeButtonMappingController+0x120>
    else if(state == BUTTON_R) // state = 17 --> R
 8008cb6:	4b0c      	ldr	r3, [pc, #48]	; (8008ce8 <ChangeButtonMappingController+0x12c>)
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	2b11      	cmp	r3, #17
 8008cbc:	d105      	bne.n	8008cca <ChangeButtonMappingController+0x10e>
        controls.XpadControls.r = bt;
 8008cbe:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <ChangeButtonMappingController+0x130>)
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	649a      	str	r2, [r3, #72]	; 0x48
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8008cc8:	e008      	b.n	8008cdc <ChangeButtonMappingController+0x120>
    else if(state == BUTTON_Z) // state = 18 --> Z
 8008cca:	4b07      	ldr	r3, [pc, #28]	; (8008ce8 <ChangeButtonMappingController+0x12c>)
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	2b12      	cmp	r3, #18
 8008cd0:	d104      	bne.n	8008cdc <ChangeButtonMappingController+0x120>
        controls.XpadControls.z = bt;
 8008cd2:	4b06      	ldr	r3, [pc, #24]	; (8008cec <ChangeButtonMappingController+0x130>)
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	611a      	str	r2, [r3, #16]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	615a      	str	r2, [r3, #20]
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	20000108 	.word	0x20000108
 8008cec:	200001f4 	.word	0x200001f4

08008cf0 <SaveControls>:

void SaveControls()
{
 8008cf0:	b590      	push	{r4, r7, lr}
 8008cf2:	b089      	sub	sp, #36	; 0x24
 8008cf4:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock(); //unlock flash writing
 8008cf6:	f7f7 ff7b 	bl	8000bf0 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8008cfa:	4b23      	ldr	r3, [pc, #140]	; (8008d88 <SaveControls+0x98>)
 8008cfc:	22f3      	movs	r2, #243	; 0xf3
 8008cfe:	60da      	str	r2, [r3, #12]
                  FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR|FLASH_FLAG_PGSERR);
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.Sector = FLASH_SECTOR_4;
 8008d00:	2304      	movs	r3, #4
 8008d02:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.TypeErase = TYPEERASE_SECTORS;
 8008d04:	2300      	movs	r3, #0
 8008d06:	607b      	str	r3, [r7, #4]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8008d08:	2302      	movs	r3, #2
 8008d0a:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbSectors = 1;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	613b      	str	r3, [r7, #16]
	uint32_t SectorError = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	603b      	str	r3, [r7, #0]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
 8008d14:	463a      	mov	r2, r7
 8008d16:	1d3b      	adds	r3, r7, #4
 8008d18:	4611      	mov	r1, r2
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7f8 f8d4 	bl	8000ec8 <HAL_FLASHEx_Erase>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d002      	beq.n	8008d2c <SaveControls+0x3c>
	    HAL_FLASH_Lock();
 8008d26:	f7f7 ff85 	bl	8000c34 <HAL_FLASH_Lock>
 8008d2a:	e029      	b.n	8008d80 <SaveControls+0x90>
	    return;
	}

    uint32_t* data = (uint32_t*)&controls;
 8008d2c:	4b17      	ldr	r3, [pc, #92]	; (8008d8c <SaveControls+0x9c>)
 8008d2e:	61fb      	str	r3, [r7, #28]

    // Total size is 112 bytes + 18 bytes = 130 bytes
    // Each word is 4 bytes, so the total size is 32 Words + 1 HalfWord
    // Note: ProgramDoubleWord requires a higher voltage, so we must do one word at a time
    for(int ct = 0;ct < 32;ct++)
 8008d30:	2300      	movs	r3, #0
 8008d32:	61bb      	str	r3, [r7, #24]
 8008d34:	e015      	b.n	8008d62 <SaveControls+0x72>
    {
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,SAVE_ADDR+(ct*4),*data); //each SAVE_ADDR+4 is 4 bytes because it is a memory address
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8008d3c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4619      	mov	r1, r3
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f04f 0400 	mov.w	r4, #0
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	4623      	mov	r3, r4
 8008d50:	2002      	movs	r0, #2
 8008d52:	f7f7 fef9 	bl	8000b48 <HAL_FLASH_Program>
        data++; // each data+1 is 4 bytes because it is a 32 bit data type
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	3304      	adds	r3, #4
 8008d5a:	61fb      	str	r3, [r7, #28]
    for(int ct = 0;ct < 32;ct++)
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	61bb      	str	r3, [r7, #24]
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	2b1f      	cmp	r3, #31
 8008d66:	dde6      	ble.n	8008d36 <SaveControls+0x46>
    }
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,SAVE_ADDR+128,*data);
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f04f 0400 	mov.w	r4, #0
 8008d70:	461a      	mov	r2, r3
 8008d72:	4623      	mov	r3, r4
 8008d74:	4906      	ldr	r1, [pc, #24]	; (8008d90 <SaveControls+0xa0>)
 8008d76:	2001      	movs	r0, #1
 8008d78:	f7f7 fee6 	bl	8000b48 <HAL_FLASH_Program>

    HAL_FLASH_Lock(); // lock it back up
 8008d7c:	f7f7 ff5a 	bl	8000c34 <HAL_FLASH_Lock>
}
 8008d80:	3724      	adds	r7, #36	; 0x24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd90      	pop	{r4, r7, pc}
 8008d86:	bf00      	nop
 8008d88:	40023c00 	.word	0x40023c00
 8008d8c:	200001f4 	.word	0x200001f4
 8008d90:	08010080 	.word	0x08010080

08008d94 <LoadControls>:

void LoadControls()
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
    memcpy(&controls,saveData,sizeof(Controls));
 8008d98:	4b05      	ldr	r3, [pc, #20]	; (8008db0 <LoadControls+0x1c>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a05      	ldr	r2, [pc, #20]	; (8008db4 <LoadControls+0x20>)
 8008d9e:	4610      	mov	r0, r2
 8008da0:	4619      	mov	r1, r3
 8008da2:	2382      	movs	r3, #130	; 0x82
 8008da4:	461a      	mov	r2, r3
 8008da6:	f000 ffd3 	bl	8009d50 <memcpy>
}
 8008daa:	bf00      	nop
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	20000078 	.word	0x20000078
 8008db4:	200001f4 	.word	0x200001f4

08008db8 <AdvanceState>:

void AdvanceState()
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
    state++;
 8008dbc:	4b08      	ldr	r3, [pc, #32]	; (8008de0 <AdvanceState+0x28>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	4b06      	ldr	r3, [pc, #24]	; (8008de0 <AdvanceState+0x28>)
 8008dc6:	701a      	strb	r2, [r3, #0]
    if(state >= 19) // we're done mapping the controls
 8008dc8:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <AdvanceState+0x28>)
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	2b12      	cmp	r3, #18
 8008dce:	d904      	bls.n	8008dda <AdvanceState+0x22>
    {
        SaveControls(); // write directly to flash
 8008dd0:	f7ff ff8e 	bl	8008cf0 <SaveControls>
        state = NORMAL; // back to normal controller operation
 8008dd4:	4b02      	ldr	r3, [pc, #8]	; (8008de0 <AdvanceState+0x28>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	701a      	strb	r2, [r3, #0]
        //GPIOA->BSRR = (1 << 21); // LED OFF
    }
}
 8008dda:	bf00      	nop
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20000108 	.word	0x20000108

08008de4 <reverse>:

uint8_t reverse(uint8_t b)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	4603      	mov	r3, r0
 8008dec:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 8008dee:	79fb      	ldrb	r3, [r7, #7]
 8008df0:	091b      	lsrs	r3, r3, #4
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	b25a      	sxtb	r2, r3
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	011b      	lsls	r3, r3, #4
 8008dfa:	b25b      	sxtb	r3, r3
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	b25b      	sxtb	r3, r3
 8008e00:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 8008e02:	79fb      	ldrb	r3, [r7, #7]
 8008e04:	109b      	asrs	r3, r3, #2
 8008e06:	b25b      	sxtb	r3, r3
 8008e08:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8008e0c:	b25a      	sxtb	r2, r3
 8008e0e:	79fb      	ldrb	r3, [r7, #7]
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	b25b      	sxtb	r3, r3
 8008e14:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8008e18:	b25b      	sxtb	r3, r3
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	b25b      	sxtb	r3, r3
 8008e1e:	71fb      	strb	r3, [r7, #7]
   b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 8008e20:	79fb      	ldrb	r3, [r7, #7]
 8008e22:	105b      	asrs	r3, r3, #1
 8008e24:	b25b      	sxtb	r3, r3
 8008e26:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8008e2a:	b25a      	sxtb	r2, r3
 8008e2c:	79fb      	ldrb	r3, [r7, #7]
 8008e2e:	005b      	lsls	r3, r3, #1
 8008e30:	b25b      	sxtb	r3, r3
 8008e32:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8008e36:	b25b      	sxtb	r3, r3
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	b25b      	sxtb	r3, r3
 8008e3c:	71fb      	strb	r3, [r7, #7]
   return b;
 8008e3e:	79fb      	ldrb	r3, [r7, #7]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <SetN64DataInputMode>:

void SetN64DataInputMode()
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	af00      	add	r7, sp, #0
	// port A8 to input mode
	GPIOA->MODER &= ~(1 << 17);
 8008e50:	4a08      	ldr	r2, [pc, #32]	; (8008e74 <SetN64DataInputMode+0x28>)
 8008e52:	4b08      	ldr	r3, [pc, #32]	; (8008e74 <SetN64DataInputMode+0x28>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008e5a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1 << 16);
 8008e5c:	4a05      	ldr	r2, [pc, #20]	; (8008e74 <SetN64DataInputMode+0x28>)
 8008e5e:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <SetN64DataInputMode+0x28>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e66:	6013      	str	r3, [r2, #0]
}
 8008e68:	bf00      	nop
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	40020000 	.word	0x40020000

08008e78 <SetN64DataOutputMode>:

void SetN64DataOutputMode()
{
 8008e78:	b480      	push	{r7}
 8008e7a:	af00      	add	r7, sp, #0
	// port A8 to output mode
	GPIOA->MODER &= ~(1 << 17);
 8008e7c:	4a08      	ldr	r2, [pc, #32]	; (8008ea0 <SetN64DataOutputMode+0x28>)
 8008e7e:	4b08      	ldr	r3, [pc, #32]	; (8008ea0 <SetN64DataOutputMode+0x28>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008e86:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1 << 16);
 8008e88:	4a05      	ldr	r2, [pc, #20]	; (8008ea0 <SetN64DataOutputMode+0x28>)
 8008e8a:	4b05      	ldr	r3, [pc, #20]	; (8008ea0 <SetN64DataOutputMode+0x28>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e92:	6013      	str	r3, [r2, #0]
}
 8008e94:	bf00      	nop
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	40020000 	.word	0x40020000

08008ea4 <write_1>:

void write_1()
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	af00      	add	r7, sp, #0
	GPIOA->BSRR = (1 << 24);
 8008ea8:	4b07      	ldr	r3, [pc, #28]	; (8008ec8 <write_1+0x24>)
 8008eaa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008eae:	619a      	str	r2, [r3, #24]
	my_wait_us_asm(1);
 8008eb0:	2001      	movs	r0, #1
 8008eb2:	f7f7 f9a7 	bl	8000204 <my_wait_us_asm>
	GPIOA->BSRR = (1 << 8);
 8008eb6:	4b04      	ldr	r3, [pc, #16]	; (8008ec8 <write_1+0x24>)
 8008eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ebc:	619a      	str	r2, [r3, #24]
    my_wait_us_asm(3);
 8008ebe:	2003      	movs	r0, #3
 8008ec0:	f7f7 f9a0 	bl	8000204 <my_wait_us_asm>
}
 8008ec4:	bf00      	nop
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	40020000 	.word	0x40020000

08008ecc <write_0>:

void write_0()
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
	GPIOA->BSRR = (1 << 24);
 8008ed0:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <write_0+0x24>)
 8008ed2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ed6:	619a      	str	r2, [r3, #24]
	my_wait_us_asm(3);
 8008ed8:	2003      	movs	r0, #3
 8008eda:	f7f7 f993 	bl	8000204 <my_wait_us_asm>
	GPIOA->BSRR = (1 << 8);
 8008ede:	4b04      	ldr	r3, [pc, #16]	; (8008ef0 <write_0+0x24>)
 8008ee0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ee4:	619a      	str	r2, [r3, #24]
    my_wait_us_asm(1);
 8008ee6:	2001      	movs	r0, #1
 8008ee8:	f7f7 f98c 	bl	8000204 <my_wait_us_asm>
}
 8008eec:	bf00      	nop
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	40020000 	.word	0x40020000

08008ef4 <SendStop>:

void SendStop()
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	af00      	add	r7, sp, #0
	GPIOA->BSRR = (1 << 24);
 8008ef8:	4b06      	ldr	r3, [pc, #24]	; (8008f14 <SendStop+0x20>)
 8008efa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008efe:	619a      	str	r2, [r3, #24]
	my_wait_us_asm(1);
 8008f00:	2001      	movs	r0, #1
 8008f02:	f7f7 f97f 	bl	8000204 <my_wait_us_asm>
	GPIOA->BSRR = (1 << 8);
 8008f06:	4b03      	ldr	r3, [pc, #12]	; (8008f14 <SendStop+0x20>)
 8008f08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f0c:	619a      	str	r2, [r3, #24]
}
 8008f0e:	bf00      	nop
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	40020000 	.word	0x40020000

08008f18 <SendByte>:

// send a byte from LSB to MSB (proper serialization)
void SendByte(unsigned char b)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	71fb      	strb	r3, [r7, #7]
    for(int i = 0;i < 8;i++) // send all 8 bits, one at a time
 8008f22:	2300      	movs	r3, #0
 8008f24:	60fb      	str	r3, [r7, #12]
 8008f26:	e00f      	b.n	8008f48 <SendByte+0x30>
    {
        if((b >> i) & 1)
 8008f28:	79fa      	ldrb	r2, [r7, #7]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	fa42 f303 	asr.w	r3, r2, r3
 8008f30:	f003 0301 	and.w	r3, r3, #1
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <SendByte+0x26>
        {
            write_1();
 8008f38:	f7ff ffb4 	bl	8008ea4 <write_1>
 8008f3c:	e001      	b.n	8008f42 <SendByte+0x2a>
        }
        else
        {
            write_0();
 8008f3e:	f7ff ffc5 	bl	8008ecc <write_0>
    for(int i = 0;i < 8;i++) // send all 8 bits, one at a time
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3301      	adds	r3, #1
 8008f46:	60fb      	str	r3, [r7, #12]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2b07      	cmp	r3, #7
 8008f4c:	ddec      	ble.n	8008f28 <SendByte+0x10>
        }
    }
}
 8008f4e:	bf00      	nop
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <SendIdentity>:

void SendIdentity()
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	af00      	add	r7, sp, #0
    // reply 0x05, 0x00, 0x02
    SendByte(0x05);
 8008f5a:	2005      	movs	r0, #5
 8008f5c:	f7ff ffdc 	bl	8008f18 <SendByte>
    SendByte(0x00);
 8008f60:	2000      	movs	r0, #0
 8008f62:	f7ff ffd9 	bl	8008f18 <SendByte>
    SendByte(0x02);
 8008f66:	2002      	movs	r0, #2
 8008f68:	f7ff ffd6 	bl	8008f18 <SendByte>
    SendStop();
 8008f6c:	f7ff ffc2 	bl	8008ef4 <SendStop>
}
 8008f70:	bf00      	nop
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <SendControllerData>:

void SendControllerData()
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
    unsigned long data = *(unsigned long*)&n64_data;
 8008f7a:	4b11      	ldr	r3, [pc, #68]	; (8008fc0 <SendControllerData+0x4c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	60bb      	str	r3, [r7, #8]
    unsigned int size = sizeof(data) * 8; // should be 4 bytes * 8 = 32 bits
 8008f80:	2320      	movs	r3, #32
 8008f82:	607b      	str	r3, [r7, #4]

    for(unsigned int i = 0;i < size;i++)
 8008f84:	2300      	movs	r3, #0
 8008f86:	60fb      	str	r3, [r7, #12]
 8008f88:	e00f      	b.n	8008faa <SendControllerData+0x36>
    {
        if((data >> i) & 1)
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d002      	beq.n	8008fa0 <SendControllerData+0x2c>
        {
            write_1();
 8008f9a:	f7ff ff83 	bl	8008ea4 <write_1>
 8008f9e:	e001      	b.n	8008fa4 <SendControllerData+0x30>
        }
        else
        {
            write_0();
 8008fa0:	f7ff ff94 	bl	8008ecc <write_0>
    for(unsigned int i = 0;i < size;i++)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	60fb      	str	r3, [r7, #12]
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d3eb      	bcc.n	8008f8a <SendControllerData+0x16>
        }
    }

    SendStop();
 8008fb2:	f7ff ff9f 	bl	8008ef4 <SendStop>
}
 8008fb6:	bf00      	nop
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20000278 	.word	0x20000278

08008fc4 <GetMiddleOfPulse>:
// 0 is 3 microseconds low followed by 1 microsecond high
// 1 is 1 microsecond low followed by 3 microseconds high
// if either of these while loops is going on 4us or more, break out of the function

uint8_t GetMiddleOfPulse()
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
	uint8_t ct = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	71fb      	strb	r3, [r7, #7]
    // wait for line to go high
    while(1)
    {
        if(GPIOA->IDR & 0x0100) break;
 8008fce:	4b18      	ldr	r3, [pc, #96]	; (8009030 <GetMiddleOfPulse+0x6c>)
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d107      	bne.n	8008fea <GetMiddleOfPulse+0x26>

        ct++;
 8008fda:	79fb      	ldrb	r3, [r7, #7]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	71fb      	strb	r3, [r7, #7]
        if(ct == 150) // failsafe limit TBD
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	2b96      	cmp	r3, #150	; 0x96
 8008fe4:	d1f3      	bne.n	8008fce <GetMiddleOfPulse+0xa>
        	return 5; // error code
 8008fe6:	2305      	movs	r3, #5
 8008fe8:	e01d      	b.n	8009026 <GetMiddleOfPulse+0x62>
        if(GPIOA->IDR & 0x0100) break;
 8008fea:	bf00      	nop
    }

    ct = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	71fb      	strb	r3, [r7, #7]

    // wait for line to go low
    while(1)
    {
        if(!(GPIOA->IDR & 0x0100)) break;
 8008ff0:	4b0f      	ldr	r3, [pc, #60]	; (8009030 <GetMiddleOfPulse+0x6c>)
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d007      	beq.n	800900c <GetMiddleOfPulse+0x48>

        ct++;
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	3301      	adds	r3, #1
 8009000:	71fb      	strb	r3, [r7, #7]
		if(ct == 150) // failsafe limit TBD
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	2b96      	cmp	r3, #150	; 0x96
 8009006:	d1f3      	bne.n	8008ff0 <GetMiddleOfPulse+0x2c>
			return 5; // error code
 8009008:	2305      	movs	r3, #5
 800900a:	e00c      	b.n	8009026 <GetMiddleOfPulse+0x62>
        if(!(GPIOA->IDR & 0x0100)) break;
 800900c:	bf00      	nop
    }

    // now we have the falling edge

    // wait 2 microseconds to be in the middle of the pulse, and read. high --> 1.  low --> 0.
    my_wait_us_asm(2);
 800900e:	2002      	movs	r0, #2
 8009010:	f7f7 f8f8 	bl	8000204 <my_wait_us_asm>

    return (GPIOA->IDR & 0x0100) ? 1U : 0U;
 8009014:	4b06      	ldr	r3, [pc, #24]	; (8009030 <GetMiddleOfPulse+0x6c>)
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <GetMiddleOfPulse+0x60>
 8009020:	2301      	movs	r3, #1
 8009022:	e000      	b.n	8009026 <GetMiddleOfPulse+0x62>
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	40020000 	.word	0x40020000

08009034 <readCommand>:

// continuously read bits until at least 9 are read, confirm valid command, return without stop bit
uint8_t readCommand()
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
	uint8_t retVal;

	// we are already at the first falling edge
	// get middle of first pulse, 2us later
	my_wait_us_asm(2);
 800903a:	2002      	movs	r0, #2
 800903c:	f7f7 f8e2 	bl	8000204 <my_wait_us_asm>
    unsigned int command = (GPIOA->IDR & 0x0100) ? 1U : 0U, bits_read = 1;
 8009040:	4b15      	ldr	r3, [pc, #84]	; (8009098 <readCommand+0x64>)
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <readCommand+0x1c>
 800904c:	2301      	movs	r3, #1
 800904e:	e000      	b.n	8009052 <readCommand+0x1e>
 8009050:	2300      	movs	r3, #0
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	2301      	movs	r3, #1
 8009056:	60bb      	str	r3, [r7, #8]

    while(1) // read at least 9 bits (2 bytes + stop bit)
    {
        command = command << 1; // make room for the new bit
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	005b      	lsls	r3, r3, #1
 800905c:	60fb      	str	r3, [r7, #12]
        retVal = GetMiddleOfPulse();
 800905e:	f7ff ffb1 	bl	8008fc4 <GetMiddleOfPulse>
 8009062:	4603      	mov	r3, r0
 8009064:	71fb      	strb	r3, [r7, #7]
        if(retVal == 5) // timeout
 8009066:	79fb      	ldrb	r3, [r7, #7]
 8009068:	2b05      	cmp	r3, #5
 800906a:	d101      	bne.n	8009070 <readCommand+0x3c>
        	return retVal;
 800906c:	79fb      	ldrb	r3, [r7, #7]
 800906e:	e00e      	b.n	800908e <readCommand+0x5a>
        command += retVal;
 8009070:	79fb      	ldrb	r3, [r7, #7]
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	4413      	add	r3, r2
 8009076:	60fb      	str	r3, [r7, #12]

        bits_read++;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	3301      	adds	r3, #1
 800907c:	60bb      	str	r3, [r7, #8]

        if(bits_read >= 9) // only consider when at least a whole command's length has been read
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	2b08      	cmp	r3, #8
 8009082:	d9e9      	bls.n	8009058 <readCommand+0x24>
        {
        	command = command >> 1; // get rid of the stop bit (which is always a 1)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	085b      	lsrs	r3, r3, #1
 8009088:	60fb      	str	r3, [r7, #12]
        	return command;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	b2db      	uxtb	r3, r3
        }
    }
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	40020000 	.word	0x40020000

0800909c <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  memset(&n64_data,0,4); // clear controller state
 80090a0:	2204      	movs	r2, #4
 80090a2:	2100      	movs	r1, #0
 80090a4:	4831      	ldr	r0, [pc, #196]	; (800916c <main+0xd0>)
 80090a6:	f000 fe5e 	bl	8009d66 <memset>
  LoadControls();
 80090aa:	f7ff fe73 	bl	8008d94 <LoadControls>
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80090ae:	f7f7 fb81 	bl	80007b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80090b2:	f000 f867 	bl	8009184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80090b6:	f000 f927 	bl	8009308 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80090ba:	f000 f8f7 	bl	80092ac <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 80090be:	f000 faf1 	bl	80096a4 <MX_USB_HOST_Init>
  {

  /* USER CODE END WHILE */
	// check for button pressed to begin control re-map

	  if(state == NORMAL)
 80090c2:	4b2b      	ldr	r3, [pc, #172]	; (8009170 <main+0xd4>)
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d129      	bne.n	800911e <main+0x82>
	  {
		  if(!(GPIOC->IDR & 0x2000)) // user wants to change controls
 80090ca:	4b2a      	ldr	r3, [pc, #168]	; (8009174 <main+0xd8>)
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d11d      	bne.n	8009112 <main+0x76>
		  {
			  if(blueButtonPressed == 0) // make sure it's a separate button press
 80090d6:	4b28      	ldr	r3, [pc, #160]	; (8009178 <main+0xdc>)
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d11c      	bne.n	8009118 <main+0x7c>
			  {

				  if(type == CONTROLLER_KB)
 80090de:	4b27      	ldr	r3, [pc, #156]	; (800917c <main+0xe0>)
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d103      	bne.n	80090ee <main+0x52>
					  state = 1;
 80090e6:	4b22      	ldr	r3, [pc, #136]	; (8009170 <main+0xd4>)
 80090e8:	2201      	movs	r2, #1
 80090ea:	701a      	strb	r2, [r3, #0]
 80090ec:	e006      	b.n	80090fc <main+0x60>
				  else if(type != CONTROLLER_NONE)
 80090ee:	4b23      	ldr	r3, [pc, #140]	; (800917c <main+0xe0>)
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d002      	beq.n	80090fc <main+0x60>
					  state = 5;
 80090f6:	4b1e      	ldr	r3, [pc, #120]	; (8009170 <main+0xd4>)
 80090f8:	2205      	movs	r2, #5
 80090fa:	701a      	strb	r2, [r3, #0]

				  if(type != CONTROLLER_NONE)
 80090fc:	4b1f      	ldr	r3, [pc, #124]	; (800917c <main+0xe0>)
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d009      	beq.n	8009118 <main+0x7c>
				  {
					  // enter programming mode
					  GPIOA->BSRR = (1 << 5); // LED ON
 8009104:	4b1e      	ldr	r3, [pc, #120]	; (8009180 <main+0xe4>)
 8009106:	2220      	movs	r2, #32
 8009108:	619a      	str	r2, [r3, #24]
					  blueButtonPressed = 1;
 800910a:	4b1b      	ldr	r3, [pc, #108]	; (8009178 <main+0xdc>)
 800910c:	2201      	movs	r2, #1
 800910e:	701a      	strb	r2, [r3, #0]
					  continue;
 8009110:	e02a      	b.n	8009168 <main+0xcc>
				  }
			  }
		  }
		  else
		  {
			  blueButtonPressed = 0;
 8009112:	4b19      	ldr	r3, [pc, #100]	; (8009178 <main+0xdc>)
 8009114:	2200      	movs	r2, #0
 8009116:	701a      	strb	r2, [r3, #0]
		  }

		  MX_USB_HOST_Process();
 8009118:	f000 fae0 	bl	80096dc <MX_USB_HOST_Process>
 800911c:	e7d1      	b.n	80090c2 <main+0x26>
	  }
	  else
	  {
		  if(!(GPIOC->IDR & 0x2000)) // user wants to cancel and return to regular mode
 800911e:	4b15      	ldr	r3, [pc, #84]	; (8009174 <main+0xd8>)
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10e      	bne.n	8009148 <main+0xac>
		  {
			  if(blueButtonPressed == 0) // make sure it's a separate button press
 800912a:	4b13      	ldr	r3, [pc, #76]	; (8009178 <main+0xdc>)
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10d      	bne.n	800914e <main+0xb2>
			  {
				  GPIOA->BSRR = (1 << 21); // LED OFF
 8009132:	4b13      	ldr	r3, [pc, #76]	; (8009180 <main+0xe4>)
 8009134:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009138:	619a      	str	r2, [r3, #24]
				  blueButtonPressed = 1;
 800913a:	4b0f      	ldr	r3, [pc, #60]	; (8009178 <main+0xdc>)
 800913c:	2201      	movs	r2, #1
 800913e:	701a      	strb	r2, [r3, #0]
				  state = NORMAL;
 8009140:	4b0b      	ldr	r3, [pc, #44]	; (8009170 <main+0xd4>)
 8009142:	2200      	movs	r2, #0
 8009144:	701a      	strb	r2, [r3, #0]
				  continue;
 8009146:	e00f      	b.n	8009168 <main+0xcc>
			  }
		  }
		  else
		  {
			  blueButtonPressed = 0;
 8009148:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <main+0xdc>)
 800914a:	2200      	movs	r2, #0
 800914c:	701a      	strb	r2, [r3, #0]
		  }

		  MX_USB_HOST_Process();
 800914e:	f000 fac5 	bl	80096dc <MX_USB_HOST_Process>

		  if(state == NORMAL) // about to return to normal operation, make sure the LED turns off
 8009152:	4b07      	ldr	r3, [pc, #28]	; (8009170 <main+0xd4>)
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1b3      	bne.n	80090c2 <main+0x26>
		  {
			  GPIOA->BSRR = (1 << 21); // LED OFF
 800915a:	4b09      	ldr	r3, [pc, #36]	; (8009180 <main+0xe4>)
 800915c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009160:	619a      	str	r2, [r3, #24]
			  blueButtonPressed = 0;
 8009162:	4b05      	ldr	r3, [pc, #20]	; (8009178 <main+0xdc>)
 8009164:	2200      	movs	r2, #0
 8009166:	701a      	strb	r2, [r3, #0]
	  if(state == NORMAL)
 8009168:	e7ab      	b.n	80090c2 <main+0x26>
 800916a:	bf00      	nop
 800916c:	20000278 	.word	0x20000278
 8009170:	20000108 	.word	0x20000108
 8009174:	40020800 	.word	0x40020800
 8009178:	20000109 	.word	0x20000109
 800917c:	2000010a 	.word	0x2000010a
 8009180:	40020000 	.word	0x40020000

08009184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) // 168 MHz
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b0ac      	sub	sp, #176	; 0xb0
 8009188:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800918a:	2300      	movs	r3, #0
 800918c:	60bb      	str	r3, [r7, #8]
 800918e:	4a43      	ldr	r2, [pc, #268]	; (800929c <SystemClock_Config+0x118>)
 8009190:	4b42      	ldr	r3, [pc, #264]	; (800929c <SystemClock_Config+0x118>)
 8009192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009198:	6413      	str	r3, [r2, #64]	; 0x40
 800919a:	4b40      	ldr	r3, [pc, #256]	; (800929c <SystemClock_Config+0x118>)
 800919c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091a2:	60bb      	str	r3, [r7, #8]
 80091a4:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80091a6:	2300      	movs	r3, #0
 80091a8:	607b      	str	r3, [r7, #4]
 80091aa:	4a3d      	ldr	r2, [pc, #244]	; (80092a0 <SystemClock_Config+0x11c>)
 80091ac:	4b3c      	ldr	r3, [pc, #240]	; (80092a0 <SystemClock_Config+0x11c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	4b3a      	ldr	r3, [pc, #232]	; (80092a0 <SystemClock_Config+0x11c>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80091be:	607b      	str	r3, [r7, #4]
 80091c0:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80091c2:	2301      	movs	r3, #1
 80091c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80091c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80091ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80091ce:	2302      	movs	r3, #2
 80091d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80091d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80091d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80091dc:	2304      	movs	r3, #4
 80091de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80091e2:	23a8      	movs	r3, #168	; 0xa8
 80091e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80091e8:	2302      	movs	r3, #2
 80091ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80091ee:	2307      	movs	r3, #7
 80091f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80091f4:	2302      	movs	r3, #2
 80091f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80091fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fa faee 	bl	80037e0 <HAL_RCC_OscConfig>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d004      	beq.n	8009214 <SystemClock_Config+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 800920a:	f240 213f 	movw	r1, #575	; 0x23f
 800920e:	4825      	ldr	r0, [pc, #148]	; (80092a4 <SystemClock_Config+0x120>)
 8009210:	f000 f950 	bl	80094b4 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009214:	230f      	movs	r3, #15
 8009216:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009218:	2302      	movs	r3, #2
 800921a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800921c:	2300      	movs	r3, #0
 800921e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009220:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009224:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800922a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800922c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009230:	2105      	movs	r1, #5
 8009232:	4618      	mov	r0, r3
 8009234:	f7f9 fcde 	bl	8002bf4 <HAL_RCC_ClockConfig>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d004      	beq.n	8009248 <SystemClock_Config+0xc4>
  {
    _Error_Handler(__FILE__, __LINE__);
 800923e:	f240 214d 	movw	r1, #589	; 0x24d
 8009242:	4818      	ldr	r0, [pc, #96]	; (80092a4 <SystemClock_Config+0x120>)
 8009244:	f000 f936 	bl	80094b4 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800924c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800924e:	2300      	movs	r3, #0
 8009250:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009252:	f107 030c 	add.w	r3, r7, #12
 8009256:	4618      	mov	r0, r3
 8009258:	f7f9 fde2 	bl	8002e20 <HAL_RCCEx_PeriphCLKConfig>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d004      	beq.n	800926c <SystemClock_Config+0xe8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009262:	f44f 7115 	mov.w	r1, #596	; 0x254
 8009266:	480f      	ldr	r0, [pc, #60]	; (80092a4 <SystemClock_Config+0x120>)
 8009268:	f000 f924 	bl	80094b4 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800926c:	f7f9 fda4 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8009270:	4602      	mov	r2, r0
 8009272:	4b0d      	ldr	r3, [pc, #52]	; (80092a8 <SystemClock_Config+0x124>)
 8009274:	fba3 2302 	umull	r2, r3, r3, r2
 8009278:	099b      	lsrs	r3, r3, #6
 800927a:	4618      	mov	r0, r3
 800927c:	f7f7 fc2d 	bl	8000ada <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8009280:	2004      	movs	r0, #4
 8009282:	f7f7 fc37 	bl	8000af4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
  HAL_NVIC_SetPriority(SysTick_IRQn, 1, 0);
 8009286:	2200      	movs	r2, #0
 8009288:	2101      	movs	r1, #1
 800928a:	f04f 30ff 	mov.w	r0, #4294967295
 800928e:	f7f7 fbfa 	bl	8000a86 <HAL_NVIC_SetPriority>
}
 8009292:	bf00      	nop
 8009294:	37b0      	adds	r7, #176	; 0xb0
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	40023800 	.word	0x40023800
 80092a0:	40007000 	.word	0x40007000
 80092a4:	08009f38 	.word	0x08009f38
 80092a8:	10624dd3 	.word	0x10624dd3

080092ac <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80092b0:	4b12      	ldr	r3, [pc, #72]	; (80092fc <MX_USART2_UART_Init+0x50>)
 80092b2:	4a13      	ldr	r2, [pc, #76]	; (8009300 <MX_USART2_UART_Init+0x54>)
 80092b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80092b6:	4b11      	ldr	r3, [pc, #68]	; (80092fc <MX_USART2_UART_Init+0x50>)
 80092b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80092bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80092be:	4b0f      	ldr	r3, [pc, #60]	; (80092fc <MX_USART2_UART_Init+0x50>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80092c4:	4b0d      	ldr	r3, [pc, #52]	; (80092fc <MX_USART2_UART_Init+0x50>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80092ca:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <MX_USART2_UART_Init+0x50>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80092d0:	4b0a      	ldr	r3, [pc, #40]	; (80092fc <MX_USART2_UART_Init+0x50>)
 80092d2:	220c      	movs	r2, #12
 80092d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80092d6:	4b09      	ldr	r3, [pc, #36]	; (80092fc <MX_USART2_UART_Init+0x50>)
 80092d8:	2200      	movs	r2, #0
 80092da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80092dc:	4b07      	ldr	r3, [pc, #28]	; (80092fc <MX_USART2_UART_Init+0x50>)
 80092de:	2200      	movs	r2, #0
 80092e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80092e2:	4806      	ldr	r0, [pc, #24]	; (80092fc <MX_USART2_UART_Init+0x50>)
 80092e4:	f7fa fcd6 	bl	8003c94 <HAL_UART_Init>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d004      	beq.n	80092f8 <MX_USART2_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80092ee:	f240 2172 	movw	r1, #626	; 0x272
 80092f2:	4804      	ldr	r0, [pc, #16]	; (8009304 <MX_USART2_UART_Init+0x58>)
 80092f4:	f000 f8de 	bl	80094b4 <_Error_Handler>
  }

}
 80092f8:	bf00      	nop
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	2000027c 	.word	0x2000027c
 8009300:	40004400 	.word	0x40004400
 8009304:	08009f38 	.word	0x08009f38

08009308 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
static void MX_GPIO_Init(void)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b08a      	sub	sp, #40	; 0x28
 800930c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800930e:	2300      	movs	r3, #0
 8009310:	613b      	str	r3, [r7, #16]
 8009312:	4a62      	ldr	r2, [pc, #392]	; (800949c <MX_GPIO_Init+0x194>)
 8009314:	4b61      	ldr	r3, [pc, #388]	; (800949c <MX_GPIO_Init+0x194>)
 8009316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009318:	f043 0304 	orr.w	r3, r3, #4
 800931c:	6313      	str	r3, [r2, #48]	; 0x30
 800931e:	4b5f      	ldr	r3, [pc, #380]	; (800949c <MX_GPIO_Init+0x194>)
 8009320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009322:	f003 0304 	and.w	r3, r3, #4
 8009326:	613b      	str	r3, [r7, #16]
 8009328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800932a:	2300      	movs	r3, #0
 800932c:	60fb      	str	r3, [r7, #12]
 800932e:	4a5b      	ldr	r2, [pc, #364]	; (800949c <MX_GPIO_Init+0x194>)
 8009330:	4b5a      	ldr	r3, [pc, #360]	; (800949c <MX_GPIO_Init+0x194>)
 8009332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009338:	6313      	str	r3, [r2, #48]	; 0x30
 800933a:	4b58      	ldr	r3, [pc, #352]	; (800949c <MX_GPIO_Init+0x194>)
 800933c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009342:	60fb      	str	r3, [r7, #12]
 8009344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009346:	2300      	movs	r3, #0
 8009348:	60bb      	str	r3, [r7, #8]
 800934a:	4a54      	ldr	r2, [pc, #336]	; (800949c <MX_GPIO_Init+0x194>)
 800934c:	4b53      	ldr	r3, [pc, #332]	; (800949c <MX_GPIO_Init+0x194>)
 800934e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009350:	f043 0301 	orr.w	r3, r3, #1
 8009354:	6313      	str	r3, [r2, #48]	; 0x30
 8009356:	4b51      	ldr	r3, [pc, #324]	; (800949c <MX_GPIO_Init+0x194>)
 8009358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	60bb      	str	r3, [r7, #8]
 8009360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009362:	2300      	movs	r3, #0
 8009364:	607b      	str	r3, [r7, #4]
 8009366:	4a4d      	ldr	r2, [pc, #308]	; (800949c <MX_GPIO_Init+0x194>)
 8009368:	4b4c      	ldr	r3, [pc, #304]	; (800949c <MX_GPIO_Init+0x194>)
 800936a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936c:	f043 0302 	orr.w	r3, r3, #2
 8009370:	6313      	str	r3, [r2, #48]	; 0x30
 8009372:	4b4a      	ldr	r3, [pc, #296]	; (800949c <MX_GPIO_Init+0x194>)
 8009374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009376:	f003 0302 	and.w	r3, r3, #2
 800937a:	607b      	str	r3, [r7, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800937e:	2300      	movs	r3, #0
 8009380:	603b      	str	r3, [r7, #0]
 8009382:	4a46      	ldr	r2, [pc, #280]	; (800949c <MX_GPIO_Init+0x194>)
 8009384:	4b45      	ldr	r3, [pc, #276]	; (800949c <MX_GPIO_Init+0x194>)
 8009386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009388:	f043 0308 	orr.w	r3, r3, #8
 800938c:	6313      	str	r3, [r2, #48]	; 0x30
 800938e:	4b43      	ldr	r3, [pc, #268]	; (800949c <MX_GPIO_Init+0x194>)
 8009390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009392:	f003 0308 	and.w	r3, r3, #8
 8009396:	603b      	str	r3, [r7, #0]
 8009398:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800939a:	2200      	movs	r2, #0
 800939c:	2120      	movs	r1, #32
 800939e:	4840      	ldr	r0, [pc, #256]	; (80094a0 <MX_GPIO_Init+0x198>)
 80093a0:	f7f8 f846 	bl	8001430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80093a4:	2200      	movs	r2, #0
 80093a6:	2140      	movs	r1, #64	; 0x40
 80093a8:	483e      	ldr	r0, [pc, #248]	; (80094a4 <MX_GPIO_Init+0x19c>)
 80093aa:	f7f8 f841 	bl	8001430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80093ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80093b4:	4b3c      	ldr	r3, [pc, #240]	; (80094a8 <MX_GPIO_Init+0x1a0>)
 80093b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093b8:	2300      	movs	r3, #0
 80093ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80093bc:	f107 0314 	add.w	r3, r7, #20
 80093c0:	4619      	mov	r1, r3
 80093c2:	4838      	ldr	r0, [pc, #224]	; (80094a4 <MX_GPIO_Init+0x19c>)
 80093c4:	f7f7 fea2 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80093c8:	f641 73bf 	movw	r3, #8127	; 0x1fbf
 80093cc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80093ce:	2303      	movs	r3, #3
 80093d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093d2:	2300      	movs	r3, #0
 80093d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80093d6:	f107 0314 	add.w	r3, r7, #20
 80093da:	4619      	mov	r1, r3
 80093dc:	4831      	ldr	r0, [pc, #196]	; (80094a4 <MX_GPIO_Init+0x19c>)
 80093de:	f7f7 fe95 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6 
                           PA7 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 80093e2:	f248 43d3 	movw	r3, #34003	; 0x84d3
 80093e6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80093e8:	2303      	movs	r3, #3
 80093ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ec:	2300      	movs	r3, #0
 80093ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093f0:	f107 0314 	add.w	r3, r7, #20
 80093f4:	4619      	mov	r1, r3
 80093f6:	482a      	ldr	r0, [pc, #168]	; (80094a0 <MX_GPIO_Init+0x198>)
 80093f8:	f7f7 fe88 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80093fc:	2320      	movs	r3, #32
 80093fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009400:	2301      	movs	r3, #1
 8009402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009404:	2300      	movs	r3, #0
 8009406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009408:	2300      	movs	r3, #0
 800940a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800940c:	f107 0314 	add.w	r3, r7, #20
 8009410:	4619      	mov	r1, r3
 8009412:	4823      	ldr	r0, [pc, #140]	; (80094a0 <MX_GPIO_Init+0x198>)
 8009414:	f7f7 fe7a 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB12 PB13 PB14 PB15 
                           PB4 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8009418:	f24f 73f7 	movw	r3, #63479	; 0xf7f7
 800941c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800941e:	2303      	movs	r3, #3
 8009420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009422:	2300      	movs	r3, #0
 8009424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009426:	f107 0314 	add.w	r3, r7, #20
 800942a:	4619      	mov	r1, r3
 800942c:	481f      	ldr	r0, [pc, #124]	; (80094ac <MX_GPIO_Init+0x1a4>)
 800942e:	f7f7 fe6d 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009432:	2340      	movs	r3, #64	; 0x40
 8009434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009436:	2301      	movs	r3, #1
 8009438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800943a:	2300      	movs	r3, #0
 800943c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800943e:	2303      	movs	r3, #3
 8009440:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009442:	f107 0314 	add.w	r3, r7, #20
 8009446:	4619      	mov	r1, r3
 8009448:	4816      	ldr	r0, [pc, #88]	; (80094a4 <MX_GPIO_Init+0x19c>)
 800944a:	f7f7 fe5f 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : N64_DATA_Pin */
  GPIO_InitStruct.Pin = N64_DATA_Pin;
 800944e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009454:	4b14      	ldr	r3, [pc, #80]	; (80094a8 <MX_GPIO_Init+0x1a0>)
 8009456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009458:	2300      	movs	r3, #0
 800945a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800945c:	2303      	movs	r3, #3
 800945e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(N64_DATA_GPIO_Port, &GPIO_InitStruct);
 8009460:	f107 0314 	add.w	r3, r7, #20
 8009464:	4619      	mov	r1, r3
 8009466:	480e      	ldr	r0, [pc, #56]	; (80094a0 <MX_GPIO_Init+0x198>)
 8009468:	f7f7 fe50 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800946c:	2304      	movs	r3, #4
 800946e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009470:	2303      	movs	r3, #3
 8009472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009474:	2300      	movs	r3, #0
 8009476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009478:	f107 0314 	add.w	r3, r7, #20
 800947c:	4619      	mov	r1, r3
 800947e:	480c      	ldr	r0, [pc, #48]	; (80094b0 <MX_GPIO_Init+0x1a8>)
 8009480:	f7f7 fe44 	bl	800110c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8009484:	2200      	movs	r2, #0
 8009486:	2100      	movs	r1, #0
 8009488:	2017      	movs	r0, #23
 800948a:	f7f7 fafc 	bl	8000a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800948e:	2017      	movs	r0, #23
 8009490:	f7f7 fb15 	bl	8000abe <HAL_NVIC_EnableIRQ>

}
 8009494:	bf00      	nop
 8009496:	3728      	adds	r7, #40	; 0x28
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	40023800 	.word	0x40023800
 80094a0:	40020000 	.word	0x40020000
 80094a4:	40020800 	.word	0x40020800
 80094a8:	10210000 	.word	0x10210000
 80094ac:	40020400 	.word	0x40020400
 80094b0:	40020c00 	.word	0x40020c00

080094b4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80094be:	e7fe      	b.n	80094be <_Error_Handler+0xa>

080094c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80094c6:	2300      	movs	r3, #0
 80094c8:	607b      	str	r3, [r7, #4]
 80094ca:	4a25      	ldr	r2, [pc, #148]	; (8009560 <HAL_MspInit+0xa0>)
 80094cc:	4b24      	ldr	r3, [pc, #144]	; (8009560 <HAL_MspInit+0xa0>)
 80094ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094d4:	6453      	str	r3, [r2, #68]	; 0x44
 80094d6:	4b22      	ldr	r3, [pc, #136]	; (8009560 <HAL_MspInit+0xa0>)
 80094d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094de:	607b      	str	r3, [r7, #4]
 80094e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80094e2:	2300      	movs	r3, #0
 80094e4:	603b      	str	r3, [r7, #0]
 80094e6:	4a1e      	ldr	r2, [pc, #120]	; (8009560 <HAL_MspInit+0xa0>)
 80094e8:	4b1d      	ldr	r3, [pc, #116]	; (8009560 <HAL_MspInit+0xa0>)
 80094ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094f0:	6413      	str	r3, [r2, #64]	; 0x40
 80094f2:	4b1b      	ldr	r3, [pc, #108]	; (8009560 <HAL_MspInit+0xa0>)
 80094f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094fa:	603b      	str	r3, [r7, #0]
 80094fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80094fe:	2003      	movs	r0, #3
 8009500:	f7f7 fab6 	bl	8000a70 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8009504:	2200      	movs	r2, #0
 8009506:	2101      	movs	r1, #1
 8009508:	f06f 000b 	mvn.w	r0, #11
 800950c:	f7f7 fabb 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8009510:	2200      	movs	r2, #0
 8009512:	2101      	movs	r1, #1
 8009514:	f06f 000a 	mvn.w	r0, #10
 8009518:	f7f7 fab5 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 800951c:	2200      	movs	r2, #0
 800951e:	2101      	movs	r1, #1
 8009520:	f06f 0009 	mvn.w	r0, #9
 8009524:	f7f7 faaf 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8009528:	2200      	movs	r2, #0
 800952a:	2101      	movs	r1, #1
 800952c:	f06f 0004 	mvn.w	r0, #4
 8009530:	f7f7 faa9 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8009534:	2200      	movs	r2, #0
 8009536:	2101      	movs	r1, #1
 8009538:	f06f 0003 	mvn.w	r0, #3
 800953c:	f7f7 faa3 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8009540:	2200      	movs	r2, #0
 8009542:	2101      	movs	r1, #1
 8009544:	f06f 0001 	mvn.w	r0, #1
 8009548:	f7f7 fa9d 	bl	8000a86 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 1, 0);
 800954c:	2200      	movs	r2, #0
 800954e:	2101      	movs	r1, #1
 8009550:	f04f 30ff 	mov.w	r0, #4294967295
 8009554:	f7f7 fa97 	bl	8000a86 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009558:	bf00      	nop
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	40023800 	.word	0x40023800

08009564 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b088      	sub	sp, #32
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a12      	ldr	r2, [pc, #72]	; (80095bc <HAL_UART_MspInit+0x58>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d11d      	bne.n	80095b2 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009576:	2300      	movs	r3, #0
 8009578:	60bb      	str	r3, [r7, #8]
 800957a:	4a11      	ldr	r2, [pc, #68]	; (80095c0 <HAL_UART_MspInit+0x5c>)
 800957c:	4b10      	ldr	r3, [pc, #64]	; (80095c0 <HAL_UART_MspInit+0x5c>)
 800957e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009584:	6413      	str	r3, [r2, #64]	; 0x40
 8009586:	4b0e      	ldr	r3, [pc, #56]	; (80095c0 <HAL_UART_MspInit+0x5c>)
 8009588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800958e:	60bb      	str	r3, [r7, #8]
 8009590:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8009592:	230c      	movs	r3, #12
 8009594:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009596:	2302      	movs	r3, #2
 8009598:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800959a:	2301      	movs	r3, #1
 800959c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800959e:	2303      	movs	r3, #3
 80095a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80095a2:	2307      	movs	r3, #7
 80095a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095a6:	f107 030c 	add.w	r3, r7, #12
 80095aa:	4619      	mov	r1, r3
 80095ac:	4805      	ldr	r0, [pc, #20]	; (80095c4 <HAL_UART_MspInit+0x60>)
 80095ae:	f7f7 fdad 	bl	800110c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80095b2:	bf00      	nop
 80095b4:	3720      	adds	r7, #32
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	40004400 	.word	0x40004400
 80095c0:	40023800 	.word	0x40023800
 80095c4:	40020000 	.word	0x40020000

080095c8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80095cc:	f7f7 f944 	bl	8000858 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80095d0:	f7f7 faac 	bl	8000b2c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80095d4:	bf00      	nop
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80095de:	b672      	cpsid	i
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Read 64 command
	__disable_irq();
	uint8_t cmd = readCommand();
 80095e0:	f7ff fd28 	bl	8009034 <readCommand>
 80095e4:	4603      	mov	r3, r0
 80095e6:	71fb      	strb	r3, [r7, #7]

	my_wait_us_asm(2); // wait a small amount of time before replying
 80095e8:	2002      	movs	r0, #2
 80095ea:	f7f6 fe0b 	bl	8000204 <my_wait_us_asm>

	//-------- SEND RESPONSE
	SetN64DataOutputMode();
 80095ee:	f7ff fc43 	bl	8008e78 <SetN64DataOutputMode>

	switch(cmd)
 80095f2:	79fb      	ldrb	r3, [r7, #7]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d007      	beq.n	8009608 <EXTI9_5_IRQHandler+0x30>
 80095f8:	2bff      	cmp	r3, #255	; 0xff
 80095fa:	d002      	beq.n	8009602 <EXTI9_5_IRQHandler+0x2a>
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d000      	beq.n	8009602 <EXTI9_5_IRQHandler+0x2a>
		  break;
	  case 0x02:
	  case 0x03:
	  default:
		  // we do not process the read and write commands (memory pack)
		  break;
 8009600:	e005      	b.n	800960e <EXTI9_5_IRQHandler+0x36>
		  SendIdentity();
 8009602:	f7ff fca8 	bl	8008f56 <SendIdentity>
		  break;
 8009606:	e002      	b.n	800960e <EXTI9_5_IRQHandler+0x36>
		  SendControllerData();
 8009608:	f7ff fcb4 	bl	8008f74 <SendControllerData>
		  break;
 800960c:	bf00      	nop
	}
	//-------- DONE SENDING RESPOSE

	SetN64DataInputMode();
 800960e:	f7ff fc1d 	bl	8008e4c <SetN64DataInputMode>
  __ASM volatile ("cpsie i" : : : "memory");
 8009612:	b662      	cpsie	i

	__enable_irq();

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8009614:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009618:	f7f7 ff24 	bl	8001464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800961c:	bf00      	nop
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8009628:	4802      	ldr	r0, [pc, #8]	; (8009634 <OTG_FS_IRQHandler+0x10>)
 800962a:	f7f8 f9c7 	bl	80019bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800962e:	bf00      	nop
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	200006bc 	.word	0x200006bc

08009638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009638:	b480      	push	{r7}
 800963a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800963c:	4a16      	ldr	r2, [pc, #88]	; (8009698 <SystemInit+0x60>)
 800963e:	4b16      	ldr	r3, [pc, #88]	; (8009698 <SystemInit+0x60>)
 8009640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800964c:	4a13      	ldr	r2, [pc, #76]	; (800969c <SystemInit+0x64>)
 800964e:	4b13      	ldr	r3, [pc, #76]	; (800969c <SystemInit+0x64>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f043 0301 	orr.w	r3, r3, #1
 8009656:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009658:	4b10      	ldr	r3, [pc, #64]	; (800969c <SystemInit+0x64>)
 800965a:	2200      	movs	r2, #0
 800965c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800965e:	4a0f      	ldr	r2, [pc, #60]	; (800969c <SystemInit+0x64>)
 8009660:	4b0e      	ldr	r3, [pc, #56]	; (800969c <SystemInit+0x64>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800966c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800966e:	4b0b      	ldr	r3, [pc, #44]	; (800969c <SystemInit+0x64>)
 8009670:	4a0b      	ldr	r2, [pc, #44]	; (80096a0 <SystemInit+0x68>)
 8009672:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009674:	4a09      	ldr	r2, [pc, #36]	; (800969c <SystemInit+0x64>)
 8009676:	4b09      	ldr	r3, [pc, #36]	; (800969c <SystemInit+0x64>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800967e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009680:	4b06      	ldr	r3, [pc, #24]	; (800969c <SystemInit+0x64>)
 8009682:	2200      	movs	r2, #0
 8009684:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009686:	4b04      	ldr	r3, [pc, #16]	; (8009698 <SystemInit+0x60>)
 8009688:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800968c:	609a      	str	r2, [r3, #8]
#endif
}
 800968e:	bf00      	nop
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	e000ed00 	.word	0xe000ed00
 800969c:	40023800 	.word	0x40023800
 80096a0:	24003010 	.word	0x24003010

080096a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 80096a8:	2201      	movs	r2, #1
 80096aa:	4908      	ldr	r1, [pc, #32]	; (80096cc <MX_USB_HOST_Init+0x28>)
 80096ac:	4808      	ldr	r0, [pc, #32]	; (80096d0 <MX_USB_HOST_Init+0x2c>)
 80096ae:	f7fe f81e 	bl	80076ee <USBH_Init>

  USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS);
 80096b2:	4908      	ldr	r1, [pc, #32]	; (80096d4 <MX_USB_HOST_Init+0x30>)
 80096b4:	4806      	ldr	r0, [pc, #24]	; (80096d0 <MX_USB_HOST_Init+0x2c>)
 80096b6:	f7fe f88e 	bl	80077d6 <USBH_RegisterClass>
  USBH_RegisterClass(&hUsbHostFS, USBH_XPAD_CLASS);
 80096ba:	4907      	ldr	r1, [pc, #28]	; (80096d8 <MX_USB_HOST_Init+0x34>)
 80096bc:	4804      	ldr	r0, [pc, #16]	; (80096d0 <MX_USB_HOST_Init+0x2c>)
 80096be:	f7fe f88a 	bl	80077d6 <USBH_RegisterClass>

  USBH_Start(&hUsbHostFS);
 80096c2:	4803      	ldr	r0, [pc, #12]	; (80096d0 <MX_USB_HOST_Init+0x2c>)
 80096c4:	f7fe f919 	bl	80078fa <USBH_Start>

  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80096c8:	bf00      	nop
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	080096f1 	.word	0x080096f1
 80096d0:	200002bc 	.word	0x200002bc
 80096d4:	20000038 	.word	0x20000038
 80096d8:	20000058 	.word	0x20000058

080096dc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80096e0:	4802      	ldr	r0, [pc, #8]	; (80096ec <MX_USB_HOST_Process+0x10>)
 80096e2:	f7fe f91b 	bl	800791c <USBH_Process>
}
 80096e6:	bf00      	nop
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	200002bc 	.word	0x200002bc

080096f0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	460b      	mov	r3, r1
 80096fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80096fc:	78fb      	ldrb	r3, [r7, #3]
 80096fe:	3b01      	subs	r3, #1
 8009700:	2b04      	cmp	r3, #4
 8009702:	d819      	bhi.n	8009738 <USBH_UserProcess+0x48>
 8009704:	a201      	add	r2, pc, #4	; (adr r2, 800970c <USBH_UserProcess+0x1c>)
 8009706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970a:	bf00      	nop
 800970c:	08009739 	.word	0x08009739
 8009710:	08009729 	.word	0x08009729
 8009714:	08009739 	.word	0x08009739
 8009718:	08009731 	.word	0x08009731
 800971c:	08009721 	.word	0x08009721
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009720:	4b09      	ldr	r3, [pc, #36]	; (8009748 <USBH_UserProcess+0x58>)
 8009722:	2203      	movs	r2, #3
 8009724:	701a      	strb	r2, [r3, #0]
  break;
 8009726:	e008      	b.n	800973a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009728:	4b07      	ldr	r3, [pc, #28]	; (8009748 <USBH_UserProcess+0x58>)
 800972a:	2202      	movs	r2, #2
 800972c:	701a      	strb	r2, [r3, #0]
  break;
 800972e:	e004      	b.n	800973a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009730:	4b05      	ldr	r3, [pc, #20]	; (8009748 <USBH_UserProcess+0x58>)
 8009732:	2201      	movs	r2, #1
 8009734:	701a      	strb	r2, [r3, #0]
  break;
 8009736:	e000      	b.n	800973a <USBH_UserProcess+0x4a>

  default:
  break;
 8009738:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800973a:	bf00      	nop
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	2000010b 	.word	0x2000010b

0800974c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b088      	sub	sp, #32
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800975c:	d139      	bne.n	80097d2 <HAL_HCD_MspInit+0x86>
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800975e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009762:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009764:	2300      	movs	r3, #0
 8009766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009768:	2300      	movs	r3, #0
 800976a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800976c:	f107 030c 	add.w	r3, r7, #12
 8009770:	4619      	mov	r1, r3
 8009772:	481a      	ldr	r0, [pc, #104]	; (80097dc <HAL_HCD_MspInit+0x90>)
 8009774:	f7f7 fcca 	bl	800110c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009778:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800977c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800977e:	2302      	movs	r3, #2
 8009780:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009782:	2300      	movs	r3, #0
 8009784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009786:	2303      	movs	r3, #3
 8009788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800978a:	230a      	movs	r3, #10
 800978c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800978e:	f107 030c 	add.w	r3, r7, #12
 8009792:	4619      	mov	r1, r3
 8009794:	4811      	ldr	r0, [pc, #68]	; (80097dc <HAL_HCD_MspInit+0x90>)
 8009796:	f7f7 fcb9 	bl	800110c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800979a:	4a11      	ldr	r2, [pc, #68]	; (80097e0 <HAL_HCD_MspInit+0x94>)
 800979c:	4b10      	ldr	r3, [pc, #64]	; (80097e0 <HAL_HCD_MspInit+0x94>)
 800979e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a4:	6353      	str	r3, [r2, #52]	; 0x34
 80097a6:	2300      	movs	r3, #0
 80097a8:	60bb      	str	r3, [r7, #8]
 80097aa:	4a0d      	ldr	r2, [pc, #52]	; (80097e0 <HAL_HCD_MspInit+0x94>)
 80097ac:	4b0c      	ldr	r3, [pc, #48]	; (80097e0 <HAL_HCD_MspInit+0x94>)
 80097ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80097b4:	6453      	str	r3, [r2, #68]	; 0x44
 80097b6:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <HAL_HCD_MspInit+0x94>)
 80097b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097be:	60bb      	str	r3, [r7, #8]
 80097c0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 80097c2:	2200      	movs	r2, #0
 80097c4:	2101      	movs	r1, #1
 80097c6:	2043      	movs	r0, #67	; 0x43
 80097c8:	f7f7 f95d 	bl	8000a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80097cc:	2043      	movs	r0, #67	; 0x43
 80097ce:	f7f7 f976 	bl	8000abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80097d2:	bf00      	nop
 80097d4:	3720      	adds	r7, #32
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	40020000 	.word	0x40020000
 80097e0:	40023800 	.word	0x40023800

080097e4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7fe fb09 	bl	8007e0a <USBH_LL_IncTimer>
}
 80097f8:	bf00      	nop
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800980e:	4618      	mov	r0, r3
 8009810:	f7fe fb25 	bl	8007e5e <USBH_LL_Connect>
}
 8009814:	bf00      	nop
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800982a:	4618      	mov	r0, r3
 800982c:	f7fe fb3d 	bl	8007eaa <USBH_LL_Disconnect>
}
 8009830:	bf00      	nop
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	70fb      	strb	r3, [r7, #3]
 8009844:	4613      	mov	r3, r2
 8009846:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009862:	2b01      	cmp	r3, #1
 8009864:	d12c      	bne.n	80098c0 <USBH_LL_Init+0x6c>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009866:	4a19      	ldr	r2, [pc, #100]	; (80098cc <USBH_LL_Init+0x78>)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  phost->pData = &hhcd_USB_OTG_FS;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a16      	ldr	r2, [pc, #88]	; (80098cc <USBH_LL_Init+0x78>)
 8009872:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009876:	4b15      	ldr	r3, [pc, #84]	; (80098cc <USBH_LL_Init+0x78>)
 8009878:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800987c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800987e:	4b13      	ldr	r3, [pc, #76]	; (80098cc <USBH_LL_Init+0x78>)
 8009880:	2208      	movs	r2, #8
 8009882:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009884:	4b11      	ldr	r3, [pc, #68]	; (80098cc <USBH_LL_Init+0x78>)
 8009886:	2203      	movs	r2, #3
 8009888:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800988a:	4b10      	ldr	r3, [pc, #64]	; (80098cc <USBH_LL_Init+0x78>)
 800988c:	2200      	movs	r2, #0
 800988e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009890:	4b0e      	ldr	r3, [pc, #56]	; (80098cc <USBH_LL_Init+0x78>)
 8009892:	2202      	movs	r2, #2
 8009894:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009896:	4b0d      	ldr	r3, [pc, #52]	; (80098cc <USBH_LL_Init+0x78>)
 8009898:	2200      	movs	r2, #0
 800989a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800989c:	480b      	ldr	r0, [pc, #44]	; (80098cc <USBH_LL_Init+0x78>)
 800989e:	f7f7 fe04 	bl	80014aa <HAL_HCD_Init>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d003      	beq.n	80098b0 <USBH_LL_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80098a8:	21df      	movs	r1, #223	; 0xdf
 80098aa:	4809      	ldr	r0, [pc, #36]	; (80098d0 <USBH_LL_Init+0x7c>)
 80098ac:	f7ff fe02 	bl	80094b4 <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80098b0:	4806      	ldr	r0, [pc, #24]	; (80098cc <USBH_LL_Init+0x78>)
 80098b2:	f7f8 f9e6 	bl	8001c82 <HAL_HCD_GetCurrentFrame>
 80098b6:	4603      	mov	r3, r0
 80098b8:	4619      	mov	r1, r3
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7fe fa96 	bl	8007dec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3708      	adds	r7, #8
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	200006bc 	.word	0x200006bc
 80098d0:	08009f48 	.word	0x08009f48

080098d4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Start(phost->pData);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7f8 f966 	bl	8001bbc <HAL_HCD_Start>
 80098f0:	4603      	mov	r3, r0
 80098f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80098f4:	7bbb      	ldrb	r3, [r7, #14]
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d816      	bhi.n	8009928 <USBH_LL_Start+0x54>
 80098fa:	a201      	add	r2, pc, #4	; (adr r2, 8009900 <USBH_LL_Start+0x2c>)
 80098fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009900:	08009911 	.word	0x08009911
 8009904:	08009917 	.word	0x08009917
 8009908:	0800991d 	.word	0x0800991d
 800990c:	08009923 	.word	0x08009923
    case HAL_OK :
      usb_status = USBH_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73fb      	strb	r3, [r7, #15]
    break;
 8009914:	e00b      	b.n	800992e <USBH_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009916:	2302      	movs	r3, #2
 8009918:	73fb      	strb	r3, [r7, #15]
    break;
 800991a:	e008      	b.n	800992e <USBH_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800991c:	2301      	movs	r3, #1
 800991e:	73fb      	strb	r3, [r7, #15]
    break;
 8009920:	e005      	b.n	800992e <USBH_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009922:	2302      	movs	r3, #2
 8009924:	73fb      	strb	r3, [r7, #15]
    break;
 8009926:	e002      	b.n	800992e <USBH_LL_Start+0x5a>
    default :
      usb_status = USBH_FAIL;
 8009928:	2302      	movs	r3, #2
 800992a:	73fb      	strb	r3, [r7, #15]
    break;
 800992c:	bf00      	nop
  }
  return usb_status;
 800992e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800994e:	4618      	mov	r0, r3
 8009950:	f7f8 f957 	bl	8001c02 <HAL_HCD_Stop>
 8009954:	4603      	mov	r3, r0
 8009956:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	2b03      	cmp	r3, #3
 800995c:	d816      	bhi.n	800998c <USBH_LL_Stop+0x54>
 800995e:	a201      	add	r2, pc, #4	; (adr r2, 8009964 <USBH_LL_Stop+0x2c>)
 8009960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009964:	08009975 	.word	0x08009975
 8009968:	0800997b 	.word	0x0800997b
 800996c:	08009981 	.word	0x08009981
 8009970:	08009987 	.word	0x08009987
    case HAL_OK :
      usb_status = USBH_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	73fb      	strb	r3, [r7, #15]
    break;
 8009978:	e00b      	b.n	8009992 <USBH_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800997a:	2302      	movs	r3, #2
 800997c:	73fb      	strb	r3, [r7, #15]
    break;
 800997e:	e008      	b.n	8009992 <USBH_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009980:	2301      	movs	r3, #1
 8009982:	73fb      	strb	r3, [r7, #15]
    break;
 8009984:	e005      	b.n	8009992 <USBH_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009986:	2302      	movs	r3, #2
 8009988:	73fb      	strb	r3, [r7, #15]
    break;
 800998a:	e002      	b.n	8009992 <USBH_LL_Stop+0x5a>
    default :
      usb_status = USBH_FAIL;
 800998c:	2302      	movs	r3, #2
 800998e:	73fb      	strb	r3, [r7, #15]
    break;
 8009990:	bf00      	nop
  }
  return usb_status;
 8009992:	7bfb      	ldrb	r3, [r7, #15]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80099a4:	2301      	movs	r3, #1
 80099a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7f8 f975 	bl	8001c9e <HAL_HCD_GetCurrentSpeed>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d007      	beq.n	80099ca <USBH_LL_GetSpeed+0x2e>
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d302      	bcc.n	80099c4 <USBH_LL_GetSpeed+0x28>
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d006      	beq.n	80099d0 <USBH_LL_GetSpeed+0x34>
 80099c2:	e008      	b.n	80099d6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73fb      	strb	r3, [r7, #15]
    break;
 80099c8:	e008      	b.n	80099dc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80099ca:	2301      	movs	r3, #1
 80099cc:	73fb      	strb	r3, [r7, #15]
    break;
 80099ce:	e005      	b.n	80099dc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80099d0:	2302      	movs	r3, #2
 80099d2:	73fb      	strb	r3, [r7, #15]
    break;
 80099d4:	e002      	b.n	80099dc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80099d6:	2301      	movs	r3, #1
 80099d8:	73fb      	strb	r3, [r7, #15]
    break;
 80099da:	bf00      	nop
  }
  return  speed;
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
	...

080099e8 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099f4:	2300      	movs	r3, #0
 80099f6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7f8 f91c 	bl	8001c3c <HAL_HCD_ResetPort>
 8009a04:	4603      	mov	r3, r0
 8009a06:	73bb      	strb	r3, [r7, #14]
  switch (hal_status) {
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
 8009a0a:	2b03      	cmp	r3, #3
 8009a0c:	d816      	bhi.n	8009a3c <USBH_LL_ResetPort+0x54>
 8009a0e:	a201      	add	r2, pc, #4	; (adr r2, 8009a14 <USBH_LL_ResetPort+0x2c>)
 8009a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a14:	08009a25 	.word	0x08009a25
 8009a18:	08009a2b 	.word	0x08009a2b
 8009a1c:	08009a31 	.word	0x08009a31
 8009a20:	08009a37 	.word	0x08009a37
    case HAL_OK :
      usb_status = USBH_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	73fb      	strb	r3, [r7, #15]
    break;
 8009a28:	e00b      	b.n	8009a42 <USBH_LL_ResetPort+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a2e:	e008      	b.n	8009a42 <USBH_LL_ResetPort+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009a30:	2301      	movs	r3, #1
 8009a32:	73fb      	strb	r3, [r7, #15]
    break;
 8009a34:	e005      	b.n	8009a42 <USBH_LL_ResetPort+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009a36:	2302      	movs	r3, #2
 8009a38:	73fb      	strb	r3, [r7, #15]
    break;
 8009a3a:	e002      	b.n	8009a42 <USBH_LL_ResetPort+0x5a>
    default :
      usb_status = USBH_FAIL;
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a40:	bf00      	nop
  }
  return usb_status;
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009a4c:	b590      	push	{r4, r7, lr}
 8009a4e:	b089      	sub	sp, #36	; 0x24
 8009a50:	af04      	add	r7, sp, #16
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	4608      	mov	r0, r1
 8009a56:	4611      	mov	r1, r2
 8009a58:	461a      	mov	r2, r3
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	70fb      	strb	r3, [r7, #3]
 8009a5e:	460b      	mov	r3, r1
 8009a60:	70bb      	strb	r3, [r7, #2]
 8009a62:	4613      	mov	r3, r2
 8009a64:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a66:	2300      	movs	r3, #0
 8009a68:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	; 0x3f8
 8009a74:	787c      	ldrb	r4, [r7, #1]
 8009a76:	78ba      	ldrb	r2, [r7, #2]
 8009a78:	78f9      	ldrb	r1, [r7, #3]
 8009a7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a7c:	9302      	str	r3, [sp, #8]
 8009a7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a82:	9301      	str	r3, [sp, #4]
 8009a84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a88:	9300      	str	r3, [sp, #0]
 8009a8a:	4623      	mov	r3, r4
 8009a8c:	f7f7 fd59 	bl	8001542 <HAL_HCD_HC_Init>
 8009a90:	4603      	mov	r3, r0
 8009a92:	73bb      	strb	r3, [r7, #14]
                               dev_address, speed, ep_type, mps);

  switch (hal_status) {
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	d816      	bhi.n	8009ac8 <USBH_LL_OpenPipe+0x7c>
 8009a9a:	a201      	add	r2, pc, #4	; (adr r2, 8009aa0 <USBH_LL_OpenPipe+0x54>)
 8009a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa0:	08009ab1 	.word	0x08009ab1
 8009aa4:	08009ab7 	.word	0x08009ab7
 8009aa8:	08009abd 	.word	0x08009abd
 8009aac:	08009ac3 	.word	0x08009ac3
    case HAL_OK :
      usb_status = USBH_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ab4:	e00b      	b.n	8009ace <USBH_LL_OpenPipe+0x82>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8009aba:	e008      	b.n	8009ace <USBH_LL_OpenPipe+0x82>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009abc:	2301      	movs	r3, #1
 8009abe:	73fb      	strb	r3, [r7, #15]
    break;
 8009ac0:	e005      	b.n	8009ace <USBH_LL_OpenPipe+0x82>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ac6:	e002      	b.n	8009ace <USBH_LL_OpenPipe+0x82>
    default :
      usb_status = USBH_FAIL;
 8009ac8:	2302      	movs	r3, #2
 8009aca:	73fb      	strb	r3, [r7, #15]
    break;
 8009acc:	bf00      	nop
  }
  return usb_status;
 8009ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3714      	adds	r7, #20
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd90      	pop	{r4, r7, pc}

08009ad8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8009af2:	78fa      	ldrb	r2, [r7, #3]
 8009af4:	4611      	mov	r1, r2
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7f7 fdaa 	bl	8001650 <HAL_HCD_HC_Halt>
 8009afc:	4603      	mov	r3, r0
 8009afe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009b00:	7bbb      	ldrb	r3, [r7, #14]
 8009b02:	2b03      	cmp	r3, #3
 8009b04:	d816      	bhi.n	8009b34 <USBH_LL_ClosePipe+0x5c>
 8009b06:	a201      	add	r2, pc, #4	; (adr r2, 8009b0c <USBH_LL_ClosePipe+0x34>)
 8009b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0c:	08009b1d 	.word	0x08009b1d
 8009b10:	08009b23 	.word	0x08009b23
 8009b14:	08009b29 	.word	0x08009b29
 8009b18:	08009b2f 	.word	0x08009b2f
    case HAL_OK :
      usb_status = USBH_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b20:	e00b      	b.n	8009b3a <USBH_LL_ClosePipe+0x62>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009b22:	2302      	movs	r3, #2
 8009b24:	73fb      	strb	r3, [r7, #15]
    break;
 8009b26:	e008      	b.n	8009b3a <USBH_LL_ClosePipe+0x62>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b2c:	e005      	b.n	8009b3a <USBH_LL_ClosePipe+0x62>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009b2e:	2302      	movs	r3, #2
 8009b30:	73fb      	strb	r3, [r7, #15]
    break;
 8009b32:	e002      	b.n	8009b3a <USBH_LL_ClosePipe+0x62>
    default :
      usb_status = USBH_FAIL;
 8009b34:	2302      	movs	r3, #2
 8009b36:	73fb      	strb	r3, [r7, #15]
    break;
 8009b38:	bf00      	nop
  }
  return usb_status;
 8009b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009b44:	b590      	push	{r4, r7, lr}
 8009b46:	b089      	sub	sp, #36	; 0x24
 8009b48:	af04      	add	r7, sp, #16
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	4608      	mov	r0, r1
 8009b4e:	4611      	mov	r1, r2
 8009b50:	461a      	mov	r2, r3
 8009b52:	4603      	mov	r3, r0
 8009b54:	70fb      	strb	r3, [r7, #3]
 8009b56:	460b      	mov	r3, r1
 8009b58:	70bb      	strb	r3, [r7, #2]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	; 0x3f8
 8009b6c:	787c      	ldrb	r4, [r7, #1]
 8009b6e:	78ba      	ldrb	r2, [r7, #2]
 8009b70:	78f9      	ldrb	r1, [r7, #3]
 8009b72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009b76:	9303      	str	r3, [sp, #12]
 8009b78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b7a:	9302      	str	r3, [sp, #8]
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	9301      	str	r3, [sp, #4]
 8009b80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	4623      	mov	r3, r4
 8009b88:	f7f7 fd86 	bl	8001698 <HAL_HCD_HC_SubmitRequest>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	73bb      	strb	r3, [r7, #14]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  switch (hal_status) {
 8009b90:	7bbb      	ldrb	r3, [r7, #14]
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d816      	bhi.n	8009bc4 <USBH_LL_SubmitURB+0x80>
 8009b96:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <USBH_LL_SubmitURB+0x58>)
 8009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9c:	08009bad 	.word	0x08009bad
 8009ba0:	08009bb3 	.word	0x08009bb3
 8009ba4:	08009bb9 	.word	0x08009bb9
 8009ba8:	08009bbf 	.word	0x08009bbf
    case HAL_OK :
      usb_status = USBH_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb0:	e00b      	b.n	8009bca <USBH_LL_SubmitURB+0x86>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009bb2:	2302      	movs	r3, #2
 8009bb4:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb6:	e008      	b.n	8009bca <USBH_LL_SubmitURB+0x86>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	73fb      	strb	r3, [r7, #15]
    break;
 8009bbc:	e005      	b.n	8009bca <USBH_LL_SubmitURB+0x86>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	73fb      	strb	r3, [r7, #15]
    break;
 8009bc2:	e002      	b.n	8009bca <USBH_LL_SubmitURB+0x86>
    default :
      usb_status = USBH_FAIL;
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8009bc8:	bf00      	nop
  }
  return usb_status;
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd90      	pop	{r4, r7, pc}

08009bd4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8009be6:	78fa      	ldrb	r2, [r7, #3]
 8009be8:	4611      	mov	r1, r2
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7f8 f834 	bl	8001c58 <HAL_HCD_HC_GetURBState>
 8009bf0:	4603      	mov	r3, r0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b082      	sub	sp, #8
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	460b      	mov	r3, r1
 8009c04:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8009c06:	20c8      	movs	r0, #200	; 0xc8
 8009c08:	f7f6 fe46 	bl	8000898 <HAL_Delay>
  return USBH_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b085      	sub	sp, #20
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	460b      	mov	r3, r1
 8009c20:	70fb      	strb	r3, [r7, #3]
 8009c22:	4613      	mov	r3, r2
 8009c24:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8009c2c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009c2e:	78fa      	ldrb	r2, [r7, #3]
 8009c30:	68f9      	ldr	r1, [r7, #12]
 8009c32:	4613      	mov	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	4413      	add	r3, r2
 8009c38:	00db      	lsls	r3, r3, #3
 8009c3a:	440b      	add	r3, r1
 8009c3c:	333b      	adds	r3, #59	; 0x3b
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d00a      	beq.n	8009c5a <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009c44:	78fa      	ldrb	r2, [r7, #3]
 8009c46:	68f9      	ldr	r1, [r7, #12]
 8009c48:	4613      	mov	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	00db      	lsls	r3, r3, #3
 8009c50:	440b      	add	r3, r1
 8009c52:	3350      	adds	r3, #80	; 0x50
 8009c54:	78ba      	ldrb	r2, [r7, #2]
 8009c56:	701a      	strb	r2, [r3, #0]
 8009c58:	e009      	b.n	8009c6e <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009c5a:	78fa      	ldrb	r2, [r7, #3]
 8009c5c:	68f9      	ldr	r1, [r7, #12]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	4413      	add	r3, r2
 8009c64:	00db      	lsls	r3, r3, #3
 8009c66:	440b      	add	r3, r1
 8009c68:	3351      	adds	r3, #81	; 0x51
 8009c6a:	78ba      	ldrb	r2, [r7, #2]
 8009c6c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3714      	adds	r7, #20
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7f6 fe07 	bl	8000898 <HAL_Delay>
}
 8009c8a:	bf00      	nop
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
	...

08009c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009ccc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009c98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009c9a:	e003      	b.n	8009ca4 <LoopCopyDataInit>

08009c9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009c9c:	4b0c      	ldr	r3, [pc, #48]	; (8009cd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009c9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009ca0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009ca2:	3104      	adds	r1, #4

08009ca4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009ca4:	480b      	ldr	r0, [pc, #44]	; (8009cd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009ca6:	4b0c      	ldr	r3, [pc, #48]	; (8009cd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009ca8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009caa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009cac:	d3f6      	bcc.n	8009c9c <CopyDataInit>
  ldr  r2, =_sbss
 8009cae:	4a0b      	ldr	r2, [pc, #44]	; (8009cdc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009cb0:	e002      	b.n	8009cb8 <LoopFillZerobss>

08009cb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009cb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009cb4:	f842 3b04 	str.w	r3, [r2], #4

08009cb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009cb8:	4b09      	ldr	r3, [pc, #36]	; (8009ce0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009cba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009cbc:	d3f9      	bcc.n	8009cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009cbe:	f7ff fcbb 	bl	8009638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009cc2:	f000 f811 	bl	8009ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009cc6:	f7ff f9e9 	bl	800909c <main>
  bx  lr    
 8009cca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009ccc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009cd0:	0800a0c4 	.word	0x0800a0c4
  ldr  r0, =_sdata
 8009cd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009cd8:	200000e4 	.word	0x200000e4
  ldr  r2, =_sbss
 8009cdc:	200000e4 	.word	0x200000e4
  ldr  r3, = _ebss
 8009ce0:	20000958 	.word	0x20000958

08009ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009ce4:	e7fe      	b.n	8009ce4 <ADC_IRQHandler>
	...

08009ce8 <__libc_init_array>:
 8009ce8:	b570      	push	{r4, r5, r6, lr}
 8009cea:	4e0d      	ldr	r6, [pc, #52]	; (8009d20 <__libc_init_array+0x38>)
 8009cec:	4c0d      	ldr	r4, [pc, #52]	; (8009d24 <__libc_init_array+0x3c>)
 8009cee:	1ba4      	subs	r4, r4, r6
 8009cf0:	10a4      	asrs	r4, r4, #2
 8009cf2:	2500      	movs	r5, #0
 8009cf4:	42a5      	cmp	r5, r4
 8009cf6:	d109      	bne.n	8009d0c <__libc_init_array+0x24>
 8009cf8:	4e0b      	ldr	r6, [pc, #44]	; (8009d28 <__libc_init_array+0x40>)
 8009cfa:	4c0c      	ldr	r4, [pc, #48]	; (8009d2c <__libc_init_array+0x44>)
 8009cfc:	f000 f908 	bl	8009f10 <_init>
 8009d00:	1ba4      	subs	r4, r4, r6
 8009d02:	10a4      	asrs	r4, r4, #2
 8009d04:	2500      	movs	r5, #0
 8009d06:	42a5      	cmp	r5, r4
 8009d08:	d105      	bne.n	8009d16 <__libc_init_array+0x2e>
 8009d0a:	bd70      	pop	{r4, r5, r6, pc}
 8009d0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d10:	4798      	blx	r3
 8009d12:	3501      	adds	r5, #1
 8009d14:	e7ee      	b.n	8009cf4 <__libc_init_array+0xc>
 8009d16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d1a:	4798      	blx	r3
 8009d1c:	3501      	adds	r5, #1
 8009d1e:	e7f2      	b.n	8009d06 <__libc_init_array+0x1e>
 8009d20:	0800a0bc 	.word	0x0800a0bc
 8009d24:	0800a0bc 	.word	0x0800a0bc
 8009d28:	0800a0bc 	.word	0x0800a0bc
 8009d2c:	0800a0c0 	.word	0x0800a0c0

08009d30 <malloc>:
 8009d30:	4b02      	ldr	r3, [pc, #8]	; (8009d3c <malloc+0xc>)
 8009d32:	4601      	mov	r1, r0
 8009d34:	6818      	ldr	r0, [r3, #0]
 8009d36:	f000 b86d 	b.w	8009e14 <_malloc_r>
 8009d3a:	bf00      	nop
 8009d3c:	20000080 	.word	0x20000080

08009d40 <free>:
 8009d40:	4b02      	ldr	r3, [pc, #8]	; (8009d4c <free+0xc>)
 8009d42:	4601      	mov	r1, r0
 8009d44:	6818      	ldr	r0, [r3, #0]
 8009d46:	f000 b817 	b.w	8009d78 <_free_r>
 8009d4a:	bf00      	nop
 8009d4c:	20000080 	.word	0x20000080

08009d50 <memcpy>:
 8009d50:	b510      	push	{r4, lr}
 8009d52:	1e43      	subs	r3, r0, #1
 8009d54:	440a      	add	r2, r1
 8009d56:	4291      	cmp	r1, r2
 8009d58:	d100      	bne.n	8009d5c <memcpy+0xc>
 8009d5a:	bd10      	pop	{r4, pc}
 8009d5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d64:	e7f7      	b.n	8009d56 <memcpy+0x6>

08009d66 <memset>:
 8009d66:	4402      	add	r2, r0
 8009d68:	4603      	mov	r3, r0
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d100      	bne.n	8009d70 <memset+0xa>
 8009d6e:	4770      	bx	lr
 8009d70:	f803 1b01 	strb.w	r1, [r3], #1
 8009d74:	e7f9      	b.n	8009d6a <memset+0x4>
	...

08009d78 <_free_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	4605      	mov	r5, r0
 8009d7c:	2900      	cmp	r1, #0
 8009d7e:	d045      	beq.n	8009e0c <_free_r+0x94>
 8009d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d84:	1f0c      	subs	r4, r1, #4
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	bfb8      	it	lt
 8009d8a:	18e4      	addlt	r4, r4, r3
 8009d8c:	f000 f8b0 	bl	8009ef0 <__malloc_lock>
 8009d90:	4a1f      	ldr	r2, [pc, #124]	; (8009e10 <_free_r+0x98>)
 8009d92:	6813      	ldr	r3, [r2, #0]
 8009d94:	4610      	mov	r0, r2
 8009d96:	b933      	cbnz	r3, 8009da6 <_free_r+0x2e>
 8009d98:	6063      	str	r3, [r4, #4]
 8009d9a:	6014      	str	r4, [r2, #0]
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009da2:	f000 b8a6 	b.w	8009ef2 <__malloc_unlock>
 8009da6:	42a3      	cmp	r3, r4
 8009da8:	d90c      	bls.n	8009dc4 <_free_r+0x4c>
 8009daa:	6821      	ldr	r1, [r4, #0]
 8009dac:	1862      	adds	r2, r4, r1
 8009dae:	4293      	cmp	r3, r2
 8009db0:	bf04      	itt	eq
 8009db2:	681a      	ldreq	r2, [r3, #0]
 8009db4:	685b      	ldreq	r3, [r3, #4]
 8009db6:	6063      	str	r3, [r4, #4]
 8009db8:	bf04      	itt	eq
 8009dba:	1852      	addeq	r2, r2, r1
 8009dbc:	6022      	streq	r2, [r4, #0]
 8009dbe:	6004      	str	r4, [r0, #0]
 8009dc0:	e7ec      	b.n	8009d9c <_free_r+0x24>
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	685a      	ldr	r2, [r3, #4]
 8009dc6:	b10a      	cbz	r2, 8009dcc <_free_r+0x54>
 8009dc8:	42a2      	cmp	r2, r4
 8009dca:	d9fa      	bls.n	8009dc2 <_free_r+0x4a>
 8009dcc:	6819      	ldr	r1, [r3, #0]
 8009dce:	1858      	adds	r0, r3, r1
 8009dd0:	42a0      	cmp	r0, r4
 8009dd2:	d10b      	bne.n	8009dec <_free_r+0x74>
 8009dd4:	6820      	ldr	r0, [r4, #0]
 8009dd6:	4401      	add	r1, r0
 8009dd8:	1858      	adds	r0, r3, r1
 8009dda:	4282      	cmp	r2, r0
 8009ddc:	6019      	str	r1, [r3, #0]
 8009dde:	d1dd      	bne.n	8009d9c <_free_r+0x24>
 8009de0:	6810      	ldr	r0, [r2, #0]
 8009de2:	6852      	ldr	r2, [r2, #4]
 8009de4:	605a      	str	r2, [r3, #4]
 8009de6:	4401      	add	r1, r0
 8009de8:	6019      	str	r1, [r3, #0]
 8009dea:	e7d7      	b.n	8009d9c <_free_r+0x24>
 8009dec:	d902      	bls.n	8009df4 <_free_r+0x7c>
 8009dee:	230c      	movs	r3, #12
 8009df0:	602b      	str	r3, [r5, #0]
 8009df2:	e7d3      	b.n	8009d9c <_free_r+0x24>
 8009df4:	6820      	ldr	r0, [r4, #0]
 8009df6:	1821      	adds	r1, r4, r0
 8009df8:	428a      	cmp	r2, r1
 8009dfa:	bf04      	itt	eq
 8009dfc:	6811      	ldreq	r1, [r2, #0]
 8009dfe:	6852      	ldreq	r2, [r2, #4]
 8009e00:	6062      	str	r2, [r4, #4]
 8009e02:	bf04      	itt	eq
 8009e04:	1809      	addeq	r1, r1, r0
 8009e06:	6021      	streq	r1, [r4, #0]
 8009e08:	605c      	str	r4, [r3, #4]
 8009e0a:	e7c7      	b.n	8009d9c <_free_r+0x24>
 8009e0c:	bd38      	pop	{r3, r4, r5, pc}
 8009e0e:	bf00      	nop
 8009e10:	2000010c 	.word	0x2000010c

08009e14 <_malloc_r>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	1ccd      	adds	r5, r1, #3
 8009e18:	f025 0503 	bic.w	r5, r5, #3
 8009e1c:	3508      	adds	r5, #8
 8009e1e:	2d0c      	cmp	r5, #12
 8009e20:	bf38      	it	cc
 8009e22:	250c      	movcc	r5, #12
 8009e24:	2d00      	cmp	r5, #0
 8009e26:	4606      	mov	r6, r0
 8009e28:	db01      	blt.n	8009e2e <_malloc_r+0x1a>
 8009e2a:	42a9      	cmp	r1, r5
 8009e2c:	d903      	bls.n	8009e36 <_malloc_r+0x22>
 8009e2e:	230c      	movs	r3, #12
 8009e30:	6033      	str	r3, [r6, #0]
 8009e32:	2000      	movs	r0, #0
 8009e34:	bd70      	pop	{r4, r5, r6, pc}
 8009e36:	f000 f85b 	bl	8009ef0 <__malloc_lock>
 8009e3a:	4a23      	ldr	r2, [pc, #140]	; (8009ec8 <_malloc_r+0xb4>)
 8009e3c:	6814      	ldr	r4, [r2, #0]
 8009e3e:	4621      	mov	r1, r4
 8009e40:	b991      	cbnz	r1, 8009e68 <_malloc_r+0x54>
 8009e42:	4c22      	ldr	r4, [pc, #136]	; (8009ecc <_malloc_r+0xb8>)
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	b91b      	cbnz	r3, 8009e50 <_malloc_r+0x3c>
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f000 f841 	bl	8009ed0 <_sbrk_r>
 8009e4e:	6020      	str	r0, [r4, #0]
 8009e50:	4629      	mov	r1, r5
 8009e52:	4630      	mov	r0, r6
 8009e54:	f000 f83c 	bl	8009ed0 <_sbrk_r>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d126      	bne.n	8009eaa <_malloc_r+0x96>
 8009e5c:	230c      	movs	r3, #12
 8009e5e:	6033      	str	r3, [r6, #0]
 8009e60:	4630      	mov	r0, r6
 8009e62:	f000 f846 	bl	8009ef2 <__malloc_unlock>
 8009e66:	e7e4      	b.n	8009e32 <_malloc_r+0x1e>
 8009e68:	680b      	ldr	r3, [r1, #0]
 8009e6a:	1b5b      	subs	r3, r3, r5
 8009e6c:	d41a      	bmi.n	8009ea4 <_malloc_r+0x90>
 8009e6e:	2b0b      	cmp	r3, #11
 8009e70:	d90f      	bls.n	8009e92 <_malloc_r+0x7e>
 8009e72:	600b      	str	r3, [r1, #0]
 8009e74:	50cd      	str	r5, [r1, r3]
 8009e76:	18cc      	adds	r4, r1, r3
 8009e78:	4630      	mov	r0, r6
 8009e7a:	f000 f83a 	bl	8009ef2 <__malloc_unlock>
 8009e7e:	f104 000b 	add.w	r0, r4, #11
 8009e82:	1d23      	adds	r3, r4, #4
 8009e84:	f020 0007 	bic.w	r0, r0, #7
 8009e88:	1ac3      	subs	r3, r0, r3
 8009e8a:	d01b      	beq.n	8009ec4 <_malloc_r+0xb0>
 8009e8c:	425a      	negs	r2, r3
 8009e8e:	50e2      	str	r2, [r4, r3]
 8009e90:	bd70      	pop	{r4, r5, r6, pc}
 8009e92:	428c      	cmp	r4, r1
 8009e94:	bf0d      	iteet	eq
 8009e96:	6863      	ldreq	r3, [r4, #4]
 8009e98:	684b      	ldrne	r3, [r1, #4]
 8009e9a:	6063      	strne	r3, [r4, #4]
 8009e9c:	6013      	streq	r3, [r2, #0]
 8009e9e:	bf18      	it	ne
 8009ea0:	460c      	movne	r4, r1
 8009ea2:	e7e9      	b.n	8009e78 <_malloc_r+0x64>
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	6849      	ldr	r1, [r1, #4]
 8009ea8:	e7ca      	b.n	8009e40 <_malloc_r+0x2c>
 8009eaa:	1cc4      	adds	r4, r0, #3
 8009eac:	f024 0403 	bic.w	r4, r4, #3
 8009eb0:	42a0      	cmp	r0, r4
 8009eb2:	d005      	beq.n	8009ec0 <_malloc_r+0xac>
 8009eb4:	1a21      	subs	r1, r4, r0
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f000 f80a 	bl	8009ed0 <_sbrk_r>
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	d0cd      	beq.n	8009e5c <_malloc_r+0x48>
 8009ec0:	6025      	str	r5, [r4, #0]
 8009ec2:	e7d9      	b.n	8009e78 <_malloc_r+0x64>
 8009ec4:	bd70      	pop	{r4, r5, r6, pc}
 8009ec6:	bf00      	nop
 8009ec8:	2000010c 	.word	0x2000010c
 8009ecc:	20000110 	.word	0x20000110

08009ed0 <_sbrk_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	4c06      	ldr	r4, [pc, #24]	; (8009eec <_sbrk_r+0x1c>)
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	4608      	mov	r0, r1
 8009eda:	6023      	str	r3, [r4, #0]
 8009edc:	f000 f80a 	bl	8009ef4 <_sbrk>
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	d102      	bne.n	8009eea <_sbrk_r+0x1a>
 8009ee4:	6823      	ldr	r3, [r4, #0]
 8009ee6:	b103      	cbz	r3, 8009eea <_sbrk_r+0x1a>
 8009ee8:	602b      	str	r3, [r5, #0]
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	20000954 	.word	0x20000954

08009ef0 <__malloc_lock>:
 8009ef0:	4770      	bx	lr

08009ef2 <__malloc_unlock>:
 8009ef2:	4770      	bx	lr

08009ef4 <_sbrk>:
 8009ef4:	4b04      	ldr	r3, [pc, #16]	; (8009f08 <_sbrk+0x14>)
 8009ef6:	6819      	ldr	r1, [r3, #0]
 8009ef8:	4602      	mov	r2, r0
 8009efa:	b909      	cbnz	r1, 8009f00 <_sbrk+0xc>
 8009efc:	4903      	ldr	r1, [pc, #12]	; (8009f0c <_sbrk+0x18>)
 8009efe:	6019      	str	r1, [r3, #0]
 8009f00:	6818      	ldr	r0, [r3, #0]
 8009f02:	4402      	add	r2, r0
 8009f04:	601a      	str	r2, [r3, #0]
 8009f06:	4770      	bx	lr
 8009f08:	20000114 	.word	0x20000114
 8009f0c:	20000958 	.word	0x20000958

08009f10 <_init>:
 8009f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f12:	bf00      	nop
 8009f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f16:	bc08      	pop	{r3}
 8009f18:	469e      	mov	lr, r3
 8009f1a:	4770      	bx	lr

08009f1c <_fini>:
 8009f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1e:	bf00      	nop
 8009f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f22:	bc08      	pop	{r3}
 8009f24:	469e      	mov	lr, r3
 8009f26:	4770      	bx	lr
